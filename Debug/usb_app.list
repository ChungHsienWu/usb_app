
usb_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .Firmware_Ver 0000000c  08109000  08109000  00029000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .isr_vector   000001bc  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000795c  081001c0  081001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000007c  08107b1c  08107b1c  00017b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08107b98  08107b98  0002900c  2**0
                  CONTENTS
  5 .ARM          00000000  08107b98  08107b98  0002900c  2**0
                  CONTENTS
  6 .preinit_array 00000000  08107b98  08107b98  0002900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08107b98  08107b98  00017b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08107b9c  08107b9c  00017b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001b0  20000000  08107ba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001c20  200001b0  08107d50  000201b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001dd0  08107d50  00021dd0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002900c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011837  00000000  00000000  0002903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003533  00000000  00000000  0003a873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f68  00000000  00000000  0003dda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000de0  00000000  00000000  0003ed10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032c63  00000000  00000000  0003faf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000137ac  00000000  00000000  00072753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00120d61  00000000  00000000  00085eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a6c60  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ce8  00000000  00000000  001a6cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081001c0 <__do_global_dtors_aux>:
 81001c0:	b510      	push	{r4, lr}
 81001c2:	4c05      	ldr	r4, [pc, #20]	; (81001d8 <__do_global_dtors_aux+0x18>)
 81001c4:	7823      	ldrb	r3, [r4, #0]
 81001c6:	b933      	cbnz	r3, 81001d6 <__do_global_dtors_aux+0x16>
 81001c8:	4b04      	ldr	r3, [pc, #16]	; (81001dc <__do_global_dtors_aux+0x1c>)
 81001ca:	b113      	cbz	r3, 81001d2 <__do_global_dtors_aux+0x12>
 81001cc:	4804      	ldr	r0, [pc, #16]	; (81001e0 <__do_global_dtors_aux+0x20>)
 81001ce:	f3af 8000 	nop.w
 81001d2:	2301      	movs	r3, #1
 81001d4:	7023      	strb	r3, [r4, #0]
 81001d6:	bd10      	pop	{r4, pc}
 81001d8:	200001b0 	.word	0x200001b0
 81001dc:	00000000 	.word	0x00000000
 81001e0:	08107b04 	.word	0x08107b04

081001e4 <frame_dummy>:
 81001e4:	b508      	push	{r3, lr}
 81001e6:	4b03      	ldr	r3, [pc, #12]	; (81001f4 <frame_dummy+0x10>)
 81001e8:	b11b      	cbz	r3, 81001f2 <frame_dummy+0xe>
 81001ea:	4903      	ldr	r1, [pc, #12]	; (81001f8 <frame_dummy+0x14>)
 81001ec:	4803      	ldr	r0, [pc, #12]	; (81001fc <frame_dummy+0x18>)
 81001ee:	f3af 8000 	nop.w
 81001f2:	bd08      	pop	{r3, pc}
 81001f4:	00000000 	.word	0x00000000
 81001f8:	200001b4 	.word	0x200001b4
 81001fc:	08107b04 	.word	0x08107b04

08100200 <FlashErase>:
 * Function unlocks the flash memory, erases the specified page, and then locks the flash memory again.
 * 		@ PageAddress: Address of the flash page to be erased. The address must be aligned to the start of a flash page.
 * 		@ Return: HAL Status. HAL_OK if the operation is successful, otherwise an error code.
 */
HAL_StatusTypeDef FlashErase(uint32_t PageAddress)
{
 8100200:	b580      	push	{r7, lr}
 8100202:	b088      	sub	sp, #32
 8100204:	af00      	add	r7, sp, #0
 8100206:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PageError = 0;
 8100208:	2300      	movs	r3, #0
 810020a:	60bb      	str	r3, [r7, #8]
	// Unlock the Flash to enable the flash control register access
	HAL_FLASH_Unlock();
 810020c:	f000 fbb4 	bl	8100978 <HAL_FLASH_Unlock>
	// Config EraseInit structure
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8100210:	2300      	movs	r3, #0
 8100212:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.Banks = FLASH_BANK_1;
 8100214:	2301      	movs	r3, #1
 8100216:	613b      	str	r3, [r7, #16]
	EraseInitStruct.Page = (PageAddress - FLASH_BASE_ADDR) / FLASH_PAGE_SIZE;
 8100218:	687b      	ldr	r3, [r7, #4]
 810021a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 810021e:	0b1b      	lsrs	r3, r3, #12
 8100220:	617b      	str	r3, [r7, #20]

	// Erase the specified flash page
	status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8100222:	f107 0208 	add.w	r2, r7, #8
 8100226:	f107 030c 	add.w	r3, r7, #12
 810022a:	4611      	mov	r1, r2
 810022c:	4618      	mov	r0, r3
 810022e:	f000 fc89 	bl	8100b44 <HAL_FLASHEx_Erase>
 8100232:	4603      	mov	r3, r0
 8100234:	77fb      	strb	r3, [r7, #31]
	// Lock the Flash to disable the flash control register access
	HAL_FLASH_Lock();
 8100236:	f000 fbc1 	bl	81009bc <HAL_FLASH_Lock>

	return status;
 810023a:	7ffb      	ldrb	r3, [r7, #31]
}
 810023c:	4618      	mov	r0, r3
 810023e:	3720      	adds	r7, #32
 8100240:	46bd      	mov	sp, r7
 8100242:	bd80      	pop	{r7, pc}

08100244 <FlashWrite>:
 * 		@ Data: Data to be written to flash memory. This must be a 64-bit value.
 * 		@ Return: HAL Status. HAL_OK if the operation is successful, otherwise an error code.
 *
 */
HAL_StatusTypeDef FlashWrite(uint32_t Address, uint32_t Data)
{
 8100244:	b5b0      	push	{r4, r5, r7, lr}
 8100246:	b084      	sub	sp, #16
 8100248:	af00      	add	r7, sp, #0
 810024a:	6078      	str	r0, [r7, #4]
 810024c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
	// Unlock the Flash to enable the flash control register access
	HAL_FLASH_Unlock();
 810024e:	f000 fb93 	bl	8100978 <HAL_FLASH_Unlock>
	// Program the specified address with the data
	status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Data);
 8100252:	683b      	ldr	r3, [r7, #0]
 8100254:	2200      	movs	r2, #0
 8100256:	461c      	mov	r4, r3
 8100258:	4615      	mov	r5, r2
 810025a:	4622      	mov	r2, r4
 810025c:	462b      	mov	r3, r5
 810025e:	6879      	ldr	r1, [r7, #4]
 8100260:	2000      	movs	r0, #0
 8100262:	f000 fb1d 	bl	81008a0 <HAL_FLASH_Program>
 8100266:	4603      	mov	r3, r0
 8100268:	73fb      	strb	r3, [r7, #15]
	// Lock the Flash to disable the flash control register access
	HAL_FLASH_Lock();
 810026a:	f000 fba7 	bl	81009bc <HAL_FLASH_Lock>

	return status;
 810026e:	7bfb      	ldrb	r3, [r7, #15]
}
 8100270:	4618      	mov	r0, r3
 8100272:	3710      	adds	r7, #16
 8100274:	46bd      	mov	sp, r7
 8100276:	bdb0      	pop	{r4, r5, r7, pc}

08100278 <FlashRead>:
 * 		@ Address: Address in flash memory to read data from. The address must be aligned to a double word boundary.
 * 		@ Return: Data read from flash memory.
 *
 */
uint64_t FlashRead(uint32_t Address)
{
 8100278:	b480      	push	{r7}
 810027a:	b083      	sub	sp, #12
 810027c:	af00      	add	r7, sp, #0
 810027e:	6078      	str	r0, [r7, #4]
	return *(uint64_t*)Address;
 8100280:	687b      	ldr	r3, [r7, #4]
 8100282:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8100286:	4610      	mov	r0, r2
 8100288:	4619      	mov	r1, r3
 810028a:	370c      	adds	r7, #12
 810028c:	46bd      	mov	sp, r7
 810028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100292:	4770      	bx	lr
 8100294:	0000      	movs	r0, r0
	...

08100298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100298:	b580      	push	{r7, lr}
 810029a:	b08a      	sub	sp, #40	; 0x28
 810029c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 810029e:	f000 f954 	bl	810054a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 81002a2:	f000 f831 	bl	8100308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81002a6:	f000 f881 	bl	81003ac <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 81002aa:	f006 fdcd 	bl	8106e48 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  uint32_t pageAddress = ADDR_FLASH_PAGE_63; // Replace with your target page address
 81002ae:	4b14      	ldr	r3, [pc, #80]	; (8100300 <main+0x68>)
 81002b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t flashAddress = 0x0801F800; // Replace with your target flash address
 81002b2:	4b14      	ldr	r3, [pc, #80]	; (8100304 <main+0x6c>)
 81002b4:	623b      	str	r3, [r7, #32]
  uint64_t data = 0x12345678; // Data to write (64-bit)
 81002b6:	a310      	add	r3, pc, #64	; (adr r3, 81002f8 <main+0x60>)
 81002b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81002bc:	e9c7 2306 	strd	r2, r3, [r7, #24]

  HAL_StatusTypeDef status = FlashErase(pageAddress);
 81002c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 81002c2:	f7ff ff9d 	bl	8100200 <FlashErase>
 81002c6:	4603      	mov	r3, r0
 81002c8:	75fb      	strb	r3, [r7, #23]
  status = FlashWrite(flashAddress, data);
 81002ca:	69bb      	ldr	r3, [r7, #24]
 81002cc:	4619      	mov	r1, r3
 81002ce:	6a38      	ldr	r0, [r7, #32]
 81002d0:	f7ff ffb8 	bl	8100244 <FlashWrite>
 81002d4:	4603      	mov	r3, r0
 81002d6:	75fb      	strb	r3, [r7, #23]
  uint64_t readdata = FlashRead(flashAddress);
 81002d8:	6a38      	ldr	r0, [r7, #32]
 81002da:	f7ff ffcd 	bl	8100278 <FlashRead>
 81002de:	e9c7 0102 	strd	r0, r1, [r7, #8]
  flashAddress = 8;
 81002e2:	2308      	movs	r3, #8
 81002e4:	623b      	str	r3, [r7, #32]
  uint64_t readdata2 = FlashRead(flashAddress);
 81002e6:	6a38      	ldr	r0, [r7, #32]
 81002e8:	f7ff ffc6 	bl	8100278 <FlashRead>
 81002ec:	e9c7 0100 	strd	r0, r1, [r7]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81002f0:	e7fe      	b.n	81002f0 <main+0x58>
 81002f2:	bf00      	nop
 81002f4:	f3af 8000 	nop.w
 81002f8:	12345678 	.word	0x12345678
 81002fc:	00000000 	.word	0x00000000
 8100300:	0803f000 	.word	0x0803f000
 8100304:	0801f800 	.word	0x0801f800

08100308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8100308:	b580      	push	{r7, lr}
 810030a:	b096      	sub	sp, #88	; 0x58
 810030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 810030e:	f107 0314 	add.w	r3, r7, #20
 8100312:	2244      	movs	r2, #68	; 0x44
 8100314:	2100      	movs	r1, #0
 8100316:	4618      	mov	r0, r3
 8100318:	f007 fbec 	bl	8107af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 810031c:	463b      	mov	r3, r7
 810031e:	2200      	movs	r2, #0
 8100320:	601a      	str	r2, [r3, #0]
 8100322:	605a      	str	r2, [r3, #4]
 8100324:	609a      	str	r2, [r3, #8]
 8100326:	60da      	str	r2, [r3, #12]
 8100328:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 810032a:	2000      	movs	r0, #0
 810032c:	f002 f8de 	bl	81024ec <HAL_PWREx_ControlVoltageScaling>
 8100330:	4603      	mov	r3, r0
 8100332:	2b00      	cmp	r3, #0
 8100334:	d001      	beq.n	810033a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8100336:	f000 f86c 	bl	8100412 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 810033a:	2321      	movs	r3, #33	; 0x21
 810033c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 810033e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8100342:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8100344:	2301      	movs	r3, #1
 8100346:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8100348:	2302      	movs	r3, #2
 810034a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 810034c:	2303      	movs	r3, #3
 810034e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8100350:	2301      	movs	r3, #1
 8100352:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8100354:	231e      	movs	r3, #30
 8100356:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8100358:	2302      	movs	r3, #2
 810035a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 810035c:	2302      	movs	r3, #2
 810035e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8100360:	2302      	movs	r3, #2
 8100362:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8100364:	f107 0314 	add.w	r3, r7, #20
 8100368:	4618      	mov	r0, r3
 810036a:	f002 f973 	bl	8102654 <HAL_RCC_OscConfig>
 810036e:	4603      	mov	r3, r0
 8100370:	2b00      	cmp	r3, #0
 8100372:	d001      	beq.n	8100378 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8100374:	f000 f84d 	bl	8100412 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8100378:	230f      	movs	r3, #15
 810037a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 810037c:	2303      	movs	r3, #3
 810037e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8100380:	2300      	movs	r3, #0
 8100382:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8100384:	2300      	movs	r3, #0
 8100386:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8100388:	2300      	movs	r3, #0
 810038a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 810038c:	463b      	mov	r3, r7
 810038e:	2105      	movs	r1, #5
 8100390:	4618      	mov	r0, r3
 8100392:	f002 fd79 	bl	8102e88 <HAL_RCC_ClockConfig>
 8100396:	4603      	mov	r3, r0
 8100398:	2b00      	cmp	r3, #0
 810039a:	d001      	beq.n	81003a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 810039c:	f000 f839 	bl	8100412 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 81003a0:	f003 fb94 	bl	8103acc <HAL_RCCEx_EnableMSIPLLMode>
}
 81003a4:	bf00      	nop
 81003a6:	3758      	adds	r7, #88	; 0x58
 81003a8:	46bd      	mov	sp, r7
 81003aa:	bd80      	pop	{r7, pc}

081003ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81003ac:	b480      	push	{r7}
 81003ae:	b083      	sub	sp, #12
 81003b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81003b2:	4b0f      	ldr	r3, [pc, #60]	; (81003f0 <MX_GPIO_Init+0x44>)
 81003b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81003b6:	4a0e      	ldr	r2, [pc, #56]	; (81003f0 <MX_GPIO_Init+0x44>)
 81003b8:	f043 0301 	orr.w	r3, r3, #1
 81003bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 81003be:	4b0c      	ldr	r3, [pc, #48]	; (81003f0 <MX_GPIO_Init+0x44>)
 81003c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81003c2:	f003 0301 	and.w	r3, r3, #1
 81003c6:	607b      	str	r3, [r7, #4]
 81003c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 81003ca:	4b09      	ldr	r3, [pc, #36]	; (81003f0 <MX_GPIO_Init+0x44>)
 81003cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81003ce:	4a08      	ldr	r2, [pc, #32]	; (81003f0 <MX_GPIO_Init+0x44>)
 81003d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81003d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 81003d6:	4b06      	ldr	r3, [pc, #24]	; (81003f0 <MX_GPIO_Init+0x44>)
 81003d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81003da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81003de:	603b      	str	r3, [r7, #0]
 81003e0:	683b      	ldr	r3, [r7, #0]

}
 81003e2:	bf00      	nop
 81003e4:	370c      	adds	r7, #12
 81003e6:	46bd      	mov	sp, r7
 81003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81003ec:	4770      	bx	lr
 81003ee:	bf00      	nop
 81003f0:	40021000 	.word	0x40021000

081003f4 <USB_CDC_RxHandler>:

/* USER CODE BEGIN 4 */

void USB_CDC_RxHandler(uint8_t* USB_Buf, uint32_t Len)
{
 81003f4:	b480      	push	{r7}
 81003f6:	b083      	sub	sp, #12
 81003f8:	af00      	add	r7, sp, #0
 81003fa:	6078      	str	r0, [r7, #4]
 81003fc:	6039      	str	r1, [r7, #0]
	USB_Buf[0]=USB_Buf[0];
 81003fe:	687b      	ldr	r3, [r7, #4]
 8100400:	781a      	ldrb	r2, [r3, #0]
 8100402:	687b      	ldr	r3, [r7, #4]
 8100404:	701a      	strb	r2, [r3, #0]
	//CDC_Transmit_FS((uint8_t*)"FW:250204", sizeof("FW:250204") - 1);
}
 8100406:	bf00      	nop
 8100408:	370c      	adds	r7, #12
 810040a:	46bd      	mov	sp, r7
 810040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100410:	4770      	bx	lr

08100412 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100412:	b480      	push	{r7}
 8100414:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100416:	b672      	cpsid	i
}
 8100418:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810041a:	e7fe      	b.n	810041a <Error_Handler+0x8>

0810041c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810041c:	b480      	push	{r7}
 810041e:	b083      	sub	sp, #12
 8100420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100422:	4b0f      	ldr	r3, [pc, #60]	; (8100460 <HAL_MspInit+0x44>)
 8100424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8100426:	4a0e      	ldr	r2, [pc, #56]	; (8100460 <HAL_MspInit+0x44>)
 8100428:	f043 0301 	orr.w	r3, r3, #1
 810042c:	6613      	str	r3, [r2, #96]	; 0x60
 810042e:	4b0c      	ldr	r3, [pc, #48]	; (8100460 <HAL_MspInit+0x44>)
 8100430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8100432:	f003 0301 	and.w	r3, r3, #1
 8100436:	607b      	str	r3, [r7, #4]
 8100438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 810043a:	4b09      	ldr	r3, [pc, #36]	; (8100460 <HAL_MspInit+0x44>)
 810043c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810043e:	4a08      	ldr	r2, [pc, #32]	; (8100460 <HAL_MspInit+0x44>)
 8100440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8100444:	6593      	str	r3, [r2, #88]	; 0x58
 8100446:	4b06      	ldr	r3, [pc, #24]	; (8100460 <HAL_MspInit+0x44>)
 8100448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810044a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810044e:	603b      	str	r3, [r7, #0]
 8100450:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100452:	bf00      	nop
 8100454:	370c      	adds	r7, #12
 8100456:	46bd      	mov	sp, r7
 8100458:	f85d 7b04 	ldr.w	r7, [sp], #4
 810045c:	4770      	bx	lr
 810045e:	bf00      	nop
 8100460:	40021000 	.word	0x40021000

08100464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100464:	b480      	push	{r7}
 8100466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100468:	e7fe      	b.n	8100468 <NMI_Handler+0x4>

0810046a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810046a:	b480      	push	{r7}
 810046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810046e:	e7fe      	b.n	810046e <HardFault_Handler+0x4>

08100470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100470:	b480      	push	{r7}
 8100472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100474:	e7fe      	b.n	8100474 <MemManage_Handler+0x4>

08100476 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100476:	b480      	push	{r7}
 8100478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810047a:	e7fe      	b.n	810047a <BusFault_Handler+0x4>

0810047c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810047c:	b480      	push	{r7}
 810047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100480:	e7fe      	b.n	8100480 <UsageFault_Handler+0x4>

08100482 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100482:	b480      	push	{r7}
 8100484:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100486:	bf00      	nop
 8100488:	46bd      	mov	sp, r7
 810048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810048e:	4770      	bx	lr

08100490 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100490:	b480      	push	{r7}
 8100492:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100494:	bf00      	nop
 8100496:	46bd      	mov	sp, r7
 8100498:	f85d 7b04 	ldr.w	r7, [sp], #4
 810049c:	4770      	bx	lr

0810049e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 810049e:	b480      	push	{r7}
 81004a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81004a2:	bf00      	nop
 81004a4:	46bd      	mov	sp, r7
 81004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004aa:	4770      	bx	lr

081004ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81004ac:	b580      	push	{r7, lr}
 81004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81004b0:	f000 f8a0 	bl	81005f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81004b4:	bf00      	nop
 81004b6:	bd80      	pop	{r7, pc}

081004b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 81004b8:	b580      	push	{r7, lr}
 81004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 81004bc:	4802      	ldr	r0, [pc, #8]	; (81004c8 <OTG_FS_IRQHandler+0x10>)
 81004be:	f000 ff88 	bl	81013d2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 81004c2:	bf00      	nop
 81004c4:	bd80      	pop	{r7, pc}
 81004c6:	bf00      	nop
 81004c8:	200016a4 	.word	0x200016a4

081004cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 81004cc:	b480      	push	{r7}
 81004ce:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 81004d0:	4b08      	ldr	r3, [pc, #32]	; (81004f4 <SystemInit+0x28>)
 81004d2:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 81004d6:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 81004d8:	4b06      	ldr	r3, [pc, #24]	; (81004f4 <SystemInit+0x28>)
 81004da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81004de:	4a05      	ldr	r2, [pc, #20]	; (81004f4 <SystemInit+0x28>)
 81004e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81004e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 81004e8:	bf00      	nop
 81004ea:	46bd      	mov	sp, r7
 81004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004f0:	4770      	bx	lr
 81004f2:	bf00      	nop
 81004f4:	e000ed00 	.word	0xe000ed00

081004f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 81004f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100530 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 81004fc:	f7ff ffe6 	bl	81004cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100500:	480c      	ldr	r0, [pc, #48]	; (8100534 <LoopForever+0x6>)
  ldr r1, =_edata
 8100502:	490d      	ldr	r1, [pc, #52]	; (8100538 <LoopForever+0xa>)
  ldr r2, =_sidata
 8100504:	4a0d      	ldr	r2, [pc, #52]	; (810053c <LoopForever+0xe>)
  movs r3, #0
 8100506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100508:	e002      	b.n	8100510 <LoopCopyDataInit>

0810050a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810050a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 810050c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810050e:	3304      	adds	r3, #4

08100510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100514:	d3f9      	bcc.n	810050a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100516:	4a0a      	ldr	r2, [pc, #40]	; (8100540 <LoopForever+0x12>)
  ldr r4, =_ebss
 8100518:	4c0a      	ldr	r4, [pc, #40]	; (8100544 <LoopForever+0x16>)
  movs r3, #0
 810051a:	2300      	movs	r3, #0
  b LoopFillZerobss
 810051c:	e001      	b.n	8100522 <LoopFillZerobss>

0810051e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810051e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100520:	3204      	adds	r2, #4

08100522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100524:	d3fb      	bcc.n	810051e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100526:	f007 fac1 	bl	8107aac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 810052a:	f7ff feb5 	bl	8100298 <main>

0810052e <LoopForever>:

LoopForever:
    b LoopForever
 810052e:	e7fe      	b.n	810052e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8100530:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8100534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8100538:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 810053c:	08107ba0 	.word	0x08107ba0
  ldr r2, =_sbss
 8100540:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 8100544:	20001dd0 	.word	0x20001dd0

08100548 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8100548:	e7fe      	b.n	8100548 <ADC1_IRQHandler>

0810054a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 810054a:	b580      	push	{r7, lr}
 810054c:	b082      	sub	sp, #8
 810054e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8100550:	2300      	movs	r3, #0
 8100552:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100554:	2003      	movs	r0, #3
 8100556:	f000 f961 	bl	810081c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810055a:	200f      	movs	r0, #15
 810055c:	f000 f80e 	bl	810057c <HAL_InitTick>
 8100560:	4603      	mov	r3, r0
 8100562:	2b00      	cmp	r3, #0
 8100564:	d002      	beq.n	810056c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8100566:	2301      	movs	r3, #1
 8100568:	71fb      	strb	r3, [r7, #7]
 810056a:	e001      	b.n	8100570 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 810056c:	f7ff ff56 	bl	810041c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8100570:	79fb      	ldrb	r3, [r7, #7]
}
 8100572:	4618      	mov	r0, r3
 8100574:	3708      	adds	r7, #8
 8100576:	46bd      	mov	sp, r7
 8100578:	bd80      	pop	{r7, pc}
	...

0810057c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 810057c:	b580      	push	{r7, lr}
 810057e:	b084      	sub	sp, #16
 8100580:	af00      	add	r7, sp, #0
 8100582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8100584:	2300      	movs	r3, #0
 8100586:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8100588:	4b17      	ldr	r3, [pc, #92]	; (81005e8 <HAL_InitTick+0x6c>)
 810058a:	781b      	ldrb	r3, [r3, #0]
 810058c:	2b00      	cmp	r3, #0
 810058e:	d023      	beq.n	81005d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8100590:	4b16      	ldr	r3, [pc, #88]	; (81005ec <HAL_InitTick+0x70>)
 8100592:	681a      	ldr	r2, [r3, #0]
 8100594:	4b14      	ldr	r3, [pc, #80]	; (81005e8 <HAL_InitTick+0x6c>)
 8100596:	781b      	ldrb	r3, [r3, #0]
 8100598:	4619      	mov	r1, r3
 810059a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810059e:	fbb3 f3f1 	udiv	r3, r3, r1
 81005a2:	fbb2 f3f3 	udiv	r3, r2, r3
 81005a6:	4618      	mov	r0, r3
 81005a8:	f000 f96d 	bl	8100886 <HAL_SYSTICK_Config>
 81005ac:	4603      	mov	r3, r0
 81005ae:	2b00      	cmp	r3, #0
 81005b0:	d10f      	bne.n	81005d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81005b2:	687b      	ldr	r3, [r7, #4]
 81005b4:	2b0f      	cmp	r3, #15
 81005b6:	d809      	bhi.n	81005cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81005b8:	2200      	movs	r2, #0
 81005ba:	6879      	ldr	r1, [r7, #4]
 81005bc:	f04f 30ff 	mov.w	r0, #4294967295
 81005c0:	f000 f937 	bl	8100832 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 81005c4:	4a0a      	ldr	r2, [pc, #40]	; (81005f0 <HAL_InitTick+0x74>)
 81005c6:	687b      	ldr	r3, [r7, #4]
 81005c8:	6013      	str	r3, [r2, #0]
 81005ca:	e007      	b.n	81005dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 81005cc:	2301      	movs	r3, #1
 81005ce:	73fb      	strb	r3, [r7, #15]
 81005d0:	e004      	b.n	81005dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 81005d2:	2301      	movs	r3, #1
 81005d4:	73fb      	strb	r3, [r7, #15]
 81005d6:	e001      	b.n	81005dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 81005d8:	2301      	movs	r3, #1
 81005da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 81005dc:	7bfb      	ldrb	r3, [r7, #15]
}
 81005de:	4618      	mov	r0, r3
 81005e0:	3710      	adds	r7, #16
 81005e2:	46bd      	mov	sp, r7
 81005e4:	bd80      	pop	{r7, pc}
 81005e6:	bf00      	nop
 81005e8:	20000008 	.word	0x20000008
 81005ec:	20000000 	.word	0x20000000
 81005f0:	20000004 	.word	0x20000004

081005f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81005f4:	b480      	push	{r7}
 81005f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81005f8:	4b06      	ldr	r3, [pc, #24]	; (8100614 <HAL_IncTick+0x20>)
 81005fa:	781b      	ldrb	r3, [r3, #0]
 81005fc:	461a      	mov	r2, r3
 81005fe:	4b06      	ldr	r3, [pc, #24]	; (8100618 <HAL_IncTick+0x24>)
 8100600:	681b      	ldr	r3, [r3, #0]
 8100602:	4413      	add	r3, r2
 8100604:	4a04      	ldr	r2, [pc, #16]	; (8100618 <HAL_IncTick+0x24>)
 8100606:	6013      	str	r3, [r2, #0]
}
 8100608:	bf00      	nop
 810060a:	46bd      	mov	sp, r7
 810060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100610:	4770      	bx	lr
 8100612:	bf00      	nop
 8100614:	20000008 	.word	0x20000008
 8100618:	200001cc 	.word	0x200001cc

0810061c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 810061c:	b480      	push	{r7}
 810061e:	af00      	add	r7, sp, #0
  return uwTick;
 8100620:	4b03      	ldr	r3, [pc, #12]	; (8100630 <HAL_GetTick+0x14>)
 8100622:	681b      	ldr	r3, [r3, #0]
}
 8100624:	4618      	mov	r0, r3
 8100626:	46bd      	mov	sp, r7
 8100628:	f85d 7b04 	ldr.w	r7, [sp], #4
 810062c:	4770      	bx	lr
 810062e:	bf00      	nop
 8100630:	200001cc 	.word	0x200001cc

08100634 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8100634:	b580      	push	{r7, lr}
 8100636:	b084      	sub	sp, #16
 8100638:	af00      	add	r7, sp, #0
 810063a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 810063c:	f7ff ffee 	bl	810061c <HAL_GetTick>
 8100640:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8100642:	687b      	ldr	r3, [r7, #4]
 8100644:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8100646:	68fb      	ldr	r3, [r7, #12]
 8100648:	f1b3 3fff 	cmp.w	r3, #4294967295
 810064c:	d005      	beq.n	810065a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 810064e:	4b0a      	ldr	r3, [pc, #40]	; (8100678 <HAL_Delay+0x44>)
 8100650:	781b      	ldrb	r3, [r3, #0]
 8100652:	461a      	mov	r2, r3
 8100654:	68fb      	ldr	r3, [r7, #12]
 8100656:	4413      	add	r3, r2
 8100658:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810065a:	bf00      	nop
 810065c:	f7ff ffde 	bl	810061c <HAL_GetTick>
 8100660:	4602      	mov	r2, r0
 8100662:	68bb      	ldr	r3, [r7, #8]
 8100664:	1ad3      	subs	r3, r2, r3
 8100666:	68fa      	ldr	r2, [r7, #12]
 8100668:	429a      	cmp	r2, r3
 810066a:	d8f7      	bhi.n	810065c <HAL_Delay+0x28>
  {
  }
}
 810066c:	bf00      	nop
 810066e:	bf00      	nop
 8100670:	3710      	adds	r7, #16
 8100672:	46bd      	mov	sp, r7
 8100674:	bd80      	pop	{r7, pc}
 8100676:	bf00      	nop
 8100678:	20000008 	.word	0x20000008

0810067c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810067c:	b480      	push	{r7}
 810067e:	b085      	sub	sp, #20
 8100680:	af00      	add	r7, sp, #0
 8100682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100684:	687b      	ldr	r3, [r7, #4]
 8100686:	f003 0307 	and.w	r3, r3, #7
 810068a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810068c:	4b0c      	ldr	r3, [pc, #48]	; (81006c0 <__NVIC_SetPriorityGrouping+0x44>)
 810068e:	68db      	ldr	r3, [r3, #12]
 8100690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100692:	68ba      	ldr	r2, [r7, #8]
 8100694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100698:	4013      	ands	r3, r2
 810069a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810069c:	68fb      	ldr	r3, [r7, #12]
 810069e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81006a0:	68bb      	ldr	r3, [r7, #8]
 81006a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81006a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81006a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81006ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81006ae:	4a04      	ldr	r2, [pc, #16]	; (81006c0 <__NVIC_SetPriorityGrouping+0x44>)
 81006b0:	68bb      	ldr	r3, [r7, #8]
 81006b2:	60d3      	str	r3, [r2, #12]
}
 81006b4:	bf00      	nop
 81006b6:	3714      	adds	r7, #20
 81006b8:	46bd      	mov	sp, r7
 81006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006be:	4770      	bx	lr
 81006c0:	e000ed00 	.word	0xe000ed00

081006c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81006c4:	b480      	push	{r7}
 81006c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81006c8:	4b04      	ldr	r3, [pc, #16]	; (81006dc <__NVIC_GetPriorityGrouping+0x18>)
 81006ca:	68db      	ldr	r3, [r3, #12]
 81006cc:	0a1b      	lsrs	r3, r3, #8
 81006ce:	f003 0307 	and.w	r3, r3, #7
}
 81006d2:	4618      	mov	r0, r3
 81006d4:	46bd      	mov	sp, r7
 81006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006da:	4770      	bx	lr
 81006dc:	e000ed00 	.word	0xe000ed00

081006e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81006e0:	b480      	push	{r7}
 81006e2:	b083      	sub	sp, #12
 81006e4:	af00      	add	r7, sp, #0
 81006e6:	4603      	mov	r3, r0
 81006e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 81006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 81006ee:	2b00      	cmp	r3, #0
 81006f0:	db0b      	blt.n	810070a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81006f2:	79fb      	ldrb	r3, [r7, #7]
 81006f4:	f003 021f 	and.w	r2, r3, #31
 81006f8:	4907      	ldr	r1, [pc, #28]	; (8100718 <__NVIC_EnableIRQ+0x38>)
 81006fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 81006fe:	095b      	lsrs	r3, r3, #5
 8100700:	2001      	movs	r0, #1
 8100702:	fa00 f202 	lsl.w	r2, r0, r2
 8100706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810070a:	bf00      	nop
 810070c:	370c      	adds	r7, #12
 810070e:	46bd      	mov	sp, r7
 8100710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100714:	4770      	bx	lr
 8100716:	bf00      	nop
 8100718:	e000e100 	.word	0xe000e100

0810071c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810071c:	b480      	push	{r7}
 810071e:	b083      	sub	sp, #12
 8100720:	af00      	add	r7, sp, #0
 8100722:	4603      	mov	r3, r0
 8100724:	6039      	str	r1, [r7, #0]
 8100726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8100728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 810072c:	2b00      	cmp	r3, #0
 810072e:	db0a      	blt.n	8100746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100730:	683b      	ldr	r3, [r7, #0]
 8100732:	b2da      	uxtb	r2, r3
 8100734:	490c      	ldr	r1, [pc, #48]	; (8100768 <__NVIC_SetPriority+0x4c>)
 8100736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 810073a:	0112      	lsls	r2, r2, #4
 810073c:	b2d2      	uxtb	r2, r2
 810073e:	440b      	add	r3, r1
 8100740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100744:	e00a      	b.n	810075c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100746:	683b      	ldr	r3, [r7, #0]
 8100748:	b2da      	uxtb	r2, r3
 810074a:	4908      	ldr	r1, [pc, #32]	; (810076c <__NVIC_SetPriority+0x50>)
 810074c:	79fb      	ldrb	r3, [r7, #7]
 810074e:	f003 030f 	and.w	r3, r3, #15
 8100752:	3b04      	subs	r3, #4
 8100754:	0112      	lsls	r2, r2, #4
 8100756:	b2d2      	uxtb	r2, r2
 8100758:	440b      	add	r3, r1
 810075a:	761a      	strb	r2, [r3, #24]
}
 810075c:	bf00      	nop
 810075e:	370c      	adds	r7, #12
 8100760:	46bd      	mov	sp, r7
 8100762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100766:	4770      	bx	lr
 8100768:	e000e100 	.word	0xe000e100
 810076c:	e000ed00 	.word	0xe000ed00

08100770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100770:	b480      	push	{r7}
 8100772:	b089      	sub	sp, #36	; 0x24
 8100774:	af00      	add	r7, sp, #0
 8100776:	60f8      	str	r0, [r7, #12]
 8100778:	60b9      	str	r1, [r7, #8]
 810077a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810077c:	68fb      	ldr	r3, [r7, #12]
 810077e:	f003 0307 	and.w	r3, r3, #7
 8100782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100784:	69fb      	ldr	r3, [r7, #28]
 8100786:	f1c3 0307 	rsb	r3, r3, #7
 810078a:	2b04      	cmp	r3, #4
 810078c:	bf28      	it	cs
 810078e:	2304      	movcs	r3, #4
 8100790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100792:	69fb      	ldr	r3, [r7, #28]
 8100794:	3304      	adds	r3, #4
 8100796:	2b06      	cmp	r3, #6
 8100798:	d902      	bls.n	81007a0 <NVIC_EncodePriority+0x30>
 810079a:	69fb      	ldr	r3, [r7, #28]
 810079c:	3b03      	subs	r3, #3
 810079e:	e000      	b.n	81007a2 <NVIC_EncodePriority+0x32>
 81007a0:	2300      	movs	r3, #0
 81007a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81007a4:	f04f 32ff 	mov.w	r2, #4294967295
 81007a8:	69bb      	ldr	r3, [r7, #24]
 81007aa:	fa02 f303 	lsl.w	r3, r2, r3
 81007ae:	43da      	mvns	r2, r3
 81007b0:	68bb      	ldr	r3, [r7, #8]
 81007b2:	401a      	ands	r2, r3
 81007b4:	697b      	ldr	r3, [r7, #20]
 81007b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81007b8:	f04f 31ff 	mov.w	r1, #4294967295
 81007bc:	697b      	ldr	r3, [r7, #20]
 81007be:	fa01 f303 	lsl.w	r3, r1, r3
 81007c2:	43d9      	mvns	r1, r3
 81007c4:	687b      	ldr	r3, [r7, #4]
 81007c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81007c8:	4313      	orrs	r3, r2
         );
}
 81007ca:	4618      	mov	r0, r3
 81007cc:	3724      	adds	r7, #36	; 0x24
 81007ce:	46bd      	mov	sp, r7
 81007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007d4:	4770      	bx	lr
	...

081007d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81007d8:	b580      	push	{r7, lr}
 81007da:	b082      	sub	sp, #8
 81007dc:	af00      	add	r7, sp, #0
 81007de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81007e0:	687b      	ldr	r3, [r7, #4]
 81007e2:	3b01      	subs	r3, #1
 81007e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81007e8:	d301      	bcc.n	81007ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81007ea:	2301      	movs	r3, #1
 81007ec:	e00f      	b.n	810080e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81007ee:	4a0a      	ldr	r2, [pc, #40]	; (8100818 <SysTick_Config+0x40>)
 81007f0:	687b      	ldr	r3, [r7, #4]
 81007f2:	3b01      	subs	r3, #1
 81007f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81007f6:	210f      	movs	r1, #15
 81007f8:	f04f 30ff 	mov.w	r0, #4294967295
 81007fc:	f7ff ff8e 	bl	810071c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100800:	4b05      	ldr	r3, [pc, #20]	; (8100818 <SysTick_Config+0x40>)
 8100802:	2200      	movs	r2, #0
 8100804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100806:	4b04      	ldr	r3, [pc, #16]	; (8100818 <SysTick_Config+0x40>)
 8100808:	2207      	movs	r2, #7
 810080a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 810080c:	2300      	movs	r3, #0
}
 810080e:	4618      	mov	r0, r3
 8100810:	3708      	adds	r7, #8
 8100812:	46bd      	mov	sp, r7
 8100814:	bd80      	pop	{r7, pc}
 8100816:	bf00      	nop
 8100818:	e000e010 	.word	0xe000e010

0810081c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810081c:	b580      	push	{r7, lr}
 810081e:	b082      	sub	sp, #8
 8100820:	af00      	add	r7, sp, #0
 8100822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100824:	6878      	ldr	r0, [r7, #4]
 8100826:	f7ff ff29 	bl	810067c <__NVIC_SetPriorityGrouping>
}
 810082a:	bf00      	nop
 810082c:	3708      	adds	r7, #8
 810082e:	46bd      	mov	sp, r7
 8100830:	bd80      	pop	{r7, pc}

08100832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100832:	b580      	push	{r7, lr}
 8100834:	b086      	sub	sp, #24
 8100836:	af00      	add	r7, sp, #0
 8100838:	4603      	mov	r3, r0
 810083a:	60b9      	str	r1, [r7, #8]
 810083c:	607a      	str	r2, [r7, #4]
 810083e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8100840:	2300      	movs	r3, #0
 8100842:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100844:	f7ff ff3e 	bl	81006c4 <__NVIC_GetPriorityGrouping>
 8100848:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810084a:	687a      	ldr	r2, [r7, #4]
 810084c:	68b9      	ldr	r1, [r7, #8]
 810084e:	6978      	ldr	r0, [r7, #20]
 8100850:	f7ff ff8e 	bl	8100770 <NVIC_EncodePriority>
 8100854:	4602      	mov	r2, r0
 8100856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810085a:	4611      	mov	r1, r2
 810085c:	4618      	mov	r0, r3
 810085e:	f7ff ff5d 	bl	810071c <__NVIC_SetPriority>
}
 8100862:	bf00      	nop
 8100864:	3718      	adds	r7, #24
 8100866:	46bd      	mov	sp, r7
 8100868:	bd80      	pop	{r7, pc}

0810086a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810086a:	b580      	push	{r7, lr}
 810086c:	b082      	sub	sp, #8
 810086e:	af00      	add	r7, sp, #0
 8100870:	4603      	mov	r3, r0
 8100872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8100874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8100878:	4618      	mov	r0, r3
 810087a:	f7ff ff31 	bl	81006e0 <__NVIC_EnableIRQ>
}
 810087e:	bf00      	nop
 8100880:	3708      	adds	r7, #8
 8100882:	46bd      	mov	sp, r7
 8100884:	bd80      	pop	{r7, pc}

08100886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100886:	b580      	push	{r7, lr}
 8100888:	b082      	sub	sp, #8
 810088a:	af00      	add	r7, sp, #0
 810088c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810088e:	6878      	ldr	r0, [r7, #4]
 8100890:	f7ff ffa2 	bl	81007d8 <SysTick_Config>
 8100894:	4603      	mov	r3, r0
}
 8100896:	4618      	mov	r0, r3
 8100898:	3708      	adds	r7, #8
 810089a:	46bd      	mov	sp, r7
 810089c:	bd80      	pop	{r7, pc}
	...

081008a0 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 81008a0:	b580      	push	{r7, lr}
 81008a2:	b086      	sub	sp, #24
 81008a4:	af00      	add	r7, sp, #0
 81008a6:	60f8      	str	r0, [r7, #12]
 81008a8:	60b9      	str	r1, [r7, #8]
 81008aa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 81008ae:	2300      	movs	r3, #0
 81008b0:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 81008b2:	4b2f      	ldr	r3, [pc, #188]	; (8100970 <HAL_FLASH_Program+0xd0>)
 81008b4:	781b      	ldrb	r3, [r3, #0]
 81008b6:	2b01      	cmp	r3, #1
 81008b8:	d101      	bne.n	81008be <HAL_FLASH_Program+0x1e>
 81008ba:	2302      	movs	r3, #2
 81008bc:	e053      	b.n	8100966 <HAL_FLASH_Program+0xc6>
 81008be:	4b2c      	ldr	r3, [pc, #176]	; (8100970 <HAL_FLASH_Program+0xd0>)
 81008c0:	2201      	movs	r2, #1
 81008c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 81008c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 81008c8:	f000 f888 	bl	81009dc <FLASH_WaitForLastOperation>
 81008cc:	4603      	mov	r3, r0
 81008ce:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 81008d0:	7dfb      	ldrb	r3, [r7, #23]
 81008d2:	2b00      	cmp	r3, #0
 81008d4:	d143      	bne.n	810095e <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 81008d6:	4b26      	ldr	r3, [pc, #152]	; (8100970 <HAL_FLASH_Program+0xd0>)
 81008d8:	2200      	movs	r2, #0
 81008da:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 81008dc:	4b25      	ldr	r3, [pc, #148]	; (8100974 <HAL_FLASH_Program+0xd4>)
 81008de:	681b      	ldr	r3, [r3, #0]
 81008e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81008e4:	2b00      	cmp	r3, #0
 81008e6:	d009      	beq.n	81008fc <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 81008e8:	4b22      	ldr	r3, [pc, #136]	; (8100974 <HAL_FLASH_Program+0xd4>)
 81008ea:	681b      	ldr	r3, [r3, #0]
 81008ec:	4a21      	ldr	r2, [pc, #132]	; (8100974 <HAL_FLASH_Program+0xd4>)
 81008ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 81008f2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 81008f4:	4b1e      	ldr	r3, [pc, #120]	; (8100970 <HAL_FLASH_Program+0xd0>)
 81008f6:	2202      	movs	r2, #2
 81008f8:	771a      	strb	r2, [r3, #28]
 81008fa:	e002      	b.n	8100902 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 81008fc:	4b1c      	ldr	r3, [pc, #112]	; (8100970 <HAL_FLASH_Program+0xd0>)
 81008fe:	2200      	movs	r2, #0
 8100900:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8100902:	68fb      	ldr	r3, [r7, #12]
 8100904:	2b00      	cmp	r3, #0
 8100906:	d107      	bne.n	8100918 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8100908:	e9d7 2300 	ldrd	r2, r3, [r7]
 810090c:	68b8      	ldr	r0, [r7, #8]
 810090e:	f000 f8bd 	bl	8100a8c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8100912:	2301      	movs	r3, #1
 8100914:	613b      	str	r3, [r7, #16]
 8100916:	e010      	b.n	810093a <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8100918:	68fb      	ldr	r3, [r7, #12]
 810091a:	2b01      	cmp	r3, #1
 810091c:	d002      	beq.n	8100924 <HAL_FLASH_Program+0x84>
 810091e:	68fb      	ldr	r3, [r7, #12]
 8100920:	2b02      	cmp	r3, #2
 8100922:	d10a      	bne.n	810093a <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8100924:	683b      	ldr	r3, [r7, #0]
 8100926:	4619      	mov	r1, r3
 8100928:	68b8      	ldr	r0, [r7, #8]
 810092a:	f000 f8d5 	bl	8100ad8 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 810092e:	68fb      	ldr	r3, [r7, #12]
 8100930:	2b02      	cmp	r3, #2
 8100932:	d102      	bne.n	810093a <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8100934:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8100938:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 810093a:	f24c 3050 	movw	r0, #50000	; 0xc350
 810093e:	f000 f84d 	bl	81009dc <FLASH_WaitForLastOperation>
 8100942:	4603      	mov	r3, r0
 8100944:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8100946:	693b      	ldr	r3, [r7, #16]
 8100948:	2b00      	cmp	r3, #0
 810094a:	d006      	beq.n	810095a <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 810094c:	4b09      	ldr	r3, [pc, #36]	; (8100974 <HAL_FLASH_Program+0xd4>)
 810094e:	695a      	ldr	r2, [r3, #20]
 8100950:	693b      	ldr	r3, [r7, #16]
 8100952:	43db      	mvns	r3, r3
 8100954:	4907      	ldr	r1, [pc, #28]	; (8100974 <HAL_FLASH_Program+0xd4>)
 8100956:	4013      	ands	r3, r2
 8100958:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 810095a:	f000 fa0b 	bl	8100d74 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 810095e:	4b04      	ldr	r3, [pc, #16]	; (8100970 <HAL_FLASH_Program+0xd0>)
 8100960:	2200      	movs	r2, #0
 8100962:	701a      	strb	r2, [r3, #0]

  return status;
 8100964:	7dfb      	ldrb	r3, [r7, #23]
}
 8100966:	4618      	mov	r0, r3
 8100968:	3718      	adds	r7, #24
 810096a:	46bd      	mov	sp, r7
 810096c:	bd80      	pop	{r7, pc}
 810096e:	bf00      	nop
 8100970:	2000000c 	.word	0x2000000c
 8100974:	40022000 	.word	0x40022000

08100978 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8100978:	b480      	push	{r7}
 810097a:	b083      	sub	sp, #12
 810097c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 810097e:	2300      	movs	r3, #0
 8100980:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8100982:	4b0b      	ldr	r3, [pc, #44]	; (81009b0 <HAL_FLASH_Unlock+0x38>)
 8100984:	695b      	ldr	r3, [r3, #20]
 8100986:	2b00      	cmp	r3, #0
 8100988:	da0b      	bge.n	81009a2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 810098a:	4b09      	ldr	r3, [pc, #36]	; (81009b0 <HAL_FLASH_Unlock+0x38>)
 810098c:	4a09      	ldr	r2, [pc, #36]	; (81009b4 <HAL_FLASH_Unlock+0x3c>)
 810098e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8100990:	4b07      	ldr	r3, [pc, #28]	; (81009b0 <HAL_FLASH_Unlock+0x38>)
 8100992:	4a09      	ldr	r2, [pc, #36]	; (81009b8 <HAL_FLASH_Unlock+0x40>)
 8100994:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8100996:	4b06      	ldr	r3, [pc, #24]	; (81009b0 <HAL_FLASH_Unlock+0x38>)
 8100998:	695b      	ldr	r3, [r3, #20]
 810099a:	2b00      	cmp	r3, #0
 810099c:	da01      	bge.n	81009a2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 810099e:	2301      	movs	r3, #1
 81009a0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 81009a2:	79fb      	ldrb	r3, [r7, #7]
}
 81009a4:	4618      	mov	r0, r3
 81009a6:	370c      	adds	r7, #12
 81009a8:	46bd      	mov	sp, r7
 81009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009ae:	4770      	bx	lr
 81009b0:	40022000 	.word	0x40022000
 81009b4:	45670123 	.word	0x45670123
 81009b8:	cdef89ab 	.word	0xcdef89ab

081009bc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 81009bc:	b480      	push	{r7}
 81009be:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 81009c0:	4b05      	ldr	r3, [pc, #20]	; (81009d8 <HAL_FLASH_Lock+0x1c>)
 81009c2:	695b      	ldr	r3, [r3, #20]
 81009c4:	4a04      	ldr	r2, [pc, #16]	; (81009d8 <HAL_FLASH_Lock+0x1c>)
 81009c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 81009ca:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 81009cc:	2300      	movs	r3, #0
}
 81009ce:	4618      	mov	r0, r3
 81009d0:	46bd      	mov	sp, r7
 81009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009d6:	4770      	bx	lr
 81009d8:	40022000 	.word	0x40022000

081009dc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 81009dc:	b580      	push	{r7, lr}
 81009de:	b084      	sub	sp, #16
 81009e0:	af00      	add	r7, sp, #0
 81009e2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 81009e4:	f7ff fe1a 	bl	810061c <HAL_GetTick>
 81009e8:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 81009ea:	e00d      	b.n	8100a08 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 81009ec:	687b      	ldr	r3, [r7, #4]
 81009ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 81009f2:	d009      	beq.n	8100a08 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 81009f4:	f7ff fe12 	bl	810061c <HAL_GetTick>
 81009f8:	4602      	mov	r2, r0
 81009fa:	68fb      	ldr	r3, [r7, #12]
 81009fc:	1ad3      	subs	r3, r2, r3
 81009fe:	687a      	ldr	r2, [r7, #4]
 8100a00:	429a      	cmp	r2, r3
 8100a02:	d801      	bhi.n	8100a08 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8100a04:	2303      	movs	r3, #3
 8100a06:	e036      	b.n	8100a76 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8100a08:	4b1d      	ldr	r3, [pc, #116]	; (8100a80 <FLASH_WaitForLastOperation+0xa4>)
 8100a0a:	691b      	ldr	r3, [r3, #16]
 8100a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100a10:	2b00      	cmp	r3, #0
 8100a12:	d1eb      	bne.n	81009ec <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8100a14:	4b1a      	ldr	r3, [pc, #104]	; (8100a80 <FLASH_WaitForLastOperation+0xa4>)
 8100a16:	691a      	ldr	r2, [r3, #16]
 8100a18:	4b1a      	ldr	r3, [pc, #104]	; (8100a84 <FLASH_WaitForLastOperation+0xa8>)
 8100a1a:	4013      	ands	r3, r2
 8100a1c:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8100a1e:	68bb      	ldr	r3, [r7, #8]
 8100a20:	2b00      	cmp	r3, #0
 8100a22:	d01e      	beq.n	8100a62 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8100a24:	4b18      	ldr	r3, [pc, #96]	; (8100a88 <FLASH_WaitForLastOperation+0xac>)
 8100a26:	685a      	ldr	r2, [r3, #4]
 8100a28:	68bb      	ldr	r3, [r7, #8]
 8100a2a:	4313      	orrs	r3, r2
 8100a2c:	4a16      	ldr	r2, [pc, #88]	; (8100a88 <FLASH_WaitForLastOperation+0xac>)
 8100a2e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8100a30:	68bb      	ldr	r3, [r7, #8]
 8100a32:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8100a36:	2b00      	cmp	r3, #0
 8100a38:	d007      	beq.n	8100a4a <FLASH_WaitForLastOperation+0x6e>
 8100a3a:	4b11      	ldr	r3, [pc, #68]	; (8100a80 <FLASH_WaitForLastOperation+0xa4>)
 8100a3c:	699a      	ldr	r2, [r3, #24]
 8100a3e:	68bb      	ldr	r3, [r7, #8]
 8100a40:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8100a44:	490e      	ldr	r1, [pc, #56]	; (8100a80 <FLASH_WaitForLastOperation+0xa4>)
 8100a46:	4313      	orrs	r3, r2
 8100a48:	618b      	str	r3, [r1, #24]
 8100a4a:	68bb      	ldr	r3, [r7, #8]
 8100a4c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8100a50:	2b00      	cmp	r3, #0
 8100a52:	d004      	beq.n	8100a5e <FLASH_WaitForLastOperation+0x82>
 8100a54:	4a0a      	ldr	r2, [pc, #40]	; (8100a80 <FLASH_WaitForLastOperation+0xa4>)
 8100a56:	68bb      	ldr	r3, [r7, #8]
 8100a58:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8100a5c:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8100a5e:	2301      	movs	r3, #1
 8100a60:	e009      	b.n	8100a76 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8100a62:	4b07      	ldr	r3, [pc, #28]	; (8100a80 <FLASH_WaitForLastOperation+0xa4>)
 8100a64:	691b      	ldr	r3, [r3, #16]
 8100a66:	f003 0301 	and.w	r3, r3, #1
 8100a6a:	2b00      	cmp	r3, #0
 8100a6c:	d002      	beq.n	8100a74 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8100a6e:	4b04      	ldr	r3, [pc, #16]	; (8100a80 <FLASH_WaitForLastOperation+0xa4>)
 8100a70:	2201      	movs	r2, #1
 8100a72:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8100a74:	2300      	movs	r3, #0
}
 8100a76:	4618      	mov	r0, r3
 8100a78:	3710      	adds	r7, #16
 8100a7a:	46bd      	mov	sp, r7
 8100a7c:	bd80      	pop	{r7, pc}
 8100a7e:	bf00      	nop
 8100a80:	40022000 	.word	0x40022000
 8100a84:	0002c3fa 	.word	0x0002c3fa
 8100a88:	2000000c 	.word	0x2000000c

08100a8c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8100a8c:	b480      	push	{r7}
 8100a8e:	b085      	sub	sp, #20
 8100a90:	af00      	add	r7, sp, #0
 8100a92:	60f8      	str	r0, [r7, #12]
 8100a94:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8100a98:	4b0e      	ldr	r3, [pc, #56]	; (8100ad4 <FLASH_Program_DoubleWord+0x48>)
 8100a9a:	695b      	ldr	r3, [r3, #20]
 8100a9c:	4a0d      	ldr	r2, [pc, #52]	; (8100ad4 <FLASH_Program_DoubleWord+0x48>)
 8100a9e:	f043 0301 	orr.w	r3, r3, #1
 8100aa2:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8100aa4:	68fb      	ldr	r3, [r7, #12]
 8100aa6:	683a      	ldr	r2, [r7, #0]
 8100aa8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8100aaa:	f3bf 8f6f 	isb	sy
}
 8100aae:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8100ab0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8100ab4:	f04f 0200 	mov.w	r2, #0
 8100ab8:	f04f 0300 	mov.w	r3, #0
 8100abc:	000a      	movs	r2, r1
 8100abe:	2300      	movs	r3, #0
 8100ac0:	68f9      	ldr	r1, [r7, #12]
 8100ac2:	3104      	adds	r1, #4
 8100ac4:	4613      	mov	r3, r2
 8100ac6:	600b      	str	r3, [r1, #0]
}
 8100ac8:	bf00      	nop
 8100aca:	3714      	adds	r7, #20
 8100acc:	46bd      	mov	sp, r7
 8100ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ad2:	4770      	bx	lr
 8100ad4:	40022000 	.word	0x40022000

08100ad8 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8100ad8:	b480      	push	{r7}
 8100ada:	b089      	sub	sp, #36	; 0x24
 8100adc:	af00      	add	r7, sp, #0
 8100ade:	6078      	str	r0, [r7, #4]
 8100ae0:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8100ae2:	2380      	movs	r3, #128	; 0x80
 8100ae4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8100ae6:	687b      	ldr	r3, [r7, #4]
 8100ae8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8100aea:	683b      	ldr	r3, [r7, #0]
 8100aec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8100aee:	4b14      	ldr	r3, [pc, #80]	; (8100b40 <FLASH_Program_Fast+0x68>)
 8100af0:	695b      	ldr	r3, [r3, #20]
 8100af2:	4a13      	ldr	r2, [pc, #76]	; (8100b40 <FLASH_Program_Fast+0x68>)
 8100af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8100af8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8100afa:	f3ef 8310 	mrs	r3, PRIMASK
 8100afe:	60fb      	str	r3, [r7, #12]
  return(result);
 8100b00:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8100b02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8100b04:	b672      	cpsid	i
}
 8100b06:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8100b08:	697b      	ldr	r3, [r7, #20]
 8100b0a:	681a      	ldr	r2, [r3, #0]
 8100b0c:	69bb      	ldr	r3, [r7, #24]
 8100b0e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8100b10:	69bb      	ldr	r3, [r7, #24]
 8100b12:	3304      	adds	r3, #4
 8100b14:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8100b16:	697b      	ldr	r3, [r7, #20]
 8100b18:	3304      	adds	r3, #4
 8100b1a:	617b      	str	r3, [r7, #20]
    row_index--;
 8100b1c:	7ffb      	ldrb	r3, [r7, #31]
 8100b1e:	3b01      	subs	r3, #1
 8100b20:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8100b22:	7ffb      	ldrb	r3, [r7, #31]
 8100b24:	2b00      	cmp	r3, #0
 8100b26:	d1ef      	bne.n	8100b08 <FLASH_Program_Fast+0x30>
 8100b28:	693b      	ldr	r3, [r7, #16]
 8100b2a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8100b2c:	68bb      	ldr	r3, [r7, #8]
 8100b2e:	f383 8810 	msr	PRIMASK, r3
}
 8100b32:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8100b34:	bf00      	nop
 8100b36:	3724      	adds	r7, #36	; 0x24
 8100b38:	46bd      	mov	sp, r7
 8100b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b3e:	4770      	bx	lr
 8100b40:	40022000 	.word	0x40022000

08100b44 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8100b44:	b580      	push	{r7, lr}
 8100b46:	b084      	sub	sp, #16
 8100b48:	af00      	add	r7, sp, #0
 8100b4a:	6078      	str	r0, [r7, #4]
 8100b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8100b4e:	4b49      	ldr	r3, [pc, #292]	; (8100c74 <HAL_FLASHEx_Erase+0x130>)
 8100b50:	781b      	ldrb	r3, [r3, #0]
 8100b52:	2b01      	cmp	r3, #1
 8100b54:	d101      	bne.n	8100b5a <HAL_FLASHEx_Erase+0x16>
 8100b56:	2302      	movs	r3, #2
 8100b58:	e087      	b.n	8100c6a <HAL_FLASHEx_Erase+0x126>
 8100b5a:	4b46      	ldr	r3, [pc, #280]	; (8100c74 <HAL_FLASHEx_Erase+0x130>)
 8100b5c:	2201      	movs	r2, #1
 8100b5e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8100b60:	f24c 3050 	movw	r0, #50000	; 0xc350
 8100b64:	f7ff ff3a 	bl	81009dc <FLASH_WaitForLastOperation>
 8100b68:	4603      	mov	r3, r0
 8100b6a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8100b6c:	7bfb      	ldrb	r3, [r7, #15]
 8100b6e:	2b00      	cmp	r3, #0
 8100b70:	d177      	bne.n	8100c62 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8100b72:	4b40      	ldr	r3, [pc, #256]	; (8100c74 <HAL_FLASHEx_Erase+0x130>)
 8100b74:	2200      	movs	r2, #0
 8100b76:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8100b78:	4b3f      	ldr	r3, [pc, #252]	; (8100c78 <HAL_FLASHEx_Erase+0x134>)
 8100b7a:	681b      	ldr	r3, [r3, #0]
 8100b7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8100b80:	2b00      	cmp	r3, #0
 8100b82:	d013      	beq.n	8100bac <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8100b84:	4b3c      	ldr	r3, [pc, #240]	; (8100c78 <HAL_FLASHEx_Erase+0x134>)
 8100b86:	681b      	ldr	r3, [r3, #0]
 8100b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8100b8c:	2b00      	cmp	r3, #0
 8100b8e:	d009      	beq.n	8100ba4 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8100b90:	4b39      	ldr	r3, [pc, #228]	; (8100c78 <HAL_FLASHEx_Erase+0x134>)
 8100b92:	681b      	ldr	r3, [r3, #0]
 8100b94:	4a38      	ldr	r2, [pc, #224]	; (8100c78 <HAL_FLASHEx_Erase+0x134>)
 8100b96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8100b9a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8100b9c:	4b35      	ldr	r3, [pc, #212]	; (8100c74 <HAL_FLASHEx_Erase+0x130>)
 8100b9e:	2203      	movs	r2, #3
 8100ba0:	771a      	strb	r2, [r3, #28]
 8100ba2:	e016      	b.n	8100bd2 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8100ba4:	4b33      	ldr	r3, [pc, #204]	; (8100c74 <HAL_FLASHEx_Erase+0x130>)
 8100ba6:	2201      	movs	r2, #1
 8100ba8:	771a      	strb	r2, [r3, #28]
 8100baa:	e012      	b.n	8100bd2 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8100bac:	4b32      	ldr	r3, [pc, #200]	; (8100c78 <HAL_FLASHEx_Erase+0x134>)
 8100bae:	681b      	ldr	r3, [r3, #0]
 8100bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8100bb4:	2b00      	cmp	r3, #0
 8100bb6:	d009      	beq.n	8100bcc <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8100bb8:	4b2f      	ldr	r3, [pc, #188]	; (8100c78 <HAL_FLASHEx_Erase+0x134>)
 8100bba:	681b      	ldr	r3, [r3, #0]
 8100bbc:	4a2e      	ldr	r2, [pc, #184]	; (8100c78 <HAL_FLASHEx_Erase+0x134>)
 8100bbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8100bc2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8100bc4:	4b2b      	ldr	r3, [pc, #172]	; (8100c74 <HAL_FLASHEx_Erase+0x130>)
 8100bc6:	2202      	movs	r2, #2
 8100bc8:	771a      	strb	r2, [r3, #28]
 8100bca:	e002      	b.n	8100bd2 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8100bcc:	4b29      	ldr	r3, [pc, #164]	; (8100c74 <HAL_FLASHEx_Erase+0x130>)
 8100bce:	2200      	movs	r2, #0
 8100bd0:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8100bd2:	687b      	ldr	r3, [r7, #4]
 8100bd4:	681b      	ldr	r3, [r3, #0]
 8100bd6:	2b01      	cmp	r3, #1
 8100bd8:	d113      	bne.n	8100c02 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8100bda:	687b      	ldr	r3, [r7, #4]
 8100bdc:	685b      	ldr	r3, [r3, #4]
 8100bde:	4618      	mov	r0, r3
 8100be0:	f000 f84c 	bl	8100c7c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8100be4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8100be8:	f7ff fef8 	bl	81009dc <FLASH_WaitForLastOperation>
 8100bec:	4603      	mov	r3, r0
 8100bee:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8100bf0:	4b21      	ldr	r3, [pc, #132]	; (8100c78 <HAL_FLASHEx_Erase+0x134>)
 8100bf2:	695b      	ldr	r3, [r3, #20]
 8100bf4:	4a20      	ldr	r2, [pc, #128]	; (8100c78 <HAL_FLASHEx_Erase+0x134>)
 8100bf6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8100bfa:	f023 0304 	bic.w	r3, r3, #4
 8100bfe:	6153      	str	r3, [r2, #20]
 8100c00:	e02d      	b.n	8100c5e <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8100c02:	683b      	ldr	r3, [r7, #0]
 8100c04:	f04f 32ff 	mov.w	r2, #4294967295
 8100c08:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8100c0a:	687b      	ldr	r3, [r7, #4]
 8100c0c:	689b      	ldr	r3, [r3, #8]
 8100c0e:	60bb      	str	r3, [r7, #8]
 8100c10:	e01d      	b.n	8100c4e <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8100c12:	687b      	ldr	r3, [r7, #4]
 8100c14:	685b      	ldr	r3, [r3, #4]
 8100c16:	4619      	mov	r1, r3
 8100c18:	68b8      	ldr	r0, [r7, #8]
 8100c1a:	f000 f867 	bl	8100cec <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8100c1e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8100c22:	f7ff fedb 	bl	81009dc <FLASH_WaitForLastOperation>
 8100c26:	4603      	mov	r3, r0
 8100c28:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8100c2a:	4b13      	ldr	r3, [pc, #76]	; (8100c78 <HAL_FLASHEx_Erase+0x134>)
 8100c2c:	695b      	ldr	r3, [r3, #20]
 8100c2e:	4a12      	ldr	r2, [pc, #72]	; (8100c78 <HAL_FLASHEx_Erase+0x134>)
 8100c30:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8100c34:	f023 0302 	bic.w	r3, r3, #2
 8100c38:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8100c3a:	7bfb      	ldrb	r3, [r7, #15]
 8100c3c:	2b00      	cmp	r3, #0
 8100c3e:	d003      	beq.n	8100c48 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8100c40:	683b      	ldr	r3, [r7, #0]
 8100c42:	68ba      	ldr	r2, [r7, #8]
 8100c44:	601a      	str	r2, [r3, #0]
          break;
 8100c46:	e00a      	b.n	8100c5e <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8100c48:	68bb      	ldr	r3, [r7, #8]
 8100c4a:	3301      	adds	r3, #1
 8100c4c:	60bb      	str	r3, [r7, #8]
 8100c4e:	687b      	ldr	r3, [r7, #4]
 8100c50:	689a      	ldr	r2, [r3, #8]
 8100c52:	687b      	ldr	r3, [r7, #4]
 8100c54:	68db      	ldr	r3, [r3, #12]
 8100c56:	4413      	add	r3, r2
 8100c58:	68ba      	ldr	r2, [r7, #8]
 8100c5a:	429a      	cmp	r2, r3
 8100c5c:	d3d9      	bcc.n	8100c12 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8100c5e:	f000 f889 	bl	8100d74 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8100c62:	4b04      	ldr	r3, [pc, #16]	; (8100c74 <HAL_FLASHEx_Erase+0x130>)
 8100c64:	2200      	movs	r2, #0
 8100c66:	701a      	strb	r2, [r3, #0]

  return status;
 8100c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8100c6a:	4618      	mov	r0, r3
 8100c6c:	3710      	adds	r7, #16
 8100c6e:	46bd      	mov	sp, r7
 8100c70:	bd80      	pop	{r7, pc}
 8100c72:	bf00      	nop
 8100c74:	2000000c 	.word	0x2000000c
 8100c78:	40022000 	.word	0x40022000

08100c7c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8100c7c:	b480      	push	{r7}
 8100c7e:	b083      	sub	sp, #12
 8100c80:	af00      	add	r7, sp, #0
 8100c82:	6078      	str	r0, [r7, #4]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8100c84:	4b18      	ldr	r3, [pc, #96]	; (8100ce8 <FLASH_MassErase+0x6c>)
 8100c86:	6a1b      	ldr	r3, [r3, #32]
 8100c88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8100c8c:	2b00      	cmp	r3, #0
 8100c8e:	d016      	beq.n	8100cbe <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8100c90:	687b      	ldr	r3, [r7, #4]
 8100c92:	f003 0301 	and.w	r3, r3, #1
 8100c96:	2b00      	cmp	r3, #0
 8100c98:	d005      	beq.n	8100ca6 <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8100c9a:	4b13      	ldr	r3, [pc, #76]	; (8100ce8 <FLASH_MassErase+0x6c>)
 8100c9c:	695b      	ldr	r3, [r3, #20]
 8100c9e:	4a12      	ldr	r2, [pc, #72]	; (8100ce8 <FLASH_MassErase+0x6c>)
 8100ca0:	f043 0304 	orr.w	r3, r3, #4
 8100ca4:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8100ca6:	687b      	ldr	r3, [r7, #4]
 8100ca8:	f003 0302 	and.w	r3, r3, #2
 8100cac:	2b00      	cmp	r3, #0
 8100cae:	d00e      	beq.n	8100cce <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8100cb0:	4b0d      	ldr	r3, [pc, #52]	; (8100ce8 <FLASH_MassErase+0x6c>)
 8100cb2:	695b      	ldr	r3, [r3, #20]
 8100cb4:	4a0c      	ldr	r2, [pc, #48]	; (8100ce8 <FLASH_MassErase+0x6c>)
 8100cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8100cba:	6153      	str	r3, [r2, #20]
 8100cbc:	e007      	b.n	8100cce <FLASH_MassErase+0x52>
#endif
  }
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8100cbe:	4b0a      	ldr	r3, [pc, #40]	; (8100ce8 <FLASH_MassErase+0x6c>)
 8100cc0:	695b      	ldr	r3, [r3, #20]
 8100cc2:	4a09      	ldr	r2, [pc, #36]	; (8100ce8 <FLASH_MassErase+0x6c>)
 8100cc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8100cc8:	f043 0304 	orr.w	r3, r3, #4
 8100ccc:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8100cce:	4b06      	ldr	r3, [pc, #24]	; (8100ce8 <FLASH_MassErase+0x6c>)
 8100cd0:	695b      	ldr	r3, [r3, #20]
 8100cd2:	4a05      	ldr	r2, [pc, #20]	; (8100ce8 <FLASH_MassErase+0x6c>)
 8100cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8100cd8:	6153      	str	r3, [r2, #20]
}
 8100cda:	bf00      	nop
 8100cdc:	370c      	adds	r7, #12
 8100cde:	46bd      	mov	sp, r7
 8100ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ce4:	4770      	bx	lr
 8100ce6:	bf00      	nop
 8100ce8:	40022000 	.word	0x40022000

08100cec <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8100cec:	b480      	push	{r7}
 8100cee:	b083      	sub	sp, #12
 8100cf0:	af00      	add	r7, sp, #0
 8100cf2:	6078      	str	r0, [r7, #4]
 8100cf4:	6039      	str	r1, [r7, #0]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8100cf6:	4b1e      	ldr	r3, [pc, #120]	; (8100d70 <FLASH_PageErase+0x84>)
 8100cf8:	6a1b      	ldr	r3, [r3, #32]
 8100cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8100cfe:	2b00      	cmp	r3, #0
 8100d00:	d106      	bne.n	8100d10 <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8100d02:	4b1b      	ldr	r3, [pc, #108]	; (8100d70 <FLASH_PageErase+0x84>)
 8100d04:	695b      	ldr	r3, [r3, #20]
 8100d06:	4a1a      	ldr	r2, [pc, #104]	; (8100d70 <FLASH_PageErase+0x84>)
 8100d08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8100d0c:	6153      	str	r3, [r2, #20]
 8100d0e:	e011      	b.n	8100d34 <FLASH_PageErase+0x48>
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8100d10:	683b      	ldr	r3, [r7, #0]
 8100d12:	f003 0301 	and.w	r3, r3, #1
 8100d16:	2b00      	cmp	r3, #0
 8100d18:	d006      	beq.n	8100d28 <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8100d1a:	4b15      	ldr	r3, [pc, #84]	; (8100d70 <FLASH_PageErase+0x84>)
 8100d1c:	695b      	ldr	r3, [r3, #20]
 8100d1e:	4a14      	ldr	r2, [pc, #80]	; (8100d70 <FLASH_PageErase+0x84>)
 8100d20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8100d24:	6153      	str	r3, [r2, #20]
 8100d26:	e005      	b.n	8100d34 <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8100d28:	4b11      	ldr	r3, [pc, #68]	; (8100d70 <FLASH_PageErase+0x84>)
 8100d2a:	695b      	ldr	r3, [r3, #20]
 8100d2c:	4a10      	ldr	r2, [pc, #64]	; (8100d70 <FLASH_PageErase+0x84>)
 8100d2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8100d32:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8100d34:	4b0e      	ldr	r3, [pc, #56]	; (8100d70 <FLASH_PageErase+0x84>)
 8100d36:	695b      	ldr	r3, [r3, #20]
 8100d38:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8100d3c:	687b      	ldr	r3, [r7, #4]
 8100d3e:	00db      	lsls	r3, r3, #3
 8100d40:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8100d44:	490a      	ldr	r1, [pc, #40]	; (8100d70 <FLASH_PageErase+0x84>)
 8100d46:	4313      	orrs	r3, r2
 8100d48:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8100d4a:	4b09      	ldr	r3, [pc, #36]	; (8100d70 <FLASH_PageErase+0x84>)
 8100d4c:	695b      	ldr	r3, [r3, #20]
 8100d4e:	4a08      	ldr	r2, [pc, #32]	; (8100d70 <FLASH_PageErase+0x84>)
 8100d50:	f043 0302 	orr.w	r3, r3, #2
 8100d54:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8100d56:	4b06      	ldr	r3, [pc, #24]	; (8100d70 <FLASH_PageErase+0x84>)
 8100d58:	695b      	ldr	r3, [r3, #20]
 8100d5a:	4a05      	ldr	r2, [pc, #20]	; (8100d70 <FLASH_PageErase+0x84>)
 8100d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8100d60:	6153      	str	r3, [r2, #20]
}
 8100d62:	bf00      	nop
 8100d64:	370c      	adds	r7, #12
 8100d66:	46bd      	mov	sp, r7
 8100d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d6c:	4770      	bx	lr
 8100d6e:	bf00      	nop
 8100d70:	40022000 	.word	0x40022000

08100d74 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8100d74:	b480      	push	{r7}
 8100d76:	b083      	sub	sp, #12
 8100d78:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8100d7a:	4b21      	ldr	r3, [pc, #132]	; (8100e00 <FLASH_FlushCaches+0x8c>)
 8100d7c:	7f1b      	ldrb	r3, [r3, #28]
 8100d7e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8100d80:	79fb      	ldrb	r3, [r7, #7]
 8100d82:	2b01      	cmp	r3, #1
 8100d84:	d002      	beq.n	8100d8c <FLASH_FlushCaches+0x18>
 8100d86:	79fb      	ldrb	r3, [r7, #7]
 8100d88:	2b03      	cmp	r3, #3
 8100d8a:	d117      	bne.n	8100dbc <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8100d8c:	4b1d      	ldr	r3, [pc, #116]	; (8100e04 <FLASH_FlushCaches+0x90>)
 8100d8e:	681b      	ldr	r3, [r3, #0]
 8100d90:	4a1c      	ldr	r2, [pc, #112]	; (8100e04 <FLASH_FlushCaches+0x90>)
 8100d92:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8100d96:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8100d98:	4b1a      	ldr	r3, [pc, #104]	; (8100e04 <FLASH_FlushCaches+0x90>)
 8100d9a:	681b      	ldr	r3, [r3, #0]
 8100d9c:	4a19      	ldr	r2, [pc, #100]	; (8100e04 <FLASH_FlushCaches+0x90>)
 8100d9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8100da2:	6013      	str	r3, [r2, #0]
 8100da4:	4b17      	ldr	r3, [pc, #92]	; (8100e04 <FLASH_FlushCaches+0x90>)
 8100da6:	681b      	ldr	r3, [r3, #0]
 8100da8:	4a16      	ldr	r2, [pc, #88]	; (8100e04 <FLASH_FlushCaches+0x90>)
 8100daa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8100dae:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8100db0:	4b14      	ldr	r3, [pc, #80]	; (8100e04 <FLASH_FlushCaches+0x90>)
 8100db2:	681b      	ldr	r3, [r3, #0]
 8100db4:	4a13      	ldr	r2, [pc, #76]	; (8100e04 <FLASH_FlushCaches+0x90>)
 8100db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8100dba:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8100dbc:	79fb      	ldrb	r3, [r7, #7]
 8100dbe:	2b02      	cmp	r3, #2
 8100dc0:	d002      	beq.n	8100dc8 <FLASH_FlushCaches+0x54>
 8100dc2:	79fb      	ldrb	r3, [r7, #7]
 8100dc4:	2b03      	cmp	r3, #3
 8100dc6:	d111      	bne.n	8100dec <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8100dc8:	4b0e      	ldr	r3, [pc, #56]	; (8100e04 <FLASH_FlushCaches+0x90>)
 8100dca:	681b      	ldr	r3, [r3, #0]
 8100dcc:	4a0d      	ldr	r2, [pc, #52]	; (8100e04 <FLASH_FlushCaches+0x90>)
 8100dce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8100dd2:	6013      	str	r3, [r2, #0]
 8100dd4:	4b0b      	ldr	r3, [pc, #44]	; (8100e04 <FLASH_FlushCaches+0x90>)
 8100dd6:	681b      	ldr	r3, [r3, #0]
 8100dd8:	4a0a      	ldr	r2, [pc, #40]	; (8100e04 <FLASH_FlushCaches+0x90>)
 8100dda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8100dde:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8100de0:	4b08      	ldr	r3, [pc, #32]	; (8100e04 <FLASH_FlushCaches+0x90>)
 8100de2:	681b      	ldr	r3, [r3, #0]
 8100de4:	4a07      	ldr	r2, [pc, #28]	; (8100e04 <FLASH_FlushCaches+0x90>)
 8100de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8100dea:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8100dec:	4b04      	ldr	r3, [pc, #16]	; (8100e00 <FLASH_FlushCaches+0x8c>)
 8100dee:	2200      	movs	r2, #0
 8100df0:	771a      	strb	r2, [r3, #28]
}
 8100df2:	bf00      	nop
 8100df4:	370c      	adds	r7, #12
 8100df6:	46bd      	mov	sp, r7
 8100df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100dfc:	4770      	bx	lr
 8100dfe:	bf00      	nop
 8100e00:	2000000c 	.word	0x2000000c
 8100e04:	40022000 	.word	0x40022000

08100e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8100e08:	b480      	push	{r7}
 8100e0a:	b087      	sub	sp, #28
 8100e0c:	af00      	add	r7, sp, #0
 8100e0e:	6078      	str	r0, [r7, #4]
 8100e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8100e12:	2300      	movs	r3, #0
 8100e14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8100e16:	e166      	b.n	81010e6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8100e18:	683b      	ldr	r3, [r7, #0]
 8100e1a:	681a      	ldr	r2, [r3, #0]
 8100e1c:	2101      	movs	r1, #1
 8100e1e:	697b      	ldr	r3, [r7, #20]
 8100e20:	fa01 f303 	lsl.w	r3, r1, r3
 8100e24:	4013      	ands	r3, r2
 8100e26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8100e28:	68fb      	ldr	r3, [r7, #12]
 8100e2a:	2b00      	cmp	r3, #0
 8100e2c:	f000 8158 	beq.w	81010e0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100e30:	683b      	ldr	r3, [r7, #0]
 8100e32:	685b      	ldr	r3, [r3, #4]
 8100e34:	f003 0303 	and.w	r3, r3, #3
 8100e38:	2b01      	cmp	r3, #1
 8100e3a:	d005      	beq.n	8100e48 <HAL_GPIO_Init+0x40>
 8100e3c:	683b      	ldr	r3, [r7, #0]
 8100e3e:	685b      	ldr	r3, [r3, #4]
 8100e40:	f003 0303 	and.w	r3, r3, #3
 8100e44:	2b02      	cmp	r3, #2
 8100e46:	d130      	bne.n	8100eaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100e48:	687b      	ldr	r3, [r7, #4]
 8100e4a:	689b      	ldr	r3, [r3, #8]
 8100e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8100e4e:	697b      	ldr	r3, [r7, #20]
 8100e50:	005b      	lsls	r3, r3, #1
 8100e52:	2203      	movs	r2, #3
 8100e54:	fa02 f303 	lsl.w	r3, r2, r3
 8100e58:	43db      	mvns	r3, r3
 8100e5a:	693a      	ldr	r2, [r7, #16]
 8100e5c:	4013      	ands	r3, r2
 8100e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8100e60:	683b      	ldr	r3, [r7, #0]
 8100e62:	68da      	ldr	r2, [r3, #12]
 8100e64:	697b      	ldr	r3, [r7, #20]
 8100e66:	005b      	lsls	r3, r3, #1
 8100e68:	fa02 f303 	lsl.w	r3, r2, r3
 8100e6c:	693a      	ldr	r2, [r7, #16]
 8100e6e:	4313      	orrs	r3, r2
 8100e70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8100e72:	687b      	ldr	r3, [r7, #4]
 8100e74:	693a      	ldr	r2, [r7, #16]
 8100e76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100e78:	687b      	ldr	r3, [r7, #4]
 8100e7a:	685b      	ldr	r3, [r3, #4]
 8100e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100e7e:	2201      	movs	r2, #1
 8100e80:	697b      	ldr	r3, [r7, #20]
 8100e82:	fa02 f303 	lsl.w	r3, r2, r3
 8100e86:	43db      	mvns	r3, r3
 8100e88:	693a      	ldr	r2, [r7, #16]
 8100e8a:	4013      	ands	r3, r2
 8100e8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8100e8e:	683b      	ldr	r3, [r7, #0]
 8100e90:	685b      	ldr	r3, [r3, #4]
 8100e92:	091b      	lsrs	r3, r3, #4
 8100e94:	f003 0201 	and.w	r2, r3, #1
 8100e98:	697b      	ldr	r3, [r7, #20]
 8100e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8100e9e:	693a      	ldr	r2, [r7, #16]
 8100ea0:	4313      	orrs	r3, r2
 8100ea2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8100ea4:	687b      	ldr	r3, [r7, #4]
 8100ea6:	693a      	ldr	r2, [r7, #16]
 8100ea8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100eaa:	683b      	ldr	r3, [r7, #0]
 8100eac:	685b      	ldr	r3, [r3, #4]
 8100eae:	f003 0303 	and.w	r3, r3, #3
 8100eb2:	2b03      	cmp	r3, #3
 8100eb4:	d017      	beq.n	8100ee6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8100eb6:	687b      	ldr	r3, [r7, #4]
 8100eb8:	68db      	ldr	r3, [r3, #12]
 8100eba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100ebc:	697b      	ldr	r3, [r7, #20]
 8100ebe:	005b      	lsls	r3, r3, #1
 8100ec0:	2203      	movs	r2, #3
 8100ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8100ec6:	43db      	mvns	r3, r3
 8100ec8:	693a      	ldr	r2, [r7, #16]
 8100eca:	4013      	ands	r3, r2
 8100ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8100ece:	683b      	ldr	r3, [r7, #0]
 8100ed0:	689a      	ldr	r2, [r3, #8]
 8100ed2:	697b      	ldr	r3, [r7, #20]
 8100ed4:	005b      	lsls	r3, r3, #1
 8100ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8100eda:	693a      	ldr	r2, [r7, #16]
 8100edc:	4313      	orrs	r3, r2
 8100ede:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8100ee0:	687b      	ldr	r3, [r7, #4]
 8100ee2:	693a      	ldr	r2, [r7, #16]
 8100ee4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100ee6:	683b      	ldr	r3, [r7, #0]
 8100ee8:	685b      	ldr	r3, [r3, #4]
 8100eea:	f003 0303 	and.w	r3, r3, #3
 8100eee:	2b02      	cmp	r3, #2
 8100ef0:	d123      	bne.n	8100f3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8100ef2:	697b      	ldr	r3, [r7, #20]
 8100ef4:	08da      	lsrs	r2, r3, #3
 8100ef6:	687b      	ldr	r3, [r7, #4]
 8100ef8:	3208      	adds	r2, #8
 8100efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100efe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8100f00:	697b      	ldr	r3, [r7, #20]
 8100f02:	f003 0307 	and.w	r3, r3, #7
 8100f06:	009b      	lsls	r3, r3, #2
 8100f08:	220f      	movs	r2, #15
 8100f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8100f0e:	43db      	mvns	r3, r3
 8100f10:	693a      	ldr	r2, [r7, #16]
 8100f12:	4013      	ands	r3, r2
 8100f14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8100f16:	683b      	ldr	r3, [r7, #0]
 8100f18:	691a      	ldr	r2, [r3, #16]
 8100f1a:	697b      	ldr	r3, [r7, #20]
 8100f1c:	f003 0307 	and.w	r3, r3, #7
 8100f20:	009b      	lsls	r3, r3, #2
 8100f22:	fa02 f303 	lsl.w	r3, r2, r3
 8100f26:	693a      	ldr	r2, [r7, #16]
 8100f28:	4313      	orrs	r3, r2
 8100f2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8100f2c:	697b      	ldr	r3, [r7, #20]
 8100f2e:	08da      	lsrs	r2, r3, #3
 8100f30:	687b      	ldr	r3, [r7, #4]
 8100f32:	3208      	adds	r2, #8
 8100f34:	6939      	ldr	r1, [r7, #16]
 8100f36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100f3a:	687b      	ldr	r3, [r7, #4]
 8100f3c:	681b      	ldr	r3, [r3, #0]
 8100f3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8100f40:	697b      	ldr	r3, [r7, #20]
 8100f42:	005b      	lsls	r3, r3, #1
 8100f44:	2203      	movs	r2, #3
 8100f46:	fa02 f303 	lsl.w	r3, r2, r3
 8100f4a:	43db      	mvns	r3, r3
 8100f4c:	693a      	ldr	r2, [r7, #16]
 8100f4e:	4013      	ands	r3, r2
 8100f50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8100f52:	683b      	ldr	r3, [r7, #0]
 8100f54:	685b      	ldr	r3, [r3, #4]
 8100f56:	f003 0203 	and.w	r2, r3, #3
 8100f5a:	697b      	ldr	r3, [r7, #20]
 8100f5c:	005b      	lsls	r3, r3, #1
 8100f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8100f62:	693a      	ldr	r2, [r7, #16]
 8100f64:	4313      	orrs	r3, r2
 8100f66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8100f68:	687b      	ldr	r3, [r7, #4]
 8100f6a:	693a      	ldr	r2, [r7, #16]
 8100f6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8100f6e:	683b      	ldr	r3, [r7, #0]
 8100f70:	685b      	ldr	r3, [r3, #4]
 8100f72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8100f76:	2b00      	cmp	r3, #0
 8100f78:	f000 80b2 	beq.w	81010e0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100f7c:	4b61      	ldr	r3, [pc, #388]	; (8101104 <HAL_GPIO_Init+0x2fc>)
 8100f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8100f80:	4a60      	ldr	r2, [pc, #384]	; (8101104 <HAL_GPIO_Init+0x2fc>)
 8100f82:	f043 0301 	orr.w	r3, r3, #1
 8100f86:	6613      	str	r3, [r2, #96]	; 0x60
 8100f88:	4b5e      	ldr	r3, [pc, #376]	; (8101104 <HAL_GPIO_Init+0x2fc>)
 8100f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8100f8c:	f003 0301 	and.w	r3, r3, #1
 8100f90:	60bb      	str	r3, [r7, #8]
 8100f92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8100f94:	4a5c      	ldr	r2, [pc, #368]	; (8101108 <HAL_GPIO_Init+0x300>)
 8100f96:	697b      	ldr	r3, [r7, #20]
 8100f98:	089b      	lsrs	r3, r3, #2
 8100f9a:	3302      	adds	r3, #2
 8100f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8100fa2:	697b      	ldr	r3, [r7, #20]
 8100fa4:	f003 0303 	and.w	r3, r3, #3
 8100fa8:	009b      	lsls	r3, r3, #2
 8100faa:	220f      	movs	r2, #15
 8100fac:	fa02 f303 	lsl.w	r3, r2, r3
 8100fb0:	43db      	mvns	r3, r3
 8100fb2:	693a      	ldr	r2, [r7, #16]
 8100fb4:	4013      	ands	r3, r2
 8100fb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8100fb8:	687b      	ldr	r3, [r7, #4]
 8100fba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8100fbe:	d02b      	beq.n	8101018 <HAL_GPIO_Init+0x210>
 8100fc0:	687b      	ldr	r3, [r7, #4]
 8100fc2:	4a52      	ldr	r2, [pc, #328]	; (810110c <HAL_GPIO_Init+0x304>)
 8100fc4:	4293      	cmp	r3, r2
 8100fc6:	d025      	beq.n	8101014 <HAL_GPIO_Init+0x20c>
 8100fc8:	687b      	ldr	r3, [r7, #4]
 8100fca:	4a51      	ldr	r2, [pc, #324]	; (8101110 <HAL_GPIO_Init+0x308>)
 8100fcc:	4293      	cmp	r3, r2
 8100fce:	d01f      	beq.n	8101010 <HAL_GPIO_Init+0x208>
 8100fd0:	687b      	ldr	r3, [r7, #4]
 8100fd2:	4a50      	ldr	r2, [pc, #320]	; (8101114 <HAL_GPIO_Init+0x30c>)
 8100fd4:	4293      	cmp	r3, r2
 8100fd6:	d019      	beq.n	810100c <HAL_GPIO_Init+0x204>
 8100fd8:	687b      	ldr	r3, [r7, #4]
 8100fda:	4a4f      	ldr	r2, [pc, #316]	; (8101118 <HAL_GPIO_Init+0x310>)
 8100fdc:	4293      	cmp	r3, r2
 8100fde:	d013      	beq.n	8101008 <HAL_GPIO_Init+0x200>
 8100fe0:	687b      	ldr	r3, [r7, #4]
 8100fe2:	4a4e      	ldr	r2, [pc, #312]	; (810111c <HAL_GPIO_Init+0x314>)
 8100fe4:	4293      	cmp	r3, r2
 8100fe6:	d00d      	beq.n	8101004 <HAL_GPIO_Init+0x1fc>
 8100fe8:	687b      	ldr	r3, [r7, #4]
 8100fea:	4a4d      	ldr	r2, [pc, #308]	; (8101120 <HAL_GPIO_Init+0x318>)
 8100fec:	4293      	cmp	r3, r2
 8100fee:	d007      	beq.n	8101000 <HAL_GPIO_Init+0x1f8>
 8100ff0:	687b      	ldr	r3, [r7, #4]
 8100ff2:	4a4c      	ldr	r2, [pc, #304]	; (8101124 <HAL_GPIO_Init+0x31c>)
 8100ff4:	4293      	cmp	r3, r2
 8100ff6:	d101      	bne.n	8100ffc <HAL_GPIO_Init+0x1f4>
 8100ff8:	2307      	movs	r3, #7
 8100ffa:	e00e      	b.n	810101a <HAL_GPIO_Init+0x212>
 8100ffc:	2308      	movs	r3, #8
 8100ffe:	e00c      	b.n	810101a <HAL_GPIO_Init+0x212>
 8101000:	2306      	movs	r3, #6
 8101002:	e00a      	b.n	810101a <HAL_GPIO_Init+0x212>
 8101004:	2305      	movs	r3, #5
 8101006:	e008      	b.n	810101a <HAL_GPIO_Init+0x212>
 8101008:	2304      	movs	r3, #4
 810100a:	e006      	b.n	810101a <HAL_GPIO_Init+0x212>
 810100c:	2303      	movs	r3, #3
 810100e:	e004      	b.n	810101a <HAL_GPIO_Init+0x212>
 8101010:	2302      	movs	r3, #2
 8101012:	e002      	b.n	810101a <HAL_GPIO_Init+0x212>
 8101014:	2301      	movs	r3, #1
 8101016:	e000      	b.n	810101a <HAL_GPIO_Init+0x212>
 8101018:	2300      	movs	r3, #0
 810101a:	697a      	ldr	r2, [r7, #20]
 810101c:	f002 0203 	and.w	r2, r2, #3
 8101020:	0092      	lsls	r2, r2, #2
 8101022:	4093      	lsls	r3, r2
 8101024:	693a      	ldr	r2, [r7, #16]
 8101026:	4313      	orrs	r3, r2
 8101028:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 810102a:	4937      	ldr	r1, [pc, #220]	; (8101108 <HAL_GPIO_Init+0x300>)
 810102c:	697b      	ldr	r3, [r7, #20]
 810102e:	089b      	lsrs	r3, r3, #2
 8101030:	3302      	adds	r3, #2
 8101032:	693a      	ldr	r2, [r7, #16]
 8101034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101038:	4b3b      	ldr	r3, [pc, #236]	; (8101128 <HAL_GPIO_Init+0x320>)
 810103a:	689b      	ldr	r3, [r3, #8]
 810103c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 810103e:	68fb      	ldr	r3, [r7, #12]
 8101040:	43db      	mvns	r3, r3
 8101042:	693a      	ldr	r2, [r7, #16]
 8101044:	4013      	ands	r3, r2
 8101046:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8101048:	683b      	ldr	r3, [r7, #0]
 810104a:	685b      	ldr	r3, [r3, #4]
 810104c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101050:	2b00      	cmp	r3, #0
 8101052:	d003      	beq.n	810105c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8101054:	693a      	ldr	r2, [r7, #16]
 8101056:	68fb      	ldr	r3, [r7, #12]
 8101058:	4313      	orrs	r3, r2
 810105a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 810105c:	4a32      	ldr	r2, [pc, #200]	; (8101128 <HAL_GPIO_Init+0x320>)
 810105e:	693b      	ldr	r3, [r7, #16]
 8101060:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8101062:	4b31      	ldr	r3, [pc, #196]	; (8101128 <HAL_GPIO_Init+0x320>)
 8101064:	68db      	ldr	r3, [r3, #12]
 8101066:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8101068:	68fb      	ldr	r3, [r7, #12]
 810106a:	43db      	mvns	r3, r3
 810106c:	693a      	ldr	r2, [r7, #16]
 810106e:	4013      	ands	r3, r2
 8101070:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8101072:	683b      	ldr	r3, [r7, #0]
 8101074:	685b      	ldr	r3, [r3, #4]
 8101076:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810107a:	2b00      	cmp	r3, #0
 810107c:	d003      	beq.n	8101086 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 810107e:	693a      	ldr	r2, [r7, #16]
 8101080:	68fb      	ldr	r3, [r7, #12]
 8101082:	4313      	orrs	r3, r2
 8101084:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8101086:	4a28      	ldr	r2, [pc, #160]	; (8101128 <HAL_GPIO_Init+0x320>)
 8101088:	693b      	ldr	r3, [r7, #16]
 810108a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 810108c:	4b26      	ldr	r3, [pc, #152]	; (8101128 <HAL_GPIO_Init+0x320>)
 810108e:	685b      	ldr	r3, [r3, #4]
 8101090:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8101092:	68fb      	ldr	r3, [r7, #12]
 8101094:	43db      	mvns	r3, r3
 8101096:	693a      	ldr	r2, [r7, #16]
 8101098:	4013      	ands	r3, r2
 810109a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 810109c:	683b      	ldr	r3, [r7, #0]
 810109e:	685b      	ldr	r3, [r3, #4]
 81010a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81010a4:	2b00      	cmp	r3, #0
 81010a6:	d003      	beq.n	81010b0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 81010a8:	693a      	ldr	r2, [r7, #16]
 81010aa:	68fb      	ldr	r3, [r7, #12]
 81010ac:	4313      	orrs	r3, r2
 81010ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 81010b0:	4a1d      	ldr	r2, [pc, #116]	; (8101128 <HAL_GPIO_Init+0x320>)
 81010b2:	693b      	ldr	r3, [r7, #16]
 81010b4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 81010b6:	4b1c      	ldr	r3, [pc, #112]	; (8101128 <HAL_GPIO_Init+0x320>)
 81010b8:	681b      	ldr	r3, [r3, #0]
 81010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 81010bc:	68fb      	ldr	r3, [r7, #12]
 81010be:	43db      	mvns	r3, r3
 81010c0:	693a      	ldr	r2, [r7, #16]
 81010c2:	4013      	ands	r3, r2
 81010c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 81010c6:	683b      	ldr	r3, [r7, #0]
 81010c8:	685b      	ldr	r3, [r3, #4]
 81010ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81010ce:	2b00      	cmp	r3, #0
 81010d0:	d003      	beq.n	81010da <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 81010d2:	693a      	ldr	r2, [r7, #16]
 81010d4:	68fb      	ldr	r3, [r7, #12]
 81010d6:	4313      	orrs	r3, r2
 81010d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 81010da:	4a13      	ldr	r2, [pc, #76]	; (8101128 <HAL_GPIO_Init+0x320>)
 81010dc:	693b      	ldr	r3, [r7, #16]
 81010de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 81010e0:	697b      	ldr	r3, [r7, #20]
 81010e2:	3301      	adds	r3, #1
 81010e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 81010e6:	683b      	ldr	r3, [r7, #0]
 81010e8:	681a      	ldr	r2, [r3, #0]
 81010ea:	697b      	ldr	r3, [r7, #20]
 81010ec:	fa22 f303 	lsr.w	r3, r2, r3
 81010f0:	2b00      	cmp	r3, #0
 81010f2:	f47f ae91 	bne.w	8100e18 <HAL_GPIO_Init+0x10>
  }
}
 81010f6:	bf00      	nop
 81010f8:	bf00      	nop
 81010fa:	371c      	adds	r7, #28
 81010fc:	46bd      	mov	sp, r7
 81010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101102:	4770      	bx	lr
 8101104:	40021000 	.word	0x40021000
 8101108:	40010000 	.word	0x40010000
 810110c:	48000400 	.word	0x48000400
 8101110:	48000800 	.word	0x48000800
 8101114:	48000c00 	.word	0x48000c00
 8101118:	48001000 	.word	0x48001000
 810111c:	48001400 	.word	0x48001400
 8101120:	48001800 	.word	0x48001800
 8101124:	48001c00 	.word	0x48001c00
 8101128:	40010400 	.word	0x40010400

0810112c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 810112c:	b5f0      	push	{r4, r5, r6, r7, lr}
 810112e:	b08f      	sub	sp, #60	; 0x3c
 8101130:	af0a      	add	r7, sp, #40	; 0x28
 8101132:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8101134:	687b      	ldr	r3, [r7, #4]
 8101136:	2b00      	cmp	r3, #0
 8101138:	d101      	bne.n	810113e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 810113a:	2301      	movs	r3, #1
 810113c:	e116      	b.n	810136c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 810113e:	687b      	ldr	r3, [r7, #4]
 8101140:	681b      	ldr	r3, [r3, #0]
 8101142:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8101144:	687b      	ldr	r3, [r7, #4]
 8101146:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 810114a:	b2db      	uxtb	r3, r3
 810114c:	2b00      	cmp	r3, #0
 810114e:	d106      	bne.n	810115e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8101150:	687b      	ldr	r3, [r7, #4]
 8101152:	2200      	movs	r2, #0
 8101154:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8101158:	6878      	ldr	r0, [r7, #4]
 810115a:	f006 f875 	bl	8107248 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 810115e:	687b      	ldr	r3, [r7, #4]
 8101160:	2203      	movs	r2, #3
 8101162:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8101166:	68bb      	ldr	r3, [r7, #8]
 8101168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810116a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810116e:	2b00      	cmp	r3, #0
 8101170:	d102      	bne.n	8101178 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8101172:	687b      	ldr	r3, [r7, #4]
 8101174:	2200      	movs	r2, #0
 8101176:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8101178:	687b      	ldr	r3, [r7, #4]
 810117a:	681b      	ldr	r3, [r3, #0]
 810117c:	4618      	mov	r0, r3
 810117e:	f002 ff76 	bl	810406e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8101182:	687b      	ldr	r3, [r7, #4]
 8101184:	681b      	ldr	r3, [r3, #0]
 8101186:	603b      	str	r3, [r7, #0]
 8101188:	687e      	ldr	r6, [r7, #4]
 810118a:	466d      	mov	r5, sp
 810118c:	f106 0410 	add.w	r4, r6, #16
 8101190:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101192:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101196:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101198:	e894 0003 	ldmia.w	r4, {r0, r1}
 810119c:	e885 0003 	stmia.w	r5, {r0, r1}
 81011a0:	1d33      	adds	r3, r6, #4
 81011a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 81011a4:	6838      	ldr	r0, [r7, #0]
 81011a6:	f002 fe89 	bl	8103ebc <USB_CoreInit>
 81011aa:	4603      	mov	r3, r0
 81011ac:	2b00      	cmp	r3, #0
 81011ae:	d005      	beq.n	81011bc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 81011b0:	687b      	ldr	r3, [r7, #4]
 81011b2:	2202      	movs	r2, #2
 81011b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 81011b8:	2301      	movs	r3, #1
 81011ba:	e0d7      	b.n	810136c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 81011bc:	687b      	ldr	r3, [r7, #4]
 81011be:	681b      	ldr	r3, [r3, #0]
 81011c0:	2100      	movs	r1, #0
 81011c2:	4618      	mov	r0, r3
 81011c4:	f002 ff64 	bl	8104090 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81011c8:	2300      	movs	r3, #0
 81011ca:	73fb      	strb	r3, [r7, #15]
 81011cc:	e04a      	b.n	8101264 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 81011ce:	7bfa      	ldrb	r2, [r7, #15]
 81011d0:	6879      	ldr	r1, [r7, #4]
 81011d2:	4613      	mov	r3, r2
 81011d4:	00db      	lsls	r3, r3, #3
 81011d6:	4413      	add	r3, r2
 81011d8:	009b      	lsls	r3, r3, #2
 81011da:	440b      	add	r3, r1
 81011dc:	333d      	adds	r3, #61	; 0x3d
 81011de:	2201      	movs	r2, #1
 81011e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 81011e2:	7bfa      	ldrb	r2, [r7, #15]
 81011e4:	6879      	ldr	r1, [r7, #4]
 81011e6:	4613      	mov	r3, r2
 81011e8:	00db      	lsls	r3, r3, #3
 81011ea:	4413      	add	r3, r2
 81011ec:	009b      	lsls	r3, r3, #2
 81011ee:	440b      	add	r3, r1
 81011f0:	333c      	adds	r3, #60	; 0x3c
 81011f2:	7bfa      	ldrb	r2, [r7, #15]
 81011f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 81011f6:	7bfa      	ldrb	r2, [r7, #15]
 81011f8:	7bfb      	ldrb	r3, [r7, #15]
 81011fa:	b298      	uxth	r0, r3
 81011fc:	6879      	ldr	r1, [r7, #4]
 81011fe:	4613      	mov	r3, r2
 8101200:	00db      	lsls	r3, r3, #3
 8101202:	4413      	add	r3, r2
 8101204:	009b      	lsls	r3, r3, #2
 8101206:	440b      	add	r3, r1
 8101208:	3344      	adds	r3, #68	; 0x44
 810120a:	4602      	mov	r2, r0
 810120c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 810120e:	7bfa      	ldrb	r2, [r7, #15]
 8101210:	6879      	ldr	r1, [r7, #4]
 8101212:	4613      	mov	r3, r2
 8101214:	00db      	lsls	r3, r3, #3
 8101216:	4413      	add	r3, r2
 8101218:	009b      	lsls	r3, r3, #2
 810121a:	440b      	add	r3, r1
 810121c:	3340      	adds	r3, #64	; 0x40
 810121e:	2200      	movs	r2, #0
 8101220:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8101222:	7bfa      	ldrb	r2, [r7, #15]
 8101224:	6879      	ldr	r1, [r7, #4]
 8101226:	4613      	mov	r3, r2
 8101228:	00db      	lsls	r3, r3, #3
 810122a:	4413      	add	r3, r2
 810122c:	009b      	lsls	r3, r3, #2
 810122e:	440b      	add	r3, r1
 8101230:	3348      	adds	r3, #72	; 0x48
 8101232:	2200      	movs	r2, #0
 8101234:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8101236:	7bfa      	ldrb	r2, [r7, #15]
 8101238:	6879      	ldr	r1, [r7, #4]
 810123a:	4613      	mov	r3, r2
 810123c:	00db      	lsls	r3, r3, #3
 810123e:	4413      	add	r3, r2
 8101240:	009b      	lsls	r3, r3, #2
 8101242:	440b      	add	r3, r1
 8101244:	334c      	adds	r3, #76	; 0x4c
 8101246:	2200      	movs	r2, #0
 8101248:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 810124a:	7bfa      	ldrb	r2, [r7, #15]
 810124c:	6879      	ldr	r1, [r7, #4]
 810124e:	4613      	mov	r3, r2
 8101250:	00db      	lsls	r3, r3, #3
 8101252:	4413      	add	r3, r2
 8101254:	009b      	lsls	r3, r3, #2
 8101256:	440b      	add	r3, r1
 8101258:	3354      	adds	r3, #84	; 0x54
 810125a:	2200      	movs	r2, #0
 810125c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 810125e:	7bfb      	ldrb	r3, [r7, #15]
 8101260:	3301      	adds	r3, #1
 8101262:	73fb      	strb	r3, [r7, #15]
 8101264:	7bfa      	ldrb	r2, [r7, #15]
 8101266:	687b      	ldr	r3, [r7, #4]
 8101268:	685b      	ldr	r3, [r3, #4]
 810126a:	429a      	cmp	r2, r3
 810126c:	d3af      	bcc.n	81011ce <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 810126e:	2300      	movs	r3, #0
 8101270:	73fb      	strb	r3, [r7, #15]
 8101272:	e044      	b.n	81012fe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8101274:	7bfa      	ldrb	r2, [r7, #15]
 8101276:	6879      	ldr	r1, [r7, #4]
 8101278:	4613      	mov	r3, r2
 810127a:	00db      	lsls	r3, r3, #3
 810127c:	4413      	add	r3, r2
 810127e:	009b      	lsls	r3, r3, #2
 8101280:	440b      	add	r3, r1
 8101282:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8101286:	2200      	movs	r2, #0
 8101288:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 810128a:	7bfa      	ldrb	r2, [r7, #15]
 810128c:	6879      	ldr	r1, [r7, #4]
 810128e:	4613      	mov	r3, r2
 8101290:	00db      	lsls	r3, r3, #3
 8101292:	4413      	add	r3, r2
 8101294:	009b      	lsls	r3, r3, #2
 8101296:	440b      	add	r3, r1
 8101298:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 810129c:	7bfa      	ldrb	r2, [r7, #15]
 810129e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 81012a0:	7bfa      	ldrb	r2, [r7, #15]
 81012a2:	6879      	ldr	r1, [r7, #4]
 81012a4:	4613      	mov	r3, r2
 81012a6:	00db      	lsls	r3, r3, #3
 81012a8:	4413      	add	r3, r2
 81012aa:	009b      	lsls	r3, r3, #2
 81012ac:	440b      	add	r3, r1
 81012ae:	f503 7320 	add.w	r3, r3, #640	; 0x280
 81012b2:	2200      	movs	r2, #0
 81012b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 81012b6:	7bfa      	ldrb	r2, [r7, #15]
 81012b8:	6879      	ldr	r1, [r7, #4]
 81012ba:	4613      	mov	r3, r2
 81012bc:	00db      	lsls	r3, r3, #3
 81012be:	4413      	add	r3, r2
 81012c0:	009b      	lsls	r3, r3, #2
 81012c2:	440b      	add	r3, r1
 81012c4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 81012c8:	2200      	movs	r2, #0
 81012ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 81012cc:	7bfa      	ldrb	r2, [r7, #15]
 81012ce:	6879      	ldr	r1, [r7, #4]
 81012d0:	4613      	mov	r3, r2
 81012d2:	00db      	lsls	r3, r3, #3
 81012d4:	4413      	add	r3, r2
 81012d6:	009b      	lsls	r3, r3, #2
 81012d8:	440b      	add	r3, r1
 81012da:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 81012de:	2200      	movs	r2, #0
 81012e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 81012e2:	7bfa      	ldrb	r2, [r7, #15]
 81012e4:	6879      	ldr	r1, [r7, #4]
 81012e6:	4613      	mov	r3, r2
 81012e8:	00db      	lsls	r3, r3, #3
 81012ea:	4413      	add	r3, r2
 81012ec:	009b      	lsls	r3, r3, #2
 81012ee:	440b      	add	r3, r1
 81012f0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 81012f4:	2200      	movs	r2, #0
 81012f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81012f8:	7bfb      	ldrb	r3, [r7, #15]
 81012fa:	3301      	adds	r3, #1
 81012fc:	73fb      	strb	r3, [r7, #15]
 81012fe:	7bfa      	ldrb	r2, [r7, #15]
 8101300:	687b      	ldr	r3, [r7, #4]
 8101302:	685b      	ldr	r3, [r3, #4]
 8101304:	429a      	cmp	r2, r3
 8101306:	d3b5      	bcc.n	8101274 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8101308:	687b      	ldr	r3, [r7, #4]
 810130a:	681b      	ldr	r3, [r3, #0]
 810130c:	603b      	str	r3, [r7, #0]
 810130e:	687e      	ldr	r6, [r7, #4]
 8101310:	466d      	mov	r5, sp
 8101312:	f106 0410 	add.w	r4, r6, #16
 8101316:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101318:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810131a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810131c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810131e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8101322:	e885 0003 	stmia.w	r5, {r0, r1}
 8101326:	1d33      	adds	r3, r6, #4
 8101328:	cb0e      	ldmia	r3, {r1, r2, r3}
 810132a:	6838      	ldr	r0, [r7, #0]
 810132c:	f002 fefc 	bl	8104128 <USB_DevInit>
 8101330:	4603      	mov	r3, r0
 8101332:	2b00      	cmp	r3, #0
 8101334:	d005      	beq.n	8101342 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8101336:	687b      	ldr	r3, [r7, #4]
 8101338:	2202      	movs	r2, #2
 810133a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 810133e:	2301      	movs	r3, #1
 8101340:	e014      	b.n	810136c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8101342:	687b      	ldr	r3, [r7, #4]
 8101344:	2200      	movs	r2, #0
 8101346:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 810134a:	687b      	ldr	r3, [r7, #4]
 810134c:	2201      	movs	r2, #1
 810134e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8101352:	687b      	ldr	r3, [r7, #4]
 8101354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101356:	2b01      	cmp	r3, #1
 8101358:	d102      	bne.n	8101360 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 810135a:	6878      	ldr	r0, [r7, #4]
 810135c:	f001 f882 	bl	8102464 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8101360:	687b      	ldr	r3, [r7, #4]
 8101362:	681b      	ldr	r3, [r3, #0]
 8101364:	4618      	mov	r0, r3
 8101366:	f003 ff84 	bl	8105272 <USB_DevDisconnect>

  return HAL_OK;
 810136a:	2300      	movs	r3, #0
}
 810136c:	4618      	mov	r0, r3
 810136e:	3714      	adds	r7, #20
 8101370:	46bd      	mov	sp, r7
 8101372:	bdf0      	pop	{r4, r5, r6, r7, pc}

08101374 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8101374:	b580      	push	{r7, lr}
 8101376:	b084      	sub	sp, #16
 8101378:	af00      	add	r7, sp, #0
 810137a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 810137c:	687b      	ldr	r3, [r7, #4]
 810137e:	681b      	ldr	r3, [r3, #0]
 8101380:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8101382:	687b      	ldr	r3, [r7, #4]
 8101384:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8101388:	2b01      	cmp	r3, #1
 810138a:	d101      	bne.n	8101390 <HAL_PCD_Start+0x1c>
 810138c:	2302      	movs	r3, #2
 810138e:	e01c      	b.n	81013ca <HAL_PCD_Start+0x56>
 8101390:	687b      	ldr	r3, [r7, #4]
 8101392:	2201      	movs	r2, #1
 8101394:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8101398:	687b      	ldr	r3, [r7, #4]
 810139a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810139c:	2b01      	cmp	r3, #1
 810139e:	d105      	bne.n	81013ac <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 81013a0:	68fb      	ldr	r3, [r7, #12]
 81013a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81013a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 81013a8:	68fb      	ldr	r3, [r7, #12]
 81013aa:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 81013ac:	687b      	ldr	r3, [r7, #4]
 81013ae:	681b      	ldr	r3, [r3, #0]
 81013b0:	4618      	mov	r0, r3
 81013b2:	f002 fe4b 	bl	810404c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 81013b6:	687b      	ldr	r3, [r7, #4]
 81013b8:	681b      	ldr	r3, [r3, #0]
 81013ba:	4618      	mov	r0, r3
 81013bc:	f003 ff38 	bl	8105230 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 81013c0:	687b      	ldr	r3, [r7, #4]
 81013c2:	2200      	movs	r2, #0
 81013c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 81013c8:	2300      	movs	r3, #0
}
 81013ca:	4618      	mov	r0, r3
 81013cc:	3710      	adds	r7, #16
 81013ce:	46bd      	mov	sp, r7
 81013d0:	bd80      	pop	{r7, pc}

081013d2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 81013d2:	b590      	push	{r4, r7, lr}
 81013d4:	b08d      	sub	sp, #52	; 0x34
 81013d6:	af00      	add	r7, sp, #0
 81013d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 81013da:	687b      	ldr	r3, [r7, #4]
 81013dc:	681b      	ldr	r3, [r3, #0]
 81013de:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81013e0:	6a3b      	ldr	r3, [r7, #32]
 81013e2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 81013e4:	687b      	ldr	r3, [r7, #4]
 81013e6:	681b      	ldr	r3, [r3, #0]
 81013e8:	4618      	mov	r0, r3
 81013ea:	f003 fff6 	bl	81053da <USB_GetMode>
 81013ee:	4603      	mov	r3, r0
 81013f0:	2b00      	cmp	r3, #0
 81013f2:	f040 847e 	bne.w	8101cf2 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 81013f6:	687b      	ldr	r3, [r7, #4]
 81013f8:	681b      	ldr	r3, [r3, #0]
 81013fa:	4618      	mov	r0, r3
 81013fc:	f003 ff5a 	bl	81052b4 <USB_ReadInterrupts>
 8101400:	4603      	mov	r3, r0
 8101402:	2b00      	cmp	r3, #0
 8101404:	f000 8474 	beq.w	8101cf0 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8101408:	69fb      	ldr	r3, [r7, #28]
 810140a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810140e:	689b      	ldr	r3, [r3, #8]
 8101410:	0a1b      	lsrs	r3, r3, #8
 8101412:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8101416:	687b      	ldr	r3, [r7, #4]
 8101418:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 810141c:	687b      	ldr	r3, [r7, #4]
 810141e:	681b      	ldr	r3, [r3, #0]
 8101420:	4618      	mov	r0, r3
 8101422:	f003 ff47 	bl	81052b4 <USB_ReadInterrupts>
 8101426:	4603      	mov	r3, r0
 8101428:	f003 0302 	and.w	r3, r3, #2
 810142c:	2b02      	cmp	r3, #2
 810142e:	d107      	bne.n	8101440 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8101430:	687b      	ldr	r3, [r7, #4]
 8101432:	681b      	ldr	r3, [r3, #0]
 8101434:	695a      	ldr	r2, [r3, #20]
 8101436:	687b      	ldr	r3, [r7, #4]
 8101438:	681b      	ldr	r3, [r3, #0]
 810143a:	f002 0202 	and.w	r2, r2, #2
 810143e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8101440:	687b      	ldr	r3, [r7, #4]
 8101442:	681b      	ldr	r3, [r3, #0]
 8101444:	4618      	mov	r0, r3
 8101446:	f003 ff35 	bl	81052b4 <USB_ReadInterrupts>
 810144a:	4603      	mov	r3, r0
 810144c:	f003 0310 	and.w	r3, r3, #16
 8101450:	2b10      	cmp	r3, #16
 8101452:	d161      	bne.n	8101518 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8101454:	687b      	ldr	r3, [r7, #4]
 8101456:	681b      	ldr	r3, [r3, #0]
 8101458:	699a      	ldr	r2, [r3, #24]
 810145a:	687b      	ldr	r3, [r7, #4]
 810145c:	681b      	ldr	r3, [r3, #0]
 810145e:	f022 0210 	bic.w	r2, r2, #16
 8101462:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8101464:	6a3b      	ldr	r3, [r7, #32]
 8101466:	6a1b      	ldr	r3, [r3, #32]
 8101468:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 810146a:	69bb      	ldr	r3, [r7, #24]
 810146c:	f003 020f 	and.w	r2, r3, #15
 8101470:	4613      	mov	r3, r2
 8101472:	00db      	lsls	r3, r3, #3
 8101474:	4413      	add	r3, r2
 8101476:	009b      	lsls	r3, r3, #2
 8101478:	f503 731e 	add.w	r3, r3, #632	; 0x278
 810147c:	687a      	ldr	r2, [r7, #4]
 810147e:	4413      	add	r3, r2
 8101480:	3304      	adds	r3, #4
 8101482:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8101484:	69bb      	ldr	r3, [r7, #24]
 8101486:	0c5b      	lsrs	r3, r3, #17
 8101488:	f003 030f 	and.w	r3, r3, #15
 810148c:	2b02      	cmp	r3, #2
 810148e:	d124      	bne.n	81014da <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8101490:	69ba      	ldr	r2, [r7, #24]
 8101492:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8101496:	4013      	ands	r3, r2
 8101498:	2b00      	cmp	r3, #0
 810149a:	d035      	beq.n	8101508 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 810149c:	697b      	ldr	r3, [r7, #20]
 810149e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 81014a0:	69bb      	ldr	r3, [r7, #24]
 81014a2:	091b      	lsrs	r3, r3, #4
 81014a4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 81014a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 81014aa:	b29b      	uxth	r3, r3
 81014ac:	461a      	mov	r2, r3
 81014ae:	6a38      	ldr	r0, [r7, #32]
 81014b0:	f003 fd6c 	bl	8104f8c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 81014b4:	697b      	ldr	r3, [r7, #20]
 81014b6:	691a      	ldr	r2, [r3, #16]
 81014b8:	69bb      	ldr	r3, [r7, #24]
 81014ba:	091b      	lsrs	r3, r3, #4
 81014bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 81014c0:	441a      	add	r2, r3
 81014c2:	697b      	ldr	r3, [r7, #20]
 81014c4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 81014c6:	697b      	ldr	r3, [r7, #20]
 81014c8:	6a1a      	ldr	r2, [r3, #32]
 81014ca:	69bb      	ldr	r3, [r7, #24]
 81014cc:	091b      	lsrs	r3, r3, #4
 81014ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 81014d2:	441a      	add	r2, r3
 81014d4:	697b      	ldr	r3, [r7, #20]
 81014d6:	621a      	str	r2, [r3, #32]
 81014d8:	e016      	b.n	8101508 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 81014da:	69bb      	ldr	r3, [r7, #24]
 81014dc:	0c5b      	lsrs	r3, r3, #17
 81014de:	f003 030f 	and.w	r3, r3, #15
 81014e2:	2b06      	cmp	r3, #6
 81014e4:	d110      	bne.n	8101508 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 81014e6:	687b      	ldr	r3, [r7, #4]
 81014e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 81014ec:	2208      	movs	r2, #8
 81014ee:	4619      	mov	r1, r3
 81014f0:	6a38      	ldr	r0, [r7, #32]
 81014f2:	f003 fd4b 	bl	8104f8c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 81014f6:	697b      	ldr	r3, [r7, #20]
 81014f8:	6a1a      	ldr	r2, [r3, #32]
 81014fa:	69bb      	ldr	r3, [r7, #24]
 81014fc:	091b      	lsrs	r3, r3, #4
 81014fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8101502:	441a      	add	r2, r3
 8101504:	697b      	ldr	r3, [r7, #20]
 8101506:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8101508:	687b      	ldr	r3, [r7, #4]
 810150a:	681b      	ldr	r3, [r3, #0]
 810150c:	699a      	ldr	r2, [r3, #24]
 810150e:	687b      	ldr	r3, [r7, #4]
 8101510:	681b      	ldr	r3, [r3, #0]
 8101512:	f042 0210 	orr.w	r2, r2, #16
 8101516:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8101518:	687b      	ldr	r3, [r7, #4]
 810151a:	681b      	ldr	r3, [r3, #0]
 810151c:	4618      	mov	r0, r3
 810151e:	f003 fec9 	bl	81052b4 <USB_ReadInterrupts>
 8101522:	4603      	mov	r3, r0
 8101524:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8101528:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 810152c:	f040 80a7 	bne.w	810167e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8101530:	2300      	movs	r3, #0
 8101532:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8101534:	687b      	ldr	r3, [r7, #4]
 8101536:	681b      	ldr	r3, [r3, #0]
 8101538:	4618      	mov	r0, r3
 810153a:	f003 fece 	bl	81052da <USB_ReadDevAllOutEpInterrupt>
 810153e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8101540:	e099      	b.n	8101676 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8101542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101544:	f003 0301 	and.w	r3, r3, #1
 8101548:	2b00      	cmp	r3, #0
 810154a:	f000 808e 	beq.w	810166a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 810154e:	687b      	ldr	r3, [r7, #4]
 8101550:	681b      	ldr	r3, [r3, #0]
 8101552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101554:	b2d2      	uxtb	r2, r2
 8101556:	4611      	mov	r1, r2
 8101558:	4618      	mov	r0, r3
 810155a:	f003 fef2 	bl	8105342 <USB_ReadDevOutEPInterrupt>
 810155e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8101560:	693b      	ldr	r3, [r7, #16]
 8101562:	f003 0301 	and.w	r3, r3, #1
 8101566:	2b00      	cmp	r3, #0
 8101568:	d00c      	beq.n	8101584 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 810156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810156c:	015a      	lsls	r2, r3, #5
 810156e:	69fb      	ldr	r3, [r7, #28]
 8101570:	4413      	add	r3, r2
 8101572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8101576:	461a      	mov	r2, r3
 8101578:	2301      	movs	r3, #1
 810157a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 810157c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 810157e:	6878      	ldr	r0, [r7, #4]
 8101580:	f000 fe96 	bl	81022b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8101584:	693b      	ldr	r3, [r7, #16]
 8101586:	f003 0308 	and.w	r3, r3, #8
 810158a:	2b00      	cmp	r3, #0
 810158c:	d00c      	beq.n	81015a8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 810158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101590:	015a      	lsls	r2, r3, #5
 8101592:	69fb      	ldr	r3, [r7, #28]
 8101594:	4413      	add	r3, r2
 8101596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810159a:	461a      	mov	r2, r3
 810159c:	2308      	movs	r3, #8
 810159e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 81015a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 81015a2:	6878      	ldr	r0, [r7, #4]
 81015a4:	f000 fed2 	bl	810234c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 81015a8:	693b      	ldr	r3, [r7, #16]
 81015aa:	f003 0310 	and.w	r3, r3, #16
 81015ae:	2b00      	cmp	r3, #0
 81015b0:	d008      	beq.n	81015c4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 81015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81015b4:	015a      	lsls	r2, r3, #5
 81015b6:	69fb      	ldr	r3, [r7, #28]
 81015b8:	4413      	add	r3, r2
 81015ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81015be:	461a      	mov	r2, r3
 81015c0:	2310      	movs	r3, #16
 81015c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 81015c4:	693b      	ldr	r3, [r7, #16]
 81015c6:	f003 0302 	and.w	r3, r3, #2
 81015ca:	2b00      	cmp	r3, #0
 81015cc:	d030      	beq.n	8101630 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 81015ce:	6a3b      	ldr	r3, [r7, #32]
 81015d0:	695b      	ldr	r3, [r3, #20]
 81015d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81015d6:	2b80      	cmp	r3, #128	; 0x80
 81015d8:	d109      	bne.n	81015ee <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 81015da:	69fb      	ldr	r3, [r7, #28]
 81015dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81015e0:	685b      	ldr	r3, [r3, #4]
 81015e2:	69fa      	ldr	r2, [r7, #28]
 81015e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 81015e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 81015ec:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 81015ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81015f0:	4613      	mov	r3, r2
 81015f2:	00db      	lsls	r3, r3, #3
 81015f4:	4413      	add	r3, r2
 81015f6:	009b      	lsls	r3, r3, #2
 81015f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 81015fc:	687a      	ldr	r2, [r7, #4]
 81015fe:	4413      	add	r3, r2
 8101600:	3304      	adds	r3, #4
 8101602:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8101604:	697b      	ldr	r3, [r7, #20]
 8101606:	78db      	ldrb	r3, [r3, #3]
 8101608:	2b01      	cmp	r3, #1
 810160a:	d108      	bne.n	810161e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 810160c:	697b      	ldr	r3, [r7, #20]
 810160e:	2200      	movs	r2, #0
 8101610:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8101612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101614:	b2db      	uxtb	r3, r3
 8101616:	4619      	mov	r1, r3
 8101618:	6878      	ldr	r0, [r7, #4]
 810161a:	f005 ff59 	bl	81074d0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 810161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101620:	015a      	lsls	r2, r3, #5
 8101622:	69fb      	ldr	r3, [r7, #28]
 8101624:	4413      	add	r3, r2
 8101626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810162a:	461a      	mov	r2, r3
 810162c:	2302      	movs	r3, #2
 810162e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8101630:	693b      	ldr	r3, [r7, #16]
 8101632:	f003 0320 	and.w	r3, r3, #32
 8101636:	2b00      	cmp	r3, #0
 8101638:	d008      	beq.n	810164c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 810163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810163c:	015a      	lsls	r2, r3, #5
 810163e:	69fb      	ldr	r3, [r7, #28]
 8101640:	4413      	add	r3, r2
 8101642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8101646:	461a      	mov	r2, r3
 8101648:	2320      	movs	r3, #32
 810164a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 810164c:	693b      	ldr	r3, [r7, #16]
 810164e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8101652:	2b00      	cmp	r3, #0
 8101654:	d009      	beq.n	810166a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8101656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101658:	015a      	lsls	r2, r3, #5
 810165a:	69fb      	ldr	r3, [r7, #28]
 810165c:	4413      	add	r3, r2
 810165e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8101662:	461a      	mov	r2, r3
 8101664:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8101668:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 810166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810166c:	3301      	adds	r3, #1
 810166e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8101670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101672:	085b      	lsrs	r3, r3, #1
 8101674:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8101676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101678:	2b00      	cmp	r3, #0
 810167a:	f47f af62 	bne.w	8101542 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 810167e:	687b      	ldr	r3, [r7, #4]
 8101680:	681b      	ldr	r3, [r3, #0]
 8101682:	4618      	mov	r0, r3
 8101684:	f003 fe16 	bl	81052b4 <USB_ReadInterrupts>
 8101688:	4603      	mov	r3, r0
 810168a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810168e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8101692:	f040 80a4 	bne.w	81017de <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8101696:	687b      	ldr	r3, [r7, #4]
 8101698:	681b      	ldr	r3, [r3, #0]
 810169a:	4618      	mov	r0, r3
 810169c:	f003 fe37 	bl	810530e <USB_ReadDevAllInEpInterrupt>
 81016a0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 81016a2:	2300      	movs	r3, #0
 81016a4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 81016a6:	e096      	b.n	81017d6 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 81016a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81016aa:	f003 0301 	and.w	r3, r3, #1
 81016ae:	2b00      	cmp	r3, #0
 81016b0:	f000 808b 	beq.w	81017ca <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 81016b4:	687b      	ldr	r3, [r7, #4]
 81016b6:	681b      	ldr	r3, [r3, #0]
 81016b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81016ba:	b2d2      	uxtb	r2, r2
 81016bc:	4611      	mov	r1, r2
 81016be:	4618      	mov	r0, r3
 81016c0:	f003 fe5d 	bl	810537e <USB_ReadDevInEPInterrupt>
 81016c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 81016c6:	693b      	ldr	r3, [r7, #16]
 81016c8:	f003 0301 	and.w	r3, r3, #1
 81016cc:	2b00      	cmp	r3, #0
 81016ce:	d020      	beq.n	8101712 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 81016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81016d2:	f003 030f 	and.w	r3, r3, #15
 81016d6:	2201      	movs	r2, #1
 81016d8:	fa02 f303 	lsl.w	r3, r2, r3
 81016dc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 81016de:	69fb      	ldr	r3, [r7, #28]
 81016e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81016e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81016e6:	68fb      	ldr	r3, [r7, #12]
 81016e8:	43db      	mvns	r3, r3
 81016ea:	69f9      	ldr	r1, [r7, #28]
 81016ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 81016f0:	4013      	ands	r3, r2
 81016f2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 81016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81016f6:	015a      	lsls	r2, r3, #5
 81016f8:	69fb      	ldr	r3, [r7, #28]
 81016fa:	4413      	add	r3, r2
 81016fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8101700:	461a      	mov	r2, r3
 8101702:	2301      	movs	r3, #1
 8101704:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8101706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101708:	b2db      	uxtb	r3, r3
 810170a:	4619      	mov	r1, r3
 810170c:	6878      	ldr	r0, [r7, #4]
 810170e:	f005 fe4a 	bl	81073a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8101712:	693b      	ldr	r3, [r7, #16]
 8101714:	f003 0308 	and.w	r3, r3, #8
 8101718:	2b00      	cmp	r3, #0
 810171a:	d008      	beq.n	810172e <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 810171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810171e:	015a      	lsls	r2, r3, #5
 8101720:	69fb      	ldr	r3, [r7, #28]
 8101722:	4413      	add	r3, r2
 8101724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8101728:	461a      	mov	r2, r3
 810172a:	2308      	movs	r3, #8
 810172c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 810172e:	693b      	ldr	r3, [r7, #16]
 8101730:	f003 0310 	and.w	r3, r3, #16
 8101734:	2b00      	cmp	r3, #0
 8101736:	d008      	beq.n	810174a <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8101738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810173a:	015a      	lsls	r2, r3, #5
 810173c:	69fb      	ldr	r3, [r7, #28]
 810173e:	4413      	add	r3, r2
 8101740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8101744:	461a      	mov	r2, r3
 8101746:	2310      	movs	r3, #16
 8101748:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 810174a:	693b      	ldr	r3, [r7, #16]
 810174c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101750:	2b00      	cmp	r3, #0
 8101752:	d008      	beq.n	8101766 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8101754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101756:	015a      	lsls	r2, r3, #5
 8101758:	69fb      	ldr	r3, [r7, #28]
 810175a:	4413      	add	r3, r2
 810175c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8101760:	461a      	mov	r2, r3
 8101762:	2340      	movs	r3, #64	; 0x40
 8101764:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8101766:	693b      	ldr	r3, [r7, #16]
 8101768:	f003 0302 	and.w	r3, r3, #2
 810176c:	2b00      	cmp	r3, #0
 810176e:	d023      	beq.n	81017b8 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8101770:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8101772:	6a38      	ldr	r0, [r7, #32]
 8101774:	f002 fe24 	bl	81043c0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8101778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810177a:	4613      	mov	r3, r2
 810177c:	00db      	lsls	r3, r3, #3
 810177e:	4413      	add	r3, r2
 8101780:	009b      	lsls	r3, r3, #2
 8101782:	3338      	adds	r3, #56	; 0x38
 8101784:	687a      	ldr	r2, [r7, #4]
 8101786:	4413      	add	r3, r2
 8101788:	3304      	adds	r3, #4
 810178a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 810178c:	697b      	ldr	r3, [r7, #20]
 810178e:	78db      	ldrb	r3, [r3, #3]
 8101790:	2b01      	cmp	r3, #1
 8101792:	d108      	bne.n	81017a6 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8101794:	697b      	ldr	r3, [r7, #20]
 8101796:	2200      	movs	r2, #0
 8101798:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 810179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810179c:	b2db      	uxtb	r3, r3
 810179e:	4619      	mov	r1, r3
 81017a0:	6878      	ldr	r0, [r7, #4]
 81017a2:	f005 fea7 	bl	81074f4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 81017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81017a8:	015a      	lsls	r2, r3, #5
 81017aa:	69fb      	ldr	r3, [r7, #28]
 81017ac:	4413      	add	r3, r2
 81017ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81017b2:	461a      	mov	r2, r3
 81017b4:	2302      	movs	r3, #2
 81017b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 81017b8:	693b      	ldr	r3, [r7, #16]
 81017ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81017be:	2b00      	cmp	r3, #0
 81017c0:	d003      	beq.n	81017ca <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 81017c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 81017c4:	6878      	ldr	r0, [r7, #4]
 81017c6:	f000 fcea 	bl	810219e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 81017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81017cc:	3301      	adds	r3, #1
 81017ce:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 81017d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81017d2:	085b      	lsrs	r3, r3, #1
 81017d4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 81017d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81017d8:	2b00      	cmp	r3, #0
 81017da:	f47f af65 	bne.w	81016a8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 81017de:	687b      	ldr	r3, [r7, #4]
 81017e0:	681b      	ldr	r3, [r3, #0]
 81017e2:	4618      	mov	r0, r3
 81017e4:	f003 fd66 	bl	81052b4 <USB_ReadInterrupts>
 81017e8:	4603      	mov	r3, r0
 81017ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 81017ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 81017f2:	d122      	bne.n	810183a <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 81017f4:	69fb      	ldr	r3, [r7, #28]
 81017f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81017fa:	685b      	ldr	r3, [r3, #4]
 81017fc:	69fa      	ldr	r2, [r7, #28]
 81017fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8101802:	f023 0301 	bic.w	r3, r3, #1
 8101806:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8101808:	687b      	ldr	r3, [r7, #4]
 810180a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 810180e:	2b01      	cmp	r3, #1
 8101810:	d108      	bne.n	8101824 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8101812:	687b      	ldr	r3, [r7, #4]
 8101814:	2200      	movs	r2, #0
 8101816:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 810181a:	2100      	movs	r1, #0
 810181c:	6878      	ldr	r0, [r7, #4]
 810181e:	f006 f8d9 	bl	81079d4 <HAL_PCDEx_LPM_Callback>
 8101822:	e002      	b.n	810182a <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8101824:	6878      	ldr	r0, [r7, #4]
 8101826:	f005 fe2b 	bl	8107480 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 810182a:	687b      	ldr	r3, [r7, #4]
 810182c:	681b      	ldr	r3, [r3, #0]
 810182e:	695a      	ldr	r2, [r3, #20]
 8101830:	687b      	ldr	r3, [r7, #4]
 8101832:	681b      	ldr	r3, [r3, #0]
 8101834:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8101838:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 810183a:	687b      	ldr	r3, [r7, #4]
 810183c:	681b      	ldr	r3, [r3, #0]
 810183e:	4618      	mov	r0, r3
 8101840:	f003 fd38 	bl	81052b4 <USB_ReadInterrupts>
 8101844:	4603      	mov	r3, r0
 8101846:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810184a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810184e:	d112      	bne.n	8101876 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8101850:	69fb      	ldr	r3, [r7, #28]
 8101852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8101856:	689b      	ldr	r3, [r3, #8]
 8101858:	f003 0301 	and.w	r3, r3, #1
 810185c:	2b01      	cmp	r3, #1
 810185e:	d102      	bne.n	8101866 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8101860:	6878      	ldr	r0, [r7, #4]
 8101862:	f005 fde7 	bl	8107434 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8101866:	687b      	ldr	r3, [r7, #4]
 8101868:	681b      	ldr	r3, [r3, #0]
 810186a:	695a      	ldr	r2, [r3, #20]
 810186c:	687b      	ldr	r3, [r7, #4]
 810186e:	681b      	ldr	r3, [r3, #0]
 8101870:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8101874:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8101876:	687b      	ldr	r3, [r7, #4]
 8101878:	681b      	ldr	r3, [r3, #0]
 810187a:	4618      	mov	r0, r3
 810187c:	f003 fd1a 	bl	81052b4 <USB_ReadInterrupts>
 8101880:	4603      	mov	r3, r0
 8101882:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8101886:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810188a:	d121      	bne.n	81018d0 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 810188c:	687b      	ldr	r3, [r7, #4]
 810188e:	681b      	ldr	r3, [r3, #0]
 8101890:	695a      	ldr	r2, [r3, #20]
 8101892:	687b      	ldr	r3, [r7, #4]
 8101894:	681b      	ldr	r3, [r3, #0]
 8101896:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 810189a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 810189c:	687b      	ldr	r3, [r7, #4]
 810189e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 81018a2:	2b00      	cmp	r3, #0
 81018a4:	d111      	bne.n	81018ca <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 81018a6:	687b      	ldr	r3, [r7, #4]
 81018a8:	2201      	movs	r2, #1
 81018aa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 81018ae:	687b      	ldr	r3, [r7, #4]
 81018b0:	681b      	ldr	r3, [r3, #0]
 81018b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81018b4:	089b      	lsrs	r3, r3, #2
 81018b6:	f003 020f 	and.w	r2, r3, #15
 81018ba:	687b      	ldr	r3, [r7, #4]
 81018bc:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 81018c0:	2101      	movs	r1, #1
 81018c2:	6878      	ldr	r0, [r7, #4]
 81018c4:	f006 f886 	bl	81079d4 <HAL_PCDEx_LPM_Callback>
 81018c8:	e002      	b.n	81018d0 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 81018ca:	6878      	ldr	r0, [r7, #4]
 81018cc:	f005 fdb2 	bl	8107434 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 81018d0:	687b      	ldr	r3, [r7, #4]
 81018d2:	681b      	ldr	r3, [r3, #0]
 81018d4:	4618      	mov	r0, r3
 81018d6:	f003 fced 	bl	81052b4 <USB_ReadInterrupts>
 81018da:	4603      	mov	r3, r0
 81018dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81018e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81018e4:	f040 80b5 	bne.w	8101a52 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 81018e8:	69fb      	ldr	r3, [r7, #28]
 81018ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81018ee:	685b      	ldr	r3, [r3, #4]
 81018f0:	69fa      	ldr	r2, [r7, #28]
 81018f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 81018f6:	f023 0301 	bic.w	r3, r3, #1
 81018fa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 81018fc:	687b      	ldr	r3, [r7, #4]
 81018fe:	681b      	ldr	r3, [r3, #0]
 8101900:	2110      	movs	r1, #16
 8101902:	4618      	mov	r0, r3
 8101904:	f002 fd5c 	bl	81043c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8101908:	2300      	movs	r3, #0
 810190a:	62fb      	str	r3, [r7, #44]	; 0x2c
 810190c:	e046      	b.n	810199c <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 810190e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101910:	015a      	lsls	r2, r3, #5
 8101912:	69fb      	ldr	r3, [r7, #28]
 8101914:	4413      	add	r3, r2
 8101916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810191a:	461a      	mov	r2, r3
 810191c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8101920:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8101922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101924:	015a      	lsls	r2, r3, #5
 8101926:	69fb      	ldr	r3, [r7, #28]
 8101928:	4413      	add	r3, r2
 810192a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810192e:	681b      	ldr	r3, [r3, #0]
 8101930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8101932:	0151      	lsls	r1, r2, #5
 8101934:	69fa      	ldr	r2, [r7, #28]
 8101936:	440a      	add	r2, r1
 8101938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 810193c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8101940:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8101942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101944:	015a      	lsls	r2, r3, #5
 8101946:	69fb      	ldr	r3, [r7, #28]
 8101948:	4413      	add	r3, r2
 810194a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810194e:	461a      	mov	r2, r3
 8101950:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8101954:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8101956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101958:	015a      	lsls	r2, r3, #5
 810195a:	69fb      	ldr	r3, [r7, #28]
 810195c:	4413      	add	r3, r2
 810195e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8101962:	681b      	ldr	r3, [r3, #0]
 8101964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8101966:	0151      	lsls	r1, r2, #5
 8101968:	69fa      	ldr	r2, [r7, #28]
 810196a:	440a      	add	r2, r1
 810196c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8101970:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8101974:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8101976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101978:	015a      	lsls	r2, r3, #5
 810197a:	69fb      	ldr	r3, [r7, #28]
 810197c:	4413      	add	r3, r2
 810197e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8101982:	681b      	ldr	r3, [r3, #0]
 8101984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8101986:	0151      	lsls	r1, r2, #5
 8101988:	69fa      	ldr	r2, [r7, #28]
 810198a:	440a      	add	r2, r1
 810198c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8101990:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8101994:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8101996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101998:	3301      	adds	r3, #1
 810199a:	62fb      	str	r3, [r7, #44]	; 0x2c
 810199c:	687b      	ldr	r3, [r7, #4]
 810199e:	685b      	ldr	r3, [r3, #4]
 81019a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81019a2:	429a      	cmp	r2, r3
 81019a4:	d3b3      	bcc.n	810190e <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 81019a6:	69fb      	ldr	r3, [r7, #28]
 81019a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81019ac:	69db      	ldr	r3, [r3, #28]
 81019ae:	69fa      	ldr	r2, [r7, #28]
 81019b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 81019b4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 81019b8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 81019ba:	687b      	ldr	r3, [r7, #4]
 81019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81019be:	2b00      	cmp	r3, #0
 81019c0:	d016      	beq.n	81019f0 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 81019c2:	69fb      	ldr	r3, [r7, #28]
 81019c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81019c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81019cc:	69fa      	ldr	r2, [r7, #28]
 81019ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 81019d2:	f043 030b 	orr.w	r3, r3, #11
 81019d6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 81019da:	69fb      	ldr	r3, [r7, #28]
 81019dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81019e2:	69fa      	ldr	r2, [r7, #28]
 81019e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 81019e8:	f043 030b 	orr.w	r3, r3, #11
 81019ec:	6453      	str	r3, [r2, #68]	; 0x44
 81019ee:	e015      	b.n	8101a1c <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 81019f0:	69fb      	ldr	r3, [r7, #28]
 81019f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81019f6:	695b      	ldr	r3, [r3, #20]
 81019f8:	69fa      	ldr	r2, [r7, #28]
 81019fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 81019fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8101a02:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8101a06:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8101a08:	69fb      	ldr	r3, [r7, #28]
 8101a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8101a0e:	691b      	ldr	r3, [r3, #16]
 8101a10:	69fa      	ldr	r2, [r7, #28]
 8101a12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8101a16:	f043 030b 	orr.w	r3, r3, #11
 8101a1a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8101a1c:	69fb      	ldr	r3, [r7, #28]
 8101a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8101a22:	681b      	ldr	r3, [r3, #0]
 8101a24:	69fa      	ldr	r2, [r7, #28]
 8101a26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8101a2a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8101a2e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8101a30:	687b      	ldr	r3, [r7, #4]
 8101a32:	681a      	ldr	r2, [r3, #0]
 8101a34:	687b      	ldr	r3, [r7, #4]
 8101a36:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8101a3a:	4619      	mov	r1, r3
 8101a3c:	4610      	mov	r0, r2
 8101a3e:	f003 fcfd 	bl	810543c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8101a42:	687b      	ldr	r3, [r7, #4]
 8101a44:	681b      	ldr	r3, [r3, #0]
 8101a46:	695a      	ldr	r2, [r3, #20]
 8101a48:	687b      	ldr	r3, [r7, #4]
 8101a4a:	681b      	ldr	r3, [r3, #0]
 8101a4c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8101a50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8101a52:	687b      	ldr	r3, [r7, #4]
 8101a54:	681b      	ldr	r3, [r3, #0]
 8101a56:	4618      	mov	r0, r3
 8101a58:	f003 fc2c 	bl	81052b4 <USB_ReadInterrupts>
 8101a5c:	4603      	mov	r3, r0
 8101a5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8101a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8101a66:	d124      	bne.n	8101ab2 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8101a68:	687b      	ldr	r3, [r7, #4]
 8101a6a:	681b      	ldr	r3, [r3, #0]
 8101a6c:	4618      	mov	r0, r3
 8101a6e:	f003 fcc2 	bl	81053f6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8101a72:	687b      	ldr	r3, [r7, #4]
 8101a74:	681b      	ldr	r3, [r3, #0]
 8101a76:	4618      	mov	r0, r3
 8101a78:	f002 fd1f 	bl	81044ba <USB_GetDevSpeed>
 8101a7c:	4603      	mov	r3, r0
 8101a7e:	461a      	mov	r2, r3
 8101a80:	687b      	ldr	r3, [r7, #4]
 8101a82:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8101a84:	687b      	ldr	r3, [r7, #4]
 8101a86:	681c      	ldr	r4, [r3, #0]
 8101a88:	f001 fbc4 	bl	8103214 <HAL_RCC_GetHCLKFreq>
 8101a8c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8101a8e:	687b      	ldr	r3, [r7, #4]
 8101a90:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8101a92:	b2db      	uxtb	r3, r3
 8101a94:	461a      	mov	r2, r3
 8101a96:	4620      	mov	r0, r4
 8101a98:	f002 fa3c 	bl	8103f14 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8101a9c:	6878      	ldr	r0, [r7, #4]
 8101a9e:	f005 fcaa 	bl	81073f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8101aa2:	687b      	ldr	r3, [r7, #4]
 8101aa4:	681b      	ldr	r3, [r3, #0]
 8101aa6:	695a      	ldr	r2, [r3, #20]
 8101aa8:	687b      	ldr	r3, [r7, #4]
 8101aaa:	681b      	ldr	r3, [r3, #0]
 8101aac:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8101ab0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8101ab2:	687b      	ldr	r3, [r7, #4]
 8101ab4:	681b      	ldr	r3, [r3, #0]
 8101ab6:	4618      	mov	r0, r3
 8101ab8:	f003 fbfc 	bl	81052b4 <USB_ReadInterrupts>
 8101abc:	4603      	mov	r3, r0
 8101abe:	f003 0308 	and.w	r3, r3, #8
 8101ac2:	2b08      	cmp	r3, #8
 8101ac4:	d10a      	bne.n	8101adc <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8101ac6:	6878      	ldr	r0, [r7, #4]
 8101ac8:	f005 fc87 	bl	81073da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8101acc:	687b      	ldr	r3, [r7, #4]
 8101ace:	681b      	ldr	r3, [r3, #0]
 8101ad0:	695a      	ldr	r2, [r3, #20]
 8101ad2:	687b      	ldr	r3, [r7, #4]
 8101ad4:	681b      	ldr	r3, [r3, #0]
 8101ad6:	f002 0208 	and.w	r2, r2, #8
 8101ada:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8101adc:	687b      	ldr	r3, [r7, #4]
 8101ade:	681b      	ldr	r3, [r3, #0]
 8101ae0:	4618      	mov	r0, r3
 8101ae2:	f003 fbe7 	bl	81052b4 <USB_ReadInterrupts>
 8101ae6:	4603      	mov	r3, r0
 8101ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101aec:	2b80      	cmp	r3, #128	; 0x80
 8101aee:	d122      	bne.n	8101b36 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8101af0:	6a3b      	ldr	r3, [r7, #32]
 8101af2:	699b      	ldr	r3, [r3, #24]
 8101af4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8101af8:	6a3b      	ldr	r3, [r7, #32]
 8101afa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8101afc:	2301      	movs	r3, #1
 8101afe:	627b      	str	r3, [r7, #36]	; 0x24
 8101b00:	e014      	b.n	8101b2c <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8101b02:	6879      	ldr	r1, [r7, #4]
 8101b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101b06:	4613      	mov	r3, r2
 8101b08:	00db      	lsls	r3, r3, #3
 8101b0a:	4413      	add	r3, r2
 8101b0c:	009b      	lsls	r3, r3, #2
 8101b0e:	440b      	add	r3, r1
 8101b10:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8101b14:	781b      	ldrb	r3, [r3, #0]
 8101b16:	2b01      	cmp	r3, #1
 8101b18:	d105      	bne.n	8101b26 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8101b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101b1c:	b2db      	uxtb	r3, r3
 8101b1e:	4619      	mov	r1, r3
 8101b20:	6878      	ldr	r0, [r7, #4]
 8101b22:	f000 fb0b 	bl	810213c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8101b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101b28:	3301      	adds	r3, #1
 8101b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8101b2c:	687b      	ldr	r3, [r7, #4]
 8101b2e:	685b      	ldr	r3, [r3, #4]
 8101b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101b32:	429a      	cmp	r2, r3
 8101b34:	d3e5      	bcc.n	8101b02 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8101b36:	687b      	ldr	r3, [r7, #4]
 8101b38:	681b      	ldr	r3, [r3, #0]
 8101b3a:	4618      	mov	r0, r3
 8101b3c:	f003 fbba 	bl	81052b4 <USB_ReadInterrupts>
 8101b40:	4603      	mov	r3, r0
 8101b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101b46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8101b4a:	d13b      	bne.n	8101bc4 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8101b4c:	2301      	movs	r3, #1
 8101b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8101b50:	e02b      	b.n	8101baa <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8101b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101b54:	015a      	lsls	r2, r3, #5
 8101b56:	69fb      	ldr	r3, [r7, #28]
 8101b58:	4413      	add	r3, r2
 8101b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8101b5e:	681b      	ldr	r3, [r3, #0]
 8101b60:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8101b62:	6879      	ldr	r1, [r7, #4]
 8101b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101b66:	4613      	mov	r3, r2
 8101b68:	00db      	lsls	r3, r3, #3
 8101b6a:	4413      	add	r3, r2
 8101b6c:	009b      	lsls	r3, r3, #2
 8101b6e:	440b      	add	r3, r1
 8101b70:	3340      	adds	r3, #64	; 0x40
 8101b72:	781b      	ldrb	r3, [r3, #0]
 8101b74:	2b01      	cmp	r3, #1
 8101b76:	d115      	bne.n	8101ba4 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8101b78:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8101b7a:	2b00      	cmp	r3, #0
 8101b7c:	da12      	bge.n	8101ba4 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8101b7e:	6879      	ldr	r1, [r7, #4]
 8101b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101b82:	4613      	mov	r3, r2
 8101b84:	00db      	lsls	r3, r3, #3
 8101b86:	4413      	add	r3, r2
 8101b88:	009b      	lsls	r3, r3, #2
 8101b8a:	440b      	add	r3, r1
 8101b8c:	333f      	adds	r3, #63	; 0x3f
 8101b8e:	2201      	movs	r2, #1
 8101b90:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8101b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101b94:	b2db      	uxtb	r3, r3
 8101b96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8101b9a:	b2db      	uxtb	r3, r3
 8101b9c:	4619      	mov	r1, r3
 8101b9e:	6878      	ldr	r0, [r7, #4]
 8101ba0:	f000 facc 	bl	810213c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8101ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101ba6:	3301      	adds	r3, #1
 8101ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8101baa:	687b      	ldr	r3, [r7, #4]
 8101bac:	685b      	ldr	r3, [r3, #4]
 8101bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101bb0:	429a      	cmp	r2, r3
 8101bb2:	d3ce      	bcc.n	8101b52 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8101bb4:	687b      	ldr	r3, [r7, #4]
 8101bb6:	681b      	ldr	r3, [r3, #0]
 8101bb8:	695a      	ldr	r2, [r3, #20]
 8101bba:	687b      	ldr	r3, [r7, #4]
 8101bbc:	681b      	ldr	r3, [r3, #0]
 8101bbe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8101bc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8101bc4:	687b      	ldr	r3, [r7, #4]
 8101bc6:	681b      	ldr	r3, [r3, #0]
 8101bc8:	4618      	mov	r0, r3
 8101bca:	f003 fb73 	bl	81052b4 <USB_ReadInterrupts>
 8101bce:	4603      	mov	r3, r0
 8101bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101bd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101bd8:	d155      	bne.n	8101c86 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8101bda:	2301      	movs	r3, #1
 8101bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8101bde:	e045      	b.n	8101c6c <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8101be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101be2:	015a      	lsls	r2, r3, #5
 8101be4:	69fb      	ldr	r3, [r7, #28]
 8101be6:	4413      	add	r3, r2
 8101be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8101bec:	681b      	ldr	r3, [r3, #0]
 8101bee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8101bf0:	6879      	ldr	r1, [r7, #4]
 8101bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101bf4:	4613      	mov	r3, r2
 8101bf6:	00db      	lsls	r3, r3, #3
 8101bf8:	4413      	add	r3, r2
 8101bfa:	009b      	lsls	r3, r3, #2
 8101bfc:	440b      	add	r3, r1
 8101bfe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8101c02:	781b      	ldrb	r3, [r3, #0]
 8101c04:	2b01      	cmp	r3, #1
 8101c06:	d12e      	bne.n	8101c66 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8101c08:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8101c0a:	2b00      	cmp	r3, #0
 8101c0c:	da2b      	bge.n	8101c66 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8101c0e:	69bb      	ldr	r3, [r7, #24]
 8101c10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8101c14:	687b      	ldr	r3, [r7, #4]
 8101c16:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8101c1a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8101c1e:	429a      	cmp	r2, r3
 8101c20:	d121      	bne.n	8101c66 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8101c22:	6879      	ldr	r1, [r7, #4]
 8101c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101c26:	4613      	mov	r3, r2
 8101c28:	00db      	lsls	r3, r3, #3
 8101c2a:	4413      	add	r3, r2
 8101c2c:	009b      	lsls	r3, r3, #2
 8101c2e:	440b      	add	r3, r1
 8101c30:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8101c34:	2201      	movs	r2, #1
 8101c36:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8101c38:	6a3b      	ldr	r3, [r7, #32]
 8101c3a:	699b      	ldr	r3, [r3, #24]
 8101c3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8101c40:	6a3b      	ldr	r3, [r7, #32]
 8101c42:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8101c44:	6a3b      	ldr	r3, [r7, #32]
 8101c46:	695b      	ldr	r3, [r3, #20]
 8101c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101c4c:	2b00      	cmp	r3, #0
 8101c4e:	d10a      	bne.n	8101c66 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8101c50:	69fb      	ldr	r3, [r7, #28]
 8101c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8101c56:	685b      	ldr	r3, [r3, #4]
 8101c58:	69fa      	ldr	r2, [r7, #28]
 8101c5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8101c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8101c62:	6053      	str	r3, [r2, #4]
            break;
 8101c64:	e007      	b.n	8101c76 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8101c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101c68:	3301      	adds	r3, #1
 8101c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8101c6c:	687b      	ldr	r3, [r7, #4]
 8101c6e:	685b      	ldr	r3, [r3, #4]
 8101c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101c72:	429a      	cmp	r2, r3
 8101c74:	d3b4      	bcc.n	8101be0 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8101c76:	687b      	ldr	r3, [r7, #4]
 8101c78:	681b      	ldr	r3, [r3, #0]
 8101c7a:	695a      	ldr	r2, [r3, #20]
 8101c7c:	687b      	ldr	r3, [r7, #4]
 8101c7e:	681b      	ldr	r3, [r3, #0]
 8101c80:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8101c84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8101c86:	687b      	ldr	r3, [r7, #4]
 8101c88:	681b      	ldr	r3, [r3, #0]
 8101c8a:	4618      	mov	r0, r3
 8101c8c:	f003 fb12 	bl	81052b4 <USB_ReadInterrupts>
 8101c90:	4603      	mov	r3, r0
 8101c92:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8101c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101c9a:	d10a      	bne.n	8101cb2 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8101c9c:	6878      	ldr	r0, [r7, #4]
 8101c9e:	f005 fc3b 	bl	8107518 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8101ca2:	687b      	ldr	r3, [r7, #4]
 8101ca4:	681b      	ldr	r3, [r3, #0]
 8101ca6:	695a      	ldr	r2, [r3, #20]
 8101ca8:	687b      	ldr	r3, [r7, #4]
 8101caa:	681b      	ldr	r3, [r3, #0]
 8101cac:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8101cb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8101cb2:	687b      	ldr	r3, [r7, #4]
 8101cb4:	681b      	ldr	r3, [r3, #0]
 8101cb6:	4618      	mov	r0, r3
 8101cb8:	f003 fafc 	bl	81052b4 <USB_ReadInterrupts>
 8101cbc:	4603      	mov	r3, r0
 8101cbe:	f003 0304 	and.w	r3, r3, #4
 8101cc2:	2b04      	cmp	r3, #4
 8101cc4:	d115      	bne.n	8101cf2 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8101cc6:	687b      	ldr	r3, [r7, #4]
 8101cc8:	681b      	ldr	r3, [r3, #0]
 8101cca:	685b      	ldr	r3, [r3, #4]
 8101ccc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8101cce:	69bb      	ldr	r3, [r7, #24]
 8101cd0:	f003 0304 	and.w	r3, r3, #4
 8101cd4:	2b00      	cmp	r3, #0
 8101cd6:	d002      	beq.n	8101cde <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8101cd8:	6878      	ldr	r0, [r7, #4]
 8101cda:	f005 fc2b 	bl	8107534 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8101cde:	687b      	ldr	r3, [r7, #4]
 8101ce0:	681b      	ldr	r3, [r3, #0]
 8101ce2:	6859      	ldr	r1, [r3, #4]
 8101ce4:	687b      	ldr	r3, [r7, #4]
 8101ce6:	681b      	ldr	r3, [r3, #0]
 8101ce8:	69ba      	ldr	r2, [r7, #24]
 8101cea:	430a      	orrs	r2, r1
 8101cec:	605a      	str	r2, [r3, #4]
 8101cee:	e000      	b.n	8101cf2 <HAL_PCD_IRQHandler+0x920>
      return;
 8101cf0:	bf00      	nop
    }
  }
}
 8101cf2:	3734      	adds	r7, #52	; 0x34
 8101cf4:	46bd      	mov	sp, r7
 8101cf6:	bd90      	pop	{r4, r7, pc}

08101cf8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8101cf8:	b580      	push	{r7, lr}
 8101cfa:	b082      	sub	sp, #8
 8101cfc:	af00      	add	r7, sp, #0
 8101cfe:	6078      	str	r0, [r7, #4]
 8101d00:	460b      	mov	r3, r1
 8101d02:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8101d04:	687b      	ldr	r3, [r7, #4]
 8101d06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8101d0a:	2b01      	cmp	r3, #1
 8101d0c:	d101      	bne.n	8101d12 <HAL_PCD_SetAddress+0x1a>
 8101d0e:	2302      	movs	r3, #2
 8101d10:	e013      	b.n	8101d3a <HAL_PCD_SetAddress+0x42>
 8101d12:	687b      	ldr	r3, [r7, #4]
 8101d14:	2201      	movs	r2, #1
 8101d16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8101d1a:	687b      	ldr	r3, [r7, #4]
 8101d1c:	78fa      	ldrb	r2, [r7, #3]
 8101d1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8101d22:	687b      	ldr	r3, [r7, #4]
 8101d24:	681b      	ldr	r3, [r3, #0]
 8101d26:	78fa      	ldrb	r2, [r7, #3]
 8101d28:	4611      	mov	r1, r2
 8101d2a:	4618      	mov	r0, r3
 8101d2c:	f003 fa5a 	bl	81051e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8101d30:	687b      	ldr	r3, [r7, #4]
 8101d32:	2200      	movs	r2, #0
 8101d34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8101d38:	2300      	movs	r3, #0
}
 8101d3a:	4618      	mov	r0, r3
 8101d3c:	3708      	adds	r7, #8
 8101d3e:	46bd      	mov	sp, r7
 8101d40:	bd80      	pop	{r7, pc}

08101d42 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8101d42:	b580      	push	{r7, lr}
 8101d44:	b084      	sub	sp, #16
 8101d46:	af00      	add	r7, sp, #0
 8101d48:	6078      	str	r0, [r7, #4]
 8101d4a:	4608      	mov	r0, r1
 8101d4c:	4611      	mov	r1, r2
 8101d4e:	461a      	mov	r2, r3
 8101d50:	4603      	mov	r3, r0
 8101d52:	70fb      	strb	r3, [r7, #3]
 8101d54:	460b      	mov	r3, r1
 8101d56:	803b      	strh	r3, [r7, #0]
 8101d58:	4613      	mov	r3, r2
 8101d5a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8101d5c:	2300      	movs	r3, #0
 8101d5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8101d60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8101d64:	2b00      	cmp	r3, #0
 8101d66:	da0f      	bge.n	8101d88 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8101d68:	78fb      	ldrb	r3, [r7, #3]
 8101d6a:	f003 020f 	and.w	r2, r3, #15
 8101d6e:	4613      	mov	r3, r2
 8101d70:	00db      	lsls	r3, r3, #3
 8101d72:	4413      	add	r3, r2
 8101d74:	009b      	lsls	r3, r3, #2
 8101d76:	3338      	adds	r3, #56	; 0x38
 8101d78:	687a      	ldr	r2, [r7, #4]
 8101d7a:	4413      	add	r3, r2
 8101d7c:	3304      	adds	r3, #4
 8101d7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8101d80:	68fb      	ldr	r3, [r7, #12]
 8101d82:	2201      	movs	r2, #1
 8101d84:	705a      	strb	r2, [r3, #1]
 8101d86:	e00f      	b.n	8101da8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8101d88:	78fb      	ldrb	r3, [r7, #3]
 8101d8a:	f003 020f 	and.w	r2, r3, #15
 8101d8e:	4613      	mov	r3, r2
 8101d90:	00db      	lsls	r3, r3, #3
 8101d92:	4413      	add	r3, r2
 8101d94:	009b      	lsls	r3, r3, #2
 8101d96:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8101d9a:	687a      	ldr	r2, [r7, #4]
 8101d9c:	4413      	add	r3, r2
 8101d9e:	3304      	adds	r3, #4
 8101da0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8101da2:	68fb      	ldr	r3, [r7, #12]
 8101da4:	2200      	movs	r2, #0
 8101da6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8101da8:	78fb      	ldrb	r3, [r7, #3]
 8101daa:	f003 030f 	and.w	r3, r3, #15
 8101dae:	b2da      	uxtb	r2, r3
 8101db0:	68fb      	ldr	r3, [r7, #12]
 8101db2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8101db4:	883a      	ldrh	r2, [r7, #0]
 8101db6:	68fb      	ldr	r3, [r7, #12]
 8101db8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8101dba:	68fb      	ldr	r3, [r7, #12]
 8101dbc:	78ba      	ldrb	r2, [r7, #2]
 8101dbe:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8101dc0:	68fb      	ldr	r3, [r7, #12]
 8101dc2:	785b      	ldrb	r3, [r3, #1]
 8101dc4:	2b00      	cmp	r3, #0
 8101dc6:	d004      	beq.n	8101dd2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8101dc8:	68fb      	ldr	r3, [r7, #12]
 8101dca:	781b      	ldrb	r3, [r3, #0]
 8101dcc:	b29a      	uxth	r2, r3
 8101dce:	68fb      	ldr	r3, [r7, #12]
 8101dd0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8101dd2:	78bb      	ldrb	r3, [r7, #2]
 8101dd4:	2b02      	cmp	r3, #2
 8101dd6:	d102      	bne.n	8101dde <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8101dd8:	68fb      	ldr	r3, [r7, #12]
 8101dda:	2200      	movs	r2, #0
 8101ddc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8101dde:	687b      	ldr	r3, [r7, #4]
 8101de0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8101de4:	2b01      	cmp	r3, #1
 8101de6:	d101      	bne.n	8101dec <HAL_PCD_EP_Open+0xaa>
 8101de8:	2302      	movs	r3, #2
 8101dea:	e00e      	b.n	8101e0a <HAL_PCD_EP_Open+0xc8>
 8101dec:	687b      	ldr	r3, [r7, #4]
 8101dee:	2201      	movs	r2, #1
 8101df0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8101df4:	687b      	ldr	r3, [r7, #4]
 8101df6:	681b      	ldr	r3, [r3, #0]
 8101df8:	68f9      	ldr	r1, [r7, #12]
 8101dfa:	4618      	mov	r0, r3
 8101dfc:	f002 fb7c 	bl	81044f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8101e00:	687b      	ldr	r3, [r7, #4]
 8101e02:	2200      	movs	r2, #0
 8101e04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8101e08:	7afb      	ldrb	r3, [r7, #11]
}
 8101e0a:	4618      	mov	r0, r3
 8101e0c:	3710      	adds	r7, #16
 8101e0e:	46bd      	mov	sp, r7
 8101e10:	bd80      	pop	{r7, pc}

08101e12 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8101e12:	b580      	push	{r7, lr}
 8101e14:	b084      	sub	sp, #16
 8101e16:	af00      	add	r7, sp, #0
 8101e18:	6078      	str	r0, [r7, #4]
 8101e1a:	460b      	mov	r3, r1
 8101e1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8101e1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8101e22:	2b00      	cmp	r3, #0
 8101e24:	da0f      	bge.n	8101e46 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8101e26:	78fb      	ldrb	r3, [r7, #3]
 8101e28:	f003 020f 	and.w	r2, r3, #15
 8101e2c:	4613      	mov	r3, r2
 8101e2e:	00db      	lsls	r3, r3, #3
 8101e30:	4413      	add	r3, r2
 8101e32:	009b      	lsls	r3, r3, #2
 8101e34:	3338      	adds	r3, #56	; 0x38
 8101e36:	687a      	ldr	r2, [r7, #4]
 8101e38:	4413      	add	r3, r2
 8101e3a:	3304      	adds	r3, #4
 8101e3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8101e3e:	68fb      	ldr	r3, [r7, #12]
 8101e40:	2201      	movs	r2, #1
 8101e42:	705a      	strb	r2, [r3, #1]
 8101e44:	e00f      	b.n	8101e66 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8101e46:	78fb      	ldrb	r3, [r7, #3]
 8101e48:	f003 020f 	and.w	r2, r3, #15
 8101e4c:	4613      	mov	r3, r2
 8101e4e:	00db      	lsls	r3, r3, #3
 8101e50:	4413      	add	r3, r2
 8101e52:	009b      	lsls	r3, r3, #2
 8101e54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8101e58:	687a      	ldr	r2, [r7, #4]
 8101e5a:	4413      	add	r3, r2
 8101e5c:	3304      	adds	r3, #4
 8101e5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8101e60:	68fb      	ldr	r3, [r7, #12]
 8101e62:	2200      	movs	r2, #0
 8101e64:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8101e66:	78fb      	ldrb	r3, [r7, #3]
 8101e68:	f003 030f 	and.w	r3, r3, #15
 8101e6c:	b2da      	uxtb	r2, r3
 8101e6e:	68fb      	ldr	r3, [r7, #12]
 8101e70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8101e72:	687b      	ldr	r3, [r7, #4]
 8101e74:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8101e78:	2b01      	cmp	r3, #1
 8101e7a:	d101      	bne.n	8101e80 <HAL_PCD_EP_Close+0x6e>
 8101e7c:	2302      	movs	r3, #2
 8101e7e:	e00e      	b.n	8101e9e <HAL_PCD_EP_Close+0x8c>
 8101e80:	687b      	ldr	r3, [r7, #4]
 8101e82:	2201      	movs	r2, #1
 8101e84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8101e88:	687b      	ldr	r3, [r7, #4]
 8101e8a:	681b      	ldr	r3, [r3, #0]
 8101e8c:	68f9      	ldr	r1, [r7, #12]
 8101e8e:	4618      	mov	r0, r3
 8101e90:	f002 fbba 	bl	8104608 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8101e94:	687b      	ldr	r3, [r7, #4]
 8101e96:	2200      	movs	r2, #0
 8101e98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8101e9c:	2300      	movs	r3, #0
}
 8101e9e:	4618      	mov	r0, r3
 8101ea0:	3710      	adds	r7, #16
 8101ea2:	46bd      	mov	sp, r7
 8101ea4:	bd80      	pop	{r7, pc}

08101ea6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8101ea6:	b580      	push	{r7, lr}
 8101ea8:	b086      	sub	sp, #24
 8101eaa:	af00      	add	r7, sp, #0
 8101eac:	60f8      	str	r0, [r7, #12]
 8101eae:	607a      	str	r2, [r7, #4]
 8101eb0:	603b      	str	r3, [r7, #0]
 8101eb2:	460b      	mov	r3, r1
 8101eb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8101eb6:	7afb      	ldrb	r3, [r7, #11]
 8101eb8:	f003 020f 	and.w	r2, r3, #15
 8101ebc:	4613      	mov	r3, r2
 8101ebe:	00db      	lsls	r3, r3, #3
 8101ec0:	4413      	add	r3, r2
 8101ec2:	009b      	lsls	r3, r3, #2
 8101ec4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8101ec8:	68fa      	ldr	r2, [r7, #12]
 8101eca:	4413      	add	r3, r2
 8101ecc:	3304      	adds	r3, #4
 8101ece:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8101ed0:	697b      	ldr	r3, [r7, #20]
 8101ed2:	687a      	ldr	r2, [r7, #4]
 8101ed4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8101ed6:	697b      	ldr	r3, [r7, #20]
 8101ed8:	683a      	ldr	r2, [r7, #0]
 8101eda:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8101edc:	697b      	ldr	r3, [r7, #20]
 8101ede:	2200      	movs	r2, #0
 8101ee0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8101ee2:	697b      	ldr	r3, [r7, #20]
 8101ee4:	2200      	movs	r2, #0
 8101ee6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8101ee8:	7afb      	ldrb	r3, [r7, #11]
 8101eea:	f003 030f 	and.w	r3, r3, #15
 8101eee:	b2da      	uxtb	r2, r3
 8101ef0:	697b      	ldr	r3, [r7, #20]
 8101ef2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8101ef4:	7afb      	ldrb	r3, [r7, #11]
 8101ef6:	f003 030f 	and.w	r3, r3, #15
 8101efa:	2b00      	cmp	r3, #0
 8101efc:	d106      	bne.n	8101f0c <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8101efe:	68fb      	ldr	r3, [r7, #12]
 8101f00:	681b      	ldr	r3, [r3, #0]
 8101f02:	6979      	ldr	r1, [r7, #20]
 8101f04:	4618      	mov	r0, r3
 8101f06:	f002 fe3b 	bl	8104b80 <USB_EP0StartXfer>
 8101f0a:	e005      	b.n	8101f18 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8101f0c:	68fb      	ldr	r3, [r7, #12]
 8101f0e:	681b      	ldr	r3, [r3, #0]
 8101f10:	6979      	ldr	r1, [r7, #20]
 8101f12:	4618      	mov	r0, r3
 8101f14:	f002 fc54 	bl	81047c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8101f18:	2300      	movs	r3, #0
}
 8101f1a:	4618      	mov	r0, r3
 8101f1c:	3718      	adds	r7, #24
 8101f1e:	46bd      	mov	sp, r7
 8101f20:	bd80      	pop	{r7, pc}

08101f22 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8101f22:	b480      	push	{r7}
 8101f24:	b083      	sub	sp, #12
 8101f26:	af00      	add	r7, sp, #0
 8101f28:	6078      	str	r0, [r7, #4]
 8101f2a:	460b      	mov	r3, r1
 8101f2c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8101f2e:	78fb      	ldrb	r3, [r7, #3]
 8101f30:	f003 020f 	and.w	r2, r3, #15
 8101f34:	6879      	ldr	r1, [r7, #4]
 8101f36:	4613      	mov	r3, r2
 8101f38:	00db      	lsls	r3, r3, #3
 8101f3a:	4413      	add	r3, r2
 8101f3c:	009b      	lsls	r3, r3, #2
 8101f3e:	440b      	add	r3, r1
 8101f40:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8101f44:	681b      	ldr	r3, [r3, #0]
}
 8101f46:	4618      	mov	r0, r3
 8101f48:	370c      	adds	r7, #12
 8101f4a:	46bd      	mov	sp, r7
 8101f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f50:	4770      	bx	lr

08101f52 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8101f52:	b580      	push	{r7, lr}
 8101f54:	b086      	sub	sp, #24
 8101f56:	af00      	add	r7, sp, #0
 8101f58:	60f8      	str	r0, [r7, #12]
 8101f5a:	607a      	str	r2, [r7, #4]
 8101f5c:	603b      	str	r3, [r7, #0]
 8101f5e:	460b      	mov	r3, r1
 8101f60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8101f62:	7afb      	ldrb	r3, [r7, #11]
 8101f64:	f003 020f 	and.w	r2, r3, #15
 8101f68:	4613      	mov	r3, r2
 8101f6a:	00db      	lsls	r3, r3, #3
 8101f6c:	4413      	add	r3, r2
 8101f6e:	009b      	lsls	r3, r3, #2
 8101f70:	3338      	adds	r3, #56	; 0x38
 8101f72:	68fa      	ldr	r2, [r7, #12]
 8101f74:	4413      	add	r3, r2
 8101f76:	3304      	adds	r3, #4
 8101f78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8101f7a:	697b      	ldr	r3, [r7, #20]
 8101f7c:	687a      	ldr	r2, [r7, #4]
 8101f7e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8101f80:	697b      	ldr	r3, [r7, #20]
 8101f82:	683a      	ldr	r2, [r7, #0]
 8101f84:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8101f86:	697b      	ldr	r3, [r7, #20]
 8101f88:	2200      	movs	r2, #0
 8101f8a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8101f8c:	697b      	ldr	r3, [r7, #20]
 8101f8e:	2201      	movs	r2, #1
 8101f90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8101f92:	7afb      	ldrb	r3, [r7, #11]
 8101f94:	f003 030f 	and.w	r3, r3, #15
 8101f98:	b2da      	uxtb	r2, r3
 8101f9a:	697b      	ldr	r3, [r7, #20]
 8101f9c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8101f9e:	7afb      	ldrb	r3, [r7, #11]
 8101fa0:	f003 030f 	and.w	r3, r3, #15
 8101fa4:	2b00      	cmp	r3, #0
 8101fa6:	d106      	bne.n	8101fb6 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8101fa8:	68fb      	ldr	r3, [r7, #12]
 8101faa:	681b      	ldr	r3, [r3, #0]
 8101fac:	6979      	ldr	r1, [r7, #20]
 8101fae:	4618      	mov	r0, r3
 8101fb0:	f002 fde6 	bl	8104b80 <USB_EP0StartXfer>
 8101fb4:	e005      	b.n	8101fc2 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8101fb6:	68fb      	ldr	r3, [r7, #12]
 8101fb8:	681b      	ldr	r3, [r3, #0]
 8101fba:	6979      	ldr	r1, [r7, #20]
 8101fbc:	4618      	mov	r0, r3
 8101fbe:	f002 fbff 	bl	81047c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8101fc2:	2300      	movs	r3, #0
}
 8101fc4:	4618      	mov	r0, r3
 8101fc6:	3718      	adds	r7, #24
 8101fc8:	46bd      	mov	sp, r7
 8101fca:	bd80      	pop	{r7, pc}

08101fcc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8101fcc:	b580      	push	{r7, lr}
 8101fce:	b084      	sub	sp, #16
 8101fd0:	af00      	add	r7, sp, #0
 8101fd2:	6078      	str	r0, [r7, #4]
 8101fd4:	460b      	mov	r3, r1
 8101fd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8101fd8:	78fb      	ldrb	r3, [r7, #3]
 8101fda:	f003 020f 	and.w	r2, r3, #15
 8101fde:	687b      	ldr	r3, [r7, #4]
 8101fe0:	685b      	ldr	r3, [r3, #4]
 8101fe2:	429a      	cmp	r2, r3
 8101fe4:	d901      	bls.n	8101fea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8101fe6:	2301      	movs	r3, #1
 8101fe8:	e04e      	b.n	8102088 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8101fea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8101fee:	2b00      	cmp	r3, #0
 8101ff0:	da0f      	bge.n	8102012 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8101ff2:	78fb      	ldrb	r3, [r7, #3]
 8101ff4:	f003 020f 	and.w	r2, r3, #15
 8101ff8:	4613      	mov	r3, r2
 8101ffa:	00db      	lsls	r3, r3, #3
 8101ffc:	4413      	add	r3, r2
 8101ffe:	009b      	lsls	r3, r3, #2
 8102000:	3338      	adds	r3, #56	; 0x38
 8102002:	687a      	ldr	r2, [r7, #4]
 8102004:	4413      	add	r3, r2
 8102006:	3304      	adds	r3, #4
 8102008:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 810200a:	68fb      	ldr	r3, [r7, #12]
 810200c:	2201      	movs	r2, #1
 810200e:	705a      	strb	r2, [r3, #1]
 8102010:	e00d      	b.n	810202e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8102012:	78fa      	ldrb	r2, [r7, #3]
 8102014:	4613      	mov	r3, r2
 8102016:	00db      	lsls	r3, r3, #3
 8102018:	4413      	add	r3, r2
 810201a:	009b      	lsls	r3, r3, #2
 810201c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8102020:	687a      	ldr	r2, [r7, #4]
 8102022:	4413      	add	r3, r2
 8102024:	3304      	adds	r3, #4
 8102026:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8102028:	68fb      	ldr	r3, [r7, #12]
 810202a:	2200      	movs	r2, #0
 810202c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 810202e:	68fb      	ldr	r3, [r7, #12]
 8102030:	2201      	movs	r2, #1
 8102032:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8102034:	78fb      	ldrb	r3, [r7, #3]
 8102036:	f003 030f 	and.w	r3, r3, #15
 810203a:	b2da      	uxtb	r2, r3
 810203c:	68fb      	ldr	r3, [r7, #12]
 810203e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8102040:	687b      	ldr	r3, [r7, #4]
 8102042:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8102046:	2b01      	cmp	r3, #1
 8102048:	d101      	bne.n	810204e <HAL_PCD_EP_SetStall+0x82>
 810204a:	2302      	movs	r3, #2
 810204c:	e01c      	b.n	8102088 <HAL_PCD_EP_SetStall+0xbc>
 810204e:	687b      	ldr	r3, [r7, #4]
 8102050:	2201      	movs	r2, #1
 8102052:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8102056:	687b      	ldr	r3, [r7, #4]
 8102058:	681b      	ldr	r3, [r3, #0]
 810205a:	68f9      	ldr	r1, [r7, #12]
 810205c:	4618      	mov	r0, r3
 810205e:	f002 ffed 	bl	810503c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8102062:	78fb      	ldrb	r3, [r7, #3]
 8102064:	f003 030f 	and.w	r3, r3, #15
 8102068:	2b00      	cmp	r3, #0
 810206a:	d108      	bne.n	810207e <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 810206c:	687b      	ldr	r3, [r7, #4]
 810206e:	681a      	ldr	r2, [r3, #0]
 8102070:	687b      	ldr	r3, [r7, #4]
 8102072:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8102076:	4619      	mov	r1, r3
 8102078:	4610      	mov	r0, r2
 810207a:	f003 f9df 	bl	810543c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 810207e:	687b      	ldr	r3, [r7, #4]
 8102080:	2200      	movs	r2, #0
 8102082:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8102086:	2300      	movs	r3, #0
}
 8102088:	4618      	mov	r0, r3
 810208a:	3710      	adds	r7, #16
 810208c:	46bd      	mov	sp, r7
 810208e:	bd80      	pop	{r7, pc}

08102090 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8102090:	b580      	push	{r7, lr}
 8102092:	b084      	sub	sp, #16
 8102094:	af00      	add	r7, sp, #0
 8102096:	6078      	str	r0, [r7, #4]
 8102098:	460b      	mov	r3, r1
 810209a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 810209c:	78fb      	ldrb	r3, [r7, #3]
 810209e:	f003 020f 	and.w	r2, r3, #15
 81020a2:	687b      	ldr	r3, [r7, #4]
 81020a4:	685b      	ldr	r3, [r3, #4]
 81020a6:	429a      	cmp	r2, r3
 81020a8:	d901      	bls.n	81020ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 81020aa:	2301      	movs	r3, #1
 81020ac:	e042      	b.n	8102134 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 81020ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 81020b2:	2b00      	cmp	r3, #0
 81020b4:	da0f      	bge.n	81020d6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 81020b6:	78fb      	ldrb	r3, [r7, #3]
 81020b8:	f003 020f 	and.w	r2, r3, #15
 81020bc:	4613      	mov	r3, r2
 81020be:	00db      	lsls	r3, r3, #3
 81020c0:	4413      	add	r3, r2
 81020c2:	009b      	lsls	r3, r3, #2
 81020c4:	3338      	adds	r3, #56	; 0x38
 81020c6:	687a      	ldr	r2, [r7, #4]
 81020c8:	4413      	add	r3, r2
 81020ca:	3304      	adds	r3, #4
 81020cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 81020ce:	68fb      	ldr	r3, [r7, #12]
 81020d0:	2201      	movs	r2, #1
 81020d2:	705a      	strb	r2, [r3, #1]
 81020d4:	e00f      	b.n	81020f6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 81020d6:	78fb      	ldrb	r3, [r7, #3]
 81020d8:	f003 020f 	and.w	r2, r3, #15
 81020dc:	4613      	mov	r3, r2
 81020de:	00db      	lsls	r3, r3, #3
 81020e0:	4413      	add	r3, r2
 81020e2:	009b      	lsls	r3, r3, #2
 81020e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 81020e8:	687a      	ldr	r2, [r7, #4]
 81020ea:	4413      	add	r3, r2
 81020ec:	3304      	adds	r3, #4
 81020ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 81020f0:	68fb      	ldr	r3, [r7, #12]
 81020f2:	2200      	movs	r2, #0
 81020f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 81020f6:	68fb      	ldr	r3, [r7, #12]
 81020f8:	2200      	movs	r2, #0
 81020fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 81020fc:	78fb      	ldrb	r3, [r7, #3]
 81020fe:	f003 030f 	and.w	r3, r3, #15
 8102102:	b2da      	uxtb	r2, r3
 8102104:	68fb      	ldr	r3, [r7, #12]
 8102106:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8102108:	687b      	ldr	r3, [r7, #4]
 810210a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 810210e:	2b01      	cmp	r3, #1
 8102110:	d101      	bne.n	8102116 <HAL_PCD_EP_ClrStall+0x86>
 8102112:	2302      	movs	r3, #2
 8102114:	e00e      	b.n	8102134 <HAL_PCD_EP_ClrStall+0xa4>
 8102116:	687b      	ldr	r3, [r7, #4]
 8102118:	2201      	movs	r2, #1
 810211a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 810211e:	687b      	ldr	r3, [r7, #4]
 8102120:	681b      	ldr	r3, [r3, #0]
 8102122:	68f9      	ldr	r1, [r7, #12]
 8102124:	4618      	mov	r0, r3
 8102126:	f002 fff7 	bl	8105118 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 810212a:	687b      	ldr	r3, [r7, #4]
 810212c:	2200      	movs	r2, #0
 810212e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8102132:	2300      	movs	r3, #0
}
 8102134:	4618      	mov	r0, r3
 8102136:	3710      	adds	r7, #16
 8102138:	46bd      	mov	sp, r7
 810213a:	bd80      	pop	{r7, pc}

0810213c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 810213c:	b580      	push	{r7, lr}
 810213e:	b084      	sub	sp, #16
 8102140:	af00      	add	r7, sp, #0
 8102142:	6078      	str	r0, [r7, #4]
 8102144:	460b      	mov	r3, r1
 8102146:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8102148:	f997 3003 	ldrsb.w	r3, [r7, #3]
 810214c:	2b00      	cmp	r3, #0
 810214e:	da0c      	bge.n	810216a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8102150:	78fb      	ldrb	r3, [r7, #3]
 8102152:	f003 020f 	and.w	r2, r3, #15
 8102156:	4613      	mov	r3, r2
 8102158:	00db      	lsls	r3, r3, #3
 810215a:	4413      	add	r3, r2
 810215c:	009b      	lsls	r3, r3, #2
 810215e:	3338      	adds	r3, #56	; 0x38
 8102160:	687a      	ldr	r2, [r7, #4]
 8102162:	4413      	add	r3, r2
 8102164:	3304      	adds	r3, #4
 8102166:	60fb      	str	r3, [r7, #12]
 8102168:	e00c      	b.n	8102184 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 810216a:	78fb      	ldrb	r3, [r7, #3]
 810216c:	f003 020f 	and.w	r2, r3, #15
 8102170:	4613      	mov	r3, r2
 8102172:	00db      	lsls	r3, r3, #3
 8102174:	4413      	add	r3, r2
 8102176:	009b      	lsls	r3, r3, #2
 8102178:	f503 731e 	add.w	r3, r3, #632	; 0x278
 810217c:	687a      	ldr	r2, [r7, #4]
 810217e:	4413      	add	r3, r2
 8102180:	3304      	adds	r3, #4
 8102182:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8102184:	687b      	ldr	r3, [r7, #4]
 8102186:	681b      	ldr	r3, [r3, #0]
 8102188:	68f9      	ldr	r1, [r7, #12]
 810218a:	4618      	mov	r0, r3
 810218c:	f002 fe1a 	bl	8104dc4 <USB_EPStopXfer>
 8102190:	4603      	mov	r3, r0
 8102192:	72fb      	strb	r3, [r7, #11]

  return ret;
 8102194:	7afb      	ldrb	r3, [r7, #11]
}
 8102196:	4618      	mov	r0, r3
 8102198:	3710      	adds	r7, #16
 810219a:	46bd      	mov	sp, r7
 810219c:	bd80      	pop	{r7, pc}

0810219e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 810219e:	b580      	push	{r7, lr}
 81021a0:	b088      	sub	sp, #32
 81021a2:	af00      	add	r7, sp, #0
 81021a4:	6078      	str	r0, [r7, #4]
 81021a6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 81021a8:	687b      	ldr	r3, [r7, #4]
 81021aa:	681b      	ldr	r3, [r3, #0]
 81021ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81021ae:	697b      	ldr	r3, [r7, #20]
 81021b0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 81021b2:	683a      	ldr	r2, [r7, #0]
 81021b4:	4613      	mov	r3, r2
 81021b6:	00db      	lsls	r3, r3, #3
 81021b8:	4413      	add	r3, r2
 81021ba:	009b      	lsls	r3, r3, #2
 81021bc:	3338      	adds	r3, #56	; 0x38
 81021be:	687a      	ldr	r2, [r7, #4]
 81021c0:	4413      	add	r3, r2
 81021c2:	3304      	adds	r3, #4
 81021c4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 81021c6:	68fb      	ldr	r3, [r7, #12]
 81021c8:	6a1a      	ldr	r2, [r3, #32]
 81021ca:	68fb      	ldr	r3, [r7, #12]
 81021cc:	699b      	ldr	r3, [r3, #24]
 81021ce:	429a      	cmp	r2, r3
 81021d0:	d901      	bls.n	81021d6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 81021d2:	2301      	movs	r3, #1
 81021d4:	e067      	b.n	81022a6 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 81021d6:	68fb      	ldr	r3, [r7, #12]
 81021d8:	699a      	ldr	r2, [r3, #24]
 81021da:	68fb      	ldr	r3, [r7, #12]
 81021dc:	6a1b      	ldr	r3, [r3, #32]
 81021de:	1ad3      	subs	r3, r2, r3
 81021e0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 81021e2:	68fb      	ldr	r3, [r7, #12]
 81021e4:	68db      	ldr	r3, [r3, #12]
 81021e6:	69fa      	ldr	r2, [r7, #28]
 81021e8:	429a      	cmp	r2, r3
 81021ea:	d902      	bls.n	81021f2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 81021ec:	68fb      	ldr	r3, [r7, #12]
 81021ee:	68db      	ldr	r3, [r3, #12]
 81021f0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 81021f2:	69fb      	ldr	r3, [r7, #28]
 81021f4:	3303      	adds	r3, #3
 81021f6:	089b      	lsrs	r3, r3, #2
 81021f8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 81021fa:	e026      	b.n	810224a <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 81021fc:	68fb      	ldr	r3, [r7, #12]
 81021fe:	699a      	ldr	r2, [r3, #24]
 8102200:	68fb      	ldr	r3, [r7, #12]
 8102202:	6a1b      	ldr	r3, [r3, #32]
 8102204:	1ad3      	subs	r3, r2, r3
 8102206:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8102208:	68fb      	ldr	r3, [r7, #12]
 810220a:	68db      	ldr	r3, [r3, #12]
 810220c:	69fa      	ldr	r2, [r7, #28]
 810220e:	429a      	cmp	r2, r3
 8102210:	d902      	bls.n	8102218 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8102212:	68fb      	ldr	r3, [r7, #12]
 8102214:	68db      	ldr	r3, [r3, #12]
 8102216:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8102218:	69fb      	ldr	r3, [r7, #28]
 810221a:	3303      	adds	r3, #3
 810221c:	089b      	lsrs	r3, r3, #2
 810221e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8102220:	68fb      	ldr	r3, [r7, #12]
 8102222:	6919      	ldr	r1, [r3, #16]
 8102224:	683b      	ldr	r3, [r7, #0]
 8102226:	b2da      	uxtb	r2, r3
 8102228:	69fb      	ldr	r3, [r7, #28]
 810222a:	b29b      	uxth	r3, r3
 810222c:	6978      	ldr	r0, [r7, #20]
 810222e:	f002 fe73 	bl	8104f18 <USB_WritePacket>

    ep->xfer_buff  += len;
 8102232:	68fb      	ldr	r3, [r7, #12]
 8102234:	691a      	ldr	r2, [r3, #16]
 8102236:	69fb      	ldr	r3, [r7, #28]
 8102238:	441a      	add	r2, r3
 810223a:	68fb      	ldr	r3, [r7, #12]
 810223c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 810223e:	68fb      	ldr	r3, [r7, #12]
 8102240:	6a1a      	ldr	r2, [r3, #32]
 8102242:	69fb      	ldr	r3, [r7, #28]
 8102244:	441a      	add	r2, r3
 8102246:	68fb      	ldr	r3, [r7, #12]
 8102248:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 810224a:	683b      	ldr	r3, [r7, #0]
 810224c:	015a      	lsls	r2, r3, #5
 810224e:	693b      	ldr	r3, [r7, #16]
 8102250:	4413      	add	r3, r2
 8102252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8102256:	699b      	ldr	r3, [r3, #24]
 8102258:	b29b      	uxth	r3, r3
 810225a:	69ba      	ldr	r2, [r7, #24]
 810225c:	429a      	cmp	r2, r3
 810225e:	d809      	bhi.n	8102274 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8102260:	68fb      	ldr	r3, [r7, #12]
 8102262:	6a1a      	ldr	r2, [r3, #32]
 8102264:	68fb      	ldr	r3, [r7, #12]
 8102266:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8102268:	429a      	cmp	r2, r3
 810226a:	d203      	bcs.n	8102274 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 810226c:	68fb      	ldr	r3, [r7, #12]
 810226e:	699b      	ldr	r3, [r3, #24]
 8102270:	2b00      	cmp	r3, #0
 8102272:	d1c3      	bne.n	81021fc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8102274:	68fb      	ldr	r3, [r7, #12]
 8102276:	699a      	ldr	r2, [r3, #24]
 8102278:	68fb      	ldr	r3, [r7, #12]
 810227a:	6a1b      	ldr	r3, [r3, #32]
 810227c:	429a      	cmp	r2, r3
 810227e:	d811      	bhi.n	81022a4 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8102280:	683b      	ldr	r3, [r7, #0]
 8102282:	f003 030f 	and.w	r3, r3, #15
 8102286:	2201      	movs	r2, #1
 8102288:	fa02 f303 	lsl.w	r3, r2, r3
 810228c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 810228e:	693b      	ldr	r3, [r7, #16]
 8102290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8102294:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8102296:	68bb      	ldr	r3, [r7, #8]
 8102298:	43db      	mvns	r3, r3
 810229a:	6939      	ldr	r1, [r7, #16]
 810229c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 81022a0:	4013      	ands	r3, r2
 81022a2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 81022a4:	2300      	movs	r3, #0
}
 81022a6:	4618      	mov	r0, r3
 81022a8:	3720      	adds	r7, #32
 81022aa:	46bd      	mov	sp, r7
 81022ac:	bd80      	pop	{r7, pc}
	...

081022b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 81022b0:	b580      	push	{r7, lr}
 81022b2:	b086      	sub	sp, #24
 81022b4:	af00      	add	r7, sp, #0
 81022b6:	6078      	str	r0, [r7, #4]
 81022b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 81022ba:	687b      	ldr	r3, [r7, #4]
 81022bc:	681b      	ldr	r3, [r3, #0]
 81022be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81022c0:	697b      	ldr	r3, [r7, #20]
 81022c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 81022c4:	697b      	ldr	r3, [r7, #20]
 81022c6:	333c      	adds	r3, #60	; 0x3c
 81022c8:	3304      	adds	r3, #4
 81022ca:	681b      	ldr	r3, [r3, #0]
 81022cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 81022ce:	683b      	ldr	r3, [r7, #0]
 81022d0:	015a      	lsls	r2, r3, #5
 81022d2:	693b      	ldr	r3, [r7, #16]
 81022d4:	4413      	add	r3, r2
 81022d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81022da:	689b      	ldr	r3, [r3, #8]
 81022dc:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 81022de:	68fb      	ldr	r3, [r7, #12]
 81022e0:	4a19      	ldr	r2, [pc, #100]	; (8102348 <PCD_EP_OutXfrComplete_int+0x98>)
 81022e2:	4293      	cmp	r3, r2
 81022e4:	d124      	bne.n	8102330 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 81022e6:	68bb      	ldr	r3, [r7, #8]
 81022e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81022ec:	2b00      	cmp	r3, #0
 81022ee:	d00a      	beq.n	8102306 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 81022f0:	683b      	ldr	r3, [r7, #0]
 81022f2:	015a      	lsls	r2, r3, #5
 81022f4:	693b      	ldr	r3, [r7, #16]
 81022f6:	4413      	add	r3, r2
 81022f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81022fc:	461a      	mov	r2, r3
 81022fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8102302:	6093      	str	r3, [r2, #8]
 8102304:	e01a      	b.n	810233c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8102306:	68bb      	ldr	r3, [r7, #8]
 8102308:	f003 0320 	and.w	r3, r3, #32
 810230c:	2b00      	cmp	r3, #0
 810230e:	d008      	beq.n	8102322 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8102310:	683b      	ldr	r3, [r7, #0]
 8102312:	015a      	lsls	r2, r3, #5
 8102314:	693b      	ldr	r3, [r7, #16]
 8102316:	4413      	add	r3, r2
 8102318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810231c:	461a      	mov	r2, r3
 810231e:	2320      	movs	r3, #32
 8102320:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8102322:	683b      	ldr	r3, [r7, #0]
 8102324:	b2db      	uxtb	r3, r3
 8102326:	4619      	mov	r1, r3
 8102328:	6878      	ldr	r0, [r7, #4]
 810232a:	f005 f821 	bl	8107370 <HAL_PCD_DataOutStageCallback>
 810232e:	e005      	b.n	810233c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8102330:	683b      	ldr	r3, [r7, #0]
 8102332:	b2db      	uxtb	r3, r3
 8102334:	4619      	mov	r1, r3
 8102336:	6878      	ldr	r0, [r7, #4]
 8102338:	f005 f81a 	bl	8107370 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 810233c:	2300      	movs	r3, #0
}
 810233e:	4618      	mov	r0, r3
 8102340:	3718      	adds	r7, #24
 8102342:	46bd      	mov	sp, r7
 8102344:	bd80      	pop	{r7, pc}
 8102346:	bf00      	nop
 8102348:	4f54310a 	.word	0x4f54310a

0810234c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 810234c:	b580      	push	{r7, lr}
 810234e:	b086      	sub	sp, #24
 8102350:	af00      	add	r7, sp, #0
 8102352:	6078      	str	r0, [r7, #4]
 8102354:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8102356:	687b      	ldr	r3, [r7, #4]
 8102358:	681b      	ldr	r3, [r3, #0]
 810235a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810235c:	697b      	ldr	r3, [r7, #20]
 810235e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8102360:	697b      	ldr	r3, [r7, #20]
 8102362:	333c      	adds	r3, #60	; 0x3c
 8102364:	3304      	adds	r3, #4
 8102366:	681b      	ldr	r3, [r3, #0]
 8102368:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 810236a:	683b      	ldr	r3, [r7, #0]
 810236c:	015a      	lsls	r2, r3, #5
 810236e:	693b      	ldr	r3, [r7, #16]
 8102370:	4413      	add	r3, r2
 8102372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8102376:	689b      	ldr	r3, [r3, #8]
 8102378:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 810237a:	68fb      	ldr	r3, [r7, #12]
 810237c:	4a0c      	ldr	r2, [pc, #48]	; (81023b0 <PCD_EP_OutSetupPacket_int+0x64>)
 810237e:	4293      	cmp	r3, r2
 8102380:	d90e      	bls.n	81023a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8102382:	68bb      	ldr	r3, [r7, #8]
 8102384:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8102388:	2b00      	cmp	r3, #0
 810238a:	d009      	beq.n	81023a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 810238c:	683b      	ldr	r3, [r7, #0]
 810238e:	015a      	lsls	r2, r3, #5
 8102390:	693b      	ldr	r3, [r7, #16]
 8102392:	4413      	add	r3, r2
 8102394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8102398:	461a      	mov	r2, r3
 810239a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810239e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 81023a0:	6878      	ldr	r0, [r7, #4]
 81023a2:	f004 ffd3 	bl	810734c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 81023a6:	2300      	movs	r3, #0
}
 81023a8:	4618      	mov	r0, r3
 81023aa:	3718      	adds	r7, #24
 81023ac:	46bd      	mov	sp, r7
 81023ae:	bd80      	pop	{r7, pc}
 81023b0:	4f54300a 	.word	0x4f54300a

081023b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 81023b4:	b480      	push	{r7}
 81023b6:	b085      	sub	sp, #20
 81023b8:	af00      	add	r7, sp, #0
 81023ba:	6078      	str	r0, [r7, #4]
 81023bc:	460b      	mov	r3, r1
 81023be:	70fb      	strb	r3, [r7, #3]
 81023c0:	4613      	mov	r3, r2
 81023c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 81023c4:	687b      	ldr	r3, [r7, #4]
 81023c6:	681b      	ldr	r3, [r3, #0]
 81023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81023ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 81023cc:	78fb      	ldrb	r3, [r7, #3]
 81023ce:	2b00      	cmp	r3, #0
 81023d0:	d107      	bne.n	81023e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 81023d2:	883b      	ldrh	r3, [r7, #0]
 81023d4:	0419      	lsls	r1, r3, #16
 81023d6:	687b      	ldr	r3, [r7, #4]
 81023d8:	681b      	ldr	r3, [r3, #0]
 81023da:	68ba      	ldr	r2, [r7, #8]
 81023dc:	430a      	orrs	r2, r1
 81023de:	629a      	str	r2, [r3, #40]	; 0x28
 81023e0:	e028      	b.n	8102434 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 81023e2:	687b      	ldr	r3, [r7, #4]
 81023e4:	681b      	ldr	r3, [r3, #0]
 81023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81023e8:	0c1b      	lsrs	r3, r3, #16
 81023ea:	68ba      	ldr	r2, [r7, #8]
 81023ec:	4413      	add	r3, r2
 81023ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 81023f0:	2300      	movs	r3, #0
 81023f2:	73fb      	strb	r3, [r7, #15]
 81023f4:	e00d      	b.n	8102412 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 81023f6:	687b      	ldr	r3, [r7, #4]
 81023f8:	681a      	ldr	r2, [r3, #0]
 81023fa:	7bfb      	ldrb	r3, [r7, #15]
 81023fc:	3340      	adds	r3, #64	; 0x40
 81023fe:	009b      	lsls	r3, r3, #2
 8102400:	4413      	add	r3, r2
 8102402:	685b      	ldr	r3, [r3, #4]
 8102404:	0c1b      	lsrs	r3, r3, #16
 8102406:	68ba      	ldr	r2, [r7, #8]
 8102408:	4413      	add	r3, r2
 810240a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 810240c:	7bfb      	ldrb	r3, [r7, #15]
 810240e:	3301      	adds	r3, #1
 8102410:	73fb      	strb	r3, [r7, #15]
 8102412:	7bfa      	ldrb	r2, [r7, #15]
 8102414:	78fb      	ldrb	r3, [r7, #3]
 8102416:	3b01      	subs	r3, #1
 8102418:	429a      	cmp	r2, r3
 810241a:	d3ec      	bcc.n	81023f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 810241c:	883b      	ldrh	r3, [r7, #0]
 810241e:	0418      	lsls	r0, r3, #16
 8102420:	687b      	ldr	r3, [r7, #4]
 8102422:	6819      	ldr	r1, [r3, #0]
 8102424:	78fb      	ldrb	r3, [r7, #3]
 8102426:	3b01      	subs	r3, #1
 8102428:	68ba      	ldr	r2, [r7, #8]
 810242a:	4302      	orrs	r2, r0
 810242c:	3340      	adds	r3, #64	; 0x40
 810242e:	009b      	lsls	r3, r3, #2
 8102430:	440b      	add	r3, r1
 8102432:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8102434:	2300      	movs	r3, #0
}
 8102436:	4618      	mov	r0, r3
 8102438:	3714      	adds	r7, #20
 810243a:	46bd      	mov	sp, r7
 810243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102440:	4770      	bx	lr

08102442 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8102442:	b480      	push	{r7}
 8102444:	b083      	sub	sp, #12
 8102446:	af00      	add	r7, sp, #0
 8102448:	6078      	str	r0, [r7, #4]
 810244a:	460b      	mov	r3, r1
 810244c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 810244e:	687b      	ldr	r3, [r7, #4]
 8102450:	681b      	ldr	r3, [r3, #0]
 8102452:	887a      	ldrh	r2, [r7, #2]
 8102454:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8102456:	2300      	movs	r3, #0
}
 8102458:	4618      	mov	r0, r3
 810245a:	370c      	adds	r7, #12
 810245c:	46bd      	mov	sp, r7
 810245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102462:	4770      	bx	lr

08102464 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8102464:	b480      	push	{r7}
 8102466:	b085      	sub	sp, #20
 8102468:	af00      	add	r7, sp, #0
 810246a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 810246c:	687b      	ldr	r3, [r7, #4]
 810246e:	681b      	ldr	r3, [r3, #0]
 8102470:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8102472:	687b      	ldr	r3, [r7, #4]
 8102474:	2201      	movs	r2, #1
 8102476:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 810247a:	687b      	ldr	r3, [r7, #4]
 810247c:	2200      	movs	r2, #0
 810247e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8102482:	68fb      	ldr	r3, [r7, #12]
 8102484:	699b      	ldr	r3, [r3, #24]
 8102486:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 810248a:	68fb      	ldr	r3, [r7, #12]
 810248c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 810248e:	68fb      	ldr	r3, [r7, #12]
 8102490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8102496:	f043 0303 	orr.w	r3, r3, #3
 810249a:	68fa      	ldr	r2, [r7, #12]
 810249c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 810249e:	2300      	movs	r3, #0
}
 81024a0:	4618      	mov	r0, r3
 81024a2:	3714      	adds	r7, #20
 81024a4:	46bd      	mov	sp, r7
 81024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024aa:	4770      	bx	lr

081024ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 81024ac:	b480      	push	{r7}
 81024ae:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 81024b0:	4b0d      	ldr	r3, [pc, #52]	; (81024e8 <HAL_PWREx_GetVoltageRange+0x3c>)
 81024b2:	681b      	ldr	r3, [r3, #0]
 81024b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 81024b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81024bc:	d102      	bne.n	81024c4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 81024be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81024c2:	e00b      	b.n	81024dc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 81024c4:	4b08      	ldr	r3, [pc, #32]	; (81024e8 <HAL_PWREx_GetVoltageRange+0x3c>)
 81024c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81024ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81024ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81024d2:	d102      	bne.n	81024da <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 81024d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 81024d8:	e000      	b.n	81024dc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 81024da:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 81024dc:	4618      	mov	r0, r3
 81024de:	46bd      	mov	sp, r7
 81024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024e4:	4770      	bx	lr
 81024e6:	bf00      	nop
 81024e8:	40007000 	.word	0x40007000

081024ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 81024ec:	b480      	push	{r7}
 81024ee:	b085      	sub	sp, #20
 81024f0:	af00      	add	r7, sp, #0
 81024f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 81024f4:	687b      	ldr	r3, [r7, #4]
 81024f6:	2b00      	cmp	r3, #0
 81024f8:	d141      	bne.n	810257e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 81024fa:	4b4b      	ldr	r3, [pc, #300]	; (8102628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 81024fc:	681b      	ldr	r3, [r3, #0]
 81024fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8102502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8102506:	d131      	bne.n	810256c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8102508:	4b47      	ldr	r3, [pc, #284]	; (8102628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 810250a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810250e:	4a46      	ldr	r2, [pc, #280]	; (8102628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8102510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8102514:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8102518:	4b43      	ldr	r3, [pc, #268]	; (8102628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 810251a:	681b      	ldr	r3, [r3, #0]
 810251c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8102520:	4a41      	ldr	r2, [pc, #260]	; (8102628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8102522:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8102526:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8102528:	4b40      	ldr	r3, [pc, #256]	; (810262c <HAL_PWREx_ControlVoltageScaling+0x140>)
 810252a:	681b      	ldr	r3, [r3, #0]
 810252c:	2232      	movs	r2, #50	; 0x32
 810252e:	fb02 f303 	mul.w	r3, r2, r3
 8102532:	4a3f      	ldr	r2, [pc, #252]	; (8102630 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8102534:	fba2 2303 	umull	r2, r3, r2, r3
 8102538:	0c9b      	lsrs	r3, r3, #18
 810253a:	3301      	adds	r3, #1
 810253c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 810253e:	e002      	b.n	8102546 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8102540:	68fb      	ldr	r3, [r7, #12]
 8102542:	3b01      	subs	r3, #1
 8102544:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8102546:	4b38      	ldr	r3, [pc, #224]	; (8102628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8102548:	695b      	ldr	r3, [r3, #20]
 810254a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 810254e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8102552:	d102      	bne.n	810255a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8102554:	68fb      	ldr	r3, [r7, #12]
 8102556:	2b00      	cmp	r3, #0
 8102558:	d1f2      	bne.n	8102540 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 810255a:	4b33      	ldr	r3, [pc, #204]	; (8102628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 810255c:	695b      	ldr	r3, [r3, #20]
 810255e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8102562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8102566:	d158      	bne.n	810261a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8102568:	2303      	movs	r3, #3
 810256a:	e057      	b.n	810261c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 810256c:	4b2e      	ldr	r3, [pc, #184]	; (8102628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 810256e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8102572:	4a2d      	ldr	r2, [pc, #180]	; (8102628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8102574:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8102578:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 810257c:	e04d      	b.n	810261a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 810257e:	687b      	ldr	r3, [r7, #4]
 8102580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8102584:	d141      	bne.n	810260a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8102586:	4b28      	ldr	r3, [pc, #160]	; (8102628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8102588:	681b      	ldr	r3, [r3, #0]
 810258a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 810258e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8102592:	d131      	bne.n	81025f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8102594:	4b24      	ldr	r3, [pc, #144]	; (8102628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8102596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810259a:	4a23      	ldr	r2, [pc, #140]	; (8102628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 810259c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81025a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 81025a4:	4b20      	ldr	r3, [pc, #128]	; (8102628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 81025a6:	681b      	ldr	r3, [r3, #0]
 81025a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 81025ac:	4a1e      	ldr	r2, [pc, #120]	; (8102628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 81025ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 81025b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 81025b4:	4b1d      	ldr	r3, [pc, #116]	; (810262c <HAL_PWREx_ControlVoltageScaling+0x140>)
 81025b6:	681b      	ldr	r3, [r3, #0]
 81025b8:	2232      	movs	r2, #50	; 0x32
 81025ba:	fb02 f303 	mul.w	r3, r2, r3
 81025be:	4a1c      	ldr	r2, [pc, #112]	; (8102630 <HAL_PWREx_ControlVoltageScaling+0x144>)
 81025c0:	fba2 2303 	umull	r2, r3, r2, r3
 81025c4:	0c9b      	lsrs	r3, r3, #18
 81025c6:	3301      	adds	r3, #1
 81025c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 81025ca:	e002      	b.n	81025d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 81025cc:	68fb      	ldr	r3, [r7, #12]
 81025ce:	3b01      	subs	r3, #1
 81025d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 81025d2:	4b15      	ldr	r3, [pc, #84]	; (8102628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 81025d4:	695b      	ldr	r3, [r3, #20]
 81025d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81025da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81025de:	d102      	bne.n	81025e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 81025e0:	68fb      	ldr	r3, [r7, #12]
 81025e2:	2b00      	cmp	r3, #0
 81025e4:	d1f2      	bne.n	81025cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 81025e6:	4b10      	ldr	r3, [pc, #64]	; (8102628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 81025e8:	695b      	ldr	r3, [r3, #20]
 81025ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81025ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81025f2:	d112      	bne.n	810261a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 81025f4:	2303      	movs	r3, #3
 81025f6:	e011      	b.n	810261c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 81025f8:	4b0b      	ldr	r3, [pc, #44]	; (8102628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 81025fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81025fe:	4a0a      	ldr	r2, [pc, #40]	; (8102628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8102600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102604:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8102608:	e007      	b.n	810261a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 810260a:	4b07      	ldr	r3, [pc, #28]	; (8102628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 810260c:	681b      	ldr	r3, [r3, #0]
 810260e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8102612:	4a05      	ldr	r2, [pc, #20]	; (8102628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8102614:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8102618:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 810261a:	2300      	movs	r3, #0
}
 810261c:	4618      	mov	r0, r3
 810261e:	3714      	adds	r7, #20
 8102620:	46bd      	mov	sp, r7
 8102622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102626:	4770      	bx	lr
 8102628:	40007000 	.word	0x40007000
 810262c:	20000000 	.word	0x20000000
 8102630:	431bde83 	.word	0x431bde83

08102634 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8102634:	b480      	push	{r7}
 8102636:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8102638:	4b05      	ldr	r3, [pc, #20]	; (8102650 <HAL_PWREx_EnableVddUSB+0x1c>)
 810263a:	685b      	ldr	r3, [r3, #4]
 810263c:	4a04      	ldr	r2, [pc, #16]	; (8102650 <HAL_PWREx_EnableVddUSB+0x1c>)
 810263e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8102642:	6053      	str	r3, [r2, #4]
}
 8102644:	bf00      	nop
 8102646:	46bd      	mov	sp, r7
 8102648:	f85d 7b04 	ldr.w	r7, [sp], #4
 810264c:	4770      	bx	lr
 810264e:	bf00      	nop
 8102650:	40007000 	.word	0x40007000

08102654 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8102654:	b580      	push	{r7, lr}
 8102656:	b088      	sub	sp, #32
 8102658:	af00      	add	r7, sp, #0
 810265a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 810265c:	687b      	ldr	r3, [r7, #4]
 810265e:	2b00      	cmp	r3, #0
 8102660:	d102      	bne.n	8102668 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8102662:	2301      	movs	r3, #1
 8102664:	f000 bc08 	b.w	8102e78 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8102668:	4b96      	ldr	r3, [pc, #600]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 810266a:	689b      	ldr	r3, [r3, #8]
 810266c:	f003 030c 	and.w	r3, r3, #12
 8102670:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8102672:	4b94      	ldr	r3, [pc, #592]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 8102674:	68db      	ldr	r3, [r3, #12]
 8102676:	f003 0303 	and.w	r3, r3, #3
 810267a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 810267c:	687b      	ldr	r3, [r7, #4]
 810267e:	681b      	ldr	r3, [r3, #0]
 8102680:	f003 0310 	and.w	r3, r3, #16
 8102684:	2b00      	cmp	r3, #0
 8102686:	f000 80e4 	beq.w	8102852 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 810268a:	69bb      	ldr	r3, [r7, #24]
 810268c:	2b00      	cmp	r3, #0
 810268e:	d007      	beq.n	81026a0 <HAL_RCC_OscConfig+0x4c>
 8102690:	69bb      	ldr	r3, [r7, #24]
 8102692:	2b0c      	cmp	r3, #12
 8102694:	f040 808b 	bne.w	81027ae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8102698:	697b      	ldr	r3, [r7, #20]
 810269a:	2b01      	cmp	r3, #1
 810269c:	f040 8087 	bne.w	81027ae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 81026a0:	4b88      	ldr	r3, [pc, #544]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 81026a2:	681b      	ldr	r3, [r3, #0]
 81026a4:	f003 0302 	and.w	r3, r3, #2
 81026a8:	2b00      	cmp	r3, #0
 81026aa:	d005      	beq.n	81026b8 <HAL_RCC_OscConfig+0x64>
 81026ac:	687b      	ldr	r3, [r7, #4]
 81026ae:	699b      	ldr	r3, [r3, #24]
 81026b0:	2b00      	cmp	r3, #0
 81026b2:	d101      	bne.n	81026b8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 81026b4:	2301      	movs	r3, #1
 81026b6:	e3df      	b.n	8102e78 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 81026b8:	687b      	ldr	r3, [r7, #4]
 81026ba:	6a1a      	ldr	r2, [r3, #32]
 81026bc:	4b81      	ldr	r3, [pc, #516]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 81026be:	681b      	ldr	r3, [r3, #0]
 81026c0:	f003 0308 	and.w	r3, r3, #8
 81026c4:	2b00      	cmp	r3, #0
 81026c6:	d004      	beq.n	81026d2 <HAL_RCC_OscConfig+0x7e>
 81026c8:	4b7e      	ldr	r3, [pc, #504]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 81026ca:	681b      	ldr	r3, [r3, #0]
 81026cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 81026d0:	e005      	b.n	81026de <HAL_RCC_OscConfig+0x8a>
 81026d2:	4b7c      	ldr	r3, [pc, #496]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 81026d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81026d8:	091b      	lsrs	r3, r3, #4
 81026da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 81026de:	4293      	cmp	r3, r2
 81026e0:	d223      	bcs.n	810272a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 81026e2:	687b      	ldr	r3, [r7, #4]
 81026e4:	6a1b      	ldr	r3, [r3, #32]
 81026e6:	4618      	mov	r0, r3
 81026e8:	f000 fda0 	bl	810322c <RCC_SetFlashLatencyFromMSIRange>
 81026ec:	4603      	mov	r3, r0
 81026ee:	2b00      	cmp	r3, #0
 81026f0:	d001      	beq.n	81026f6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 81026f2:	2301      	movs	r3, #1
 81026f4:	e3c0      	b.n	8102e78 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 81026f6:	4b73      	ldr	r3, [pc, #460]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 81026f8:	681b      	ldr	r3, [r3, #0]
 81026fa:	4a72      	ldr	r2, [pc, #456]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 81026fc:	f043 0308 	orr.w	r3, r3, #8
 8102700:	6013      	str	r3, [r2, #0]
 8102702:	4b70      	ldr	r3, [pc, #448]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 8102704:	681b      	ldr	r3, [r3, #0]
 8102706:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 810270a:	687b      	ldr	r3, [r7, #4]
 810270c:	6a1b      	ldr	r3, [r3, #32]
 810270e:	496d      	ldr	r1, [pc, #436]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 8102710:	4313      	orrs	r3, r2
 8102712:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8102714:	4b6b      	ldr	r3, [pc, #428]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 8102716:	685b      	ldr	r3, [r3, #4]
 8102718:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 810271c:	687b      	ldr	r3, [r7, #4]
 810271e:	69db      	ldr	r3, [r3, #28]
 8102720:	021b      	lsls	r3, r3, #8
 8102722:	4968      	ldr	r1, [pc, #416]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 8102724:	4313      	orrs	r3, r2
 8102726:	604b      	str	r3, [r1, #4]
 8102728:	e025      	b.n	8102776 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 810272a:	4b66      	ldr	r3, [pc, #408]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 810272c:	681b      	ldr	r3, [r3, #0]
 810272e:	4a65      	ldr	r2, [pc, #404]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 8102730:	f043 0308 	orr.w	r3, r3, #8
 8102734:	6013      	str	r3, [r2, #0]
 8102736:	4b63      	ldr	r3, [pc, #396]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 8102738:	681b      	ldr	r3, [r3, #0]
 810273a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 810273e:	687b      	ldr	r3, [r7, #4]
 8102740:	6a1b      	ldr	r3, [r3, #32]
 8102742:	4960      	ldr	r1, [pc, #384]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 8102744:	4313      	orrs	r3, r2
 8102746:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8102748:	4b5e      	ldr	r3, [pc, #376]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 810274a:	685b      	ldr	r3, [r3, #4]
 810274c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8102750:	687b      	ldr	r3, [r7, #4]
 8102752:	69db      	ldr	r3, [r3, #28]
 8102754:	021b      	lsls	r3, r3, #8
 8102756:	495b      	ldr	r1, [pc, #364]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 8102758:	4313      	orrs	r3, r2
 810275a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 810275c:	69bb      	ldr	r3, [r7, #24]
 810275e:	2b00      	cmp	r3, #0
 8102760:	d109      	bne.n	8102776 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8102762:	687b      	ldr	r3, [r7, #4]
 8102764:	6a1b      	ldr	r3, [r3, #32]
 8102766:	4618      	mov	r0, r3
 8102768:	f000 fd60 	bl	810322c <RCC_SetFlashLatencyFromMSIRange>
 810276c:	4603      	mov	r3, r0
 810276e:	2b00      	cmp	r3, #0
 8102770:	d001      	beq.n	8102776 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8102772:	2301      	movs	r3, #1
 8102774:	e380      	b.n	8102e78 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8102776:	f000 fcc1 	bl	81030fc <HAL_RCC_GetSysClockFreq>
 810277a:	4602      	mov	r2, r0
 810277c:	4b51      	ldr	r3, [pc, #324]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 810277e:	689b      	ldr	r3, [r3, #8]
 8102780:	091b      	lsrs	r3, r3, #4
 8102782:	f003 030f 	and.w	r3, r3, #15
 8102786:	4950      	ldr	r1, [pc, #320]	; (81028c8 <HAL_RCC_OscConfig+0x274>)
 8102788:	5ccb      	ldrb	r3, [r1, r3]
 810278a:	f003 031f 	and.w	r3, r3, #31
 810278e:	fa22 f303 	lsr.w	r3, r2, r3
 8102792:	4a4e      	ldr	r2, [pc, #312]	; (81028cc <HAL_RCC_OscConfig+0x278>)
 8102794:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8102796:	4b4e      	ldr	r3, [pc, #312]	; (81028d0 <HAL_RCC_OscConfig+0x27c>)
 8102798:	681b      	ldr	r3, [r3, #0]
 810279a:	4618      	mov	r0, r3
 810279c:	f7fd feee 	bl	810057c <HAL_InitTick>
 81027a0:	4603      	mov	r3, r0
 81027a2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 81027a4:	7bfb      	ldrb	r3, [r7, #15]
 81027a6:	2b00      	cmp	r3, #0
 81027a8:	d052      	beq.n	8102850 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 81027aa:	7bfb      	ldrb	r3, [r7, #15]
 81027ac:	e364      	b.n	8102e78 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 81027ae:	687b      	ldr	r3, [r7, #4]
 81027b0:	699b      	ldr	r3, [r3, #24]
 81027b2:	2b00      	cmp	r3, #0
 81027b4:	d032      	beq.n	810281c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 81027b6:	4b43      	ldr	r3, [pc, #268]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 81027b8:	681b      	ldr	r3, [r3, #0]
 81027ba:	4a42      	ldr	r2, [pc, #264]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 81027bc:	f043 0301 	orr.w	r3, r3, #1
 81027c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 81027c2:	f7fd ff2b 	bl	810061c <HAL_GetTick>
 81027c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 81027c8:	e008      	b.n	81027dc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 81027ca:	f7fd ff27 	bl	810061c <HAL_GetTick>
 81027ce:	4602      	mov	r2, r0
 81027d0:	693b      	ldr	r3, [r7, #16]
 81027d2:	1ad3      	subs	r3, r2, r3
 81027d4:	2b02      	cmp	r3, #2
 81027d6:	d901      	bls.n	81027dc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 81027d8:	2303      	movs	r3, #3
 81027da:	e34d      	b.n	8102e78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 81027dc:	4b39      	ldr	r3, [pc, #228]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 81027de:	681b      	ldr	r3, [r3, #0]
 81027e0:	f003 0302 	and.w	r3, r3, #2
 81027e4:	2b00      	cmp	r3, #0
 81027e6:	d0f0      	beq.n	81027ca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 81027e8:	4b36      	ldr	r3, [pc, #216]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 81027ea:	681b      	ldr	r3, [r3, #0]
 81027ec:	4a35      	ldr	r2, [pc, #212]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 81027ee:	f043 0308 	orr.w	r3, r3, #8
 81027f2:	6013      	str	r3, [r2, #0]
 81027f4:	4b33      	ldr	r3, [pc, #204]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 81027f6:	681b      	ldr	r3, [r3, #0]
 81027f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 81027fc:	687b      	ldr	r3, [r7, #4]
 81027fe:	6a1b      	ldr	r3, [r3, #32]
 8102800:	4930      	ldr	r1, [pc, #192]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 8102802:	4313      	orrs	r3, r2
 8102804:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8102806:	4b2f      	ldr	r3, [pc, #188]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 8102808:	685b      	ldr	r3, [r3, #4]
 810280a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 810280e:	687b      	ldr	r3, [r7, #4]
 8102810:	69db      	ldr	r3, [r3, #28]
 8102812:	021b      	lsls	r3, r3, #8
 8102814:	492b      	ldr	r1, [pc, #172]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 8102816:	4313      	orrs	r3, r2
 8102818:	604b      	str	r3, [r1, #4]
 810281a:	e01a      	b.n	8102852 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 810281c:	4b29      	ldr	r3, [pc, #164]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 810281e:	681b      	ldr	r3, [r3, #0]
 8102820:	4a28      	ldr	r2, [pc, #160]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 8102822:	f023 0301 	bic.w	r3, r3, #1
 8102826:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8102828:	f7fd fef8 	bl	810061c <HAL_GetTick>
 810282c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 810282e:	e008      	b.n	8102842 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8102830:	f7fd fef4 	bl	810061c <HAL_GetTick>
 8102834:	4602      	mov	r2, r0
 8102836:	693b      	ldr	r3, [r7, #16]
 8102838:	1ad3      	subs	r3, r2, r3
 810283a:	2b02      	cmp	r3, #2
 810283c:	d901      	bls.n	8102842 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 810283e:	2303      	movs	r3, #3
 8102840:	e31a      	b.n	8102e78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8102842:	4b20      	ldr	r3, [pc, #128]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 8102844:	681b      	ldr	r3, [r3, #0]
 8102846:	f003 0302 	and.w	r3, r3, #2
 810284a:	2b00      	cmp	r3, #0
 810284c:	d1f0      	bne.n	8102830 <HAL_RCC_OscConfig+0x1dc>
 810284e:	e000      	b.n	8102852 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8102850:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8102852:	687b      	ldr	r3, [r7, #4]
 8102854:	681b      	ldr	r3, [r3, #0]
 8102856:	f003 0301 	and.w	r3, r3, #1
 810285a:	2b00      	cmp	r3, #0
 810285c:	d073      	beq.n	8102946 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 810285e:	69bb      	ldr	r3, [r7, #24]
 8102860:	2b08      	cmp	r3, #8
 8102862:	d005      	beq.n	8102870 <HAL_RCC_OscConfig+0x21c>
 8102864:	69bb      	ldr	r3, [r7, #24]
 8102866:	2b0c      	cmp	r3, #12
 8102868:	d10e      	bne.n	8102888 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 810286a:	697b      	ldr	r3, [r7, #20]
 810286c:	2b03      	cmp	r3, #3
 810286e:	d10b      	bne.n	8102888 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8102870:	4b14      	ldr	r3, [pc, #80]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 8102872:	681b      	ldr	r3, [r3, #0]
 8102874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102878:	2b00      	cmp	r3, #0
 810287a:	d063      	beq.n	8102944 <HAL_RCC_OscConfig+0x2f0>
 810287c:	687b      	ldr	r3, [r7, #4]
 810287e:	685b      	ldr	r3, [r3, #4]
 8102880:	2b00      	cmp	r3, #0
 8102882:	d15f      	bne.n	8102944 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8102884:	2301      	movs	r3, #1
 8102886:	e2f7      	b.n	8102e78 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8102888:	687b      	ldr	r3, [r7, #4]
 810288a:	685b      	ldr	r3, [r3, #4]
 810288c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102890:	d106      	bne.n	81028a0 <HAL_RCC_OscConfig+0x24c>
 8102892:	4b0c      	ldr	r3, [pc, #48]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 8102894:	681b      	ldr	r3, [r3, #0]
 8102896:	4a0b      	ldr	r2, [pc, #44]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 8102898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810289c:	6013      	str	r3, [r2, #0]
 810289e:	e025      	b.n	81028ec <HAL_RCC_OscConfig+0x298>
 81028a0:	687b      	ldr	r3, [r7, #4]
 81028a2:	685b      	ldr	r3, [r3, #4]
 81028a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81028a8:	d114      	bne.n	81028d4 <HAL_RCC_OscConfig+0x280>
 81028aa:	4b06      	ldr	r3, [pc, #24]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 81028ac:	681b      	ldr	r3, [r3, #0]
 81028ae:	4a05      	ldr	r2, [pc, #20]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 81028b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 81028b4:	6013      	str	r3, [r2, #0]
 81028b6:	4b03      	ldr	r3, [pc, #12]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 81028b8:	681b      	ldr	r3, [r3, #0]
 81028ba:	4a02      	ldr	r2, [pc, #8]	; (81028c4 <HAL_RCC_OscConfig+0x270>)
 81028bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81028c0:	6013      	str	r3, [r2, #0]
 81028c2:	e013      	b.n	81028ec <HAL_RCC_OscConfig+0x298>
 81028c4:	40021000 	.word	0x40021000
 81028c8:	08107b58 	.word	0x08107b58
 81028cc:	20000000 	.word	0x20000000
 81028d0:	20000004 	.word	0x20000004
 81028d4:	4ba0      	ldr	r3, [pc, #640]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 81028d6:	681b      	ldr	r3, [r3, #0]
 81028d8:	4a9f      	ldr	r2, [pc, #636]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 81028da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81028de:	6013      	str	r3, [r2, #0]
 81028e0:	4b9d      	ldr	r3, [pc, #628]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 81028e2:	681b      	ldr	r3, [r3, #0]
 81028e4:	4a9c      	ldr	r2, [pc, #624]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 81028e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 81028ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 81028ec:	687b      	ldr	r3, [r7, #4]
 81028ee:	685b      	ldr	r3, [r3, #4]
 81028f0:	2b00      	cmp	r3, #0
 81028f2:	d013      	beq.n	810291c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81028f4:	f7fd fe92 	bl	810061c <HAL_GetTick>
 81028f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 81028fa:	e008      	b.n	810290e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 81028fc:	f7fd fe8e 	bl	810061c <HAL_GetTick>
 8102900:	4602      	mov	r2, r0
 8102902:	693b      	ldr	r3, [r7, #16]
 8102904:	1ad3      	subs	r3, r2, r3
 8102906:	2b64      	cmp	r3, #100	; 0x64
 8102908:	d901      	bls.n	810290e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 810290a:	2303      	movs	r3, #3
 810290c:	e2b4      	b.n	8102e78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 810290e:	4b92      	ldr	r3, [pc, #584]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 8102910:	681b      	ldr	r3, [r3, #0]
 8102912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102916:	2b00      	cmp	r3, #0
 8102918:	d0f0      	beq.n	81028fc <HAL_RCC_OscConfig+0x2a8>
 810291a:	e014      	b.n	8102946 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810291c:	f7fd fe7e 	bl	810061c <HAL_GetTick>
 8102920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8102922:	e008      	b.n	8102936 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8102924:	f7fd fe7a 	bl	810061c <HAL_GetTick>
 8102928:	4602      	mov	r2, r0
 810292a:	693b      	ldr	r3, [r7, #16]
 810292c:	1ad3      	subs	r3, r2, r3
 810292e:	2b64      	cmp	r3, #100	; 0x64
 8102930:	d901      	bls.n	8102936 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8102932:	2303      	movs	r3, #3
 8102934:	e2a0      	b.n	8102e78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8102936:	4b88      	ldr	r3, [pc, #544]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 8102938:	681b      	ldr	r3, [r3, #0]
 810293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810293e:	2b00      	cmp	r3, #0
 8102940:	d1f0      	bne.n	8102924 <HAL_RCC_OscConfig+0x2d0>
 8102942:	e000      	b.n	8102946 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8102944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8102946:	687b      	ldr	r3, [r7, #4]
 8102948:	681b      	ldr	r3, [r3, #0]
 810294a:	f003 0302 	and.w	r3, r3, #2
 810294e:	2b00      	cmp	r3, #0
 8102950:	d060      	beq.n	8102a14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8102952:	69bb      	ldr	r3, [r7, #24]
 8102954:	2b04      	cmp	r3, #4
 8102956:	d005      	beq.n	8102964 <HAL_RCC_OscConfig+0x310>
 8102958:	69bb      	ldr	r3, [r7, #24]
 810295a:	2b0c      	cmp	r3, #12
 810295c:	d119      	bne.n	8102992 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 810295e:	697b      	ldr	r3, [r7, #20]
 8102960:	2b02      	cmp	r3, #2
 8102962:	d116      	bne.n	8102992 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8102964:	4b7c      	ldr	r3, [pc, #496]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 8102966:	681b      	ldr	r3, [r3, #0]
 8102968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 810296c:	2b00      	cmp	r3, #0
 810296e:	d005      	beq.n	810297c <HAL_RCC_OscConfig+0x328>
 8102970:	687b      	ldr	r3, [r7, #4]
 8102972:	68db      	ldr	r3, [r3, #12]
 8102974:	2b00      	cmp	r3, #0
 8102976:	d101      	bne.n	810297c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8102978:	2301      	movs	r3, #1
 810297a:	e27d      	b.n	8102e78 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 810297c:	4b76      	ldr	r3, [pc, #472]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 810297e:	685b      	ldr	r3, [r3, #4]
 8102980:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8102984:	687b      	ldr	r3, [r7, #4]
 8102986:	691b      	ldr	r3, [r3, #16]
 8102988:	061b      	lsls	r3, r3, #24
 810298a:	4973      	ldr	r1, [pc, #460]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 810298c:	4313      	orrs	r3, r2
 810298e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8102990:	e040      	b.n	8102a14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8102992:	687b      	ldr	r3, [r7, #4]
 8102994:	68db      	ldr	r3, [r3, #12]
 8102996:	2b00      	cmp	r3, #0
 8102998:	d023      	beq.n	81029e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 810299a:	4b6f      	ldr	r3, [pc, #444]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 810299c:	681b      	ldr	r3, [r3, #0]
 810299e:	4a6e      	ldr	r2, [pc, #440]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 81029a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81029a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81029a6:	f7fd fe39 	bl	810061c <HAL_GetTick>
 81029aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 81029ac:	e008      	b.n	81029c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 81029ae:	f7fd fe35 	bl	810061c <HAL_GetTick>
 81029b2:	4602      	mov	r2, r0
 81029b4:	693b      	ldr	r3, [r7, #16]
 81029b6:	1ad3      	subs	r3, r2, r3
 81029b8:	2b02      	cmp	r3, #2
 81029ba:	d901      	bls.n	81029c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 81029bc:	2303      	movs	r3, #3
 81029be:	e25b      	b.n	8102e78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 81029c0:	4b65      	ldr	r3, [pc, #404]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 81029c2:	681b      	ldr	r3, [r3, #0]
 81029c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81029c8:	2b00      	cmp	r3, #0
 81029ca:	d0f0      	beq.n	81029ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 81029cc:	4b62      	ldr	r3, [pc, #392]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 81029ce:	685b      	ldr	r3, [r3, #4]
 81029d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 81029d4:	687b      	ldr	r3, [r7, #4]
 81029d6:	691b      	ldr	r3, [r3, #16]
 81029d8:	061b      	lsls	r3, r3, #24
 81029da:	495f      	ldr	r1, [pc, #380]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 81029dc:	4313      	orrs	r3, r2
 81029de:	604b      	str	r3, [r1, #4]
 81029e0:	e018      	b.n	8102a14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 81029e2:	4b5d      	ldr	r3, [pc, #372]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 81029e4:	681b      	ldr	r3, [r3, #0]
 81029e6:	4a5c      	ldr	r2, [pc, #368]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 81029e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81029ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81029ee:	f7fd fe15 	bl	810061c <HAL_GetTick>
 81029f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 81029f4:	e008      	b.n	8102a08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 81029f6:	f7fd fe11 	bl	810061c <HAL_GetTick>
 81029fa:	4602      	mov	r2, r0
 81029fc:	693b      	ldr	r3, [r7, #16]
 81029fe:	1ad3      	subs	r3, r2, r3
 8102a00:	2b02      	cmp	r3, #2
 8102a02:	d901      	bls.n	8102a08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8102a04:	2303      	movs	r3, #3
 8102a06:	e237      	b.n	8102e78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8102a08:	4b53      	ldr	r3, [pc, #332]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 8102a0a:	681b      	ldr	r3, [r3, #0]
 8102a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8102a10:	2b00      	cmp	r3, #0
 8102a12:	d1f0      	bne.n	81029f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8102a14:	687b      	ldr	r3, [r7, #4]
 8102a16:	681b      	ldr	r3, [r3, #0]
 8102a18:	f003 0308 	and.w	r3, r3, #8
 8102a1c:	2b00      	cmp	r3, #0
 8102a1e:	d03c      	beq.n	8102a9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8102a20:	687b      	ldr	r3, [r7, #4]
 8102a22:	695b      	ldr	r3, [r3, #20]
 8102a24:	2b00      	cmp	r3, #0
 8102a26:	d01c      	beq.n	8102a62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8102a28:	4b4b      	ldr	r3, [pc, #300]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 8102a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8102a2e:	4a4a      	ldr	r2, [pc, #296]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 8102a30:	f043 0301 	orr.w	r3, r3, #1
 8102a34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8102a38:	f7fd fdf0 	bl	810061c <HAL_GetTick>
 8102a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8102a3e:	e008      	b.n	8102a52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8102a40:	f7fd fdec 	bl	810061c <HAL_GetTick>
 8102a44:	4602      	mov	r2, r0
 8102a46:	693b      	ldr	r3, [r7, #16]
 8102a48:	1ad3      	subs	r3, r2, r3
 8102a4a:	2b02      	cmp	r3, #2
 8102a4c:	d901      	bls.n	8102a52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8102a4e:	2303      	movs	r3, #3
 8102a50:	e212      	b.n	8102e78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8102a52:	4b41      	ldr	r3, [pc, #260]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 8102a54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8102a58:	f003 0302 	and.w	r3, r3, #2
 8102a5c:	2b00      	cmp	r3, #0
 8102a5e:	d0ef      	beq.n	8102a40 <HAL_RCC_OscConfig+0x3ec>
 8102a60:	e01b      	b.n	8102a9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8102a62:	4b3d      	ldr	r3, [pc, #244]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 8102a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8102a68:	4a3b      	ldr	r2, [pc, #236]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 8102a6a:	f023 0301 	bic.w	r3, r3, #1
 8102a6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8102a72:	f7fd fdd3 	bl	810061c <HAL_GetTick>
 8102a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8102a78:	e008      	b.n	8102a8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8102a7a:	f7fd fdcf 	bl	810061c <HAL_GetTick>
 8102a7e:	4602      	mov	r2, r0
 8102a80:	693b      	ldr	r3, [r7, #16]
 8102a82:	1ad3      	subs	r3, r2, r3
 8102a84:	2b02      	cmp	r3, #2
 8102a86:	d901      	bls.n	8102a8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8102a88:	2303      	movs	r3, #3
 8102a8a:	e1f5      	b.n	8102e78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8102a8c:	4b32      	ldr	r3, [pc, #200]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 8102a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8102a92:	f003 0302 	and.w	r3, r3, #2
 8102a96:	2b00      	cmp	r3, #0
 8102a98:	d1ef      	bne.n	8102a7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8102a9a:	687b      	ldr	r3, [r7, #4]
 8102a9c:	681b      	ldr	r3, [r3, #0]
 8102a9e:	f003 0304 	and.w	r3, r3, #4
 8102aa2:	2b00      	cmp	r3, #0
 8102aa4:	f000 80a6 	beq.w	8102bf4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8102aa8:	2300      	movs	r3, #0
 8102aaa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8102aac:	4b2a      	ldr	r3, [pc, #168]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 8102aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8102ab4:	2b00      	cmp	r3, #0
 8102ab6:	d10d      	bne.n	8102ad4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8102ab8:	4b27      	ldr	r3, [pc, #156]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 8102aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102abc:	4a26      	ldr	r2, [pc, #152]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 8102abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8102ac2:	6593      	str	r3, [r2, #88]	; 0x58
 8102ac4:	4b24      	ldr	r3, [pc, #144]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 8102ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8102acc:	60bb      	str	r3, [r7, #8]
 8102ace:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8102ad0:	2301      	movs	r3, #1
 8102ad2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8102ad4:	4b21      	ldr	r3, [pc, #132]	; (8102b5c <HAL_RCC_OscConfig+0x508>)
 8102ad6:	681b      	ldr	r3, [r3, #0]
 8102ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102adc:	2b00      	cmp	r3, #0
 8102ade:	d118      	bne.n	8102b12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8102ae0:	4b1e      	ldr	r3, [pc, #120]	; (8102b5c <HAL_RCC_OscConfig+0x508>)
 8102ae2:	681b      	ldr	r3, [r3, #0]
 8102ae4:	4a1d      	ldr	r2, [pc, #116]	; (8102b5c <HAL_RCC_OscConfig+0x508>)
 8102ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102aea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8102aec:	f7fd fd96 	bl	810061c <HAL_GetTick>
 8102af0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8102af2:	e008      	b.n	8102b06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8102af4:	f7fd fd92 	bl	810061c <HAL_GetTick>
 8102af8:	4602      	mov	r2, r0
 8102afa:	693b      	ldr	r3, [r7, #16]
 8102afc:	1ad3      	subs	r3, r2, r3
 8102afe:	2b02      	cmp	r3, #2
 8102b00:	d901      	bls.n	8102b06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8102b02:	2303      	movs	r3, #3
 8102b04:	e1b8      	b.n	8102e78 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8102b06:	4b15      	ldr	r3, [pc, #84]	; (8102b5c <HAL_RCC_OscConfig+0x508>)
 8102b08:	681b      	ldr	r3, [r3, #0]
 8102b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102b0e:	2b00      	cmp	r3, #0
 8102b10:	d0f0      	beq.n	8102af4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8102b12:	687b      	ldr	r3, [r7, #4]
 8102b14:	689b      	ldr	r3, [r3, #8]
 8102b16:	2b01      	cmp	r3, #1
 8102b18:	d108      	bne.n	8102b2c <HAL_RCC_OscConfig+0x4d8>
 8102b1a:	4b0f      	ldr	r3, [pc, #60]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 8102b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102b20:	4a0d      	ldr	r2, [pc, #52]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 8102b22:	f043 0301 	orr.w	r3, r3, #1
 8102b26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8102b2a:	e029      	b.n	8102b80 <HAL_RCC_OscConfig+0x52c>
 8102b2c:	687b      	ldr	r3, [r7, #4]
 8102b2e:	689b      	ldr	r3, [r3, #8]
 8102b30:	2b05      	cmp	r3, #5
 8102b32:	d115      	bne.n	8102b60 <HAL_RCC_OscConfig+0x50c>
 8102b34:	4b08      	ldr	r3, [pc, #32]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 8102b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102b3a:	4a07      	ldr	r2, [pc, #28]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 8102b3c:	f043 0304 	orr.w	r3, r3, #4
 8102b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8102b44:	4b04      	ldr	r3, [pc, #16]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 8102b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102b4a:	4a03      	ldr	r2, [pc, #12]	; (8102b58 <HAL_RCC_OscConfig+0x504>)
 8102b4c:	f043 0301 	orr.w	r3, r3, #1
 8102b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8102b54:	e014      	b.n	8102b80 <HAL_RCC_OscConfig+0x52c>
 8102b56:	bf00      	nop
 8102b58:	40021000 	.word	0x40021000
 8102b5c:	40007000 	.word	0x40007000
 8102b60:	4b9d      	ldr	r3, [pc, #628]	; (8102dd8 <HAL_RCC_OscConfig+0x784>)
 8102b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102b66:	4a9c      	ldr	r2, [pc, #624]	; (8102dd8 <HAL_RCC_OscConfig+0x784>)
 8102b68:	f023 0301 	bic.w	r3, r3, #1
 8102b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8102b70:	4b99      	ldr	r3, [pc, #612]	; (8102dd8 <HAL_RCC_OscConfig+0x784>)
 8102b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102b76:	4a98      	ldr	r2, [pc, #608]	; (8102dd8 <HAL_RCC_OscConfig+0x784>)
 8102b78:	f023 0304 	bic.w	r3, r3, #4
 8102b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8102b80:	687b      	ldr	r3, [r7, #4]
 8102b82:	689b      	ldr	r3, [r3, #8]
 8102b84:	2b00      	cmp	r3, #0
 8102b86:	d016      	beq.n	8102bb6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8102b88:	f7fd fd48 	bl	810061c <HAL_GetTick>
 8102b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8102b8e:	e00a      	b.n	8102ba6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8102b90:	f7fd fd44 	bl	810061c <HAL_GetTick>
 8102b94:	4602      	mov	r2, r0
 8102b96:	693b      	ldr	r3, [r7, #16]
 8102b98:	1ad3      	subs	r3, r2, r3
 8102b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8102b9e:	4293      	cmp	r3, r2
 8102ba0:	d901      	bls.n	8102ba6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8102ba2:	2303      	movs	r3, #3
 8102ba4:	e168      	b.n	8102e78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8102ba6:	4b8c      	ldr	r3, [pc, #560]	; (8102dd8 <HAL_RCC_OscConfig+0x784>)
 8102ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102bac:	f003 0302 	and.w	r3, r3, #2
 8102bb0:	2b00      	cmp	r3, #0
 8102bb2:	d0ed      	beq.n	8102b90 <HAL_RCC_OscConfig+0x53c>
 8102bb4:	e015      	b.n	8102be2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8102bb6:	f7fd fd31 	bl	810061c <HAL_GetTick>
 8102bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8102bbc:	e00a      	b.n	8102bd4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8102bbe:	f7fd fd2d 	bl	810061c <HAL_GetTick>
 8102bc2:	4602      	mov	r2, r0
 8102bc4:	693b      	ldr	r3, [r7, #16]
 8102bc6:	1ad3      	subs	r3, r2, r3
 8102bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8102bcc:	4293      	cmp	r3, r2
 8102bce:	d901      	bls.n	8102bd4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8102bd0:	2303      	movs	r3, #3
 8102bd2:	e151      	b.n	8102e78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8102bd4:	4b80      	ldr	r3, [pc, #512]	; (8102dd8 <HAL_RCC_OscConfig+0x784>)
 8102bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102bda:	f003 0302 	and.w	r3, r3, #2
 8102bde:	2b00      	cmp	r3, #0
 8102be0:	d1ed      	bne.n	8102bbe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8102be2:	7ffb      	ldrb	r3, [r7, #31]
 8102be4:	2b01      	cmp	r3, #1
 8102be6:	d105      	bne.n	8102bf4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8102be8:	4b7b      	ldr	r3, [pc, #492]	; (8102dd8 <HAL_RCC_OscConfig+0x784>)
 8102bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102bec:	4a7a      	ldr	r2, [pc, #488]	; (8102dd8 <HAL_RCC_OscConfig+0x784>)
 8102bee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8102bf2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8102bf4:	687b      	ldr	r3, [r7, #4]
 8102bf6:	681b      	ldr	r3, [r3, #0]
 8102bf8:	f003 0320 	and.w	r3, r3, #32
 8102bfc:	2b00      	cmp	r3, #0
 8102bfe:	d03c      	beq.n	8102c7a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8102c00:	687b      	ldr	r3, [r7, #4]
 8102c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102c04:	2b00      	cmp	r3, #0
 8102c06:	d01c      	beq.n	8102c42 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8102c08:	4b73      	ldr	r3, [pc, #460]	; (8102dd8 <HAL_RCC_OscConfig+0x784>)
 8102c0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8102c0e:	4a72      	ldr	r2, [pc, #456]	; (8102dd8 <HAL_RCC_OscConfig+0x784>)
 8102c10:	f043 0301 	orr.w	r3, r3, #1
 8102c14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8102c18:	f7fd fd00 	bl	810061c <HAL_GetTick>
 8102c1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8102c1e:	e008      	b.n	8102c32 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8102c20:	f7fd fcfc 	bl	810061c <HAL_GetTick>
 8102c24:	4602      	mov	r2, r0
 8102c26:	693b      	ldr	r3, [r7, #16]
 8102c28:	1ad3      	subs	r3, r2, r3
 8102c2a:	2b02      	cmp	r3, #2
 8102c2c:	d901      	bls.n	8102c32 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8102c2e:	2303      	movs	r3, #3
 8102c30:	e122      	b.n	8102e78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8102c32:	4b69      	ldr	r3, [pc, #420]	; (8102dd8 <HAL_RCC_OscConfig+0x784>)
 8102c34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8102c38:	f003 0302 	and.w	r3, r3, #2
 8102c3c:	2b00      	cmp	r3, #0
 8102c3e:	d0ef      	beq.n	8102c20 <HAL_RCC_OscConfig+0x5cc>
 8102c40:	e01b      	b.n	8102c7a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8102c42:	4b65      	ldr	r3, [pc, #404]	; (8102dd8 <HAL_RCC_OscConfig+0x784>)
 8102c44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8102c48:	4a63      	ldr	r2, [pc, #396]	; (8102dd8 <HAL_RCC_OscConfig+0x784>)
 8102c4a:	f023 0301 	bic.w	r3, r3, #1
 8102c4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8102c52:	f7fd fce3 	bl	810061c <HAL_GetTick>
 8102c56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8102c58:	e008      	b.n	8102c6c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8102c5a:	f7fd fcdf 	bl	810061c <HAL_GetTick>
 8102c5e:	4602      	mov	r2, r0
 8102c60:	693b      	ldr	r3, [r7, #16]
 8102c62:	1ad3      	subs	r3, r2, r3
 8102c64:	2b02      	cmp	r3, #2
 8102c66:	d901      	bls.n	8102c6c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8102c68:	2303      	movs	r3, #3
 8102c6a:	e105      	b.n	8102e78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8102c6c:	4b5a      	ldr	r3, [pc, #360]	; (8102dd8 <HAL_RCC_OscConfig+0x784>)
 8102c6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8102c72:	f003 0302 	and.w	r3, r3, #2
 8102c76:	2b00      	cmp	r3, #0
 8102c78:	d1ef      	bne.n	8102c5a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8102c7a:	687b      	ldr	r3, [r7, #4]
 8102c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102c7e:	2b00      	cmp	r3, #0
 8102c80:	f000 80f9 	beq.w	8102e76 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8102c84:	687b      	ldr	r3, [r7, #4]
 8102c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102c88:	2b02      	cmp	r3, #2
 8102c8a:	f040 80cf 	bne.w	8102e2c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8102c8e:	4b52      	ldr	r3, [pc, #328]	; (8102dd8 <HAL_RCC_OscConfig+0x784>)
 8102c90:	68db      	ldr	r3, [r3, #12]
 8102c92:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8102c94:	697b      	ldr	r3, [r7, #20]
 8102c96:	f003 0203 	and.w	r2, r3, #3
 8102c9a:	687b      	ldr	r3, [r7, #4]
 8102c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c9e:	429a      	cmp	r2, r3
 8102ca0:	d12c      	bne.n	8102cfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8102ca2:	697b      	ldr	r3, [r7, #20]
 8102ca4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8102ca8:	687b      	ldr	r3, [r7, #4]
 8102caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102cac:	3b01      	subs	r3, #1
 8102cae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8102cb0:	429a      	cmp	r2, r3
 8102cb2:	d123      	bne.n	8102cfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8102cb4:	697b      	ldr	r3, [r7, #20]
 8102cb6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8102cba:	687b      	ldr	r3, [r7, #4]
 8102cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102cbe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8102cc0:	429a      	cmp	r2, r3
 8102cc2:	d11b      	bne.n	8102cfc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8102cc4:	697b      	ldr	r3, [r7, #20]
 8102cc6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8102cca:	687b      	ldr	r3, [r7, #4]
 8102ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102cce:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8102cd0:	429a      	cmp	r2, r3
 8102cd2:	d113      	bne.n	8102cfc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8102cd4:	697b      	ldr	r3, [r7, #20]
 8102cd6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8102cda:	687b      	ldr	r3, [r7, #4]
 8102cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102cde:	085b      	lsrs	r3, r3, #1
 8102ce0:	3b01      	subs	r3, #1
 8102ce2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8102ce4:	429a      	cmp	r2, r3
 8102ce6:	d109      	bne.n	8102cfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8102ce8:	697b      	ldr	r3, [r7, #20]
 8102cea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8102cee:	687b      	ldr	r3, [r7, #4]
 8102cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102cf2:	085b      	lsrs	r3, r3, #1
 8102cf4:	3b01      	subs	r3, #1
 8102cf6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8102cf8:	429a      	cmp	r2, r3
 8102cfa:	d071      	beq.n	8102de0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8102cfc:	69bb      	ldr	r3, [r7, #24]
 8102cfe:	2b0c      	cmp	r3, #12
 8102d00:	d068      	beq.n	8102dd4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8102d02:	4b35      	ldr	r3, [pc, #212]	; (8102dd8 <HAL_RCC_OscConfig+0x784>)
 8102d04:	681b      	ldr	r3, [r3, #0]
 8102d06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8102d0a:	2b00      	cmp	r3, #0
 8102d0c:	d105      	bne.n	8102d1a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8102d0e:	4b32      	ldr	r3, [pc, #200]	; (8102dd8 <HAL_RCC_OscConfig+0x784>)
 8102d10:	681b      	ldr	r3, [r3, #0]
 8102d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8102d16:	2b00      	cmp	r3, #0
 8102d18:	d001      	beq.n	8102d1e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8102d1a:	2301      	movs	r3, #1
 8102d1c:	e0ac      	b.n	8102e78 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8102d1e:	4b2e      	ldr	r3, [pc, #184]	; (8102dd8 <HAL_RCC_OscConfig+0x784>)
 8102d20:	681b      	ldr	r3, [r3, #0]
 8102d22:	4a2d      	ldr	r2, [pc, #180]	; (8102dd8 <HAL_RCC_OscConfig+0x784>)
 8102d24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8102d28:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8102d2a:	f7fd fc77 	bl	810061c <HAL_GetTick>
 8102d2e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8102d30:	e008      	b.n	8102d44 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8102d32:	f7fd fc73 	bl	810061c <HAL_GetTick>
 8102d36:	4602      	mov	r2, r0
 8102d38:	693b      	ldr	r3, [r7, #16]
 8102d3a:	1ad3      	subs	r3, r2, r3
 8102d3c:	2b02      	cmp	r3, #2
 8102d3e:	d901      	bls.n	8102d44 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8102d40:	2303      	movs	r3, #3
 8102d42:	e099      	b.n	8102e78 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8102d44:	4b24      	ldr	r3, [pc, #144]	; (8102dd8 <HAL_RCC_OscConfig+0x784>)
 8102d46:	681b      	ldr	r3, [r3, #0]
 8102d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102d4c:	2b00      	cmp	r3, #0
 8102d4e:	d1f0      	bne.n	8102d32 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8102d50:	4b21      	ldr	r3, [pc, #132]	; (8102dd8 <HAL_RCC_OscConfig+0x784>)
 8102d52:	68da      	ldr	r2, [r3, #12]
 8102d54:	4b21      	ldr	r3, [pc, #132]	; (8102ddc <HAL_RCC_OscConfig+0x788>)
 8102d56:	4013      	ands	r3, r2
 8102d58:	687a      	ldr	r2, [r7, #4]
 8102d5a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8102d5c:	687a      	ldr	r2, [r7, #4]
 8102d5e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8102d60:	3a01      	subs	r2, #1
 8102d62:	0112      	lsls	r2, r2, #4
 8102d64:	4311      	orrs	r1, r2
 8102d66:	687a      	ldr	r2, [r7, #4]
 8102d68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8102d6a:	0212      	lsls	r2, r2, #8
 8102d6c:	4311      	orrs	r1, r2
 8102d6e:	687a      	ldr	r2, [r7, #4]
 8102d70:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8102d72:	0852      	lsrs	r2, r2, #1
 8102d74:	3a01      	subs	r2, #1
 8102d76:	0552      	lsls	r2, r2, #21
 8102d78:	4311      	orrs	r1, r2
 8102d7a:	687a      	ldr	r2, [r7, #4]
 8102d7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8102d7e:	0852      	lsrs	r2, r2, #1
 8102d80:	3a01      	subs	r2, #1
 8102d82:	0652      	lsls	r2, r2, #25
 8102d84:	4311      	orrs	r1, r2
 8102d86:	687a      	ldr	r2, [r7, #4]
 8102d88:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8102d8a:	06d2      	lsls	r2, r2, #27
 8102d8c:	430a      	orrs	r2, r1
 8102d8e:	4912      	ldr	r1, [pc, #72]	; (8102dd8 <HAL_RCC_OscConfig+0x784>)
 8102d90:	4313      	orrs	r3, r2
 8102d92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8102d94:	4b10      	ldr	r3, [pc, #64]	; (8102dd8 <HAL_RCC_OscConfig+0x784>)
 8102d96:	681b      	ldr	r3, [r3, #0]
 8102d98:	4a0f      	ldr	r2, [pc, #60]	; (8102dd8 <HAL_RCC_OscConfig+0x784>)
 8102d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8102d9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8102da0:	4b0d      	ldr	r3, [pc, #52]	; (8102dd8 <HAL_RCC_OscConfig+0x784>)
 8102da2:	68db      	ldr	r3, [r3, #12]
 8102da4:	4a0c      	ldr	r2, [pc, #48]	; (8102dd8 <HAL_RCC_OscConfig+0x784>)
 8102da6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8102daa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8102dac:	f7fd fc36 	bl	810061c <HAL_GetTick>
 8102db0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8102db2:	e008      	b.n	8102dc6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8102db4:	f7fd fc32 	bl	810061c <HAL_GetTick>
 8102db8:	4602      	mov	r2, r0
 8102dba:	693b      	ldr	r3, [r7, #16]
 8102dbc:	1ad3      	subs	r3, r2, r3
 8102dbe:	2b02      	cmp	r3, #2
 8102dc0:	d901      	bls.n	8102dc6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8102dc2:	2303      	movs	r3, #3
 8102dc4:	e058      	b.n	8102e78 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8102dc6:	4b04      	ldr	r3, [pc, #16]	; (8102dd8 <HAL_RCC_OscConfig+0x784>)
 8102dc8:	681b      	ldr	r3, [r3, #0]
 8102dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102dce:	2b00      	cmp	r3, #0
 8102dd0:	d0f0      	beq.n	8102db4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8102dd2:	e050      	b.n	8102e76 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8102dd4:	2301      	movs	r3, #1
 8102dd6:	e04f      	b.n	8102e78 <HAL_RCC_OscConfig+0x824>
 8102dd8:	40021000 	.word	0x40021000
 8102ddc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8102de0:	4b27      	ldr	r3, [pc, #156]	; (8102e80 <HAL_RCC_OscConfig+0x82c>)
 8102de2:	681b      	ldr	r3, [r3, #0]
 8102de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102de8:	2b00      	cmp	r3, #0
 8102dea:	d144      	bne.n	8102e76 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8102dec:	4b24      	ldr	r3, [pc, #144]	; (8102e80 <HAL_RCC_OscConfig+0x82c>)
 8102dee:	681b      	ldr	r3, [r3, #0]
 8102df0:	4a23      	ldr	r2, [pc, #140]	; (8102e80 <HAL_RCC_OscConfig+0x82c>)
 8102df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8102df6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8102df8:	4b21      	ldr	r3, [pc, #132]	; (8102e80 <HAL_RCC_OscConfig+0x82c>)
 8102dfa:	68db      	ldr	r3, [r3, #12]
 8102dfc:	4a20      	ldr	r2, [pc, #128]	; (8102e80 <HAL_RCC_OscConfig+0x82c>)
 8102dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8102e02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8102e04:	f7fd fc0a 	bl	810061c <HAL_GetTick>
 8102e08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8102e0a:	e008      	b.n	8102e1e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8102e0c:	f7fd fc06 	bl	810061c <HAL_GetTick>
 8102e10:	4602      	mov	r2, r0
 8102e12:	693b      	ldr	r3, [r7, #16]
 8102e14:	1ad3      	subs	r3, r2, r3
 8102e16:	2b02      	cmp	r3, #2
 8102e18:	d901      	bls.n	8102e1e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8102e1a:	2303      	movs	r3, #3
 8102e1c:	e02c      	b.n	8102e78 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8102e1e:	4b18      	ldr	r3, [pc, #96]	; (8102e80 <HAL_RCC_OscConfig+0x82c>)
 8102e20:	681b      	ldr	r3, [r3, #0]
 8102e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102e26:	2b00      	cmp	r3, #0
 8102e28:	d0f0      	beq.n	8102e0c <HAL_RCC_OscConfig+0x7b8>
 8102e2a:	e024      	b.n	8102e76 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8102e2c:	69bb      	ldr	r3, [r7, #24]
 8102e2e:	2b0c      	cmp	r3, #12
 8102e30:	d01f      	beq.n	8102e72 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8102e32:	4b13      	ldr	r3, [pc, #76]	; (8102e80 <HAL_RCC_OscConfig+0x82c>)
 8102e34:	681b      	ldr	r3, [r3, #0]
 8102e36:	4a12      	ldr	r2, [pc, #72]	; (8102e80 <HAL_RCC_OscConfig+0x82c>)
 8102e38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8102e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8102e3e:	f7fd fbed 	bl	810061c <HAL_GetTick>
 8102e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8102e44:	e008      	b.n	8102e58 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8102e46:	f7fd fbe9 	bl	810061c <HAL_GetTick>
 8102e4a:	4602      	mov	r2, r0
 8102e4c:	693b      	ldr	r3, [r7, #16]
 8102e4e:	1ad3      	subs	r3, r2, r3
 8102e50:	2b02      	cmp	r3, #2
 8102e52:	d901      	bls.n	8102e58 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8102e54:	2303      	movs	r3, #3
 8102e56:	e00f      	b.n	8102e78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8102e58:	4b09      	ldr	r3, [pc, #36]	; (8102e80 <HAL_RCC_OscConfig+0x82c>)
 8102e5a:	681b      	ldr	r3, [r3, #0]
 8102e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102e60:	2b00      	cmp	r3, #0
 8102e62:	d1f0      	bne.n	8102e46 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8102e64:	4b06      	ldr	r3, [pc, #24]	; (8102e80 <HAL_RCC_OscConfig+0x82c>)
 8102e66:	68da      	ldr	r2, [r3, #12]
 8102e68:	4905      	ldr	r1, [pc, #20]	; (8102e80 <HAL_RCC_OscConfig+0x82c>)
 8102e6a:	4b06      	ldr	r3, [pc, #24]	; (8102e84 <HAL_RCC_OscConfig+0x830>)
 8102e6c:	4013      	ands	r3, r2
 8102e6e:	60cb      	str	r3, [r1, #12]
 8102e70:	e001      	b.n	8102e76 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8102e72:	2301      	movs	r3, #1
 8102e74:	e000      	b.n	8102e78 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8102e76:	2300      	movs	r3, #0
}
 8102e78:	4618      	mov	r0, r3
 8102e7a:	3720      	adds	r7, #32
 8102e7c:	46bd      	mov	sp, r7
 8102e7e:	bd80      	pop	{r7, pc}
 8102e80:	40021000 	.word	0x40021000
 8102e84:	feeefffc 	.word	0xfeeefffc

08102e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8102e88:	b580      	push	{r7, lr}
 8102e8a:	b086      	sub	sp, #24
 8102e8c:	af00      	add	r7, sp, #0
 8102e8e:	6078      	str	r0, [r7, #4]
 8102e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8102e92:	2300      	movs	r3, #0
 8102e94:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8102e96:	687b      	ldr	r3, [r7, #4]
 8102e98:	2b00      	cmp	r3, #0
 8102e9a:	d101      	bne.n	8102ea0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8102e9c:	2301      	movs	r3, #1
 8102e9e:	e11d      	b.n	81030dc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8102ea0:	4b90      	ldr	r3, [pc, #576]	; (81030e4 <HAL_RCC_ClockConfig+0x25c>)
 8102ea2:	681b      	ldr	r3, [r3, #0]
 8102ea4:	f003 030f 	and.w	r3, r3, #15
 8102ea8:	683a      	ldr	r2, [r7, #0]
 8102eaa:	429a      	cmp	r2, r3
 8102eac:	d910      	bls.n	8102ed0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8102eae:	4b8d      	ldr	r3, [pc, #564]	; (81030e4 <HAL_RCC_ClockConfig+0x25c>)
 8102eb0:	681b      	ldr	r3, [r3, #0]
 8102eb2:	f023 020f 	bic.w	r2, r3, #15
 8102eb6:	498b      	ldr	r1, [pc, #556]	; (81030e4 <HAL_RCC_ClockConfig+0x25c>)
 8102eb8:	683b      	ldr	r3, [r7, #0]
 8102eba:	4313      	orrs	r3, r2
 8102ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8102ebe:	4b89      	ldr	r3, [pc, #548]	; (81030e4 <HAL_RCC_ClockConfig+0x25c>)
 8102ec0:	681b      	ldr	r3, [r3, #0]
 8102ec2:	f003 030f 	and.w	r3, r3, #15
 8102ec6:	683a      	ldr	r2, [r7, #0]
 8102ec8:	429a      	cmp	r2, r3
 8102eca:	d001      	beq.n	8102ed0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8102ecc:	2301      	movs	r3, #1
 8102ece:	e105      	b.n	81030dc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8102ed0:	687b      	ldr	r3, [r7, #4]
 8102ed2:	681b      	ldr	r3, [r3, #0]
 8102ed4:	f003 0302 	and.w	r3, r3, #2
 8102ed8:	2b00      	cmp	r3, #0
 8102eda:	d010      	beq.n	8102efe <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8102edc:	687b      	ldr	r3, [r7, #4]
 8102ede:	689a      	ldr	r2, [r3, #8]
 8102ee0:	4b81      	ldr	r3, [pc, #516]	; (81030e8 <HAL_RCC_ClockConfig+0x260>)
 8102ee2:	689b      	ldr	r3, [r3, #8]
 8102ee4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8102ee8:	429a      	cmp	r2, r3
 8102eea:	d908      	bls.n	8102efe <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8102eec:	4b7e      	ldr	r3, [pc, #504]	; (81030e8 <HAL_RCC_ClockConfig+0x260>)
 8102eee:	689b      	ldr	r3, [r3, #8]
 8102ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8102ef4:	687b      	ldr	r3, [r7, #4]
 8102ef6:	689b      	ldr	r3, [r3, #8]
 8102ef8:	497b      	ldr	r1, [pc, #492]	; (81030e8 <HAL_RCC_ClockConfig+0x260>)
 8102efa:	4313      	orrs	r3, r2
 8102efc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8102efe:	687b      	ldr	r3, [r7, #4]
 8102f00:	681b      	ldr	r3, [r3, #0]
 8102f02:	f003 0301 	and.w	r3, r3, #1
 8102f06:	2b00      	cmp	r3, #0
 8102f08:	d079      	beq.n	8102ffe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8102f0a:	687b      	ldr	r3, [r7, #4]
 8102f0c:	685b      	ldr	r3, [r3, #4]
 8102f0e:	2b03      	cmp	r3, #3
 8102f10:	d11e      	bne.n	8102f50 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8102f12:	4b75      	ldr	r3, [pc, #468]	; (81030e8 <HAL_RCC_ClockConfig+0x260>)
 8102f14:	681b      	ldr	r3, [r3, #0]
 8102f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102f1a:	2b00      	cmp	r3, #0
 8102f1c:	d101      	bne.n	8102f22 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8102f1e:	2301      	movs	r3, #1
 8102f20:	e0dc      	b.n	81030dc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8102f22:	f000 f9dd 	bl	81032e0 <RCC_GetSysClockFreqFromPLLSource>
 8102f26:	4603      	mov	r3, r0
 8102f28:	4a70      	ldr	r2, [pc, #448]	; (81030ec <HAL_RCC_ClockConfig+0x264>)
 8102f2a:	4293      	cmp	r3, r2
 8102f2c:	d946      	bls.n	8102fbc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8102f2e:	4b6e      	ldr	r3, [pc, #440]	; (81030e8 <HAL_RCC_ClockConfig+0x260>)
 8102f30:	689b      	ldr	r3, [r3, #8]
 8102f32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8102f36:	2b00      	cmp	r3, #0
 8102f38:	d140      	bne.n	8102fbc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8102f3a:	4b6b      	ldr	r3, [pc, #428]	; (81030e8 <HAL_RCC_ClockConfig+0x260>)
 8102f3c:	689b      	ldr	r3, [r3, #8]
 8102f3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8102f42:	4a69      	ldr	r2, [pc, #420]	; (81030e8 <HAL_RCC_ClockConfig+0x260>)
 8102f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8102f48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8102f4a:	2380      	movs	r3, #128	; 0x80
 8102f4c:	617b      	str	r3, [r7, #20]
 8102f4e:	e035      	b.n	8102fbc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8102f50:	687b      	ldr	r3, [r7, #4]
 8102f52:	685b      	ldr	r3, [r3, #4]
 8102f54:	2b02      	cmp	r3, #2
 8102f56:	d107      	bne.n	8102f68 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8102f58:	4b63      	ldr	r3, [pc, #396]	; (81030e8 <HAL_RCC_ClockConfig+0x260>)
 8102f5a:	681b      	ldr	r3, [r3, #0]
 8102f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102f60:	2b00      	cmp	r3, #0
 8102f62:	d115      	bne.n	8102f90 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8102f64:	2301      	movs	r3, #1
 8102f66:	e0b9      	b.n	81030dc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8102f68:	687b      	ldr	r3, [r7, #4]
 8102f6a:	685b      	ldr	r3, [r3, #4]
 8102f6c:	2b00      	cmp	r3, #0
 8102f6e:	d107      	bne.n	8102f80 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8102f70:	4b5d      	ldr	r3, [pc, #372]	; (81030e8 <HAL_RCC_ClockConfig+0x260>)
 8102f72:	681b      	ldr	r3, [r3, #0]
 8102f74:	f003 0302 	and.w	r3, r3, #2
 8102f78:	2b00      	cmp	r3, #0
 8102f7a:	d109      	bne.n	8102f90 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8102f7c:	2301      	movs	r3, #1
 8102f7e:	e0ad      	b.n	81030dc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8102f80:	4b59      	ldr	r3, [pc, #356]	; (81030e8 <HAL_RCC_ClockConfig+0x260>)
 8102f82:	681b      	ldr	r3, [r3, #0]
 8102f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8102f88:	2b00      	cmp	r3, #0
 8102f8a:	d101      	bne.n	8102f90 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8102f8c:	2301      	movs	r3, #1
 8102f8e:	e0a5      	b.n	81030dc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8102f90:	f000 f8b4 	bl	81030fc <HAL_RCC_GetSysClockFreq>
 8102f94:	4603      	mov	r3, r0
 8102f96:	4a55      	ldr	r2, [pc, #340]	; (81030ec <HAL_RCC_ClockConfig+0x264>)
 8102f98:	4293      	cmp	r3, r2
 8102f9a:	d90f      	bls.n	8102fbc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8102f9c:	4b52      	ldr	r3, [pc, #328]	; (81030e8 <HAL_RCC_ClockConfig+0x260>)
 8102f9e:	689b      	ldr	r3, [r3, #8]
 8102fa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8102fa4:	2b00      	cmp	r3, #0
 8102fa6:	d109      	bne.n	8102fbc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8102fa8:	4b4f      	ldr	r3, [pc, #316]	; (81030e8 <HAL_RCC_ClockConfig+0x260>)
 8102faa:	689b      	ldr	r3, [r3, #8]
 8102fac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8102fb0:	4a4d      	ldr	r2, [pc, #308]	; (81030e8 <HAL_RCC_ClockConfig+0x260>)
 8102fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8102fb6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8102fb8:	2380      	movs	r3, #128	; 0x80
 8102fba:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8102fbc:	4b4a      	ldr	r3, [pc, #296]	; (81030e8 <HAL_RCC_ClockConfig+0x260>)
 8102fbe:	689b      	ldr	r3, [r3, #8]
 8102fc0:	f023 0203 	bic.w	r2, r3, #3
 8102fc4:	687b      	ldr	r3, [r7, #4]
 8102fc6:	685b      	ldr	r3, [r3, #4]
 8102fc8:	4947      	ldr	r1, [pc, #284]	; (81030e8 <HAL_RCC_ClockConfig+0x260>)
 8102fca:	4313      	orrs	r3, r2
 8102fcc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102fce:	f7fd fb25 	bl	810061c <HAL_GetTick>
 8102fd2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8102fd4:	e00a      	b.n	8102fec <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8102fd6:	f7fd fb21 	bl	810061c <HAL_GetTick>
 8102fda:	4602      	mov	r2, r0
 8102fdc:	693b      	ldr	r3, [r7, #16]
 8102fde:	1ad3      	subs	r3, r2, r3
 8102fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8102fe4:	4293      	cmp	r3, r2
 8102fe6:	d901      	bls.n	8102fec <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8102fe8:	2303      	movs	r3, #3
 8102fea:	e077      	b.n	81030dc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8102fec:	4b3e      	ldr	r3, [pc, #248]	; (81030e8 <HAL_RCC_ClockConfig+0x260>)
 8102fee:	689b      	ldr	r3, [r3, #8]
 8102ff0:	f003 020c 	and.w	r2, r3, #12
 8102ff4:	687b      	ldr	r3, [r7, #4]
 8102ff6:	685b      	ldr	r3, [r3, #4]
 8102ff8:	009b      	lsls	r3, r3, #2
 8102ffa:	429a      	cmp	r2, r3
 8102ffc:	d1eb      	bne.n	8102fd6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8102ffe:	697b      	ldr	r3, [r7, #20]
 8103000:	2b80      	cmp	r3, #128	; 0x80
 8103002:	d105      	bne.n	8103010 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8103004:	4b38      	ldr	r3, [pc, #224]	; (81030e8 <HAL_RCC_ClockConfig+0x260>)
 8103006:	689b      	ldr	r3, [r3, #8]
 8103008:	4a37      	ldr	r2, [pc, #220]	; (81030e8 <HAL_RCC_ClockConfig+0x260>)
 810300a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 810300e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8103010:	687b      	ldr	r3, [r7, #4]
 8103012:	681b      	ldr	r3, [r3, #0]
 8103014:	f003 0302 	and.w	r3, r3, #2
 8103018:	2b00      	cmp	r3, #0
 810301a:	d010      	beq.n	810303e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 810301c:	687b      	ldr	r3, [r7, #4]
 810301e:	689a      	ldr	r2, [r3, #8]
 8103020:	4b31      	ldr	r3, [pc, #196]	; (81030e8 <HAL_RCC_ClockConfig+0x260>)
 8103022:	689b      	ldr	r3, [r3, #8]
 8103024:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8103028:	429a      	cmp	r2, r3
 810302a:	d208      	bcs.n	810303e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 810302c:	4b2e      	ldr	r3, [pc, #184]	; (81030e8 <HAL_RCC_ClockConfig+0x260>)
 810302e:	689b      	ldr	r3, [r3, #8]
 8103030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8103034:	687b      	ldr	r3, [r7, #4]
 8103036:	689b      	ldr	r3, [r3, #8]
 8103038:	492b      	ldr	r1, [pc, #172]	; (81030e8 <HAL_RCC_ClockConfig+0x260>)
 810303a:	4313      	orrs	r3, r2
 810303c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 810303e:	4b29      	ldr	r3, [pc, #164]	; (81030e4 <HAL_RCC_ClockConfig+0x25c>)
 8103040:	681b      	ldr	r3, [r3, #0]
 8103042:	f003 030f 	and.w	r3, r3, #15
 8103046:	683a      	ldr	r2, [r7, #0]
 8103048:	429a      	cmp	r2, r3
 810304a:	d210      	bcs.n	810306e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 810304c:	4b25      	ldr	r3, [pc, #148]	; (81030e4 <HAL_RCC_ClockConfig+0x25c>)
 810304e:	681b      	ldr	r3, [r3, #0]
 8103050:	f023 020f 	bic.w	r2, r3, #15
 8103054:	4923      	ldr	r1, [pc, #140]	; (81030e4 <HAL_RCC_ClockConfig+0x25c>)
 8103056:	683b      	ldr	r3, [r7, #0]
 8103058:	4313      	orrs	r3, r2
 810305a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 810305c:	4b21      	ldr	r3, [pc, #132]	; (81030e4 <HAL_RCC_ClockConfig+0x25c>)
 810305e:	681b      	ldr	r3, [r3, #0]
 8103060:	f003 030f 	and.w	r3, r3, #15
 8103064:	683a      	ldr	r2, [r7, #0]
 8103066:	429a      	cmp	r2, r3
 8103068:	d001      	beq.n	810306e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 810306a:	2301      	movs	r3, #1
 810306c:	e036      	b.n	81030dc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 810306e:	687b      	ldr	r3, [r7, #4]
 8103070:	681b      	ldr	r3, [r3, #0]
 8103072:	f003 0304 	and.w	r3, r3, #4
 8103076:	2b00      	cmp	r3, #0
 8103078:	d008      	beq.n	810308c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 810307a:	4b1b      	ldr	r3, [pc, #108]	; (81030e8 <HAL_RCC_ClockConfig+0x260>)
 810307c:	689b      	ldr	r3, [r3, #8]
 810307e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8103082:	687b      	ldr	r3, [r7, #4]
 8103084:	68db      	ldr	r3, [r3, #12]
 8103086:	4918      	ldr	r1, [pc, #96]	; (81030e8 <HAL_RCC_ClockConfig+0x260>)
 8103088:	4313      	orrs	r3, r2
 810308a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 810308c:	687b      	ldr	r3, [r7, #4]
 810308e:	681b      	ldr	r3, [r3, #0]
 8103090:	f003 0308 	and.w	r3, r3, #8
 8103094:	2b00      	cmp	r3, #0
 8103096:	d009      	beq.n	81030ac <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8103098:	4b13      	ldr	r3, [pc, #76]	; (81030e8 <HAL_RCC_ClockConfig+0x260>)
 810309a:	689b      	ldr	r3, [r3, #8]
 810309c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 81030a0:	687b      	ldr	r3, [r7, #4]
 81030a2:	691b      	ldr	r3, [r3, #16]
 81030a4:	00db      	lsls	r3, r3, #3
 81030a6:	4910      	ldr	r1, [pc, #64]	; (81030e8 <HAL_RCC_ClockConfig+0x260>)
 81030a8:	4313      	orrs	r3, r2
 81030aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 81030ac:	f000 f826 	bl	81030fc <HAL_RCC_GetSysClockFreq>
 81030b0:	4602      	mov	r2, r0
 81030b2:	4b0d      	ldr	r3, [pc, #52]	; (81030e8 <HAL_RCC_ClockConfig+0x260>)
 81030b4:	689b      	ldr	r3, [r3, #8]
 81030b6:	091b      	lsrs	r3, r3, #4
 81030b8:	f003 030f 	and.w	r3, r3, #15
 81030bc:	490c      	ldr	r1, [pc, #48]	; (81030f0 <HAL_RCC_ClockConfig+0x268>)
 81030be:	5ccb      	ldrb	r3, [r1, r3]
 81030c0:	f003 031f 	and.w	r3, r3, #31
 81030c4:	fa22 f303 	lsr.w	r3, r2, r3
 81030c8:	4a0a      	ldr	r2, [pc, #40]	; (81030f4 <HAL_RCC_ClockConfig+0x26c>)
 81030ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 81030cc:	4b0a      	ldr	r3, [pc, #40]	; (81030f8 <HAL_RCC_ClockConfig+0x270>)
 81030ce:	681b      	ldr	r3, [r3, #0]
 81030d0:	4618      	mov	r0, r3
 81030d2:	f7fd fa53 	bl	810057c <HAL_InitTick>
 81030d6:	4603      	mov	r3, r0
 81030d8:	73fb      	strb	r3, [r7, #15]

  return status;
 81030da:	7bfb      	ldrb	r3, [r7, #15]
}
 81030dc:	4618      	mov	r0, r3
 81030de:	3718      	adds	r7, #24
 81030e0:	46bd      	mov	sp, r7
 81030e2:	bd80      	pop	{r7, pc}
 81030e4:	40022000 	.word	0x40022000
 81030e8:	40021000 	.word	0x40021000
 81030ec:	04c4b400 	.word	0x04c4b400
 81030f0:	08107b58 	.word	0x08107b58
 81030f4:	20000000 	.word	0x20000000
 81030f8:	20000004 	.word	0x20000004

081030fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81030fc:	b480      	push	{r7}
 81030fe:	b089      	sub	sp, #36	; 0x24
 8103100:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8103102:	2300      	movs	r3, #0
 8103104:	61fb      	str	r3, [r7, #28]
 8103106:	2300      	movs	r3, #0
 8103108:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 810310a:	4b3e      	ldr	r3, [pc, #248]	; (8103204 <HAL_RCC_GetSysClockFreq+0x108>)
 810310c:	689b      	ldr	r3, [r3, #8]
 810310e:	f003 030c 	and.w	r3, r3, #12
 8103112:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8103114:	4b3b      	ldr	r3, [pc, #236]	; (8103204 <HAL_RCC_GetSysClockFreq+0x108>)
 8103116:	68db      	ldr	r3, [r3, #12]
 8103118:	f003 0303 	and.w	r3, r3, #3
 810311c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 810311e:	693b      	ldr	r3, [r7, #16]
 8103120:	2b00      	cmp	r3, #0
 8103122:	d005      	beq.n	8103130 <HAL_RCC_GetSysClockFreq+0x34>
 8103124:	693b      	ldr	r3, [r7, #16]
 8103126:	2b0c      	cmp	r3, #12
 8103128:	d121      	bne.n	810316e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 810312a:	68fb      	ldr	r3, [r7, #12]
 810312c:	2b01      	cmp	r3, #1
 810312e:	d11e      	bne.n	810316e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8103130:	4b34      	ldr	r3, [pc, #208]	; (8103204 <HAL_RCC_GetSysClockFreq+0x108>)
 8103132:	681b      	ldr	r3, [r3, #0]
 8103134:	f003 0308 	and.w	r3, r3, #8
 8103138:	2b00      	cmp	r3, #0
 810313a:	d107      	bne.n	810314c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 810313c:	4b31      	ldr	r3, [pc, #196]	; (8103204 <HAL_RCC_GetSysClockFreq+0x108>)
 810313e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103142:	0a1b      	lsrs	r3, r3, #8
 8103144:	f003 030f 	and.w	r3, r3, #15
 8103148:	61fb      	str	r3, [r7, #28]
 810314a:	e005      	b.n	8103158 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 810314c:	4b2d      	ldr	r3, [pc, #180]	; (8103204 <HAL_RCC_GetSysClockFreq+0x108>)
 810314e:	681b      	ldr	r3, [r3, #0]
 8103150:	091b      	lsrs	r3, r3, #4
 8103152:	f003 030f 	and.w	r3, r3, #15
 8103156:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8103158:	4a2b      	ldr	r2, [pc, #172]	; (8103208 <HAL_RCC_GetSysClockFreq+0x10c>)
 810315a:	69fb      	ldr	r3, [r7, #28]
 810315c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103160:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8103162:	693b      	ldr	r3, [r7, #16]
 8103164:	2b00      	cmp	r3, #0
 8103166:	d10d      	bne.n	8103184 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8103168:	69fb      	ldr	r3, [r7, #28]
 810316a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 810316c:	e00a      	b.n	8103184 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 810316e:	693b      	ldr	r3, [r7, #16]
 8103170:	2b04      	cmp	r3, #4
 8103172:	d102      	bne.n	810317a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8103174:	4b25      	ldr	r3, [pc, #148]	; (810320c <HAL_RCC_GetSysClockFreq+0x110>)
 8103176:	61bb      	str	r3, [r7, #24]
 8103178:	e004      	b.n	8103184 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 810317a:	693b      	ldr	r3, [r7, #16]
 810317c:	2b08      	cmp	r3, #8
 810317e:	d101      	bne.n	8103184 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8103180:	4b23      	ldr	r3, [pc, #140]	; (8103210 <HAL_RCC_GetSysClockFreq+0x114>)
 8103182:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8103184:	693b      	ldr	r3, [r7, #16]
 8103186:	2b0c      	cmp	r3, #12
 8103188:	d134      	bne.n	81031f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 810318a:	4b1e      	ldr	r3, [pc, #120]	; (8103204 <HAL_RCC_GetSysClockFreq+0x108>)
 810318c:	68db      	ldr	r3, [r3, #12]
 810318e:	f003 0303 	and.w	r3, r3, #3
 8103192:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8103194:	68bb      	ldr	r3, [r7, #8]
 8103196:	2b02      	cmp	r3, #2
 8103198:	d003      	beq.n	81031a2 <HAL_RCC_GetSysClockFreq+0xa6>
 810319a:	68bb      	ldr	r3, [r7, #8]
 810319c:	2b03      	cmp	r3, #3
 810319e:	d003      	beq.n	81031a8 <HAL_RCC_GetSysClockFreq+0xac>
 81031a0:	e005      	b.n	81031ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 81031a2:	4b1a      	ldr	r3, [pc, #104]	; (810320c <HAL_RCC_GetSysClockFreq+0x110>)
 81031a4:	617b      	str	r3, [r7, #20]
      break;
 81031a6:	e005      	b.n	81031b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 81031a8:	4b19      	ldr	r3, [pc, #100]	; (8103210 <HAL_RCC_GetSysClockFreq+0x114>)
 81031aa:	617b      	str	r3, [r7, #20]
      break;
 81031ac:	e002      	b.n	81031b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 81031ae:	69fb      	ldr	r3, [r7, #28]
 81031b0:	617b      	str	r3, [r7, #20]
      break;
 81031b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 81031b4:	4b13      	ldr	r3, [pc, #76]	; (8103204 <HAL_RCC_GetSysClockFreq+0x108>)
 81031b6:	68db      	ldr	r3, [r3, #12]
 81031b8:	091b      	lsrs	r3, r3, #4
 81031ba:	f003 030f 	and.w	r3, r3, #15
 81031be:	3301      	adds	r3, #1
 81031c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 81031c2:	4b10      	ldr	r3, [pc, #64]	; (8103204 <HAL_RCC_GetSysClockFreq+0x108>)
 81031c4:	68db      	ldr	r3, [r3, #12]
 81031c6:	0a1b      	lsrs	r3, r3, #8
 81031c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81031cc:	697a      	ldr	r2, [r7, #20]
 81031ce:	fb03 f202 	mul.w	r2, r3, r2
 81031d2:	687b      	ldr	r3, [r7, #4]
 81031d4:	fbb2 f3f3 	udiv	r3, r2, r3
 81031d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 81031da:	4b0a      	ldr	r3, [pc, #40]	; (8103204 <HAL_RCC_GetSysClockFreq+0x108>)
 81031dc:	68db      	ldr	r3, [r3, #12]
 81031de:	0e5b      	lsrs	r3, r3, #25
 81031e0:	f003 0303 	and.w	r3, r3, #3
 81031e4:	3301      	adds	r3, #1
 81031e6:	005b      	lsls	r3, r3, #1
 81031e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 81031ea:	697a      	ldr	r2, [r7, #20]
 81031ec:	683b      	ldr	r3, [r7, #0]
 81031ee:	fbb2 f3f3 	udiv	r3, r2, r3
 81031f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 81031f4:	69bb      	ldr	r3, [r7, #24]
}
 81031f6:	4618      	mov	r0, r3
 81031f8:	3724      	adds	r7, #36	; 0x24
 81031fa:	46bd      	mov	sp, r7
 81031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103200:	4770      	bx	lr
 8103202:	bf00      	nop
 8103204:	40021000 	.word	0x40021000
 8103208:	08107b68 	.word	0x08107b68
 810320c:	00f42400 	.word	0x00f42400
 8103210:	007a1200 	.word	0x007a1200

08103214 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8103214:	b480      	push	{r7}
 8103216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8103218:	4b03      	ldr	r3, [pc, #12]	; (8103228 <HAL_RCC_GetHCLKFreq+0x14>)
 810321a:	681b      	ldr	r3, [r3, #0]
}
 810321c:	4618      	mov	r0, r3
 810321e:	46bd      	mov	sp, r7
 8103220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103224:	4770      	bx	lr
 8103226:	bf00      	nop
 8103228:	20000000 	.word	0x20000000

0810322c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 810322c:	b580      	push	{r7, lr}
 810322e:	b086      	sub	sp, #24
 8103230:	af00      	add	r7, sp, #0
 8103232:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8103234:	2300      	movs	r3, #0
 8103236:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8103238:	4b27      	ldr	r3, [pc, #156]	; (81032d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 810323a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810323c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103240:	2b00      	cmp	r3, #0
 8103242:	d003      	beq.n	810324c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8103244:	f7ff f932 	bl	81024ac <HAL_PWREx_GetVoltageRange>
 8103248:	6178      	str	r0, [r7, #20]
 810324a:	e014      	b.n	8103276 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 810324c:	4b22      	ldr	r3, [pc, #136]	; (81032d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 810324e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103250:	4a21      	ldr	r2, [pc, #132]	; (81032d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8103252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8103256:	6593      	str	r3, [r2, #88]	; 0x58
 8103258:	4b1f      	ldr	r3, [pc, #124]	; (81032d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 810325a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810325c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103260:	60fb      	str	r3, [r7, #12]
 8103262:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8103264:	f7ff f922 	bl	81024ac <HAL_PWREx_GetVoltageRange>
 8103268:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 810326a:	4b1b      	ldr	r3, [pc, #108]	; (81032d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 810326c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810326e:	4a1a      	ldr	r2, [pc, #104]	; (81032d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8103270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8103274:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8103276:	697b      	ldr	r3, [r7, #20]
 8103278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810327c:	d10b      	bne.n	8103296 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 810327e:	687b      	ldr	r3, [r7, #4]
 8103280:	2b80      	cmp	r3, #128	; 0x80
 8103282:	d913      	bls.n	81032ac <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8103284:	687b      	ldr	r3, [r7, #4]
 8103286:	2ba0      	cmp	r3, #160	; 0xa0
 8103288:	d902      	bls.n	8103290 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 810328a:	2302      	movs	r3, #2
 810328c:	613b      	str	r3, [r7, #16]
 810328e:	e00d      	b.n	81032ac <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8103290:	2301      	movs	r3, #1
 8103292:	613b      	str	r3, [r7, #16]
 8103294:	e00a      	b.n	81032ac <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8103296:	687b      	ldr	r3, [r7, #4]
 8103298:	2b7f      	cmp	r3, #127	; 0x7f
 810329a:	d902      	bls.n	81032a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 810329c:	2302      	movs	r3, #2
 810329e:	613b      	str	r3, [r7, #16]
 81032a0:	e004      	b.n	81032ac <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 81032a2:	687b      	ldr	r3, [r7, #4]
 81032a4:	2b70      	cmp	r3, #112	; 0x70
 81032a6:	d101      	bne.n	81032ac <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 81032a8:	2301      	movs	r3, #1
 81032aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 81032ac:	4b0b      	ldr	r3, [pc, #44]	; (81032dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 81032ae:	681b      	ldr	r3, [r3, #0]
 81032b0:	f023 020f 	bic.w	r2, r3, #15
 81032b4:	4909      	ldr	r1, [pc, #36]	; (81032dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 81032b6:	693b      	ldr	r3, [r7, #16]
 81032b8:	4313      	orrs	r3, r2
 81032ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 81032bc:	4b07      	ldr	r3, [pc, #28]	; (81032dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 81032be:	681b      	ldr	r3, [r3, #0]
 81032c0:	f003 030f 	and.w	r3, r3, #15
 81032c4:	693a      	ldr	r2, [r7, #16]
 81032c6:	429a      	cmp	r2, r3
 81032c8:	d001      	beq.n	81032ce <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 81032ca:	2301      	movs	r3, #1
 81032cc:	e000      	b.n	81032d0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 81032ce:	2300      	movs	r3, #0
}
 81032d0:	4618      	mov	r0, r3
 81032d2:	3718      	adds	r7, #24
 81032d4:	46bd      	mov	sp, r7
 81032d6:	bd80      	pop	{r7, pc}
 81032d8:	40021000 	.word	0x40021000
 81032dc:	40022000 	.word	0x40022000

081032e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 81032e0:	b480      	push	{r7}
 81032e2:	b087      	sub	sp, #28
 81032e4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 81032e6:	4b2d      	ldr	r3, [pc, #180]	; (810339c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 81032e8:	68db      	ldr	r3, [r3, #12]
 81032ea:	f003 0303 	and.w	r3, r3, #3
 81032ee:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 81032f0:	68fb      	ldr	r3, [r7, #12]
 81032f2:	2b03      	cmp	r3, #3
 81032f4:	d00b      	beq.n	810330e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 81032f6:	68fb      	ldr	r3, [r7, #12]
 81032f8:	2b03      	cmp	r3, #3
 81032fa:	d825      	bhi.n	8103348 <RCC_GetSysClockFreqFromPLLSource+0x68>
 81032fc:	68fb      	ldr	r3, [r7, #12]
 81032fe:	2b01      	cmp	r3, #1
 8103300:	d008      	beq.n	8103314 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8103302:	68fb      	ldr	r3, [r7, #12]
 8103304:	2b02      	cmp	r3, #2
 8103306:	d11f      	bne.n	8103348 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8103308:	4b25      	ldr	r3, [pc, #148]	; (81033a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 810330a:	613b      	str	r3, [r7, #16]
    break;
 810330c:	e01f      	b.n	810334e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 810330e:	4b25      	ldr	r3, [pc, #148]	; (81033a4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8103310:	613b      	str	r3, [r7, #16]
    break;
 8103312:	e01c      	b.n	810334e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8103314:	4b21      	ldr	r3, [pc, #132]	; (810339c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8103316:	681b      	ldr	r3, [r3, #0]
 8103318:	f003 0308 	and.w	r3, r3, #8
 810331c:	2b00      	cmp	r3, #0
 810331e:	d107      	bne.n	8103330 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8103320:	4b1e      	ldr	r3, [pc, #120]	; (810339c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8103322:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103326:	0a1b      	lsrs	r3, r3, #8
 8103328:	f003 030f 	and.w	r3, r3, #15
 810332c:	617b      	str	r3, [r7, #20]
 810332e:	e005      	b.n	810333c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8103330:	4b1a      	ldr	r3, [pc, #104]	; (810339c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8103332:	681b      	ldr	r3, [r3, #0]
 8103334:	091b      	lsrs	r3, r3, #4
 8103336:	f003 030f 	and.w	r3, r3, #15
 810333a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 810333c:	4a1a      	ldr	r2, [pc, #104]	; (81033a8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 810333e:	697b      	ldr	r3, [r7, #20]
 8103340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103344:	613b      	str	r3, [r7, #16]
    break;
 8103346:	e002      	b.n	810334e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8103348:	2300      	movs	r3, #0
 810334a:	613b      	str	r3, [r7, #16]
    break;
 810334c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 810334e:	4b13      	ldr	r3, [pc, #76]	; (810339c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8103350:	68db      	ldr	r3, [r3, #12]
 8103352:	091b      	lsrs	r3, r3, #4
 8103354:	f003 030f 	and.w	r3, r3, #15
 8103358:	3301      	adds	r3, #1
 810335a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 810335c:	4b0f      	ldr	r3, [pc, #60]	; (810339c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 810335e:	68db      	ldr	r3, [r3, #12]
 8103360:	0a1b      	lsrs	r3, r3, #8
 8103362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103366:	693a      	ldr	r2, [r7, #16]
 8103368:	fb03 f202 	mul.w	r2, r3, r2
 810336c:	68bb      	ldr	r3, [r7, #8]
 810336e:	fbb2 f3f3 	udiv	r3, r2, r3
 8103372:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8103374:	4b09      	ldr	r3, [pc, #36]	; (810339c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8103376:	68db      	ldr	r3, [r3, #12]
 8103378:	0e5b      	lsrs	r3, r3, #25
 810337a:	f003 0303 	and.w	r3, r3, #3
 810337e:	3301      	adds	r3, #1
 8103380:	005b      	lsls	r3, r3, #1
 8103382:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8103384:	693a      	ldr	r2, [r7, #16]
 8103386:	687b      	ldr	r3, [r7, #4]
 8103388:	fbb2 f3f3 	udiv	r3, r2, r3
 810338c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 810338e:	683b      	ldr	r3, [r7, #0]
}
 8103390:	4618      	mov	r0, r3
 8103392:	371c      	adds	r7, #28
 8103394:	46bd      	mov	sp, r7
 8103396:	f85d 7b04 	ldr.w	r7, [sp], #4
 810339a:	4770      	bx	lr
 810339c:	40021000 	.word	0x40021000
 81033a0:	00f42400 	.word	0x00f42400
 81033a4:	007a1200 	.word	0x007a1200
 81033a8:	08107b68 	.word	0x08107b68

081033ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81033ac:	b580      	push	{r7, lr}
 81033ae:	b086      	sub	sp, #24
 81033b0:	af00      	add	r7, sp, #0
 81033b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81033b4:	2300      	movs	r3, #0
 81033b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81033b8:	2300      	movs	r3, #0
 81033ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 81033bc:	687b      	ldr	r3, [r7, #4]
 81033be:	681b      	ldr	r3, [r3, #0]
 81033c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81033c4:	2b00      	cmp	r3, #0
 81033c6:	d040      	beq.n	810344a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 81033c8:	687b      	ldr	r3, [r7, #4]
 81033ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81033cc:	2b80      	cmp	r3, #128	; 0x80
 81033ce:	d02a      	beq.n	8103426 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 81033d0:	2b80      	cmp	r3, #128	; 0x80
 81033d2:	d825      	bhi.n	8103420 <HAL_RCCEx_PeriphCLKConfig+0x74>
 81033d4:	2b60      	cmp	r3, #96	; 0x60
 81033d6:	d026      	beq.n	8103426 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 81033d8:	2b60      	cmp	r3, #96	; 0x60
 81033da:	d821      	bhi.n	8103420 <HAL_RCCEx_PeriphCLKConfig+0x74>
 81033dc:	2b40      	cmp	r3, #64	; 0x40
 81033de:	d006      	beq.n	81033ee <HAL_RCCEx_PeriphCLKConfig+0x42>
 81033e0:	2b40      	cmp	r3, #64	; 0x40
 81033e2:	d81d      	bhi.n	8103420 <HAL_RCCEx_PeriphCLKConfig+0x74>
 81033e4:	2b00      	cmp	r3, #0
 81033e6:	d009      	beq.n	81033fc <HAL_RCCEx_PeriphCLKConfig+0x50>
 81033e8:	2b20      	cmp	r3, #32
 81033ea:	d010      	beq.n	810340e <HAL_RCCEx_PeriphCLKConfig+0x62>
 81033ec:	e018      	b.n	8103420 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 81033ee:	4b89      	ldr	r3, [pc, #548]	; (8103614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 81033f0:	68db      	ldr	r3, [r3, #12]
 81033f2:	4a88      	ldr	r2, [pc, #544]	; (8103614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 81033f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81033f8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 81033fa:	e015      	b.n	8103428 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 81033fc:	687b      	ldr	r3, [r7, #4]
 81033fe:	3304      	adds	r3, #4
 8103400:	2100      	movs	r1, #0
 8103402:	4618      	mov	r0, r3
 8103404:	f000 fb72 	bl	8103aec <RCCEx_PLLSAI1_Config>
 8103408:	4603      	mov	r3, r0
 810340a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 810340c:	e00c      	b.n	8103428 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 810340e:	687b      	ldr	r3, [r7, #4]
 8103410:	3320      	adds	r3, #32
 8103412:	2100      	movs	r1, #0
 8103414:	4618      	mov	r0, r3
 8103416:	f000 fc5d 	bl	8103cd4 <RCCEx_PLLSAI2_Config>
 810341a:	4603      	mov	r3, r0
 810341c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 810341e:	e003      	b.n	8103428 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103420:	2301      	movs	r3, #1
 8103422:	74fb      	strb	r3, [r7, #19]
      break;
 8103424:	e000      	b.n	8103428 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8103426:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103428:	7cfb      	ldrb	r3, [r7, #19]
 810342a:	2b00      	cmp	r3, #0
 810342c:	d10b      	bne.n	8103446 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810342e:	4b79      	ldr	r3, [pc, #484]	; (8103614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8103430:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103434:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8103438:	687b      	ldr	r3, [r7, #4]
 810343a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810343c:	4975      	ldr	r1, [pc, #468]	; (8103614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 810343e:	4313      	orrs	r3, r2
 8103440:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8103444:	e001      	b.n	810344a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103446:	7cfb      	ldrb	r3, [r7, #19]
 8103448:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 810344a:	687b      	ldr	r3, [r7, #4]
 810344c:	681b      	ldr	r3, [r3, #0]
 810344e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8103452:	2b00      	cmp	r3, #0
 8103454:	d047      	beq.n	81034e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8103456:	687b      	ldr	r3, [r7, #4]
 8103458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810345a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810345e:	d030      	beq.n	81034c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8103460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8103464:	d82a      	bhi.n	81034bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8103466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810346a:	d02a      	beq.n	81034c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 810346c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103470:	d824      	bhi.n	81034bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8103472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103476:	d008      	beq.n	810348a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8103478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810347c:	d81e      	bhi.n	81034bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 810347e:	2b00      	cmp	r3, #0
 8103480:	d00a      	beq.n	8103498 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8103482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103486:	d010      	beq.n	81034aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8103488:	e018      	b.n	81034bc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 810348a:	4b62      	ldr	r3, [pc, #392]	; (8103614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 810348c:	68db      	ldr	r3, [r3, #12]
 810348e:	4a61      	ldr	r2, [pc, #388]	; (8103614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8103490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8103494:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8103496:	e015      	b.n	81034c4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8103498:	687b      	ldr	r3, [r7, #4]
 810349a:	3304      	adds	r3, #4
 810349c:	2100      	movs	r1, #0
 810349e:	4618      	mov	r0, r3
 81034a0:	f000 fb24 	bl	8103aec <RCCEx_PLLSAI1_Config>
 81034a4:	4603      	mov	r3, r0
 81034a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 81034a8:	e00c      	b.n	81034c4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 81034aa:	687b      	ldr	r3, [r7, #4]
 81034ac:	3320      	adds	r3, #32
 81034ae:	2100      	movs	r1, #0
 81034b0:	4618      	mov	r0, r3
 81034b2:	f000 fc0f 	bl	8103cd4 <RCCEx_PLLSAI2_Config>
 81034b6:	4603      	mov	r3, r0
 81034b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 81034ba:	e003      	b.n	81034c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81034bc:	2301      	movs	r3, #1
 81034be:	74fb      	strb	r3, [r7, #19]
      break;
 81034c0:	e000      	b.n	81034c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 81034c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81034c4:	7cfb      	ldrb	r3, [r7, #19]
 81034c6:	2b00      	cmp	r3, #0
 81034c8:	d10b      	bne.n	81034e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 81034ca:	4b52      	ldr	r3, [pc, #328]	; (8103614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 81034cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81034d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 81034d4:	687b      	ldr	r3, [r7, #4]
 81034d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81034d8:	494e      	ldr	r1, [pc, #312]	; (8103614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 81034da:	4313      	orrs	r3, r2
 81034dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 81034e0:	e001      	b.n	81034e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81034e2:	7cfb      	ldrb	r3, [r7, #19]
 81034e4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81034e6:	687b      	ldr	r3, [r7, #4]
 81034e8:	681b      	ldr	r3, [r3, #0]
 81034ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81034ee:	2b00      	cmp	r3, #0
 81034f0:	f000 809f 	beq.w	8103632 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 81034f4:	2300      	movs	r3, #0
 81034f6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 81034f8:	4b46      	ldr	r3, [pc, #280]	; (8103614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 81034fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81034fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103500:	2b00      	cmp	r3, #0
 8103502:	d101      	bne.n	8103508 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8103504:	2301      	movs	r3, #1
 8103506:	e000      	b.n	810350a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8103508:	2300      	movs	r3, #0
 810350a:	2b00      	cmp	r3, #0
 810350c:	d00d      	beq.n	810352a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 810350e:	4b41      	ldr	r3, [pc, #260]	; (8103614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8103510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103512:	4a40      	ldr	r2, [pc, #256]	; (8103614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8103514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8103518:	6593      	str	r3, [r2, #88]	; 0x58
 810351a:	4b3e      	ldr	r3, [pc, #248]	; (8103614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 810351c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810351e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103522:	60bb      	str	r3, [r7, #8]
 8103524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8103526:	2301      	movs	r3, #1
 8103528:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810352a:	4b3b      	ldr	r3, [pc, #236]	; (8103618 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 810352c:	681b      	ldr	r3, [r3, #0]
 810352e:	4a3a      	ldr	r2, [pc, #232]	; (8103618 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8103530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103534:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103536:	f7fd f871 	bl	810061c <HAL_GetTick>
 810353a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 810353c:	e009      	b.n	8103552 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 810353e:	f7fd f86d 	bl	810061c <HAL_GetTick>
 8103542:	4602      	mov	r2, r0
 8103544:	68fb      	ldr	r3, [r7, #12]
 8103546:	1ad3      	subs	r3, r2, r3
 8103548:	2b02      	cmp	r3, #2
 810354a:	d902      	bls.n	8103552 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 810354c:	2303      	movs	r3, #3
 810354e:	74fb      	strb	r3, [r7, #19]
        break;
 8103550:	e005      	b.n	810355e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8103552:	4b31      	ldr	r3, [pc, #196]	; (8103618 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8103554:	681b      	ldr	r3, [r3, #0]
 8103556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810355a:	2b00      	cmp	r3, #0
 810355c:	d0ef      	beq.n	810353e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 810355e:	7cfb      	ldrb	r3, [r7, #19]
 8103560:	2b00      	cmp	r3, #0
 8103562:	d15b      	bne.n	810361c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8103564:	4b2b      	ldr	r3, [pc, #172]	; (8103614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8103566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810356a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810356e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8103570:	697b      	ldr	r3, [r7, #20]
 8103572:	2b00      	cmp	r3, #0
 8103574:	d01f      	beq.n	81035b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8103576:	687b      	ldr	r3, [r7, #4]
 8103578:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810357c:	697a      	ldr	r2, [r7, #20]
 810357e:	429a      	cmp	r2, r3
 8103580:	d019      	beq.n	81035b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8103582:	4b24      	ldr	r3, [pc, #144]	; (8103614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8103584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810358c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810358e:	4b21      	ldr	r3, [pc, #132]	; (8103614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8103590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103594:	4a1f      	ldr	r2, [pc, #124]	; (8103614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8103596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810359a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 810359e:	4b1d      	ldr	r3, [pc, #116]	; (8103614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 81035a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81035a4:	4a1b      	ldr	r2, [pc, #108]	; (8103614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 81035a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81035aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 81035ae:	4a19      	ldr	r2, [pc, #100]	; (8103614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 81035b0:	697b      	ldr	r3, [r7, #20]
 81035b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 81035b6:	697b      	ldr	r3, [r7, #20]
 81035b8:	f003 0301 	and.w	r3, r3, #1
 81035bc:	2b00      	cmp	r3, #0
 81035be:	d016      	beq.n	81035ee <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81035c0:	f7fd f82c 	bl	810061c <HAL_GetTick>
 81035c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 81035c6:	e00b      	b.n	81035e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81035c8:	f7fd f828 	bl	810061c <HAL_GetTick>
 81035cc:	4602      	mov	r2, r0
 81035ce:	68fb      	ldr	r3, [r7, #12]
 81035d0:	1ad3      	subs	r3, r2, r3
 81035d2:	f241 3288 	movw	r2, #5000	; 0x1388
 81035d6:	4293      	cmp	r3, r2
 81035d8:	d902      	bls.n	81035e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 81035da:	2303      	movs	r3, #3
 81035dc:	74fb      	strb	r3, [r7, #19]
            break;
 81035de:	e006      	b.n	81035ee <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 81035e0:	4b0c      	ldr	r3, [pc, #48]	; (8103614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 81035e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81035e6:	f003 0302 	and.w	r3, r3, #2
 81035ea:	2b00      	cmp	r3, #0
 81035ec:	d0ec      	beq.n	81035c8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 81035ee:	7cfb      	ldrb	r3, [r7, #19]
 81035f0:	2b00      	cmp	r3, #0
 81035f2:	d10c      	bne.n	810360e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81035f4:	4b07      	ldr	r3, [pc, #28]	; (8103614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 81035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81035fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81035fe:	687b      	ldr	r3, [r7, #4]
 8103600:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103604:	4903      	ldr	r1, [pc, #12]	; (8103614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8103606:	4313      	orrs	r3, r2
 8103608:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 810360c:	e008      	b.n	8103620 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810360e:	7cfb      	ldrb	r3, [r7, #19]
 8103610:	74bb      	strb	r3, [r7, #18]
 8103612:	e005      	b.n	8103620 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8103614:	40021000 	.word	0x40021000
 8103618:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810361c:	7cfb      	ldrb	r3, [r7, #19]
 810361e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8103620:	7c7b      	ldrb	r3, [r7, #17]
 8103622:	2b01      	cmp	r3, #1
 8103624:	d105      	bne.n	8103632 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8103626:	4ba0      	ldr	r3, [pc, #640]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810362a:	4a9f      	ldr	r2, [pc, #636]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 810362c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8103630:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8103632:	687b      	ldr	r3, [r7, #4]
 8103634:	681b      	ldr	r3, [r3, #0]
 8103636:	f003 0301 	and.w	r3, r3, #1
 810363a:	2b00      	cmp	r3, #0
 810363c:	d00a      	beq.n	8103654 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 810363e:	4b9a      	ldr	r3, [pc, #616]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103644:	f023 0203 	bic.w	r2, r3, #3
 8103648:	687b      	ldr	r3, [r7, #4]
 810364a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810364c:	4996      	ldr	r1, [pc, #600]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 810364e:	4313      	orrs	r3, r2
 8103650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8103654:	687b      	ldr	r3, [r7, #4]
 8103656:	681b      	ldr	r3, [r3, #0]
 8103658:	f003 0302 	and.w	r3, r3, #2
 810365c:	2b00      	cmp	r3, #0
 810365e:	d00a      	beq.n	8103676 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8103660:	4b91      	ldr	r3, [pc, #580]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103666:	f023 020c 	bic.w	r2, r3, #12
 810366a:	687b      	ldr	r3, [r7, #4]
 810366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810366e:	498e      	ldr	r1, [pc, #568]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103670:	4313      	orrs	r3, r2
 8103672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8103676:	687b      	ldr	r3, [r7, #4]
 8103678:	681b      	ldr	r3, [r3, #0]
 810367a:	f003 0304 	and.w	r3, r3, #4
 810367e:	2b00      	cmp	r3, #0
 8103680:	d00a      	beq.n	8103698 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8103682:	4b89      	ldr	r3, [pc, #548]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103688:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 810368c:	687b      	ldr	r3, [r7, #4]
 810368e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103690:	4985      	ldr	r1, [pc, #532]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103692:	4313      	orrs	r3, r2
 8103694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8103698:	687b      	ldr	r3, [r7, #4]
 810369a:	681b      	ldr	r3, [r3, #0]
 810369c:	f003 0308 	and.w	r3, r3, #8
 81036a0:	2b00      	cmp	r3, #0
 81036a2:	d00a      	beq.n	81036ba <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 81036a4:	4b80      	ldr	r3, [pc, #512]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 81036a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81036aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 81036ae:	687b      	ldr	r3, [r7, #4]
 81036b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81036b2:	497d      	ldr	r1, [pc, #500]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 81036b4:	4313      	orrs	r3, r2
 81036b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 81036ba:	687b      	ldr	r3, [r7, #4]
 81036bc:	681b      	ldr	r3, [r3, #0]
 81036be:	f003 0310 	and.w	r3, r3, #16
 81036c2:	2b00      	cmp	r3, #0
 81036c4:	d00a      	beq.n	81036dc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 81036c6:	4b78      	ldr	r3, [pc, #480]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 81036c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81036cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81036d0:	687b      	ldr	r3, [r7, #4]
 81036d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81036d4:	4974      	ldr	r1, [pc, #464]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 81036d6:	4313      	orrs	r3, r2
 81036d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81036dc:	687b      	ldr	r3, [r7, #4]
 81036de:	681b      	ldr	r3, [r3, #0]
 81036e0:	f003 0320 	and.w	r3, r3, #32
 81036e4:	2b00      	cmp	r3, #0
 81036e6:	d00a      	beq.n	81036fe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81036e8:	4b6f      	ldr	r3, [pc, #444]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 81036ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81036ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 81036f2:	687b      	ldr	r3, [r7, #4]
 81036f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81036f6:	496c      	ldr	r1, [pc, #432]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 81036f8:	4313      	orrs	r3, r2
 81036fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 81036fe:	687b      	ldr	r3, [r7, #4]
 8103700:	681b      	ldr	r3, [r3, #0]
 8103702:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103706:	2b00      	cmp	r3, #0
 8103708:	d00a      	beq.n	8103720 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810370a:	4b67      	ldr	r3, [pc, #412]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 810370c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103710:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8103714:	687b      	ldr	r3, [r7, #4]
 8103716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103718:	4963      	ldr	r1, [pc, #396]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 810371a:	4313      	orrs	r3, r2
 810371c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8103720:	687b      	ldr	r3, [r7, #4]
 8103722:	681b      	ldr	r3, [r3, #0]
 8103724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103728:	2b00      	cmp	r3, #0
 810372a:	d00a      	beq.n	8103742 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810372c:	4b5e      	ldr	r3, [pc, #376]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 810372e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103732:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8103736:	687b      	ldr	r3, [r7, #4]
 8103738:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810373a:	495b      	ldr	r1, [pc, #364]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 810373c:	4313      	orrs	r3, r2
 810373e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8103742:	687b      	ldr	r3, [r7, #4]
 8103744:	681b      	ldr	r3, [r3, #0]
 8103746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810374a:	2b00      	cmp	r3, #0
 810374c:	d00a      	beq.n	8103764 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 810374e:	4b56      	ldr	r3, [pc, #344]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103754:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8103758:	687b      	ldr	r3, [r7, #4]
 810375a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810375c:	4952      	ldr	r1, [pc, #328]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 810375e:	4313      	orrs	r3, r2
 8103760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8103764:	687b      	ldr	r3, [r7, #4]
 8103766:	681b      	ldr	r3, [r3, #0]
 8103768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810376c:	2b00      	cmp	r3, #0
 810376e:	d00a      	beq.n	8103786 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8103770:	4b4d      	ldr	r3, [pc, #308]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103776:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 810377a:	687b      	ldr	r3, [r7, #4]
 810377c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810377e:	494a      	ldr	r1, [pc, #296]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103780:	4313      	orrs	r3, r2
 8103782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8103786:	687b      	ldr	r3, [r7, #4]
 8103788:	681b      	ldr	r3, [r3, #0]
 810378a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810378e:	2b00      	cmp	r3, #0
 8103790:	d00a      	beq.n	81037a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8103792:	4b45      	ldr	r3, [pc, #276]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103798:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 810379c:	687b      	ldr	r3, [r7, #4]
 810379e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81037a0:	4941      	ldr	r1, [pc, #260]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 81037a2:	4313      	orrs	r3, r2
 81037a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81037a8:	687b      	ldr	r3, [r7, #4]
 81037aa:	681b      	ldr	r3, [r3, #0]
 81037ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81037b0:	2b00      	cmp	r3, #0
 81037b2:	d00a      	beq.n	81037ca <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81037b4:	4b3c      	ldr	r3, [pc, #240]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 81037b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81037ba:	f023 0203 	bic.w	r2, r3, #3
 81037be:	687b      	ldr	r3, [r7, #4]
 81037c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81037c2:	4939      	ldr	r1, [pc, #228]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 81037c4:	4313      	orrs	r3, r2
 81037c6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 81037ca:	687b      	ldr	r3, [r7, #4]
 81037cc:	681b      	ldr	r3, [r3, #0]
 81037ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81037d2:	2b00      	cmp	r3, #0
 81037d4:	d028      	beq.n	8103828 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81037d6:	4b34      	ldr	r3, [pc, #208]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 81037d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81037dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 81037e0:	687b      	ldr	r3, [r7, #4]
 81037e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81037e4:	4930      	ldr	r1, [pc, #192]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 81037e6:	4313      	orrs	r3, r2
 81037e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 81037ec:	687b      	ldr	r3, [r7, #4]
 81037ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81037f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81037f4:	d106      	bne.n	8103804 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 81037f6:	4b2c      	ldr	r3, [pc, #176]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 81037f8:	68db      	ldr	r3, [r3, #12]
 81037fa:	4a2b      	ldr	r2, [pc, #172]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 81037fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8103800:	60d3      	str	r3, [r2, #12]
 8103802:	e011      	b.n	8103828 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8103804:	687b      	ldr	r3, [r7, #4]
 8103806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103808:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810380c:	d10c      	bne.n	8103828 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 810380e:	687b      	ldr	r3, [r7, #4]
 8103810:	3304      	adds	r3, #4
 8103812:	2101      	movs	r1, #1
 8103814:	4618      	mov	r0, r3
 8103816:	f000 f969 	bl	8103aec <RCCEx_PLLSAI1_Config>
 810381a:	4603      	mov	r3, r0
 810381c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 810381e:	7cfb      	ldrb	r3, [r7, #19]
 8103820:	2b00      	cmp	r3, #0
 8103822:	d001      	beq.n	8103828 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8103824:	7cfb      	ldrb	r3, [r7, #19]
 8103826:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8103828:	687b      	ldr	r3, [r7, #4]
 810382a:	681b      	ldr	r3, [r3, #0]
 810382c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103830:	2b00      	cmp	r3, #0
 8103832:	d04d      	beq.n	81038d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8103834:	687b      	ldr	r3, [r7, #4]
 8103836:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103838:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810383c:	d108      	bne.n	8103850 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 810383e:	4b1a      	ldr	r3, [pc, #104]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103840:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103844:	4a18      	ldr	r2, [pc, #96]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103846:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810384a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 810384e:	e012      	b.n	8103876 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8103850:	4b15      	ldr	r3, [pc, #84]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103852:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103856:	4a14      	ldr	r2, [pc, #80]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103858:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 810385c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8103860:	4b11      	ldr	r3, [pc, #68]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103866:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 810386a:	687b      	ldr	r3, [r7, #4]
 810386c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810386e:	490e      	ldr	r1, [pc, #56]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103870:	4313      	orrs	r3, r2
 8103872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8103876:	687b      	ldr	r3, [r7, #4]
 8103878:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810387a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810387e:	d106      	bne.n	810388e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8103880:	4b09      	ldr	r3, [pc, #36]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103882:	68db      	ldr	r3, [r3, #12]
 8103884:	4a08      	ldr	r2, [pc, #32]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103886:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810388a:	60d3      	str	r3, [r2, #12]
 810388c:	e020      	b.n	81038d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 810388e:	687b      	ldr	r3, [r7, #4]
 8103890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103892:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103896:	d109      	bne.n	81038ac <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8103898:	4b03      	ldr	r3, [pc, #12]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 810389a:	68db      	ldr	r3, [r3, #12]
 810389c:	4a02      	ldr	r2, [pc, #8]	; (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 810389e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81038a2:	60d3      	str	r3, [r2, #12]
 81038a4:	e014      	b.n	81038d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 81038a6:	bf00      	nop
 81038a8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 81038ac:	687b      	ldr	r3, [r7, #4]
 81038ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81038b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81038b4:	d10c      	bne.n	81038d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 81038b6:	687b      	ldr	r3, [r7, #4]
 81038b8:	3304      	adds	r3, #4
 81038ba:	2101      	movs	r1, #1
 81038bc:	4618      	mov	r0, r3
 81038be:	f000 f915 	bl	8103aec <RCCEx_PLLSAI1_Config>
 81038c2:	4603      	mov	r3, r0
 81038c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 81038c6:	7cfb      	ldrb	r3, [r7, #19]
 81038c8:	2b00      	cmp	r3, #0
 81038ca:	d001      	beq.n	81038d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 81038cc:	7cfb      	ldrb	r3, [r7, #19]
 81038ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 81038d0:	687b      	ldr	r3, [r7, #4]
 81038d2:	681b      	ldr	r3, [r3, #0]
 81038d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81038d8:	2b00      	cmp	r3, #0
 81038da:	d028      	beq.n	810392e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81038dc:	4b7a      	ldr	r3, [pc, #488]	; (8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 81038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81038e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 81038e6:	687b      	ldr	r3, [r7, #4]
 81038e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81038ea:	4977      	ldr	r1, [pc, #476]	; (8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 81038ec:	4313      	orrs	r3, r2
 81038ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 81038f2:	687b      	ldr	r3, [r7, #4]
 81038f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81038f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81038fa:	d106      	bne.n	810390a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 81038fc:	4b72      	ldr	r3, [pc, #456]	; (8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 81038fe:	68db      	ldr	r3, [r3, #12]
 8103900:	4a71      	ldr	r2, [pc, #452]	; (8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8103902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8103906:	60d3      	str	r3, [r2, #12]
 8103908:	e011      	b.n	810392e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 810390a:	687b      	ldr	r3, [r7, #4]
 810390c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810390e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103912:	d10c      	bne.n	810392e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8103914:	687b      	ldr	r3, [r7, #4]
 8103916:	3304      	adds	r3, #4
 8103918:	2101      	movs	r1, #1
 810391a:	4618      	mov	r0, r3
 810391c:	f000 f8e6 	bl	8103aec <RCCEx_PLLSAI1_Config>
 8103920:	4603      	mov	r3, r0
 8103922:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8103924:	7cfb      	ldrb	r3, [r7, #19]
 8103926:	2b00      	cmp	r3, #0
 8103928:	d001      	beq.n	810392e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 810392a:	7cfb      	ldrb	r3, [r7, #19]
 810392c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810392e:	687b      	ldr	r3, [r7, #4]
 8103930:	681b      	ldr	r3, [r3, #0]
 8103932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8103936:	2b00      	cmp	r3, #0
 8103938:	d01e      	beq.n	8103978 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810393a:	4b63      	ldr	r3, [pc, #396]	; (8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 810393c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103940:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103944:	687b      	ldr	r3, [r7, #4]
 8103946:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810394a:	495f      	ldr	r1, [pc, #380]	; (8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 810394c:	4313      	orrs	r3, r2
 810394e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8103952:	687b      	ldr	r3, [r7, #4]
 8103954:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103958:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810395c:	d10c      	bne.n	8103978 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 810395e:	687b      	ldr	r3, [r7, #4]
 8103960:	3304      	adds	r3, #4
 8103962:	2102      	movs	r1, #2
 8103964:	4618      	mov	r0, r3
 8103966:	f000 f8c1 	bl	8103aec <RCCEx_PLLSAI1_Config>
 810396a:	4603      	mov	r3, r0
 810396c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 810396e:	7cfb      	ldrb	r3, [r7, #19]
 8103970:	2b00      	cmp	r3, #0
 8103972:	d001      	beq.n	8103978 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8103974:	7cfb      	ldrb	r3, [r7, #19]
 8103976:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8103978:	687b      	ldr	r3, [r7, #4]
 810397a:	681b      	ldr	r3, [r3, #0]
 810397c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103980:	2b00      	cmp	r3, #0
 8103982:	d00b      	beq.n	810399c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8103984:	4b50      	ldr	r3, [pc, #320]	; (8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8103986:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810398a:	f023 0204 	bic.w	r2, r3, #4
 810398e:	687b      	ldr	r3, [r7, #4]
 8103990:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103994:	494c      	ldr	r1, [pc, #304]	; (8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8103996:	4313      	orrs	r3, r2
 8103998:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 810399c:	687b      	ldr	r3, [r7, #4]
 810399e:	681b      	ldr	r3, [r3, #0]
 81039a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81039a4:	2b00      	cmp	r3, #0
 81039a6:	d00b      	beq.n	81039c0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 81039a8:	4b47      	ldr	r3, [pc, #284]	; (8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 81039aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81039ae:	f023 0218 	bic.w	r2, r3, #24
 81039b2:	687b      	ldr	r3, [r7, #4]
 81039b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81039b8:	4943      	ldr	r1, [pc, #268]	; (8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 81039ba:	4313      	orrs	r3, r2
 81039bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81039c0:	687b      	ldr	r3, [r7, #4]
 81039c2:	681b      	ldr	r3, [r3, #0]
 81039c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81039c8:	2b00      	cmp	r3, #0
 81039ca:	d035      	beq.n	8103a38 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 81039cc:	4b3e      	ldr	r3, [pc, #248]	; (8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 81039ce:	681b      	ldr	r3, [r3, #0]
 81039d0:	4a3d      	ldr	r2, [pc, #244]	; (8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 81039d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81039d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81039d8:	f7fc fe20 	bl	810061c <HAL_GetTick>
 81039dc:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 81039de:	e009      	b.n	81039f4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 81039e0:	f7fc fe1c 	bl	810061c <HAL_GetTick>
 81039e4:	4602      	mov	r2, r0
 81039e6:	68fb      	ldr	r3, [r7, #12]
 81039e8:	1ad3      	subs	r3, r2, r3
 81039ea:	2b02      	cmp	r3, #2
 81039ec:	d902      	bls.n	81039f4 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 81039ee:	2303      	movs	r3, #3
 81039f0:	74fb      	strb	r3, [r7, #19]
        break;
 81039f2:	e005      	b.n	8103a00 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 81039f4:	4b34      	ldr	r3, [pc, #208]	; (8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 81039f6:	681b      	ldr	r3, [r3, #0]
 81039f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81039fc:	2b00      	cmp	r3, #0
 81039fe:	d1ef      	bne.n	81039e0 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8103a00:	7cfb      	ldrb	r3, [r7, #19]
 8103a02:	2b00      	cmp	r3, #0
 8103a04:	d113      	bne.n	8103a2e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8103a06:	4b30      	ldr	r3, [pc, #192]	; (8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8103a08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103a0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8103a10:	687b      	ldr	r3, [r7, #4]
 8103a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8103a16:	492c      	ldr	r1, [pc, #176]	; (8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8103a18:	4313      	orrs	r3, r2
 8103a1a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8103a1e:	687b      	ldr	r3, [r7, #4]
 8103a20:	3320      	adds	r3, #32
 8103a22:	2102      	movs	r1, #2
 8103a24:	4618      	mov	r0, r3
 8103a26:	f000 f955 	bl	8103cd4 <RCCEx_PLLSAI2_Config>
 8103a2a:	4603      	mov	r3, r0
 8103a2c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8103a2e:	7cfb      	ldrb	r3, [r7, #19]
 8103a30:	2b00      	cmp	r3, #0
 8103a32:	d001      	beq.n	8103a38 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8103a34:	7cfb      	ldrb	r3, [r7, #19]
 8103a36:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8103a38:	687b      	ldr	r3, [r7, #4]
 8103a3a:	681b      	ldr	r3, [r3, #0]
 8103a3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103a40:	2b00      	cmp	r3, #0
 8103a42:	d01e      	beq.n	8103a82 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8103a44:	4b20      	ldr	r3, [pc, #128]	; (8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8103a46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103a4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8103a4e:	687b      	ldr	r3, [r7, #4]
 8103a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103a54:	491c      	ldr	r1, [pc, #112]	; (8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8103a56:	4313      	orrs	r3, r2
 8103a58:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8103a5c:	687b      	ldr	r3, [r7, #4]
 8103a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103a66:	d10c      	bne.n	8103a82 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8103a68:	687b      	ldr	r3, [r7, #4]
 8103a6a:	3320      	adds	r3, #32
 8103a6c:	2101      	movs	r1, #1
 8103a6e:	4618      	mov	r0, r3
 8103a70:	f000 f930 	bl	8103cd4 <RCCEx_PLLSAI2_Config>
 8103a74:	4603      	mov	r3, r0
 8103a76:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8103a78:	7cfb      	ldrb	r3, [r7, #19]
 8103a7a:	2b00      	cmp	r3, #0
 8103a7c:	d001      	beq.n	8103a82 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8103a7e:	7cfb      	ldrb	r3, [r7, #19]
 8103a80:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8103a82:	687b      	ldr	r3, [r7, #4]
 8103a84:	681b      	ldr	r3, [r3, #0]
 8103a86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103a8a:	2b00      	cmp	r3, #0
 8103a8c:	d017      	beq.n	8103abe <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8103a8e:	4b0e      	ldr	r3, [pc, #56]	; (8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8103a90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103a94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8103a98:	687b      	ldr	r3, [r7, #4]
 8103a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103a9e:	490a      	ldr	r1, [pc, #40]	; (8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8103aa0:	4313      	orrs	r3, r2
 8103aa2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8103aa6:	687b      	ldr	r3, [r7, #4]
 8103aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103aac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103ab0:	d105      	bne.n	8103abe <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8103ab2:	4b05      	ldr	r3, [pc, #20]	; (8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8103ab4:	68db      	ldr	r3, [r3, #12]
 8103ab6:	4a04      	ldr	r2, [pc, #16]	; (8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8103ab8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8103abc:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8103abe:	7cbb      	ldrb	r3, [r7, #18]
}
 8103ac0:	4618      	mov	r0, r3
 8103ac2:	3718      	adds	r7, #24
 8103ac4:	46bd      	mov	sp, r7
 8103ac6:	bd80      	pop	{r7, pc}
 8103ac8:	40021000 	.word	0x40021000

08103acc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8103acc:	b480      	push	{r7}
 8103ace:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8103ad0:	4b05      	ldr	r3, [pc, #20]	; (8103ae8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8103ad2:	681b      	ldr	r3, [r3, #0]
 8103ad4:	4a04      	ldr	r2, [pc, #16]	; (8103ae8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8103ad6:	f043 0304 	orr.w	r3, r3, #4
 8103ada:	6013      	str	r3, [r2, #0]
}
 8103adc:	bf00      	nop
 8103ade:	46bd      	mov	sp, r7
 8103ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ae4:	4770      	bx	lr
 8103ae6:	bf00      	nop
 8103ae8:	40021000 	.word	0x40021000

08103aec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8103aec:	b580      	push	{r7, lr}
 8103aee:	b084      	sub	sp, #16
 8103af0:	af00      	add	r7, sp, #0
 8103af2:	6078      	str	r0, [r7, #4]
 8103af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103af6:	2300      	movs	r3, #0
 8103af8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8103afa:	4b72      	ldr	r3, [pc, #456]	; (8103cc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103afc:	68db      	ldr	r3, [r3, #12]
 8103afe:	f003 0303 	and.w	r3, r3, #3
 8103b02:	2b00      	cmp	r3, #0
 8103b04:	d00e      	beq.n	8103b24 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8103b06:	4b6f      	ldr	r3, [pc, #444]	; (8103cc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103b08:	68db      	ldr	r3, [r3, #12]
 8103b0a:	f003 0203 	and.w	r2, r3, #3
 8103b0e:	687b      	ldr	r3, [r7, #4]
 8103b10:	681b      	ldr	r3, [r3, #0]
 8103b12:	429a      	cmp	r2, r3
 8103b14:	d103      	bne.n	8103b1e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8103b16:	687b      	ldr	r3, [r7, #4]
 8103b18:	681b      	ldr	r3, [r3, #0]
       ||
 8103b1a:	2b00      	cmp	r3, #0
 8103b1c:	d142      	bne.n	8103ba4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8103b1e:	2301      	movs	r3, #1
 8103b20:	73fb      	strb	r3, [r7, #15]
 8103b22:	e03f      	b.n	8103ba4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8103b24:	687b      	ldr	r3, [r7, #4]
 8103b26:	681b      	ldr	r3, [r3, #0]
 8103b28:	2b03      	cmp	r3, #3
 8103b2a:	d018      	beq.n	8103b5e <RCCEx_PLLSAI1_Config+0x72>
 8103b2c:	2b03      	cmp	r3, #3
 8103b2e:	d825      	bhi.n	8103b7c <RCCEx_PLLSAI1_Config+0x90>
 8103b30:	2b01      	cmp	r3, #1
 8103b32:	d002      	beq.n	8103b3a <RCCEx_PLLSAI1_Config+0x4e>
 8103b34:	2b02      	cmp	r3, #2
 8103b36:	d009      	beq.n	8103b4c <RCCEx_PLLSAI1_Config+0x60>
 8103b38:	e020      	b.n	8103b7c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8103b3a:	4b62      	ldr	r3, [pc, #392]	; (8103cc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103b3c:	681b      	ldr	r3, [r3, #0]
 8103b3e:	f003 0302 	and.w	r3, r3, #2
 8103b42:	2b00      	cmp	r3, #0
 8103b44:	d11d      	bne.n	8103b82 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8103b46:	2301      	movs	r3, #1
 8103b48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8103b4a:	e01a      	b.n	8103b82 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8103b4c:	4b5d      	ldr	r3, [pc, #372]	; (8103cc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103b4e:	681b      	ldr	r3, [r3, #0]
 8103b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103b54:	2b00      	cmp	r3, #0
 8103b56:	d116      	bne.n	8103b86 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8103b58:	2301      	movs	r3, #1
 8103b5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8103b5c:	e013      	b.n	8103b86 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8103b5e:	4b59      	ldr	r3, [pc, #356]	; (8103cc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103b60:	681b      	ldr	r3, [r3, #0]
 8103b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103b66:	2b00      	cmp	r3, #0
 8103b68:	d10f      	bne.n	8103b8a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8103b6a:	4b56      	ldr	r3, [pc, #344]	; (8103cc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103b6c:	681b      	ldr	r3, [r3, #0]
 8103b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103b72:	2b00      	cmp	r3, #0
 8103b74:	d109      	bne.n	8103b8a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8103b76:	2301      	movs	r3, #1
 8103b78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8103b7a:	e006      	b.n	8103b8a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8103b7c:	2301      	movs	r3, #1
 8103b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8103b80:	e004      	b.n	8103b8c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8103b82:	bf00      	nop
 8103b84:	e002      	b.n	8103b8c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8103b86:	bf00      	nop
 8103b88:	e000      	b.n	8103b8c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8103b8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8103b8c:	7bfb      	ldrb	r3, [r7, #15]
 8103b8e:	2b00      	cmp	r3, #0
 8103b90:	d108      	bne.n	8103ba4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8103b92:	4b4c      	ldr	r3, [pc, #304]	; (8103cc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103b94:	68db      	ldr	r3, [r3, #12]
 8103b96:	f023 0203 	bic.w	r2, r3, #3
 8103b9a:	687b      	ldr	r3, [r7, #4]
 8103b9c:	681b      	ldr	r3, [r3, #0]
 8103b9e:	4949      	ldr	r1, [pc, #292]	; (8103cc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103ba0:	4313      	orrs	r3, r2
 8103ba2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8103ba4:	7bfb      	ldrb	r3, [r7, #15]
 8103ba6:	2b00      	cmp	r3, #0
 8103ba8:	f040 8086 	bne.w	8103cb8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8103bac:	4b45      	ldr	r3, [pc, #276]	; (8103cc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103bae:	681b      	ldr	r3, [r3, #0]
 8103bb0:	4a44      	ldr	r2, [pc, #272]	; (8103cc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103bb2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8103bb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103bb8:	f7fc fd30 	bl	810061c <HAL_GetTick>
 8103bbc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8103bbe:	e009      	b.n	8103bd4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8103bc0:	f7fc fd2c 	bl	810061c <HAL_GetTick>
 8103bc4:	4602      	mov	r2, r0
 8103bc6:	68bb      	ldr	r3, [r7, #8]
 8103bc8:	1ad3      	subs	r3, r2, r3
 8103bca:	2b02      	cmp	r3, #2
 8103bcc:	d902      	bls.n	8103bd4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8103bce:	2303      	movs	r3, #3
 8103bd0:	73fb      	strb	r3, [r7, #15]
        break;
 8103bd2:	e005      	b.n	8103be0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8103bd4:	4b3b      	ldr	r3, [pc, #236]	; (8103cc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103bd6:	681b      	ldr	r3, [r3, #0]
 8103bd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103bdc:	2b00      	cmp	r3, #0
 8103bde:	d1ef      	bne.n	8103bc0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8103be0:	7bfb      	ldrb	r3, [r7, #15]
 8103be2:	2b00      	cmp	r3, #0
 8103be4:	d168      	bne.n	8103cb8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8103be6:	683b      	ldr	r3, [r7, #0]
 8103be8:	2b00      	cmp	r3, #0
 8103bea:	d113      	bne.n	8103c14 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8103bec:	4b35      	ldr	r3, [pc, #212]	; (8103cc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103bee:	691a      	ldr	r2, [r3, #16]
 8103bf0:	4b35      	ldr	r3, [pc, #212]	; (8103cc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8103bf2:	4013      	ands	r3, r2
 8103bf4:	687a      	ldr	r2, [r7, #4]
 8103bf6:	6892      	ldr	r2, [r2, #8]
 8103bf8:	0211      	lsls	r1, r2, #8
 8103bfa:	687a      	ldr	r2, [r7, #4]
 8103bfc:	68d2      	ldr	r2, [r2, #12]
 8103bfe:	06d2      	lsls	r2, r2, #27
 8103c00:	4311      	orrs	r1, r2
 8103c02:	687a      	ldr	r2, [r7, #4]
 8103c04:	6852      	ldr	r2, [r2, #4]
 8103c06:	3a01      	subs	r2, #1
 8103c08:	0112      	lsls	r2, r2, #4
 8103c0a:	430a      	orrs	r2, r1
 8103c0c:	492d      	ldr	r1, [pc, #180]	; (8103cc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103c0e:	4313      	orrs	r3, r2
 8103c10:	610b      	str	r3, [r1, #16]
 8103c12:	e02d      	b.n	8103c70 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8103c14:	683b      	ldr	r3, [r7, #0]
 8103c16:	2b01      	cmp	r3, #1
 8103c18:	d115      	bne.n	8103c46 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8103c1a:	4b2a      	ldr	r3, [pc, #168]	; (8103cc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103c1c:	691a      	ldr	r2, [r3, #16]
 8103c1e:	4b2b      	ldr	r3, [pc, #172]	; (8103ccc <RCCEx_PLLSAI1_Config+0x1e0>)
 8103c20:	4013      	ands	r3, r2
 8103c22:	687a      	ldr	r2, [r7, #4]
 8103c24:	6892      	ldr	r2, [r2, #8]
 8103c26:	0211      	lsls	r1, r2, #8
 8103c28:	687a      	ldr	r2, [r7, #4]
 8103c2a:	6912      	ldr	r2, [r2, #16]
 8103c2c:	0852      	lsrs	r2, r2, #1
 8103c2e:	3a01      	subs	r2, #1
 8103c30:	0552      	lsls	r2, r2, #21
 8103c32:	4311      	orrs	r1, r2
 8103c34:	687a      	ldr	r2, [r7, #4]
 8103c36:	6852      	ldr	r2, [r2, #4]
 8103c38:	3a01      	subs	r2, #1
 8103c3a:	0112      	lsls	r2, r2, #4
 8103c3c:	430a      	orrs	r2, r1
 8103c3e:	4921      	ldr	r1, [pc, #132]	; (8103cc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103c40:	4313      	orrs	r3, r2
 8103c42:	610b      	str	r3, [r1, #16]
 8103c44:	e014      	b.n	8103c70 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8103c46:	4b1f      	ldr	r3, [pc, #124]	; (8103cc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103c48:	691a      	ldr	r2, [r3, #16]
 8103c4a:	4b21      	ldr	r3, [pc, #132]	; (8103cd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8103c4c:	4013      	ands	r3, r2
 8103c4e:	687a      	ldr	r2, [r7, #4]
 8103c50:	6892      	ldr	r2, [r2, #8]
 8103c52:	0211      	lsls	r1, r2, #8
 8103c54:	687a      	ldr	r2, [r7, #4]
 8103c56:	6952      	ldr	r2, [r2, #20]
 8103c58:	0852      	lsrs	r2, r2, #1
 8103c5a:	3a01      	subs	r2, #1
 8103c5c:	0652      	lsls	r2, r2, #25
 8103c5e:	4311      	orrs	r1, r2
 8103c60:	687a      	ldr	r2, [r7, #4]
 8103c62:	6852      	ldr	r2, [r2, #4]
 8103c64:	3a01      	subs	r2, #1
 8103c66:	0112      	lsls	r2, r2, #4
 8103c68:	430a      	orrs	r2, r1
 8103c6a:	4916      	ldr	r1, [pc, #88]	; (8103cc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103c6c:	4313      	orrs	r3, r2
 8103c6e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8103c70:	4b14      	ldr	r3, [pc, #80]	; (8103cc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103c72:	681b      	ldr	r3, [r3, #0]
 8103c74:	4a13      	ldr	r2, [pc, #76]	; (8103cc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103c76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8103c7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8103c7c:	f7fc fcce 	bl	810061c <HAL_GetTick>
 8103c80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8103c82:	e009      	b.n	8103c98 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8103c84:	f7fc fcca 	bl	810061c <HAL_GetTick>
 8103c88:	4602      	mov	r2, r0
 8103c8a:	68bb      	ldr	r3, [r7, #8]
 8103c8c:	1ad3      	subs	r3, r2, r3
 8103c8e:	2b02      	cmp	r3, #2
 8103c90:	d902      	bls.n	8103c98 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8103c92:	2303      	movs	r3, #3
 8103c94:	73fb      	strb	r3, [r7, #15]
          break;
 8103c96:	e005      	b.n	8103ca4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8103c98:	4b0a      	ldr	r3, [pc, #40]	; (8103cc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103c9a:	681b      	ldr	r3, [r3, #0]
 8103c9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103ca0:	2b00      	cmp	r3, #0
 8103ca2:	d0ef      	beq.n	8103c84 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8103ca4:	7bfb      	ldrb	r3, [r7, #15]
 8103ca6:	2b00      	cmp	r3, #0
 8103ca8:	d106      	bne.n	8103cb8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8103caa:	4b06      	ldr	r3, [pc, #24]	; (8103cc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103cac:	691a      	ldr	r2, [r3, #16]
 8103cae:	687b      	ldr	r3, [r7, #4]
 8103cb0:	699b      	ldr	r3, [r3, #24]
 8103cb2:	4904      	ldr	r1, [pc, #16]	; (8103cc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103cb4:	4313      	orrs	r3, r2
 8103cb6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8103cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8103cba:	4618      	mov	r0, r3
 8103cbc:	3710      	adds	r7, #16
 8103cbe:	46bd      	mov	sp, r7
 8103cc0:	bd80      	pop	{r7, pc}
 8103cc2:	bf00      	nop
 8103cc4:	40021000 	.word	0x40021000
 8103cc8:	07ff800f 	.word	0x07ff800f
 8103ccc:	ff9f800f 	.word	0xff9f800f
 8103cd0:	f9ff800f 	.word	0xf9ff800f

08103cd4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8103cd4:	b580      	push	{r7, lr}
 8103cd6:	b084      	sub	sp, #16
 8103cd8:	af00      	add	r7, sp, #0
 8103cda:	6078      	str	r0, [r7, #4]
 8103cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103cde:	2300      	movs	r3, #0
 8103ce0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8103ce2:	4b72      	ldr	r3, [pc, #456]	; (8103eac <RCCEx_PLLSAI2_Config+0x1d8>)
 8103ce4:	68db      	ldr	r3, [r3, #12]
 8103ce6:	f003 0303 	and.w	r3, r3, #3
 8103cea:	2b00      	cmp	r3, #0
 8103cec:	d00e      	beq.n	8103d0c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8103cee:	4b6f      	ldr	r3, [pc, #444]	; (8103eac <RCCEx_PLLSAI2_Config+0x1d8>)
 8103cf0:	68db      	ldr	r3, [r3, #12]
 8103cf2:	f003 0203 	and.w	r2, r3, #3
 8103cf6:	687b      	ldr	r3, [r7, #4]
 8103cf8:	681b      	ldr	r3, [r3, #0]
 8103cfa:	429a      	cmp	r2, r3
 8103cfc:	d103      	bne.n	8103d06 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8103cfe:	687b      	ldr	r3, [r7, #4]
 8103d00:	681b      	ldr	r3, [r3, #0]
       ||
 8103d02:	2b00      	cmp	r3, #0
 8103d04:	d142      	bne.n	8103d8c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8103d06:	2301      	movs	r3, #1
 8103d08:	73fb      	strb	r3, [r7, #15]
 8103d0a:	e03f      	b.n	8103d8c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8103d0c:	687b      	ldr	r3, [r7, #4]
 8103d0e:	681b      	ldr	r3, [r3, #0]
 8103d10:	2b03      	cmp	r3, #3
 8103d12:	d018      	beq.n	8103d46 <RCCEx_PLLSAI2_Config+0x72>
 8103d14:	2b03      	cmp	r3, #3
 8103d16:	d825      	bhi.n	8103d64 <RCCEx_PLLSAI2_Config+0x90>
 8103d18:	2b01      	cmp	r3, #1
 8103d1a:	d002      	beq.n	8103d22 <RCCEx_PLLSAI2_Config+0x4e>
 8103d1c:	2b02      	cmp	r3, #2
 8103d1e:	d009      	beq.n	8103d34 <RCCEx_PLLSAI2_Config+0x60>
 8103d20:	e020      	b.n	8103d64 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8103d22:	4b62      	ldr	r3, [pc, #392]	; (8103eac <RCCEx_PLLSAI2_Config+0x1d8>)
 8103d24:	681b      	ldr	r3, [r3, #0]
 8103d26:	f003 0302 	and.w	r3, r3, #2
 8103d2a:	2b00      	cmp	r3, #0
 8103d2c:	d11d      	bne.n	8103d6a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8103d2e:	2301      	movs	r3, #1
 8103d30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8103d32:	e01a      	b.n	8103d6a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8103d34:	4b5d      	ldr	r3, [pc, #372]	; (8103eac <RCCEx_PLLSAI2_Config+0x1d8>)
 8103d36:	681b      	ldr	r3, [r3, #0]
 8103d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103d3c:	2b00      	cmp	r3, #0
 8103d3e:	d116      	bne.n	8103d6e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8103d40:	2301      	movs	r3, #1
 8103d42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8103d44:	e013      	b.n	8103d6e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8103d46:	4b59      	ldr	r3, [pc, #356]	; (8103eac <RCCEx_PLLSAI2_Config+0x1d8>)
 8103d48:	681b      	ldr	r3, [r3, #0]
 8103d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103d4e:	2b00      	cmp	r3, #0
 8103d50:	d10f      	bne.n	8103d72 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8103d52:	4b56      	ldr	r3, [pc, #344]	; (8103eac <RCCEx_PLLSAI2_Config+0x1d8>)
 8103d54:	681b      	ldr	r3, [r3, #0]
 8103d56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103d5a:	2b00      	cmp	r3, #0
 8103d5c:	d109      	bne.n	8103d72 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8103d5e:	2301      	movs	r3, #1
 8103d60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8103d62:	e006      	b.n	8103d72 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8103d64:	2301      	movs	r3, #1
 8103d66:	73fb      	strb	r3, [r7, #15]
      break;
 8103d68:	e004      	b.n	8103d74 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8103d6a:	bf00      	nop
 8103d6c:	e002      	b.n	8103d74 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8103d6e:	bf00      	nop
 8103d70:	e000      	b.n	8103d74 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8103d72:	bf00      	nop
    }

    if(status == HAL_OK)
 8103d74:	7bfb      	ldrb	r3, [r7, #15]
 8103d76:	2b00      	cmp	r3, #0
 8103d78:	d108      	bne.n	8103d8c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8103d7a:	4b4c      	ldr	r3, [pc, #304]	; (8103eac <RCCEx_PLLSAI2_Config+0x1d8>)
 8103d7c:	68db      	ldr	r3, [r3, #12]
 8103d7e:	f023 0203 	bic.w	r2, r3, #3
 8103d82:	687b      	ldr	r3, [r7, #4]
 8103d84:	681b      	ldr	r3, [r3, #0]
 8103d86:	4949      	ldr	r1, [pc, #292]	; (8103eac <RCCEx_PLLSAI2_Config+0x1d8>)
 8103d88:	4313      	orrs	r3, r2
 8103d8a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8103d8c:	7bfb      	ldrb	r3, [r7, #15]
 8103d8e:	2b00      	cmp	r3, #0
 8103d90:	f040 8086 	bne.w	8103ea0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8103d94:	4b45      	ldr	r3, [pc, #276]	; (8103eac <RCCEx_PLLSAI2_Config+0x1d8>)
 8103d96:	681b      	ldr	r3, [r3, #0]
 8103d98:	4a44      	ldr	r2, [pc, #272]	; (8103eac <RCCEx_PLLSAI2_Config+0x1d8>)
 8103d9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8103d9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103da0:	f7fc fc3c 	bl	810061c <HAL_GetTick>
 8103da4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8103da6:	e009      	b.n	8103dbc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8103da8:	f7fc fc38 	bl	810061c <HAL_GetTick>
 8103dac:	4602      	mov	r2, r0
 8103dae:	68bb      	ldr	r3, [r7, #8]
 8103db0:	1ad3      	subs	r3, r2, r3
 8103db2:	2b02      	cmp	r3, #2
 8103db4:	d902      	bls.n	8103dbc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8103db6:	2303      	movs	r3, #3
 8103db8:	73fb      	strb	r3, [r7, #15]
        break;
 8103dba:	e005      	b.n	8103dc8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8103dbc:	4b3b      	ldr	r3, [pc, #236]	; (8103eac <RCCEx_PLLSAI2_Config+0x1d8>)
 8103dbe:	681b      	ldr	r3, [r3, #0]
 8103dc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103dc4:	2b00      	cmp	r3, #0
 8103dc6:	d1ef      	bne.n	8103da8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8103dc8:	7bfb      	ldrb	r3, [r7, #15]
 8103dca:	2b00      	cmp	r3, #0
 8103dcc:	d168      	bne.n	8103ea0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8103dce:	683b      	ldr	r3, [r7, #0]
 8103dd0:	2b00      	cmp	r3, #0
 8103dd2:	d113      	bne.n	8103dfc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8103dd4:	4b35      	ldr	r3, [pc, #212]	; (8103eac <RCCEx_PLLSAI2_Config+0x1d8>)
 8103dd6:	695a      	ldr	r2, [r3, #20]
 8103dd8:	4b35      	ldr	r3, [pc, #212]	; (8103eb0 <RCCEx_PLLSAI2_Config+0x1dc>)
 8103dda:	4013      	ands	r3, r2
 8103ddc:	687a      	ldr	r2, [r7, #4]
 8103dde:	6892      	ldr	r2, [r2, #8]
 8103de0:	0211      	lsls	r1, r2, #8
 8103de2:	687a      	ldr	r2, [r7, #4]
 8103de4:	68d2      	ldr	r2, [r2, #12]
 8103de6:	06d2      	lsls	r2, r2, #27
 8103de8:	4311      	orrs	r1, r2
 8103dea:	687a      	ldr	r2, [r7, #4]
 8103dec:	6852      	ldr	r2, [r2, #4]
 8103dee:	3a01      	subs	r2, #1
 8103df0:	0112      	lsls	r2, r2, #4
 8103df2:	430a      	orrs	r2, r1
 8103df4:	492d      	ldr	r1, [pc, #180]	; (8103eac <RCCEx_PLLSAI2_Config+0x1d8>)
 8103df6:	4313      	orrs	r3, r2
 8103df8:	614b      	str	r3, [r1, #20]
 8103dfa:	e02d      	b.n	8103e58 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8103dfc:	683b      	ldr	r3, [r7, #0]
 8103dfe:	2b01      	cmp	r3, #1
 8103e00:	d115      	bne.n	8103e2e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8103e02:	4b2a      	ldr	r3, [pc, #168]	; (8103eac <RCCEx_PLLSAI2_Config+0x1d8>)
 8103e04:	695a      	ldr	r2, [r3, #20]
 8103e06:	4b2b      	ldr	r3, [pc, #172]	; (8103eb4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8103e08:	4013      	ands	r3, r2
 8103e0a:	687a      	ldr	r2, [r7, #4]
 8103e0c:	6892      	ldr	r2, [r2, #8]
 8103e0e:	0211      	lsls	r1, r2, #8
 8103e10:	687a      	ldr	r2, [r7, #4]
 8103e12:	6912      	ldr	r2, [r2, #16]
 8103e14:	0852      	lsrs	r2, r2, #1
 8103e16:	3a01      	subs	r2, #1
 8103e18:	0552      	lsls	r2, r2, #21
 8103e1a:	4311      	orrs	r1, r2
 8103e1c:	687a      	ldr	r2, [r7, #4]
 8103e1e:	6852      	ldr	r2, [r2, #4]
 8103e20:	3a01      	subs	r2, #1
 8103e22:	0112      	lsls	r2, r2, #4
 8103e24:	430a      	orrs	r2, r1
 8103e26:	4921      	ldr	r1, [pc, #132]	; (8103eac <RCCEx_PLLSAI2_Config+0x1d8>)
 8103e28:	4313      	orrs	r3, r2
 8103e2a:	614b      	str	r3, [r1, #20]
 8103e2c:	e014      	b.n	8103e58 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8103e2e:	4b1f      	ldr	r3, [pc, #124]	; (8103eac <RCCEx_PLLSAI2_Config+0x1d8>)
 8103e30:	695a      	ldr	r2, [r3, #20]
 8103e32:	4b21      	ldr	r3, [pc, #132]	; (8103eb8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8103e34:	4013      	ands	r3, r2
 8103e36:	687a      	ldr	r2, [r7, #4]
 8103e38:	6892      	ldr	r2, [r2, #8]
 8103e3a:	0211      	lsls	r1, r2, #8
 8103e3c:	687a      	ldr	r2, [r7, #4]
 8103e3e:	6952      	ldr	r2, [r2, #20]
 8103e40:	0852      	lsrs	r2, r2, #1
 8103e42:	3a01      	subs	r2, #1
 8103e44:	0652      	lsls	r2, r2, #25
 8103e46:	4311      	orrs	r1, r2
 8103e48:	687a      	ldr	r2, [r7, #4]
 8103e4a:	6852      	ldr	r2, [r2, #4]
 8103e4c:	3a01      	subs	r2, #1
 8103e4e:	0112      	lsls	r2, r2, #4
 8103e50:	430a      	orrs	r2, r1
 8103e52:	4916      	ldr	r1, [pc, #88]	; (8103eac <RCCEx_PLLSAI2_Config+0x1d8>)
 8103e54:	4313      	orrs	r3, r2
 8103e56:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8103e58:	4b14      	ldr	r3, [pc, #80]	; (8103eac <RCCEx_PLLSAI2_Config+0x1d8>)
 8103e5a:	681b      	ldr	r3, [r3, #0]
 8103e5c:	4a13      	ldr	r2, [pc, #76]	; (8103eac <RCCEx_PLLSAI2_Config+0x1d8>)
 8103e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8103e62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8103e64:	f7fc fbda 	bl	810061c <HAL_GetTick>
 8103e68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8103e6a:	e009      	b.n	8103e80 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8103e6c:	f7fc fbd6 	bl	810061c <HAL_GetTick>
 8103e70:	4602      	mov	r2, r0
 8103e72:	68bb      	ldr	r3, [r7, #8]
 8103e74:	1ad3      	subs	r3, r2, r3
 8103e76:	2b02      	cmp	r3, #2
 8103e78:	d902      	bls.n	8103e80 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8103e7a:	2303      	movs	r3, #3
 8103e7c:	73fb      	strb	r3, [r7, #15]
          break;
 8103e7e:	e005      	b.n	8103e8c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8103e80:	4b0a      	ldr	r3, [pc, #40]	; (8103eac <RCCEx_PLLSAI2_Config+0x1d8>)
 8103e82:	681b      	ldr	r3, [r3, #0]
 8103e84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103e88:	2b00      	cmp	r3, #0
 8103e8a:	d0ef      	beq.n	8103e6c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8103e8c:	7bfb      	ldrb	r3, [r7, #15]
 8103e8e:	2b00      	cmp	r3, #0
 8103e90:	d106      	bne.n	8103ea0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8103e92:	4b06      	ldr	r3, [pc, #24]	; (8103eac <RCCEx_PLLSAI2_Config+0x1d8>)
 8103e94:	695a      	ldr	r2, [r3, #20]
 8103e96:	687b      	ldr	r3, [r7, #4]
 8103e98:	699b      	ldr	r3, [r3, #24]
 8103e9a:	4904      	ldr	r1, [pc, #16]	; (8103eac <RCCEx_PLLSAI2_Config+0x1d8>)
 8103e9c:	4313      	orrs	r3, r2
 8103e9e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8103ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8103ea2:	4618      	mov	r0, r3
 8103ea4:	3710      	adds	r7, #16
 8103ea6:	46bd      	mov	sp, r7
 8103ea8:	bd80      	pop	{r7, pc}
 8103eaa:	bf00      	nop
 8103eac:	40021000 	.word	0x40021000
 8103eb0:	07ff800f 	.word	0x07ff800f
 8103eb4:	ff9f800f 	.word	0xff9f800f
 8103eb8:	f9ff800f 	.word	0xf9ff800f

08103ebc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8103ebc:	b084      	sub	sp, #16
 8103ebe:	b580      	push	{r7, lr}
 8103ec0:	b084      	sub	sp, #16
 8103ec2:	af00      	add	r7, sp, #0
 8103ec4:	6078      	str	r0, [r7, #4]
 8103ec6:	f107 001c 	add.w	r0, r7, #28
 8103eca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8103ece:	687b      	ldr	r3, [r7, #4]
 8103ed0:	68db      	ldr	r3, [r3, #12]
 8103ed2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8103ed6:	687b      	ldr	r3, [r7, #4]
 8103ed8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8103eda:	6878      	ldr	r0, [r7, #4]
 8103edc:	f001 faf6 	bl	81054cc <USB_CoreReset>
 8103ee0:	4603      	mov	r3, r0
 8103ee2:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8103ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8103ee6:	2b00      	cmp	r3, #0
 8103ee8:	d106      	bne.n	8103ef8 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8103eea:	687b      	ldr	r3, [r7, #4]
 8103eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103eee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8103ef2:	687b      	ldr	r3, [r7, #4]
 8103ef4:	639a      	str	r2, [r3, #56]	; 0x38
 8103ef6:	e005      	b.n	8103f04 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8103ef8:	687b      	ldr	r3, [r7, #4]
 8103efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103efc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8103f00:	687b      	ldr	r3, [r7, #4]
 8103f02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8103f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8103f06:	4618      	mov	r0, r3
 8103f08:	3710      	adds	r7, #16
 8103f0a:	46bd      	mov	sp, r7
 8103f0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8103f10:	b004      	add	sp, #16
 8103f12:	4770      	bx	lr

08103f14 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8103f14:	b480      	push	{r7}
 8103f16:	b087      	sub	sp, #28
 8103f18:	af00      	add	r7, sp, #0
 8103f1a:	60f8      	str	r0, [r7, #12]
 8103f1c:	60b9      	str	r1, [r7, #8]
 8103f1e:	4613      	mov	r3, r2
 8103f20:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8103f22:	79fb      	ldrb	r3, [r7, #7]
 8103f24:	2b02      	cmp	r3, #2
 8103f26:	d165      	bne.n	8103ff4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8103f28:	68bb      	ldr	r3, [r7, #8]
 8103f2a:	4a3e      	ldr	r2, [pc, #248]	; (8104024 <USB_SetTurnaroundTime+0x110>)
 8103f2c:	4293      	cmp	r3, r2
 8103f2e:	d906      	bls.n	8103f3e <USB_SetTurnaroundTime+0x2a>
 8103f30:	68bb      	ldr	r3, [r7, #8]
 8103f32:	4a3d      	ldr	r2, [pc, #244]	; (8104028 <USB_SetTurnaroundTime+0x114>)
 8103f34:	4293      	cmp	r3, r2
 8103f36:	d202      	bcs.n	8103f3e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8103f38:	230f      	movs	r3, #15
 8103f3a:	617b      	str	r3, [r7, #20]
 8103f3c:	e05c      	b.n	8103ff8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8103f3e:	68bb      	ldr	r3, [r7, #8]
 8103f40:	4a39      	ldr	r2, [pc, #228]	; (8104028 <USB_SetTurnaroundTime+0x114>)
 8103f42:	4293      	cmp	r3, r2
 8103f44:	d306      	bcc.n	8103f54 <USB_SetTurnaroundTime+0x40>
 8103f46:	68bb      	ldr	r3, [r7, #8]
 8103f48:	4a38      	ldr	r2, [pc, #224]	; (810402c <USB_SetTurnaroundTime+0x118>)
 8103f4a:	4293      	cmp	r3, r2
 8103f4c:	d202      	bcs.n	8103f54 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8103f4e:	230e      	movs	r3, #14
 8103f50:	617b      	str	r3, [r7, #20]
 8103f52:	e051      	b.n	8103ff8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8103f54:	68bb      	ldr	r3, [r7, #8]
 8103f56:	4a35      	ldr	r2, [pc, #212]	; (810402c <USB_SetTurnaroundTime+0x118>)
 8103f58:	4293      	cmp	r3, r2
 8103f5a:	d306      	bcc.n	8103f6a <USB_SetTurnaroundTime+0x56>
 8103f5c:	68bb      	ldr	r3, [r7, #8]
 8103f5e:	4a34      	ldr	r2, [pc, #208]	; (8104030 <USB_SetTurnaroundTime+0x11c>)
 8103f60:	4293      	cmp	r3, r2
 8103f62:	d202      	bcs.n	8103f6a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8103f64:	230d      	movs	r3, #13
 8103f66:	617b      	str	r3, [r7, #20]
 8103f68:	e046      	b.n	8103ff8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8103f6a:	68bb      	ldr	r3, [r7, #8]
 8103f6c:	4a30      	ldr	r2, [pc, #192]	; (8104030 <USB_SetTurnaroundTime+0x11c>)
 8103f6e:	4293      	cmp	r3, r2
 8103f70:	d306      	bcc.n	8103f80 <USB_SetTurnaroundTime+0x6c>
 8103f72:	68bb      	ldr	r3, [r7, #8]
 8103f74:	4a2f      	ldr	r2, [pc, #188]	; (8104034 <USB_SetTurnaroundTime+0x120>)
 8103f76:	4293      	cmp	r3, r2
 8103f78:	d802      	bhi.n	8103f80 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8103f7a:	230c      	movs	r3, #12
 8103f7c:	617b      	str	r3, [r7, #20]
 8103f7e:	e03b      	b.n	8103ff8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8103f80:	68bb      	ldr	r3, [r7, #8]
 8103f82:	4a2c      	ldr	r2, [pc, #176]	; (8104034 <USB_SetTurnaroundTime+0x120>)
 8103f84:	4293      	cmp	r3, r2
 8103f86:	d906      	bls.n	8103f96 <USB_SetTurnaroundTime+0x82>
 8103f88:	68bb      	ldr	r3, [r7, #8]
 8103f8a:	4a2b      	ldr	r2, [pc, #172]	; (8104038 <USB_SetTurnaroundTime+0x124>)
 8103f8c:	4293      	cmp	r3, r2
 8103f8e:	d802      	bhi.n	8103f96 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8103f90:	230b      	movs	r3, #11
 8103f92:	617b      	str	r3, [r7, #20]
 8103f94:	e030      	b.n	8103ff8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8103f96:	68bb      	ldr	r3, [r7, #8]
 8103f98:	4a27      	ldr	r2, [pc, #156]	; (8104038 <USB_SetTurnaroundTime+0x124>)
 8103f9a:	4293      	cmp	r3, r2
 8103f9c:	d906      	bls.n	8103fac <USB_SetTurnaroundTime+0x98>
 8103f9e:	68bb      	ldr	r3, [r7, #8]
 8103fa0:	4a26      	ldr	r2, [pc, #152]	; (810403c <USB_SetTurnaroundTime+0x128>)
 8103fa2:	4293      	cmp	r3, r2
 8103fa4:	d802      	bhi.n	8103fac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8103fa6:	230a      	movs	r3, #10
 8103fa8:	617b      	str	r3, [r7, #20]
 8103faa:	e025      	b.n	8103ff8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8103fac:	68bb      	ldr	r3, [r7, #8]
 8103fae:	4a23      	ldr	r2, [pc, #140]	; (810403c <USB_SetTurnaroundTime+0x128>)
 8103fb0:	4293      	cmp	r3, r2
 8103fb2:	d906      	bls.n	8103fc2 <USB_SetTurnaroundTime+0xae>
 8103fb4:	68bb      	ldr	r3, [r7, #8]
 8103fb6:	4a22      	ldr	r2, [pc, #136]	; (8104040 <USB_SetTurnaroundTime+0x12c>)
 8103fb8:	4293      	cmp	r3, r2
 8103fba:	d202      	bcs.n	8103fc2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8103fbc:	2309      	movs	r3, #9
 8103fbe:	617b      	str	r3, [r7, #20]
 8103fc0:	e01a      	b.n	8103ff8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8103fc2:	68bb      	ldr	r3, [r7, #8]
 8103fc4:	4a1e      	ldr	r2, [pc, #120]	; (8104040 <USB_SetTurnaroundTime+0x12c>)
 8103fc6:	4293      	cmp	r3, r2
 8103fc8:	d306      	bcc.n	8103fd8 <USB_SetTurnaroundTime+0xc4>
 8103fca:	68bb      	ldr	r3, [r7, #8]
 8103fcc:	4a1d      	ldr	r2, [pc, #116]	; (8104044 <USB_SetTurnaroundTime+0x130>)
 8103fce:	4293      	cmp	r3, r2
 8103fd0:	d802      	bhi.n	8103fd8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8103fd2:	2308      	movs	r3, #8
 8103fd4:	617b      	str	r3, [r7, #20]
 8103fd6:	e00f      	b.n	8103ff8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8103fd8:	68bb      	ldr	r3, [r7, #8]
 8103fda:	4a1a      	ldr	r2, [pc, #104]	; (8104044 <USB_SetTurnaroundTime+0x130>)
 8103fdc:	4293      	cmp	r3, r2
 8103fde:	d906      	bls.n	8103fee <USB_SetTurnaroundTime+0xda>
 8103fe0:	68bb      	ldr	r3, [r7, #8]
 8103fe2:	4a19      	ldr	r2, [pc, #100]	; (8104048 <USB_SetTurnaroundTime+0x134>)
 8103fe4:	4293      	cmp	r3, r2
 8103fe6:	d202      	bcs.n	8103fee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8103fe8:	2307      	movs	r3, #7
 8103fea:	617b      	str	r3, [r7, #20]
 8103fec:	e004      	b.n	8103ff8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8103fee:	2306      	movs	r3, #6
 8103ff0:	617b      	str	r3, [r7, #20]
 8103ff2:	e001      	b.n	8103ff8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8103ff4:	2309      	movs	r3, #9
 8103ff6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8103ff8:	68fb      	ldr	r3, [r7, #12]
 8103ffa:	68db      	ldr	r3, [r3, #12]
 8103ffc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8104000:	68fb      	ldr	r3, [r7, #12]
 8104002:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8104004:	68fb      	ldr	r3, [r7, #12]
 8104006:	68da      	ldr	r2, [r3, #12]
 8104008:	697b      	ldr	r3, [r7, #20]
 810400a:	029b      	lsls	r3, r3, #10
 810400c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8104010:	431a      	orrs	r2, r3
 8104012:	68fb      	ldr	r3, [r7, #12]
 8104014:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8104016:	2300      	movs	r3, #0
}
 8104018:	4618      	mov	r0, r3
 810401a:	371c      	adds	r7, #28
 810401c:	46bd      	mov	sp, r7
 810401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104022:	4770      	bx	lr
 8104024:	00d8acbf 	.word	0x00d8acbf
 8104028:	00e4e1c0 	.word	0x00e4e1c0
 810402c:	00f42400 	.word	0x00f42400
 8104030:	01067380 	.word	0x01067380
 8104034:	011a499f 	.word	0x011a499f
 8104038:	01312cff 	.word	0x01312cff
 810403c:	014ca43f 	.word	0x014ca43f
 8104040:	016e3600 	.word	0x016e3600
 8104044:	01a6ab1f 	.word	0x01a6ab1f
 8104048:	01e84800 	.word	0x01e84800

0810404c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 810404c:	b480      	push	{r7}
 810404e:	b083      	sub	sp, #12
 8104050:	af00      	add	r7, sp, #0
 8104052:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8104054:	687b      	ldr	r3, [r7, #4]
 8104056:	689b      	ldr	r3, [r3, #8]
 8104058:	f043 0201 	orr.w	r2, r3, #1
 810405c:	687b      	ldr	r3, [r7, #4]
 810405e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8104060:	2300      	movs	r3, #0
}
 8104062:	4618      	mov	r0, r3
 8104064:	370c      	adds	r7, #12
 8104066:	46bd      	mov	sp, r7
 8104068:	f85d 7b04 	ldr.w	r7, [sp], #4
 810406c:	4770      	bx	lr

0810406e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 810406e:	b480      	push	{r7}
 8104070:	b083      	sub	sp, #12
 8104072:	af00      	add	r7, sp, #0
 8104074:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8104076:	687b      	ldr	r3, [r7, #4]
 8104078:	689b      	ldr	r3, [r3, #8]
 810407a:	f023 0201 	bic.w	r2, r3, #1
 810407e:	687b      	ldr	r3, [r7, #4]
 8104080:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8104082:	2300      	movs	r3, #0
}
 8104084:	4618      	mov	r0, r3
 8104086:	370c      	adds	r7, #12
 8104088:	46bd      	mov	sp, r7
 810408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810408e:	4770      	bx	lr

08104090 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8104090:	b580      	push	{r7, lr}
 8104092:	b084      	sub	sp, #16
 8104094:	af00      	add	r7, sp, #0
 8104096:	6078      	str	r0, [r7, #4]
 8104098:	460b      	mov	r3, r1
 810409a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 810409c:	2300      	movs	r3, #0
 810409e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 81040a0:	687b      	ldr	r3, [r7, #4]
 81040a2:	68db      	ldr	r3, [r3, #12]
 81040a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 81040a8:	687b      	ldr	r3, [r7, #4]
 81040aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 81040ac:	78fb      	ldrb	r3, [r7, #3]
 81040ae:	2b01      	cmp	r3, #1
 81040b0:	d115      	bne.n	81040de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 81040b2:	687b      	ldr	r3, [r7, #4]
 81040b4:	68db      	ldr	r3, [r3, #12]
 81040b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 81040ba:	687b      	ldr	r3, [r7, #4]
 81040bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 81040be:	2001      	movs	r0, #1
 81040c0:	f7fc fab8 	bl	8100634 <HAL_Delay>
      ms++;
 81040c4:	68fb      	ldr	r3, [r7, #12]
 81040c6:	3301      	adds	r3, #1
 81040c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 81040ca:	6878      	ldr	r0, [r7, #4]
 81040cc:	f001 f985 	bl	81053da <USB_GetMode>
 81040d0:	4603      	mov	r3, r0
 81040d2:	2b01      	cmp	r3, #1
 81040d4:	d01e      	beq.n	8104114 <USB_SetCurrentMode+0x84>
 81040d6:	68fb      	ldr	r3, [r7, #12]
 81040d8:	2b31      	cmp	r3, #49	; 0x31
 81040da:	d9f0      	bls.n	81040be <USB_SetCurrentMode+0x2e>
 81040dc:	e01a      	b.n	8104114 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 81040de:	78fb      	ldrb	r3, [r7, #3]
 81040e0:	2b00      	cmp	r3, #0
 81040e2:	d115      	bne.n	8104110 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 81040e4:	687b      	ldr	r3, [r7, #4]
 81040e6:	68db      	ldr	r3, [r3, #12]
 81040e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 81040ec:	687b      	ldr	r3, [r7, #4]
 81040ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 81040f0:	2001      	movs	r0, #1
 81040f2:	f7fc fa9f 	bl	8100634 <HAL_Delay>
      ms++;
 81040f6:	68fb      	ldr	r3, [r7, #12]
 81040f8:	3301      	adds	r3, #1
 81040fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 81040fc:	6878      	ldr	r0, [r7, #4]
 81040fe:	f001 f96c 	bl	81053da <USB_GetMode>
 8104102:	4603      	mov	r3, r0
 8104104:	2b00      	cmp	r3, #0
 8104106:	d005      	beq.n	8104114 <USB_SetCurrentMode+0x84>
 8104108:	68fb      	ldr	r3, [r7, #12]
 810410a:	2b31      	cmp	r3, #49	; 0x31
 810410c:	d9f0      	bls.n	81040f0 <USB_SetCurrentMode+0x60>
 810410e:	e001      	b.n	8104114 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8104110:	2301      	movs	r3, #1
 8104112:	e005      	b.n	8104120 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8104114:	68fb      	ldr	r3, [r7, #12]
 8104116:	2b32      	cmp	r3, #50	; 0x32
 8104118:	d101      	bne.n	810411e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 810411a:	2301      	movs	r3, #1
 810411c:	e000      	b.n	8104120 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 810411e:	2300      	movs	r3, #0
}
 8104120:	4618      	mov	r0, r3
 8104122:	3710      	adds	r7, #16
 8104124:	46bd      	mov	sp, r7
 8104126:	bd80      	pop	{r7, pc}

08104128 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8104128:	b084      	sub	sp, #16
 810412a:	b580      	push	{r7, lr}
 810412c:	b086      	sub	sp, #24
 810412e:	af00      	add	r7, sp, #0
 8104130:	6078      	str	r0, [r7, #4]
 8104132:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8104136:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 810413a:	2300      	movs	r3, #0
 810413c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810413e:	687b      	ldr	r3, [r7, #4]
 8104140:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8104142:	2300      	movs	r3, #0
 8104144:	613b      	str	r3, [r7, #16]
 8104146:	e009      	b.n	810415c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8104148:	687a      	ldr	r2, [r7, #4]
 810414a:	693b      	ldr	r3, [r7, #16]
 810414c:	3340      	adds	r3, #64	; 0x40
 810414e:	009b      	lsls	r3, r3, #2
 8104150:	4413      	add	r3, r2
 8104152:	2200      	movs	r2, #0
 8104154:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8104156:	693b      	ldr	r3, [r7, #16]
 8104158:	3301      	adds	r3, #1
 810415a:	613b      	str	r3, [r7, #16]
 810415c:	693b      	ldr	r3, [r7, #16]
 810415e:	2b0e      	cmp	r3, #14
 8104160:	d9f2      	bls.n	8104148 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8104162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8104164:	2b00      	cmp	r3, #0
 8104166:	d11c      	bne.n	81041a2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8104168:	68fb      	ldr	r3, [r7, #12]
 810416a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810416e:	685b      	ldr	r3, [r3, #4]
 8104170:	68fa      	ldr	r2, [r7, #12]
 8104172:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8104176:	f043 0302 	orr.w	r3, r3, #2
 810417a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 810417c:	687b      	ldr	r3, [r7, #4]
 810417e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104180:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8104184:	687b      	ldr	r3, [r7, #4]
 8104186:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8104188:	687b      	ldr	r3, [r7, #4]
 810418a:	681b      	ldr	r3, [r3, #0]
 810418c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8104190:	687b      	ldr	r3, [r7, #4]
 8104192:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8104194:	687b      	ldr	r3, [r7, #4]
 8104196:	681b      	ldr	r3, [r3, #0]
 8104198:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810419c:	687b      	ldr	r3, [r7, #4]
 810419e:	601a      	str	r2, [r3, #0]
 81041a0:	e005      	b.n	81041ae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 81041a2:	687b      	ldr	r3, [r7, #4]
 81041a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81041a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 81041aa:	687b      	ldr	r3, [r7, #4]
 81041ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 81041ae:	68fb      	ldr	r3, [r7, #12]
 81041b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 81041b4:	461a      	mov	r2, r3
 81041b6:	2300      	movs	r3, #0
 81041b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 81041ba:	68fb      	ldr	r3, [r7, #12]
 81041bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81041c0:	4619      	mov	r1, r3
 81041c2:	68fb      	ldr	r3, [r7, #12]
 81041c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81041c8:	461a      	mov	r2, r3
 81041ca:	680b      	ldr	r3, [r1, #0]
 81041cc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 81041ce:	2103      	movs	r1, #3
 81041d0:	6878      	ldr	r0, [r7, #4]
 81041d2:	f000 f959 	bl	8104488 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 81041d6:	2110      	movs	r1, #16
 81041d8:	6878      	ldr	r0, [r7, #4]
 81041da:	f000 f8f1 	bl	81043c0 <USB_FlushTxFifo>
 81041de:	4603      	mov	r3, r0
 81041e0:	2b00      	cmp	r3, #0
 81041e2:	d001      	beq.n	81041e8 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 81041e4:	2301      	movs	r3, #1
 81041e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 81041e8:	6878      	ldr	r0, [r7, #4]
 81041ea:	f000 f91d 	bl	8104428 <USB_FlushRxFifo>
 81041ee:	4603      	mov	r3, r0
 81041f0:	2b00      	cmp	r3, #0
 81041f2:	d001      	beq.n	81041f8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 81041f4:	2301      	movs	r3, #1
 81041f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 81041f8:	68fb      	ldr	r3, [r7, #12]
 81041fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81041fe:	461a      	mov	r2, r3
 8104200:	2300      	movs	r3, #0
 8104202:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8104204:	68fb      	ldr	r3, [r7, #12]
 8104206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810420a:	461a      	mov	r2, r3
 810420c:	2300      	movs	r3, #0
 810420e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8104210:	68fb      	ldr	r3, [r7, #12]
 8104212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8104216:	461a      	mov	r2, r3
 8104218:	2300      	movs	r3, #0
 810421a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 810421c:	2300      	movs	r3, #0
 810421e:	613b      	str	r3, [r7, #16]
 8104220:	e043      	b.n	81042aa <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8104222:	693b      	ldr	r3, [r7, #16]
 8104224:	015a      	lsls	r2, r3, #5
 8104226:	68fb      	ldr	r3, [r7, #12]
 8104228:	4413      	add	r3, r2
 810422a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810422e:	681b      	ldr	r3, [r3, #0]
 8104230:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8104234:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8104238:	d118      	bne.n	810426c <USB_DevInit+0x144>
    {
      if (i == 0U)
 810423a:	693b      	ldr	r3, [r7, #16]
 810423c:	2b00      	cmp	r3, #0
 810423e:	d10a      	bne.n	8104256 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8104240:	693b      	ldr	r3, [r7, #16]
 8104242:	015a      	lsls	r2, r3, #5
 8104244:	68fb      	ldr	r3, [r7, #12]
 8104246:	4413      	add	r3, r2
 8104248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810424c:	461a      	mov	r2, r3
 810424e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8104252:	6013      	str	r3, [r2, #0]
 8104254:	e013      	b.n	810427e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8104256:	693b      	ldr	r3, [r7, #16]
 8104258:	015a      	lsls	r2, r3, #5
 810425a:	68fb      	ldr	r3, [r7, #12]
 810425c:	4413      	add	r3, r2
 810425e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104262:	461a      	mov	r2, r3
 8104264:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8104268:	6013      	str	r3, [r2, #0]
 810426a:	e008      	b.n	810427e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 810426c:	693b      	ldr	r3, [r7, #16]
 810426e:	015a      	lsls	r2, r3, #5
 8104270:	68fb      	ldr	r3, [r7, #12]
 8104272:	4413      	add	r3, r2
 8104274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104278:	461a      	mov	r2, r3
 810427a:	2300      	movs	r3, #0
 810427c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 810427e:	693b      	ldr	r3, [r7, #16]
 8104280:	015a      	lsls	r2, r3, #5
 8104282:	68fb      	ldr	r3, [r7, #12]
 8104284:	4413      	add	r3, r2
 8104286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810428a:	461a      	mov	r2, r3
 810428c:	2300      	movs	r3, #0
 810428e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8104290:	693b      	ldr	r3, [r7, #16]
 8104292:	015a      	lsls	r2, r3, #5
 8104294:	68fb      	ldr	r3, [r7, #12]
 8104296:	4413      	add	r3, r2
 8104298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810429c:	461a      	mov	r2, r3
 810429e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 81042a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 81042a4:	693b      	ldr	r3, [r7, #16]
 81042a6:	3301      	adds	r3, #1
 81042a8:	613b      	str	r3, [r7, #16]
 81042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81042ac:	693a      	ldr	r2, [r7, #16]
 81042ae:	429a      	cmp	r2, r3
 81042b0:	d3b7      	bcc.n	8104222 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 81042b2:	2300      	movs	r3, #0
 81042b4:	613b      	str	r3, [r7, #16]
 81042b6:	e043      	b.n	8104340 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 81042b8:	693b      	ldr	r3, [r7, #16]
 81042ba:	015a      	lsls	r2, r3, #5
 81042bc:	68fb      	ldr	r3, [r7, #12]
 81042be:	4413      	add	r3, r2
 81042c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81042c4:	681b      	ldr	r3, [r3, #0]
 81042c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 81042ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 81042ce:	d118      	bne.n	8104302 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 81042d0:	693b      	ldr	r3, [r7, #16]
 81042d2:	2b00      	cmp	r3, #0
 81042d4:	d10a      	bne.n	81042ec <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 81042d6:	693b      	ldr	r3, [r7, #16]
 81042d8:	015a      	lsls	r2, r3, #5
 81042da:	68fb      	ldr	r3, [r7, #12]
 81042dc:	4413      	add	r3, r2
 81042de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81042e2:	461a      	mov	r2, r3
 81042e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 81042e8:	6013      	str	r3, [r2, #0]
 81042ea:	e013      	b.n	8104314 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 81042ec:	693b      	ldr	r3, [r7, #16]
 81042ee:	015a      	lsls	r2, r3, #5
 81042f0:	68fb      	ldr	r3, [r7, #12]
 81042f2:	4413      	add	r3, r2
 81042f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81042f8:	461a      	mov	r2, r3
 81042fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 81042fe:	6013      	str	r3, [r2, #0]
 8104300:	e008      	b.n	8104314 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8104302:	693b      	ldr	r3, [r7, #16]
 8104304:	015a      	lsls	r2, r3, #5
 8104306:	68fb      	ldr	r3, [r7, #12]
 8104308:	4413      	add	r3, r2
 810430a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810430e:	461a      	mov	r2, r3
 8104310:	2300      	movs	r3, #0
 8104312:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8104314:	693b      	ldr	r3, [r7, #16]
 8104316:	015a      	lsls	r2, r3, #5
 8104318:	68fb      	ldr	r3, [r7, #12]
 810431a:	4413      	add	r3, r2
 810431c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104320:	461a      	mov	r2, r3
 8104322:	2300      	movs	r3, #0
 8104324:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8104326:	693b      	ldr	r3, [r7, #16]
 8104328:	015a      	lsls	r2, r3, #5
 810432a:	68fb      	ldr	r3, [r7, #12]
 810432c:	4413      	add	r3, r2
 810432e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104332:	461a      	mov	r2, r3
 8104334:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8104338:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 810433a:	693b      	ldr	r3, [r7, #16]
 810433c:	3301      	adds	r3, #1
 810433e:	613b      	str	r3, [r7, #16]
 8104340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104342:	693a      	ldr	r2, [r7, #16]
 8104344:	429a      	cmp	r2, r3
 8104346:	d3b7      	bcc.n	81042b8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8104348:	68fb      	ldr	r3, [r7, #12]
 810434a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810434e:	691b      	ldr	r3, [r3, #16]
 8104350:	68fa      	ldr	r2, [r7, #12]
 8104352:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8104356:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810435a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 810435c:	687b      	ldr	r3, [r7, #4]
 810435e:	2200      	movs	r2, #0
 8104360:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8104362:	687b      	ldr	r3, [r7, #4]
 8104364:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8104368:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 810436a:	687b      	ldr	r3, [r7, #4]
 810436c:	699b      	ldr	r3, [r3, #24]
 810436e:	f043 0210 	orr.w	r2, r3, #16
 8104372:	687b      	ldr	r3, [r7, #4]
 8104374:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8104376:	687b      	ldr	r3, [r7, #4]
 8104378:	699a      	ldr	r2, [r3, #24]
 810437a:	4b10      	ldr	r3, [pc, #64]	; (81043bc <USB_DevInit+0x294>)
 810437c:	4313      	orrs	r3, r2
 810437e:	687a      	ldr	r2, [r7, #4]
 8104380:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8104382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8104384:	2b00      	cmp	r3, #0
 8104386:	d005      	beq.n	8104394 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8104388:	687b      	ldr	r3, [r7, #4]
 810438a:	699b      	ldr	r3, [r3, #24]
 810438c:	f043 0208 	orr.w	r2, r3, #8
 8104390:	687b      	ldr	r3, [r7, #4]
 8104392:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8104394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8104396:	2b01      	cmp	r3, #1
 8104398:	d107      	bne.n	81043aa <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 810439a:	687b      	ldr	r3, [r7, #4]
 810439c:	699b      	ldr	r3, [r3, #24]
 810439e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 81043a2:	f043 0304 	orr.w	r3, r3, #4
 81043a6:	687a      	ldr	r2, [r7, #4]
 81043a8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 81043aa:	7dfb      	ldrb	r3, [r7, #23]
}
 81043ac:	4618      	mov	r0, r3
 81043ae:	3718      	adds	r7, #24
 81043b0:	46bd      	mov	sp, r7
 81043b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 81043b6:	b004      	add	sp, #16
 81043b8:	4770      	bx	lr
 81043ba:	bf00      	nop
 81043bc:	803c3800 	.word	0x803c3800

081043c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 81043c0:	b480      	push	{r7}
 81043c2:	b085      	sub	sp, #20
 81043c4:	af00      	add	r7, sp, #0
 81043c6:	6078      	str	r0, [r7, #4]
 81043c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 81043ca:	2300      	movs	r3, #0
 81043cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 81043ce:	68fb      	ldr	r3, [r7, #12]
 81043d0:	3301      	adds	r3, #1
 81043d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 81043d4:	68fb      	ldr	r3, [r7, #12]
 81043d6:	4a13      	ldr	r2, [pc, #76]	; (8104424 <USB_FlushTxFifo+0x64>)
 81043d8:	4293      	cmp	r3, r2
 81043da:	d901      	bls.n	81043e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 81043dc:	2303      	movs	r3, #3
 81043de:	e01b      	b.n	8104418 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 81043e0:	687b      	ldr	r3, [r7, #4]
 81043e2:	691b      	ldr	r3, [r3, #16]
 81043e4:	2b00      	cmp	r3, #0
 81043e6:	daf2      	bge.n	81043ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 81043e8:	2300      	movs	r3, #0
 81043ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 81043ec:	683b      	ldr	r3, [r7, #0]
 81043ee:	019b      	lsls	r3, r3, #6
 81043f0:	f043 0220 	orr.w	r2, r3, #32
 81043f4:	687b      	ldr	r3, [r7, #4]
 81043f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 81043f8:	68fb      	ldr	r3, [r7, #12]
 81043fa:	3301      	adds	r3, #1
 81043fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 81043fe:	68fb      	ldr	r3, [r7, #12]
 8104400:	4a08      	ldr	r2, [pc, #32]	; (8104424 <USB_FlushTxFifo+0x64>)
 8104402:	4293      	cmp	r3, r2
 8104404:	d901      	bls.n	810440a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8104406:	2303      	movs	r3, #3
 8104408:	e006      	b.n	8104418 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 810440a:	687b      	ldr	r3, [r7, #4]
 810440c:	691b      	ldr	r3, [r3, #16]
 810440e:	f003 0320 	and.w	r3, r3, #32
 8104412:	2b20      	cmp	r3, #32
 8104414:	d0f0      	beq.n	81043f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8104416:	2300      	movs	r3, #0
}
 8104418:	4618      	mov	r0, r3
 810441a:	3714      	adds	r7, #20
 810441c:	46bd      	mov	sp, r7
 810441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104422:	4770      	bx	lr
 8104424:	00030d40 	.word	0x00030d40

08104428 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8104428:	b480      	push	{r7}
 810442a:	b085      	sub	sp, #20
 810442c:	af00      	add	r7, sp, #0
 810442e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8104430:	2300      	movs	r3, #0
 8104432:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8104434:	68fb      	ldr	r3, [r7, #12]
 8104436:	3301      	adds	r3, #1
 8104438:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 810443a:	68fb      	ldr	r3, [r7, #12]
 810443c:	4a11      	ldr	r2, [pc, #68]	; (8104484 <USB_FlushRxFifo+0x5c>)
 810443e:	4293      	cmp	r3, r2
 8104440:	d901      	bls.n	8104446 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8104442:	2303      	movs	r3, #3
 8104444:	e018      	b.n	8104478 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8104446:	687b      	ldr	r3, [r7, #4]
 8104448:	691b      	ldr	r3, [r3, #16]
 810444a:	2b00      	cmp	r3, #0
 810444c:	daf2      	bge.n	8104434 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 810444e:	2300      	movs	r3, #0
 8104450:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8104452:	687b      	ldr	r3, [r7, #4]
 8104454:	2210      	movs	r2, #16
 8104456:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8104458:	68fb      	ldr	r3, [r7, #12]
 810445a:	3301      	adds	r3, #1
 810445c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 810445e:	68fb      	ldr	r3, [r7, #12]
 8104460:	4a08      	ldr	r2, [pc, #32]	; (8104484 <USB_FlushRxFifo+0x5c>)
 8104462:	4293      	cmp	r3, r2
 8104464:	d901      	bls.n	810446a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8104466:	2303      	movs	r3, #3
 8104468:	e006      	b.n	8104478 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 810446a:	687b      	ldr	r3, [r7, #4]
 810446c:	691b      	ldr	r3, [r3, #16]
 810446e:	f003 0310 	and.w	r3, r3, #16
 8104472:	2b10      	cmp	r3, #16
 8104474:	d0f0      	beq.n	8104458 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8104476:	2300      	movs	r3, #0
}
 8104478:	4618      	mov	r0, r3
 810447a:	3714      	adds	r7, #20
 810447c:	46bd      	mov	sp, r7
 810447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104482:	4770      	bx	lr
 8104484:	00030d40 	.word	0x00030d40

08104488 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8104488:	b480      	push	{r7}
 810448a:	b085      	sub	sp, #20
 810448c:	af00      	add	r7, sp, #0
 810448e:	6078      	str	r0, [r7, #4]
 8104490:	460b      	mov	r3, r1
 8104492:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8104494:	687b      	ldr	r3, [r7, #4]
 8104496:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8104498:	68fb      	ldr	r3, [r7, #12]
 810449a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810449e:	681a      	ldr	r2, [r3, #0]
 81044a0:	78fb      	ldrb	r3, [r7, #3]
 81044a2:	68f9      	ldr	r1, [r7, #12]
 81044a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 81044a8:	4313      	orrs	r3, r2
 81044aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 81044ac:	2300      	movs	r3, #0
}
 81044ae:	4618      	mov	r0, r3
 81044b0:	3714      	adds	r7, #20
 81044b2:	46bd      	mov	sp, r7
 81044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044b8:	4770      	bx	lr

081044ba <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 81044ba:	b480      	push	{r7}
 81044bc:	b087      	sub	sp, #28
 81044be:	af00      	add	r7, sp, #0
 81044c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81044c2:	687b      	ldr	r3, [r7, #4]
 81044c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 81044c6:	693b      	ldr	r3, [r7, #16]
 81044c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81044cc:	689b      	ldr	r3, [r3, #8]
 81044ce:	f003 0306 	and.w	r3, r3, #6
 81044d2:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 81044d4:	68fb      	ldr	r3, [r7, #12]
 81044d6:	2b02      	cmp	r3, #2
 81044d8:	d002      	beq.n	81044e0 <USB_GetDevSpeed+0x26>
 81044da:	68fb      	ldr	r3, [r7, #12]
 81044dc:	2b06      	cmp	r3, #6
 81044de:	d102      	bne.n	81044e6 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 81044e0:	2302      	movs	r3, #2
 81044e2:	75fb      	strb	r3, [r7, #23]
 81044e4:	e001      	b.n	81044ea <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 81044e6:	230f      	movs	r3, #15
 81044e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 81044ea:	7dfb      	ldrb	r3, [r7, #23]
}
 81044ec:	4618      	mov	r0, r3
 81044ee:	371c      	adds	r7, #28
 81044f0:	46bd      	mov	sp, r7
 81044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044f6:	4770      	bx	lr

081044f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 81044f8:	b480      	push	{r7}
 81044fa:	b085      	sub	sp, #20
 81044fc:	af00      	add	r7, sp, #0
 81044fe:	6078      	str	r0, [r7, #4]
 8104500:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8104502:	687b      	ldr	r3, [r7, #4]
 8104504:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8104506:	683b      	ldr	r3, [r7, #0]
 8104508:	781b      	ldrb	r3, [r3, #0]
 810450a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 810450c:	683b      	ldr	r3, [r7, #0]
 810450e:	785b      	ldrb	r3, [r3, #1]
 8104510:	2b01      	cmp	r3, #1
 8104512:	d13a      	bne.n	810458a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8104514:	68fb      	ldr	r3, [r7, #12]
 8104516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810451a:	69da      	ldr	r2, [r3, #28]
 810451c:	683b      	ldr	r3, [r7, #0]
 810451e:	781b      	ldrb	r3, [r3, #0]
 8104520:	f003 030f 	and.w	r3, r3, #15
 8104524:	2101      	movs	r1, #1
 8104526:	fa01 f303 	lsl.w	r3, r1, r3
 810452a:	b29b      	uxth	r3, r3
 810452c:	68f9      	ldr	r1, [r7, #12]
 810452e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8104532:	4313      	orrs	r3, r2
 8104534:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8104536:	68bb      	ldr	r3, [r7, #8]
 8104538:	015a      	lsls	r2, r3, #5
 810453a:	68fb      	ldr	r3, [r7, #12]
 810453c:	4413      	add	r3, r2
 810453e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104542:	681b      	ldr	r3, [r3, #0]
 8104544:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8104548:	2b00      	cmp	r3, #0
 810454a:	d155      	bne.n	81045f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 810454c:	68bb      	ldr	r3, [r7, #8]
 810454e:	015a      	lsls	r2, r3, #5
 8104550:	68fb      	ldr	r3, [r7, #12]
 8104552:	4413      	add	r3, r2
 8104554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104558:	681a      	ldr	r2, [r3, #0]
 810455a:	683b      	ldr	r3, [r7, #0]
 810455c:	68db      	ldr	r3, [r3, #12]
 810455e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8104562:	683b      	ldr	r3, [r7, #0]
 8104564:	791b      	ldrb	r3, [r3, #4]
 8104566:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8104568:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 810456a:	68bb      	ldr	r3, [r7, #8]
 810456c:	059b      	lsls	r3, r3, #22
 810456e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8104570:	4313      	orrs	r3, r2
 8104572:	68ba      	ldr	r2, [r7, #8]
 8104574:	0151      	lsls	r1, r2, #5
 8104576:	68fa      	ldr	r2, [r7, #12]
 8104578:	440a      	add	r2, r1
 810457a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 810457e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8104582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8104586:	6013      	str	r3, [r2, #0]
 8104588:	e036      	b.n	81045f8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 810458a:	68fb      	ldr	r3, [r7, #12]
 810458c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8104590:	69da      	ldr	r2, [r3, #28]
 8104592:	683b      	ldr	r3, [r7, #0]
 8104594:	781b      	ldrb	r3, [r3, #0]
 8104596:	f003 030f 	and.w	r3, r3, #15
 810459a:	2101      	movs	r1, #1
 810459c:	fa01 f303 	lsl.w	r3, r1, r3
 81045a0:	041b      	lsls	r3, r3, #16
 81045a2:	68f9      	ldr	r1, [r7, #12]
 81045a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 81045a8:	4313      	orrs	r3, r2
 81045aa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 81045ac:	68bb      	ldr	r3, [r7, #8]
 81045ae:	015a      	lsls	r2, r3, #5
 81045b0:	68fb      	ldr	r3, [r7, #12]
 81045b2:	4413      	add	r3, r2
 81045b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81045b8:	681b      	ldr	r3, [r3, #0]
 81045ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81045be:	2b00      	cmp	r3, #0
 81045c0:	d11a      	bne.n	81045f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 81045c2:	68bb      	ldr	r3, [r7, #8]
 81045c4:	015a      	lsls	r2, r3, #5
 81045c6:	68fb      	ldr	r3, [r7, #12]
 81045c8:	4413      	add	r3, r2
 81045ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81045ce:	681a      	ldr	r2, [r3, #0]
 81045d0:	683b      	ldr	r3, [r7, #0]
 81045d2:	68db      	ldr	r3, [r3, #12]
 81045d4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 81045d8:	683b      	ldr	r3, [r7, #0]
 81045da:	791b      	ldrb	r3, [r3, #4]
 81045dc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 81045de:	430b      	orrs	r3, r1
 81045e0:	4313      	orrs	r3, r2
 81045e2:	68ba      	ldr	r2, [r7, #8]
 81045e4:	0151      	lsls	r1, r2, #5
 81045e6:	68fa      	ldr	r2, [r7, #12]
 81045e8:	440a      	add	r2, r1
 81045ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 81045ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81045f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81045f6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 81045f8:	2300      	movs	r3, #0
}
 81045fa:	4618      	mov	r0, r3
 81045fc:	3714      	adds	r7, #20
 81045fe:	46bd      	mov	sp, r7
 8104600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104604:	4770      	bx	lr
	...

08104608 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8104608:	b480      	push	{r7}
 810460a:	b085      	sub	sp, #20
 810460c:	af00      	add	r7, sp, #0
 810460e:	6078      	str	r0, [r7, #4]
 8104610:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8104612:	687b      	ldr	r3, [r7, #4]
 8104614:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8104616:	683b      	ldr	r3, [r7, #0]
 8104618:	781b      	ldrb	r3, [r3, #0]
 810461a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 810461c:	683b      	ldr	r3, [r7, #0]
 810461e:	785b      	ldrb	r3, [r3, #1]
 8104620:	2b01      	cmp	r3, #1
 8104622:	d161      	bne.n	81046e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8104624:	68bb      	ldr	r3, [r7, #8]
 8104626:	015a      	lsls	r2, r3, #5
 8104628:	68fb      	ldr	r3, [r7, #12]
 810462a:	4413      	add	r3, r2
 810462c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104630:	681b      	ldr	r3, [r3, #0]
 8104632:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8104636:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 810463a:	d11f      	bne.n	810467c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 810463c:	68bb      	ldr	r3, [r7, #8]
 810463e:	015a      	lsls	r2, r3, #5
 8104640:	68fb      	ldr	r3, [r7, #12]
 8104642:	4413      	add	r3, r2
 8104644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104648:	681b      	ldr	r3, [r3, #0]
 810464a:	68ba      	ldr	r2, [r7, #8]
 810464c:	0151      	lsls	r1, r2, #5
 810464e:	68fa      	ldr	r2, [r7, #12]
 8104650:	440a      	add	r2, r1
 8104652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104656:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 810465a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 810465c:	68bb      	ldr	r3, [r7, #8]
 810465e:	015a      	lsls	r2, r3, #5
 8104660:	68fb      	ldr	r3, [r7, #12]
 8104662:	4413      	add	r3, r2
 8104664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104668:	681b      	ldr	r3, [r3, #0]
 810466a:	68ba      	ldr	r2, [r7, #8]
 810466c:	0151      	lsls	r1, r2, #5
 810466e:	68fa      	ldr	r2, [r7, #12]
 8104670:	440a      	add	r2, r1
 8104672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104676:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 810467a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 810467c:	68fb      	ldr	r3, [r7, #12]
 810467e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8104682:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8104684:	683b      	ldr	r3, [r7, #0]
 8104686:	781b      	ldrb	r3, [r3, #0]
 8104688:	f003 030f 	and.w	r3, r3, #15
 810468c:	2101      	movs	r1, #1
 810468e:	fa01 f303 	lsl.w	r3, r1, r3
 8104692:	b29b      	uxth	r3, r3
 8104694:	43db      	mvns	r3, r3
 8104696:	68f9      	ldr	r1, [r7, #12]
 8104698:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 810469c:	4013      	ands	r3, r2
 810469e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 81046a0:	68fb      	ldr	r3, [r7, #12]
 81046a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81046a6:	69da      	ldr	r2, [r3, #28]
 81046a8:	683b      	ldr	r3, [r7, #0]
 81046aa:	781b      	ldrb	r3, [r3, #0]
 81046ac:	f003 030f 	and.w	r3, r3, #15
 81046b0:	2101      	movs	r1, #1
 81046b2:	fa01 f303 	lsl.w	r3, r1, r3
 81046b6:	b29b      	uxth	r3, r3
 81046b8:	43db      	mvns	r3, r3
 81046ba:	68f9      	ldr	r1, [r7, #12]
 81046bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 81046c0:	4013      	ands	r3, r2
 81046c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 81046c4:	68bb      	ldr	r3, [r7, #8]
 81046c6:	015a      	lsls	r2, r3, #5
 81046c8:	68fb      	ldr	r3, [r7, #12]
 81046ca:	4413      	add	r3, r2
 81046cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81046d0:	681a      	ldr	r2, [r3, #0]
 81046d2:	68bb      	ldr	r3, [r7, #8]
 81046d4:	0159      	lsls	r1, r3, #5
 81046d6:	68fb      	ldr	r3, [r7, #12]
 81046d8:	440b      	add	r3, r1
 81046da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81046de:	4619      	mov	r1, r3
 81046e0:	4b35      	ldr	r3, [pc, #212]	; (81047b8 <USB_DeactivateEndpoint+0x1b0>)
 81046e2:	4013      	ands	r3, r2
 81046e4:	600b      	str	r3, [r1, #0]
 81046e6:	e060      	b.n	81047aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 81046e8:	68bb      	ldr	r3, [r7, #8]
 81046ea:	015a      	lsls	r2, r3, #5
 81046ec:	68fb      	ldr	r3, [r7, #12]
 81046ee:	4413      	add	r3, r2
 81046f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81046f4:	681b      	ldr	r3, [r3, #0]
 81046f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 81046fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 81046fe:	d11f      	bne.n	8104740 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8104700:	68bb      	ldr	r3, [r7, #8]
 8104702:	015a      	lsls	r2, r3, #5
 8104704:	68fb      	ldr	r3, [r7, #12]
 8104706:	4413      	add	r3, r2
 8104708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810470c:	681b      	ldr	r3, [r3, #0]
 810470e:	68ba      	ldr	r2, [r7, #8]
 8104710:	0151      	lsls	r1, r2, #5
 8104712:	68fa      	ldr	r2, [r7, #12]
 8104714:	440a      	add	r2, r1
 8104716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 810471a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 810471e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8104720:	68bb      	ldr	r3, [r7, #8]
 8104722:	015a      	lsls	r2, r3, #5
 8104724:	68fb      	ldr	r3, [r7, #12]
 8104726:	4413      	add	r3, r2
 8104728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810472c:	681b      	ldr	r3, [r3, #0]
 810472e:	68ba      	ldr	r2, [r7, #8]
 8104730:	0151      	lsls	r1, r2, #5
 8104732:	68fa      	ldr	r2, [r7, #12]
 8104734:	440a      	add	r2, r1
 8104736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 810473a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 810473e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8104740:	68fb      	ldr	r3, [r7, #12]
 8104742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8104746:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8104748:	683b      	ldr	r3, [r7, #0]
 810474a:	781b      	ldrb	r3, [r3, #0]
 810474c:	f003 030f 	and.w	r3, r3, #15
 8104750:	2101      	movs	r1, #1
 8104752:	fa01 f303 	lsl.w	r3, r1, r3
 8104756:	041b      	lsls	r3, r3, #16
 8104758:	43db      	mvns	r3, r3
 810475a:	68f9      	ldr	r1, [r7, #12]
 810475c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8104760:	4013      	ands	r3, r2
 8104762:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8104764:	68fb      	ldr	r3, [r7, #12]
 8104766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810476a:	69da      	ldr	r2, [r3, #28]
 810476c:	683b      	ldr	r3, [r7, #0]
 810476e:	781b      	ldrb	r3, [r3, #0]
 8104770:	f003 030f 	and.w	r3, r3, #15
 8104774:	2101      	movs	r1, #1
 8104776:	fa01 f303 	lsl.w	r3, r1, r3
 810477a:	041b      	lsls	r3, r3, #16
 810477c:	43db      	mvns	r3, r3
 810477e:	68f9      	ldr	r1, [r7, #12]
 8104780:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8104784:	4013      	ands	r3, r2
 8104786:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8104788:	68bb      	ldr	r3, [r7, #8]
 810478a:	015a      	lsls	r2, r3, #5
 810478c:	68fb      	ldr	r3, [r7, #12]
 810478e:	4413      	add	r3, r2
 8104790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104794:	681a      	ldr	r2, [r3, #0]
 8104796:	68bb      	ldr	r3, [r7, #8]
 8104798:	0159      	lsls	r1, r3, #5
 810479a:	68fb      	ldr	r3, [r7, #12]
 810479c:	440b      	add	r3, r1
 810479e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81047a2:	4619      	mov	r1, r3
 81047a4:	4b05      	ldr	r3, [pc, #20]	; (81047bc <USB_DeactivateEndpoint+0x1b4>)
 81047a6:	4013      	ands	r3, r2
 81047a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 81047aa:	2300      	movs	r3, #0
}
 81047ac:	4618      	mov	r0, r3
 81047ae:	3714      	adds	r7, #20
 81047b0:	46bd      	mov	sp, r7
 81047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047b6:	4770      	bx	lr
 81047b8:	ec337800 	.word	0xec337800
 81047bc:	eff37800 	.word	0xeff37800

081047c0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 81047c0:	b580      	push	{r7, lr}
 81047c2:	b086      	sub	sp, #24
 81047c4:	af00      	add	r7, sp, #0
 81047c6:	6078      	str	r0, [r7, #4]
 81047c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81047ca:	687b      	ldr	r3, [r7, #4]
 81047cc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 81047ce:	683b      	ldr	r3, [r7, #0]
 81047d0:	781b      	ldrb	r3, [r3, #0]
 81047d2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 81047d4:	683b      	ldr	r3, [r7, #0]
 81047d6:	785b      	ldrb	r3, [r3, #1]
 81047d8:	2b01      	cmp	r3, #1
 81047da:	f040 810a 	bne.w	81049f2 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 81047de:	683b      	ldr	r3, [r7, #0]
 81047e0:	699b      	ldr	r3, [r3, #24]
 81047e2:	2b00      	cmp	r3, #0
 81047e4:	d132      	bne.n	810484c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 81047e6:	693b      	ldr	r3, [r7, #16]
 81047e8:	015a      	lsls	r2, r3, #5
 81047ea:	697b      	ldr	r3, [r7, #20]
 81047ec:	4413      	add	r3, r2
 81047ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81047f2:	691b      	ldr	r3, [r3, #16]
 81047f4:	693a      	ldr	r2, [r7, #16]
 81047f6:	0151      	lsls	r1, r2, #5
 81047f8:	697a      	ldr	r2, [r7, #20]
 81047fa:	440a      	add	r2, r1
 81047fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104800:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8104804:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8104808:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 810480a:	693b      	ldr	r3, [r7, #16]
 810480c:	015a      	lsls	r2, r3, #5
 810480e:	697b      	ldr	r3, [r7, #20]
 8104810:	4413      	add	r3, r2
 8104812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104816:	691b      	ldr	r3, [r3, #16]
 8104818:	693a      	ldr	r2, [r7, #16]
 810481a:	0151      	lsls	r1, r2, #5
 810481c:	697a      	ldr	r2, [r7, #20]
 810481e:	440a      	add	r2, r1
 8104820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104824:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8104828:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 810482a:	693b      	ldr	r3, [r7, #16]
 810482c:	015a      	lsls	r2, r3, #5
 810482e:	697b      	ldr	r3, [r7, #20]
 8104830:	4413      	add	r3, r2
 8104832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104836:	691b      	ldr	r3, [r3, #16]
 8104838:	693a      	ldr	r2, [r7, #16]
 810483a:	0151      	lsls	r1, r2, #5
 810483c:	697a      	ldr	r2, [r7, #20]
 810483e:	440a      	add	r2, r1
 8104840:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104844:	0cdb      	lsrs	r3, r3, #19
 8104846:	04db      	lsls	r3, r3, #19
 8104848:	6113      	str	r3, [r2, #16]
 810484a:	e074      	b.n	8104936 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 810484c:	693b      	ldr	r3, [r7, #16]
 810484e:	015a      	lsls	r2, r3, #5
 8104850:	697b      	ldr	r3, [r7, #20]
 8104852:	4413      	add	r3, r2
 8104854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104858:	691b      	ldr	r3, [r3, #16]
 810485a:	693a      	ldr	r2, [r7, #16]
 810485c:	0151      	lsls	r1, r2, #5
 810485e:	697a      	ldr	r2, [r7, #20]
 8104860:	440a      	add	r2, r1
 8104862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104866:	0cdb      	lsrs	r3, r3, #19
 8104868:	04db      	lsls	r3, r3, #19
 810486a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 810486c:	693b      	ldr	r3, [r7, #16]
 810486e:	015a      	lsls	r2, r3, #5
 8104870:	697b      	ldr	r3, [r7, #20]
 8104872:	4413      	add	r3, r2
 8104874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104878:	691b      	ldr	r3, [r3, #16]
 810487a:	693a      	ldr	r2, [r7, #16]
 810487c:	0151      	lsls	r1, r2, #5
 810487e:	697a      	ldr	r2, [r7, #20]
 8104880:	440a      	add	r2, r1
 8104882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104886:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 810488a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 810488e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8104890:	693b      	ldr	r3, [r7, #16]
 8104892:	015a      	lsls	r2, r3, #5
 8104894:	697b      	ldr	r3, [r7, #20]
 8104896:	4413      	add	r3, r2
 8104898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810489c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 810489e:	683b      	ldr	r3, [r7, #0]
 81048a0:	6999      	ldr	r1, [r3, #24]
 81048a2:	683b      	ldr	r3, [r7, #0]
 81048a4:	68db      	ldr	r3, [r3, #12]
 81048a6:	440b      	add	r3, r1
 81048a8:	1e59      	subs	r1, r3, #1
 81048aa:	683b      	ldr	r3, [r7, #0]
 81048ac:	68db      	ldr	r3, [r3, #12]
 81048ae:	fbb1 f3f3 	udiv	r3, r1, r3
 81048b2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 81048b4:	4b9e      	ldr	r3, [pc, #632]	; (8104b30 <USB_EPStartXfer+0x370>)
 81048b6:	400b      	ands	r3, r1
 81048b8:	6939      	ldr	r1, [r7, #16]
 81048ba:	0148      	lsls	r0, r1, #5
 81048bc:	6979      	ldr	r1, [r7, #20]
 81048be:	4401      	add	r1, r0
 81048c0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 81048c4:	4313      	orrs	r3, r2
 81048c6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 81048c8:	693b      	ldr	r3, [r7, #16]
 81048ca:	015a      	lsls	r2, r3, #5
 81048cc:	697b      	ldr	r3, [r7, #20]
 81048ce:	4413      	add	r3, r2
 81048d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81048d4:	691a      	ldr	r2, [r3, #16]
 81048d6:	683b      	ldr	r3, [r7, #0]
 81048d8:	699b      	ldr	r3, [r3, #24]
 81048da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 81048de:	6939      	ldr	r1, [r7, #16]
 81048e0:	0148      	lsls	r0, r1, #5
 81048e2:	6979      	ldr	r1, [r7, #20]
 81048e4:	4401      	add	r1, r0
 81048e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 81048ea:	4313      	orrs	r3, r2
 81048ec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 81048ee:	683b      	ldr	r3, [r7, #0]
 81048f0:	791b      	ldrb	r3, [r3, #4]
 81048f2:	2b01      	cmp	r3, #1
 81048f4:	d11f      	bne.n	8104936 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 81048f6:	693b      	ldr	r3, [r7, #16]
 81048f8:	015a      	lsls	r2, r3, #5
 81048fa:	697b      	ldr	r3, [r7, #20]
 81048fc:	4413      	add	r3, r2
 81048fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104902:	691b      	ldr	r3, [r3, #16]
 8104904:	693a      	ldr	r2, [r7, #16]
 8104906:	0151      	lsls	r1, r2, #5
 8104908:	697a      	ldr	r2, [r7, #20]
 810490a:	440a      	add	r2, r1
 810490c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104910:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8104914:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8104916:	693b      	ldr	r3, [r7, #16]
 8104918:	015a      	lsls	r2, r3, #5
 810491a:	697b      	ldr	r3, [r7, #20]
 810491c:	4413      	add	r3, r2
 810491e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104922:	691b      	ldr	r3, [r3, #16]
 8104924:	693a      	ldr	r2, [r7, #16]
 8104926:	0151      	lsls	r1, r2, #5
 8104928:	697a      	ldr	r2, [r7, #20]
 810492a:	440a      	add	r2, r1
 810492c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104930:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8104934:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8104936:	693b      	ldr	r3, [r7, #16]
 8104938:	015a      	lsls	r2, r3, #5
 810493a:	697b      	ldr	r3, [r7, #20]
 810493c:	4413      	add	r3, r2
 810493e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104942:	681b      	ldr	r3, [r3, #0]
 8104944:	693a      	ldr	r2, [r7, #16]
 8104946:	0151      	lsls	r1, r2, #5
 8104948:	697a      	ldr	r2, [r7, #20]
 810494a:	440a      	add	r2, r1
 810494c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104950:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8104954:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8104956:	683b      	ldr	r3, [r7, #0]
 8104958:	791b      	ldrb	r3, [r3, #4]
 810495a:	2b01      	cmp	r3, #1
 810495c:	d015      	beq.n	810498a <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 810495e:	683b      	ldr	r3, [r7, #0]
 8104960:	699b      	ldr	r3, [r3, #24]
 8104962:	2b00      	cmp	r3, #0
 8104964:	f000 8106 	beq.w	8104b74 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8104968:	697b      	ldr	r3, [r7, #20]
 810496a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810496e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8104970:	683b      	ldr	r3, [r7, #0]
 8104972:	781b      	ldrb	r3, [r3, #0]
 8104974:	f003 030f 	and.w	r3, r3, #15
 8104978:	2101      	movs	r1, #1
 810497a:	fa01 f303 	lsl.w	r3, r1, r3
 810497e:	6979      	ldr	r1, [r7, #20]
 8104980:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8104984:	4313      	orrs	r3, r2
 8104986:	634b      	str	r3, [r1, #52]	; 0x34
 8104988:	e0f4      	b.n	8104b74 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 810498a:	697b      	ldr	r3, [r7, #20]
 810498c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8104990:	689b      	ldr	r3, [r3, #8]
 8104992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104996:	2b00      	cmp	r3, #0
 8104998:	d110      	bne.n	81049bc <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 810499a:	693b      	ldr	r3, [r7, #16]
 810499c:	015a      	lsls	r2, r3, #5
 810499e:	697b      	ldr	r3, [r7, #20]
 81049a0:	4413      	add	r3, r2
 81049a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81049a6:	681b      	ldr	r3, [r3, #0]
 81049a8:	693a      	ldr	r2, [r7, #16]
 81049aa:	0151      	lsls	r1, r2, #5
 81049ac:	697a      	ldr	r2, [r7, #20]
 81049ae:	440a      	add	r2, r1
 81049b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 81049b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 81049b8:	6013      	str	r3, [r2, #0]
 81049ba:	e00f      	b.n	81049dc <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 81049bc:	693b      	ldr	r3, [r7, #16]
 81049be:	015a      	lsls	r2, r3, #5
 81049c0:	697b      	ldr	r3, [r7, #20]
 81049c2:	4413      	add	r3, r2
 81049c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81049c8:	681b      	ldr	r3, [r3, #0]
 81049ca:	693a      	ldr	r2, [r7, #16]
 81049cc:	0151      	lsls	r1, r2, #5
 81049ce:	697a      	ldr	r2, [r7, #20]
 81049d0:	440a      	add	r2, r1
 81049d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 81049d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81049da:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 81049dc:	683b      	ldr	r3, [r7, #0]
 81049de:	6919      	ldr	r1, [r3, #16]
 81049e0:	683b      	ldr	r3, [r7, #0]
 81049e2:	781a      	ldrb	r2, [r3, #0]
 81049e4:	683b      	ldr	r3, [r7, #0]
 81049e6:	699b      	ldr	r3, [r3, #24]
 81049e8:	b29b      	uxth	r3, r3
 81049ea:	6878      	ldr	r0, [r7, #4]
 81049ec:	f000 fa94 	bl	8104f18 <USB_WritePacket>
 81049f0:	e0c0      	b.n	8104b74 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 81049f2:	693b      	ldr	r3, [r7, #16]
 81049f4:	015a      	lsls	r2, r3, #5
 81049f6:	697b      	ldr	r3, [r7, #20]
 81049f8:	4413      	add	r3, r2
 81049fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81049fe:	691b      	ldr	r3, [r3, #16]
 8104a00:	693a      	ldr	r2, [r7, #16]
 8104a02:	0151      	lsls	r1, r2, #5
 8104a04:	697a      	ldr	r2, [r7, #20]
 8104a06:	440a      	add	r2, r1
 8104a08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8104a0c:	0cdb      	lsrs	r3, r3, #19
 8104a0e:	04db      	lsls	r3, r3, #19
 8104a10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8104a12:	693b      	ldr	r3, [r7, #16]
 8104a14:	015a      	lsls	r2, r3, #5
 8104a16:	697b      	ldr	r3, [r7, #20]
 8104a18:	4413      	add	r3, r2
 8104a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104a1e:	691b      	ldr	r3, [r3, #16]
 8104a20:	693a      	ldr	r2, [r7, #16]
 8104a22:	0151      	lsls	r1, r2, #5
 8104a24:	697a      	ldr	r2, [r7, #20]
 8104a26:	440a      	add	r2, r1
 8104a28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8104a2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8104a30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8104a34:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8104a36:	683b      	ldr	r3, [r7, #0]
 8104a38:	699b      	ldr	r3, [r3, #24]
 8104a3a:	2b00      	cmp	r3, #0
 8104a3c:	d123      	bne.n	8104a86 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8104a3e:	693b      	ldr	r3, [r7, #16]
 8104a40:	015a      	lsls	r2, r3, #5
 8104a42:	697b      	ldr	r3, [r7, #20]
 8104a44:	4413      	add	r3, r2
 8104a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104a4a:	691a      	ldr	r2, [r3, #16]
 8104a4c:	683b      	ldr	r3, [r7, #0]
 8104a4e:	68db      	ldr	r3, [r3, #12]
 8104a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8104a54:	6939      	ldr	r1, [r7, #16]
 8104a56:	0148      	lsls	r0, r1, #5
 8104a58:	6979      	ldr	r1, [r7, #20]
 8104a5a:	4401      	add	r1, r0
 8104a5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8104a60:	4313      	orrs	r3, r2
 8104a62:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8104a64:	693b      	ldr	r3, [r7, #16]
 8104a66:	015a      	lsls	r2, r3, #5
 8104a68:	697b      	ldr	r3, [r7, #20]
 8104a6a:	4413      	add	r3, r2
 8104a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104a70:	691b      	ldr	r3, [r3, #16]
 8104a72:	693a      	ldr	r2, [r7, #16]
 8104a74:	0151      	lsls	r1, r2, #5
 8104a76:	697a      	ldr	r2, [r7, #20]
 8104a78:	440a      	add	r2, r1
 8104a7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8104a7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8104a82:	6113      	str	r3, [r2, #16]
 8104a84:	e037      	b.n	8104af6 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8104a86:	683b      	ldr	r3, [r7, #0]
 8104a88:	699a      	ldr	r2, [r3, #24]
 8104a8a:	683b      	ldr	r3, [r7, #0]
 8104a8c:	68db      	ldr	r3, [r3, #12]
 8104a8e:	4413      	add	r3, r2
 8104a90:	1e5a      	subs	r2, r3, #1
 8104a92:	683b      	ldr	r3, [r7, #0]
 8104a94:	68db      	ldr	r3, [r3, #12]
 8104a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8104a9a:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8104a9c:	683b      	ldr	r3, [r7, #0]
 8104a9e:	68db      	ldr	r3, [r3, #12]
 8104aa0:	89fa      	ldrh	r2, [r7, #14]
 8104aa2:	fb03 f202 	mul.w	r2, r3, r2
 8104aa6:	683b      	ldr	r3, [r7, #0]
 8104aa8:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8104aaa:	693b      	ldr	r3, [r7, #16]
 8104aac:	015a      	lsls	r2, r3, #5
 8104aae:	697b      	ldr	r3, [r7, #20]
 8104ab0:	4413      	add	r3, r2
 8104ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104ab6:	691a      	ldr	r2, [r3, #16]
 8104ab8:	89fb      	ldrh	r3, [r7, #14]
 8104aba:	04d9      	lsls	r1, r3, #19
 8104abc:	4b1c      	ldr	r3, [pc, #112]	; (8104b30 <USB_EPStartXfer+0x370>)
 8104abe:	400b      	ands	r3, r1
 8104ac0:	6939      	ldr	r1, [r7, #16]
 8104ac2:	0148      	lsls	r0, r1, #5
 8104ac4:	6979      	ldr	r1, [r7, #20]
 8104ac6:	4401      	add	r1, r0
 8104ac8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8104acc:	4313      	orrs	r3, r2
 8104ace:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8104ad0:	693b      	ldr	r3, [r7, #16]
 8104ad2:	015a      	lsls	r2, r3, #5
 8104ad4:	697b      	ldr	r3, [r7, #20]
 8104ad6:	4413      	add	r3, r2
 8104ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104adc:	691a      	ldr	r2, [r3, #16]
 8104ade:	683b      	ldr	r3, [r7, #0]
 8104ae0:	69db      	ldr	r3, [r3, #28]
 8104ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8104ae6:	6939      	ldr	r1, [r7, #16]
 8104ae8:	0148      	lsls	r0, r1, #5
 8104aea:	6979      	ldr	r1, [r7, #20]
 8104aec:	4401      	add	r1, r0
 8104aee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8104af2:	4313      	orrs	r3, r2
 8104af4:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8104af6:	683b      	ldr	r3, [r7, #0]
 8104af8:	791b      	ldrb	r3, [r3, #4]
 8104afa:	2b01      	cmp	r3, #1
 8104afc:	d12a      	bne.n	8104b54 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8104afe:	697b      	ldr	r3, [r7, #20]
 8104b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8104b04:	689b      	ldr	r3, [r3, #8]
 8104b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104b0a:	2b00      	cmp	r3, #0
 8104b0c:	d112      	bne.n	8104b34 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8104b0e:	693b      	ldr	r3, [r7, #16]
 8104b10:	015a      	lsls	r2, r3, #5
 8104b12:	697b      	ldr	r3, [r7, #20]
 8104b14:	4413      	add	r3, r2
 8104b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104b1a:	681b      	ldr	r3, [r3, #0]
 8104b1c:	693a      	ldr	r2, [r7, #16]
 8104b1e:	0151      	lsls	r1, r2, #5
 8104b20:	697a      	ldr	r2, [r7, #20]
 8104b22:	440a      	add	r2, r1
 8104b24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8104b28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8104b2c:	6013      	str	r3, [r2, #0]
 8104b2e:	e011      	b.n	8104b54 <USB_EPStartXfer+0x394>
 8104b30:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8104b34:	693b      	ldr	r3, [r7, #16]
 8104b36:	015a      	lsls	r2, r3, #5
 8104b38:	697b      	ldr	r3, [r7, #20]
 8104b3a:	4413      	add	r3, r2
 8104b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104b40:	681b      	ldr	r3, [r3, #0]
 8104b42:	693a      	ldr	r2, [r7, #16]
 8104b44:	0151      	lsls	r1, r2, #5
 8104b46:	697a      	ldr	r2, [r7, #20]
 8104b48:	440a      	add	r2, r1
 8104b4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8104b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8104b52:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8104b54:	693b      	ldr	r3, [r7, #16]
 8104b56:	015a      	lsls	r2, r3, #5
 8104b58:	697b      	ldr	r3, [r7, #20]
 8104b5a:	4413      	add	r3, r2
 8104b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104b60:	681b      	ldr	r3, [r3, #0]
 8104b62:	693a      	ldr	r2, [r7, #16]
 8104b64:	0151      	lsls	r1, r2, #5
 8104b66:	697a      	ldr	r2, [r7, #20]
 8104b68:	440a      	add	r2, r1
 8104b6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8104b6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8104b72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8104b74:	2300      	movs	r3, #0
}
 8104b76:	4618      	mov	r0, r3
 8104b78:	3718      	adds	r7, #24
 8104b7a:	46bd      	mov	sp, r7
 8104b7c:	bd80      	pop	{r7, pc}
 8104b7e:	bf00      	nop

08104b80 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8104b80:	b480      	push	{r7}
 8104b82:	b085      	sub	sp, #20
 8104b84:	af00      	add	r7, sp, #0
 8104b86:	6078      	str	r0, [r7, #4]
 8104b88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8104b8a:	687b      	ldr	r3, [r7, #4]
 8104b8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8104b8e:	683b      	ldr	r3, [r7, #0]
 8104b90:	781b      	ldrb	r3, [r3, #0]
 8104b92:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8104b94:	683b      	ldr	r3, [r7, #0]
 8104b96:	785b      	ldrb	r3, [r3, #1]
 8104b98:	2b01      	cmp	r3, #1
 8104b9a:	f040 80ab 	bne.w	8104cf4 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8104b9e:	683b      	ldr	r3, [r7, #0]
 8104ba0:	699b      	ldr	r3, [r3, #24]
 8104ba2:	2b00      	cmp	r3, #0
 8104ba4:	d132      	bne.n	8104c0c <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8104ba6:	68bb      	ldr	r3, [r7, #8]
 8104ba8:	015a      	lsls	r2, r3, #5
 8104baa:	68fb      	ldr	r3, [r7, #12]
 8104bac:	4413      	add	r3, r2
 8104bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104bb2:	691b      	ldr	r3, [r3, #16]
 8104bb4:	68ba      	ldr	r2, [r7, #8]
 8104bb6:	0151      	lsls	r1, r2, #5
 8104bb8:	68fa      	ldr	r2, [r7, #12]
 8104bba:	440a      	add	r2, r1
 8104bbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104bc0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8104bc4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8104bc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8104bca:	68bb      	ldr	r3, [r7, #8]
 8104bcc:	015a      	lsls	r2, r3, #5
 8104bce:	68fb      	ldr	r3, [r7, #12]
 8104bd0:	4413      	add	r3, r2
 8104bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104bd6:	691b      	ldr	r3, [r3, #16]
 8104bd8:	68ba      	ldr	r2, [r7, #8]
 8104bda:	0151      	lsls	r1, r2, #5
 8104bdc:	68fa      	ldr	r2, [r7, #12]
 8104bde:	440a      	add	r2, r1
 8104be0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104be4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8104be8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8104bea:	68bb      	ldr	r3, [r7, #8]
 8104bec:	015a      	lsls	r2, r3, #5
 8104bee:	68fb      	ldr	r3, [r7, #12]
 8104bf0:	4413      	add	r3, r2
 8104bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104bf6:	691b      	ldr	r3, [r3, #16]
 8104bf8:	68ba      	ldr	r2, [r7, #8]
 8104bfa:	0151      	lsls	r1, r2, #5
 8104bfc:	68fa      	ldr	r2, [r7, #12]
 8104bfe:	440a      	add	r2, r1
 8104c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104c04:	0cdb      	lsrs	r3, r3, #19
 8104c06:	04db      	lsls	r3, r3, #19
 8104c08:	6113      	str	r3, [r2, #16]
 8104c0a:	e04e      	b.n	8104caa <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8104c0c:	68bb      	ldr	r3, [r7, #8]
 8104c0e:	015a      	lsls	r2, r3, #5
 8104c10:	68fb      	ldr	r3, [r7, #12]
 8104c12:	4413      	add	r3, r2
 8104c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104c18:	691b      	ldr	r3, [r3, #16]
 8104c1a:	68ba      	ldr	r2, [r7, #8]
 8104c1c:	0151      	lsls	r1, r2, #5
 8104c1e:	68fa      	ldr	r2, [r7, #12]
 8104c20:	440a      	add	r2, r1
 8104c22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104c26:	0cdb      	lsrs	r3, r3, #19
 8104c28:	04db      	lsls	r3, r3, #19
 8104c2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8104c2c:	68bb      	ldr	r3, [r7, #8]
 8104c2e:	015a      	lsls	r2, r3, #5
 8104c30:	68fb      	ldr	r3, [r7, #12]
 8104c32:	4413      	add	r3, r2
 8104c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104c38:	691b      	ldr	r3, [r3, #16]
 8104c3a:	68ba      	ldr	r2, [r7, #8]
 8104c3c:	0151      	lsls	r1, r2, #5
 8104c3e:	68fa      	ldr	r2, [r7, #12]
 8104c40:	440a      	add	r2, r1
 8104c42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104c46:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8104c4a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8104c4e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8104c50:	683b      	ldr	r3, [r7, #0]
 8104c52:	699a      	ldr	r2, [r3, #24]
 8104c54:	683b      	ldr	r3, [r7, #0]
 8104c56:	68db      	ldr	r3, [r3, #12]
 8104c58:	429a      	cmp	r2, r3
 8104c5a:	d903      	bls.n	8104c64 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8104c5c:	683b      	ldr	r3, [r7, #0]
 8104c5e:	68da      	ldr	r2, [r3, #12]
 8104c60:	683b      	ldr	r3, [r7, #0]
 8104c62:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8104c64:	68bb      	ldr	r3, [r7, #8]
 8104c66:	015a      	lsls	r2, r3, #5
 8104c68:	68fb      	ldr	r3, [r7, #12]
 8104c6a:	4413      	add	r3, r2
 8104c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104c70:	691b      	ldr	r3, [r3, #16]
 8104c72:	68ba      	ldr	r2, [r7, #8]
 8104c74:	0151      	lsls	r1, r2, #5
 8104c76:	68fa      	ldr	r2, [r7, #12]
 8104c78:	440a      	add	r2, r1
 8104c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104c7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8104c82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8104c84:	68bb      	ldr	r3, [r7, #8]
 8104c86:	015a      	lsls	r2, r3, #5
 8104c88:	68fb      	ldr	r3, [r7, #12]
 8104c8a:	4413      	add	r3, r2
 8104c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104c90:	691a      	ldr	r2, [r3, #16]
 8104c92:	683b      	ldr	r3, [r7, #0]
 8104c94:	699b      	ldr	r3, [r3, #24]
 8104c96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8104c9a:	68b9      	ldr	r1, [r7, #8]
 8104c9c:	0148      	lsls	r0, r1, #5
 8104c9e:	68f9      	ldr	r1, [r7, #12]
 8104ca0:	4401      	add	r1, r0
 8104ca2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8104ca6:	4313      	orrs	r3, r2
 8104ca8:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8104caa:	68bb      	ldr	r3, [r7, #8]
 8104cac:	015a      	lsls	r2, r3, #5
 8104cae:	68fb      	ldr	r3, [r7, #12]
 8104cb0:	4413      	add	r3, r2
 8104cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104cb6:	681b      	ldr	r3, [r3, #0]
 8104cb8:	68ba      	ldr	r2, [r7, #8]
 8104cba:	0151      	lsls	r1, r2, #5
 8104cbc:	68fa      	ldr	r2, [r7, #12]
 8104cbe:	440a      	add	r2, r1
 8104cc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104cc4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8104cc8:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8104cca:	683b      	ldr	r3, [r7, #0]
 8104ccc:	699b      	ldr	r3, [r3, #24]
 8104cce:	2b00      	cmp	r3, #0
 8104cd0:	d071      	beq.n	8104db6 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8104cd2:	68fb      	ldr	r3, [r7, #12]
 8104cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8104cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8104cda:	683b      	ldr	r3, [r7, #0]
 8104cdc:	781b      	ldrb	r3, [r3, #0]
 8104cde:	f003 030f 	and.w	r3, r3, #15
 8104ce2:	2101      	movs	r1, #1
 8104ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8104ce8:	68f9      	ldr	r1, [r7, #12]
 8104cea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8104cee:	4313      	orrs	r3, r2
 8104cf0:	634b      	str	r3, [r1, #52]	; 0x34
 8104cf2:	e060      	b.n	8104db6 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8104cf4:	68bb      	ldr	r3, [r7, #8]
 8104cf6:	015a      	lsls	r2, r3, #5
 8104cf8:	68fb      	ldr	r3, [r7, #12]
 8104cfa:	4413      	add	r3, r2
 8104cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104d00:	691b      	ldr	r3, [r3, #16]
 8104d02:	68ba      	ldr	r2, [r7, #8]
 8104d04:	0151      	lsls	r1, r2, #5
 8104d06:	68fa      	ldr	r2, [r7, #12]
 8104d08:	440a      	add	r2, r1
 8104d0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8104d0e:	0cdb      	lsrs	r3, r3, #19
 8104d10:	04db      	lsls	r3, r3, #19
 8104d12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8104d14:	68bb      	ldr	r3, [r7, #8]
 8104d16:	015a      	lsls	r2, r3, #5
 8104d18:	68fb      	ldr	r3, [r7, #12]
 8104d1a:	4413      	add	r3, r2
 8104d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104d20:	691b      	ldr	r3, [r3, #16]
 8104d22:	68ba      	ldr	r2, [r7, #8]
 8104d24:	0151      	lsls	r1, r2, #5
 8104d26:	68fa      	ldr	r2, [r7, #12]
 8104d28:	440a      	add	r2, r1
 8104d2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8104d2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8104d32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8104d36:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8104d38:	683b      	ldr	r3, [r7, #0]
 8104d3a:	699b      	ldr	r3, [r3, #24]
 8104d3c:	2b00      	cmp	r3, #0
 8104d3e:	d003      	beq.n	8104d48 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8104d40:	683b      	ldr	r3, [r7, #0]
 8104d42:	68da      	ldr	r2, [r3, #12]
 8104d44:	683b      	ldr	r3, [r7, #0]
 8104d46:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8104d48:	683b      	ldr	r3, [r7, #0]
 8104d4a:	68da      	ldr	r2, [r3, #12]
 8104d4c:	683b      	ldr	r3, [r7, #0]
 8104d4e:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8104d50:	68bb      	ldr	r3, [r7, #8]
 8104d52:	015a      	lsls	r2, r3, #5
 8104d54:	68fb      	ldr	r3, [r7, #12]
 8104d56:	4413      	add	r3, r2
 8104d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104d5c:	691b      	ldr	r3, [r3, #16]
 8104d5e:	68ba      	ldr	r2, [r7, #8]
 8104d60:	0151      	lsls	r1, r2, #5
 8104d62:	68fa      	ldr	r2, [r7, #12]
 8104d64:	440a      	add	r2, r1
 8104d66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8104d6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8104d6e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8104d70:	68bb      	ldr	r3, [r7, #8]
 8104d72:	015a      	lsls	r2, r3, #5
 8104d74:	68fb      	ldr	r3, [r7, #12]
 8104d76:	4413      	add	r3, r2
 8104d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104d7c:	691a      	ldr	r2, [r3, #16]
 8104d7e:	683b      	ldr	r3, [r7, #0]
 8104d80:	69db      	ldr	r3, [r3, #28]
 8104d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8104d86:	68b9      	ldr	r1, [r7, #8]
 8104d88:	0148      	lsls	r0, r1, #5
 8104d8a:	68f9      	ldr	r1, [r7, #12]
 8104d8c:	4401      	add	r1, r0
 8104d8e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8104d92:	4313      	orrs	r3, r2
 8104d94:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8104d96:	68bb      	ldr	r3, [r7, #8]
 8104d98:	015a      	lsls	r2, r3, #5
 8104d9a:	68fb      	ldr	r3, [r7, #12]
 8104d9c:	4413      	add	r3, r2
 8104d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104da2:	681b      	ldr	r3, [r3, #0]
 8104da4:	68ba      	ldr	r2, [r7, #8]
 8104da6:	0151      	lsls	r1, r2, #5
 8104da8:	68fa      	ldr	r2, [r7, #12]
 8104daa:	440a      	add	r2, r1
 8104dac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8104db0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8104db4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8104db6:	2300      	movs	r3, #0
}
 8104db8:	4618      	mov	r0, r3
 8104dba:	3714      	adds	r7, #20
 8104dbc:	46bd      	mov	sp, r7
 8104dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104dc2:	4770      	bx	lr

08104dc4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8104dc4:	b480      	push	{r7}
 8104dc6:	b087      	sub	sp, #28
 8104dc8:	af00      	add	r7, sp, #0
 8104dca:	6078      	str	r0, [r7, #4]
 8104dcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8104dce:	2300      	movs	r3, #0
 8104dd0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8104dd2:	2300      	movs	r3, #0
 8104dd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8104dd6:	687b      	ldr	r3, [r7, #4]
 8104dd8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8104dda:	683b      	ldr	r3, [r7, #0]
 8104ddc:	785b      	ldrb	r3, [r3, #1]
 8104dde:	2b01      	cmp	r3, #1
 8104de0:	d14a      	bne.n	8104e78 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8104de2:	683b      	ldr	r3, [r7, #0]
 8104de4:	781b      	ldrb	r3, [r3, #0]
 8104de6:	015a      	lsls	r2, r3, #5
 8104de8:	693b      	ldr	r3, [r7, #16]
 8104dea:	4413      	add	r3, r2
 8104dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104df0:	681b      	ldr	r3, [r3, #0]
 8104df2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8104df6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8104dfa:	f040 8086 	bne.w	8104f0a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8104dfe:	683b      	ldr	r3, [r7, #0]
 8104e00:	781b      	ldrb	r3, [r3, #0]
 8104e02:	015a      	lsls	r2, r3, #5
 8104e04:	693b      	ldr	r3, [r7, #16]
 8104e06:	4413      	add	r3, r2
 8104e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104e0c:	681b      	ldr	r3, [r3, #0]
 8104e0e:	683a      	ldr	r2, [r7, #0]
 8104e10:	7812      	ldrb	r2, [r2, #0]
 8104e12:	0151      	lsls	r1, r2, #5
 8104e14:	693a      	ldr	r2, [r7, #16]
 8104e16:	440a      	add	r2, r1
 8104e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104e1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8104e20:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8104e22:	683b      	ldr	r3, [r7, #0]
 8104e24:	781b      	ldrb	r3, [r3, #0]
 8104e26:	015a      	lsls	r2, r3, #5
 8104e28:	693b      	ldr	r3, [r7, #16]
 8104e2a:	4413      	add	r3, r2
 8104e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104e30:	681b      	ldr	r3, [r3, #0]
 8104e32:	683a      	ldr	r2, [r7, #0]
 8104e34:	7812      	ldrb	r2, [r2, #0]
 8104e36:	0151      	lsls	r1, r2, #5
 8104e38:	693a      	ldr	r2, [r7, #16]
 8104e3a:	440a      	add	r2, r1
 8104e3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104e40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8104e44:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8104e46:	68fb      	ldr	r3, [r7, #12]
 8104e48:	3301      	adds	r3, #1
 8104e4a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8104e4c:	68fb      	ldr	r3, [r7, #12]
 8104e4e:	f242 7210 	movw	r2, #10000	; 0x2710
 8104e52:	4293      	cmp	r3, r2
 8104e54:	d902      	bls.n	8104e5c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8104e56:	2301      	movs	r3, #1
 8104e58:	75fb      	strb	r3, [r7, #23]
          break;
 8104e5a:	e056      	b.n	8104f0a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8104e5c:	683b      	ldr	r3, [r7, #0]
 8104e5e:	781b      	ldrb	r3, [r3, #0]
 8104e60:	015a      	lsls	r2, r3, #5
 8104e62:	693b      	ldr	r3, [r7, #16]
 8104e64:	4413      	add	r3, r2
 8104e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104e6a:	681b      	ldr	r3, [r3, #0]
 8104e6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8104e70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8104e74:	d0e7      	beq.n	8104e46 <USB_EPStopXfer+0x82>
 8104e76:	e048      	b.n	8104f0a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8104e78:	683b      	ldr	r3, [r7, #0]
 8104e7a:	781b      	ldrb	r3, [r3, #0]
 8104e7c:	015a      	lsls	r2, r3, #5
 8104e7e:	693b      	ldr	r3, [r7, #16]
 8104e80:	4413      	add	r3, r2
 8104e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104e86:	681b      	ldr	r3, [r3, #0]
 8104e88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8104e8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8104e90:	d13b      	bne.n	8104f0a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8104e92:	683b      	ldr	r3, [r7, #0]
 8104e94:	781b      	ldrb	r3, [r3, #0]
 8104e96:	015a      	lsls	r2, r3, #5
 8104e98:	693b      	ldr	r3, [r7, #16]
 8104e9a:	4413      	add	r3, r2
 8104e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104ea0:	681b      	ldr	r3, [r3, #0]
 8104ea2:	683a      	ldr	r2, [r7, #0]
 8104ea4:	7812      	ldrb	r2, [r2, #0]
 8104ea6:	0151      	lsls	r1, r2, #5
 8104ea8:	693a      	ldr	r2, [r7, #16]
 8104eaa:	440a      	add	r2, r1
 8104eac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8104eb0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8104eb4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8104eb6:	683b      	ldr	r3, [r7, #0]
 8104eb8:	781b      	ldrb	r3, [r3, #0]
 8104eba:	015a      	lsls	r2, r3, #5
 8104ebc:	693b      	ldr	r3, [r7, #16]
 8104ebe:	4413      	add	r3, r2
 8104ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104ec4:	681b      	ldr	r3, [r3, #0]
 8104ec6:	683a      	ldr	r2, [r7, #0]
 8104ec8:	7812      	ldrb	r2, [r2, #0]
 8104eca:	0151      	lsls	r1, r2, #5
 8104ecc:	693a      	ldr	r2, [r7, #16]
 8104ece:	440a      	add	r2, r1
 8104ed0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8104ed4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8104ed8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8104eda:	68fb      	ldr	r3, [r7, #12]
 8104edc:	3301      	adds	r3, #1
 8104ede:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8104ee0:	68fb      	ldr	r3, [r7, #12]
 8104ee2:	f242 7210 	movw	r2, #10000	; 0x2710
 8104ee6:	4293      	cmp	r3, r2
 8104ee8:	d902      	bls.n	8104ef0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8104eea:	2301      	movs	r3, #1
 8104eec:	75fb      	strb	r3, [r7, #23]
          break;
 8104eee:	e00c      	b.n	8104f0a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8104ef0:	683b      	ldr	r3, [r7, #0]
 8104ef2:	781b      	ldrb	r3, [r3, #0]
 8104ef4:	015a      	lsls	r2, r3, #5
 8104ef6:	693b      	ldr	r3, [r7, #16]
 8104ef8:	4413      	add	r3, r2
 8104efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104efe:	681b      	ldr	r3, [r3, #0]
 8104f00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8104f04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8104f08:	d0e7      	beq.n	8104eda <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8104f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8104f0c:	4618      	mov	r0, r3
 8104f0e:	371c      	adds	r7, #28
 8104f10:	46bd      	mov	sp, r7
 8104f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f16:	4770      	bx	lr

08104f18 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8104f18:	b480      	push	{r7}
 8104f1a:	b089      	sub	sp, #36	; 0x24
 8104f1c:	af00      	add	r7, sp, #0
 8104f1e:	60f8      	str	r0, [r7, #12]
 8104f20:	60b9      	str	r1, [r7, #8]
 8104f22:	4611      	mov	r1, r2
 8104f24:	461a      	mov	r2, r3
 8104f26:	460b      	mov	r3, r1
 8104f28:	71fb      	strb	r3, [r7, #7]
 8104f2a:	4613      	mov	r3, r2
 8104f2c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8104f2e:	68fb      	ldr	r3, [r7, #12]
 8104f30:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8104f32:	68bb      	ldr	r3, [r7, #8]
 8104f34:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8104f36:	88bb      	ldrh	r3, [r7, #4]
 8104f38:	3303      	adds	r3, #3
 8104f3a:	089b      	lsrs	r3, r3, #2
 8104f3c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8104f3e:	2300      	movs	r3, #0
 8104f40:	61bb      	str	r3, [r7, #24]
 8104f42:	e018      	b.n	8104f76 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8104f44:	79fb      	ldrb	r3, [r7, #7]
 8104f46:	031a      	lsls	r2, r3, #12
 8104f48:	697b      	ldr	r3, [r7, #20]
 8104f4a:	4413      	add	r3, r2
 8104f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8104f50:	461a      	mov	r2, r3
 8104f52:	69fb      	ldr	r3, [r7, #28]
 8104f54:	681b      	ldr	r3, [r3, #0]
 8104f56:	6013      	str	r3, [r2, #0]
    pSrc++;
 8104f58:	69fb      	ldr	r3, [r7, #28]
 8104f5a:	3301      	adds	r3, #1
 8104f5c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8104f5e:	69fb      	ldr	r3, [r7, #28]
 8104f60:	3301      	adds	r3, #1
 8104f62:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8104f64:	69fb      	ldr	r3, [r7, #28]
 8104f66:	3301      	adds	r3, #1
 8104f68:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8104f6a:	69fb      	ldr	r3, [r7, #28]
 8104f6c:	3301      	adds	r3, #1
 8104f6e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8104f70:	69bb      	ldr	r3, [r7, #24]
 8104f72:	3301      	adds	r3, #1
 8104f74:	61bb      	str	r3, [r7, #24]
 8104f76:	69ba      	ldr	r2, [r7, #24]
 8104f78:	693b      	ldr	r3, [r7, #16]
 8104f7a:	429a      	cmp	r2, r3
 8104f7c:	d3e2      	bcc.n	8104f44 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8104f7e:	2300      	movs	r3, #0
}
 8104f80:	4618      	mov	r0, r3
 8104f82:	3724      	adds	r7, #36	; 0x24
 8104f84:	46bd      	mov	sp, r7
 8104f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f8a:	4770      	bx	lr

08104f8c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8104f8c:	b480      	push	{r7}
 8104f8e:	b08b      	sub	sp, #44	; 0x2c
 8104f90:	af00      	add	r7, sp, #0
 8104f92:	60f8      	str	r0, [r7, #12]
 8104f94:	60b9      	str	r1, [r7, #8]
 8104f96:	4613      	mov	r3, r2
 8104f98:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8104f9a:	68fb      	ldr	r3, [r7, #12]
 8104f9c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8104f9e:	68bb      	ldr	r3, [r7, #8]
 8104fa0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8104fa2:	88fb      	ldrh	r3, [r7, #6]
 8104fa4:	089b      	lsrs	r3, r3, #2
 8104fa6:	b29b      	uxth	r3, r3
 8104fa8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8104faa:	88fb      	ldrh	r3, [r7, #6]
 8104fac:	f003 0303 	and.w	r3, r3, #3
 8104fb0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8104fb2:	2300      	movs	r3, #0
 8104fb4:	623b      	str	r3, [r7, #32]
 8104fb6:	e014      	b.n	8104fe2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8104fb8:	69bb      	ldr	r3, [r7, #24]
 8104fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8104fbe:	681a      	ldr	r2, [r3, #0]
 8104fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104fc2:	601a      	str	r2, [r3, #0]
    pDest++;
 8104fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104fc6:	3301      	adds	r3, #1
 8104fc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8104fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104fcc:	3301      	adds	r3, #1
 8104fce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8104fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104fd2:	3301      	adds	r3, #1
 8104fd4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8104fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104fd8:	3301      	adds	r3, #1
 8104fda:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8104fdc:	6a3b      	ldr	r3, [r7, #32]
 8104fde:	3301      	adds	r3, #1
 8104fe0:	623b      	str	r3, [r7, #32]
 8104fe2:	6a3a      	ldr	r2, [r7, #32]
 8104fe4:	697b      	ldr	r3, [r7, #20]
 8104fe6:	429a      	cmp	r2, r3
 8104fe8:	d3e6      	bcc.n	8104fb8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8104fea:	8bfb      	ldrh	r3, [r7, #30]
 8104fec:	2b00      	cmp	r3, #0
 8104fee:	d01e      	beq.n	810502e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8104ff0:	2300      	movs	r3, #0
 8104ff2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8104ff4:	69bb      	ldr	r3, [r7, #24]
 8104ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8104ffa:	461a      	mov	r2, r3
 8104ffc:	f107 0310 	add.w	r3, r7, #16
 8105000:	6812      	ldr	r2, [r2, #0]
 8105002:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8105004:	693a      	ldr	r2, [r7, #16]
 8105006:	6a3b      	ldr	r3, [r7, #32]
 8105008:	b2db      	uxtb	r3, r3
 810500a:	00db      	lsls	r3, r3, #3
 810500c:	fa22 f303 	lsr.w	r3, r2, r3
 8105010:	b2da      	uxtb	r2, r3
 8105012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105014:	701a      	strb	r2, [r3, #0]
      i++;
 8105016:	6a3b      	ldr	r3, [r7, #32]
 8105018:	3301      	adds	r3, #1
 810501a:	623b      	str	r3, [r7, #32]
      pDest++;
 810501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810501e:	3301      	adds	r3, #1
 8105020:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8105022:	8bfb      	ldrh	r3, [r7, #30]
 8105024:	3b01      	subs	r3, #1
 8105026:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8105028:	8bfb      	ldrh	r3, [r7, #30]
 810502a:	2b00      	cmp	r3, #0
 810502c:	d1ea      	bne.n	8105004 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 810502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8105030:	4618      	mov	r0, r3
 8105032:	372c      	adds	r7, #44	; 0x2c
 8105034:	46bd      	mov	sp, r7
 8105036:	f85d 7b04 	ldr.w	r7, [sp], #4
 810503a:	4770      	bx	lr

0810503c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 810503c:	b480      	push	{r7}
 810503e:	b085      	sub	sp, #20
 8105040:	af00      	add	r7, sp, #0
 8105042:	6078      	str	r0, [r7, #4]
 8105044:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8105046:	687b      	ldr	r3, [r7, #4]
 8105048:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 810504a:	683b      	ldr	r3, [r7, #0]
 810504c:	781b      	ldrb	r3, [r3, #0]
 810504e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8105050:	683b      	ldr	r3, [r7, #0]
 8105052:	785b      	ldrb	r3, [r3, #1]
 8105054:	2b01      	cmp	r3, #1
 8105056:	d12c      	bne.n	81050b2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8105058:	68bb      	ldr	r3, [r7, #8]
 810505a:	015a      	lsls	r2, r3, #5
 810505c:	68fb      	ldr	r3, [r7, #12]
 810505e:	4413      	add	r3, r2
 8105060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8105064:	681b      	ldr	r3, [r3, #0]
 8105066:	2b00      	cmp	r3, #0
 8105068:	db12      	blt.n	8105090 <USB_EPSetStall+0x54>
 810506a:	68bb      	ldr	r3, [r7, #8]
 810506c:	2b00      	cmp	r3, #0
 810506e:	d00f      	beq.n	8105090 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8105070:	68bb      	ldr	r3, [r7, #8]
 8105072:	015a      	lsls	r2, r3, #5
 8105074:	68fb      	ldr	r3, [r7, #12]
 8105076:	4413      	add	r3, r2
 8105078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810507c:	681b      	ldr	r3, [r3, #0]
 810507e:	68ba      	ldr	r2, [r7, #8]
 8105080:	0151      	lsls	r1, r2, #5
 8105082:	68fa      	ldr	r2, [r7, #12]
 8105084:	440a      	add	r2, r1
 8105086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 810508a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 810508e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8105090:	68bb      	ldr	r3, [r7, #8]
 8105092:	015a      	lsls	r2, r3, #5
 8105094:	68fb      	ldr	r3, [r7, #12]
 8105096:	4413      	add	r3, r2
 8105098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810509c:	681b      	ldr	r3, [r3, #0]
 810509e:	68ba      	ldr	r2, [r7, #8]
 81050a0:	0151      	lsls	r1, r2, #5
 81050a2:	68fa      	ldr	r2, [r7, #12]
 81050a4:	440a      	add	r2, r1
 81050a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 81050aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81050ae:	6013      	str	r3, [r2, #0]
 81050b0:	e02b      	b.n	810510a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 81050b2:	68bb      	ldr	r3, [r7, #8]
 81050b4:	015a      	lsls	r2, r3, #5
 81050b6:	68fb      	ldr	r3, [r7, #12]
 81050b8:	4413      	add	r3, r2
 81050ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81050be:	681b      	ldr	r3, [r3, #0]
 81050c0:	2b00      	cmp	r3, #0
 81050c2:	db12      	blt.n	81050ea <USB_EPSetStall+0xae>
 81050c4:	68bb      	ldr	r3, [r7, #8]
 81050c6:	2b00      	cmp	r3, #0
 81050c8:	d00f      	beq.n	81050ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 81050ca:	68bb      	ldr	r3, [r7, #8]
 81050cc:	015a      	lsls	r2, r3, #5
 81050ce:	68fb      	ldr	r3, [r7, #12]
 81050d0:	4413      	add	r3, r2
 81050d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81050d6:	681b      	ldr	r3, [r3, #0]
 81050d8:	68ba      	ldr	r2, [r7, #8]
 81050da:	0151      	lsls	r1, r2, #5
 81050dc:	68fa      	ldr	r2, [r7, #12]
 81050de:	440a      	add	r2, r1
 81050e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 81050e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 81050e8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 81050ea:	68bb      	ldr	r3, [r7, #8]
 81050ec:	015a      	lsls	r2, r3, #5
 81050ee:	68fb      	ldr	r3, [r7, #12]
 81050f0:	4413      	add	r3, r2
 81050f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81050f6:	681b      	ldr	r3, [r3, #0]
 81050f8:	68ba      	ldr	r2, [r7, #8]
 81050fa:	0151      	lsls	r1, r2, #5
 81050fc:	68fa      	ldr	r2, [r7, #12]
 81050fe:	440a      	add	r2, r1
 8105100:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8105104:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8105108:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 810510a:	2300      	movs	r3, #0
}
 810510c:	4618      	mov	r0, r3
 810510e:	3714      	adds	r7, #20
 8105110:	46bd      	mov	sp, r7
 8105112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105116:	4770      	bx	lr

08105118 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8105118:	b480      	push	{r7}
 810511a:	b085      	sub	sp, #20
 810511c:	af00      	add	r7, sp, #0
 810511e:	6078      	str	r0, [r7, #4]
 8105120:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8105122:	687b      	ldr	r3, [r7, #4]
 8105124:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8105126:	683b      	ldr	r3, [r7, #0]
 8105128:	781b      	ldrb	r3, [r3, #0]
 810512a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 810512c:	683b      	ldr	r3, [r7, #0]
 810512e:	785b      	ldrb	r3, [r3, #1]
 8105130:	2b01      	cmp	r3, #1
 8105132:	d128      	bne.n	8105186 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8105134:	68bb      	ldr	r3, [r7, #8]
 8105136:	015a      	lsls	r2, r3, #5
 8105138:	68fb      	ldr	r3, [r7, #12]
 810513a:	4413      	add	r3, r2
 810513c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8105140:	681b      	ldr	r3, [r3, #0]
 8105142:	68ba      	ldr	r2, [r7, #8]
 8105144:	0151      	lsls	r1, r2, #5
 8105146:	68fa      	ldr	r2, [r7, #12]
 8105148:	440a      	add	r2, r1
 810514a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 810514e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8105152:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8105154:	683b      	ldr	r3, [r7, #0]
 8105156:	791b      	ldrb	r3, [r3, #4]
 8105158:	2b03      	cmp	r3, #3
 810515a:	d003      	beq.n	8105164 <USB_EPClearStall+0x4c>
 810515c:	683b      	ldr	r3, [r7, #0]
 810515e:	791b      	ldrb	r3, [r3, #4]
 8105160:	2b02      	cmp	r3, #2
 8105162:	d138      	bne.n	81051d6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8105164:	68bb      	ldr	r3, [r7, #8]
 8105166:	015a      	lsls	r2, r3, #5
 8105168:	68fb      	ldr	r3, [r7, #12]
 810516a:	4413      	add	r3, r2
 810516c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8105170:	681b      	ldr	r3, [r3, #0]
 8105172:	68ba      	ldr	r2, [r7, #8]
 8105174:	0151      	lsls	r1, r2, #5
 8105176:	68fa      	ldr	r2, [r7, #12]
 8105178:	440a      	add	r2, r1
 810517a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 810517e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8105182:	6013      	str	r3, [r2, #0]
 8105184:	e027      	b.n	81051d6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8105186:	68bb      	ldr	r3, [r7, #8]
 8105188:	015a      	lsls	r2, r3, #5
 810518a:	68fb      	ldr	r3, [r7, #12]
 810518c:	4413      	add	r3, r2
 810518e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8105192:	681b      	ldr	r3, [r3, #0]
 8105194:	68ba      	ldr	r2, [r7, #8]
 8105196:	0151      	lsls	r1, r2, #5
 8105198:	68fa      	ldr	r2, [r7, #12]
 810519a:	440a      	add	r2, r1
 810519c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 81051a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 81051a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 81051a6:	683b      	ldr	r3, [r7, #0]
 81051a8:	791b      	ldrb	r3, [r3, #4]
 81051aa:	2b03      	cmp	r3, #3
 81051ac:	d003      	beq.n	81051b6 <USB_EPClearStall+0x9e>
 81051ae:	683b      	ldr	r3, [r7, #0]
 81051b0:	791b      	ldrb	r3, [r3, #4]
 81051b2:	2b02      	cmp	r3, #2
 81051b4:	d10f      	bne.n	81051d6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 81051b6:	68bb      	ldr	r3, [r7, #8]
 81051b8:	015a      	lsls	r2, r3, #5
 81051ba:	68fb      	ldr	r3, [r7, #12]
 81051bc:	4413      	add	r3, r2
 81051be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81051c2:	681b      	ldr	r3, [r3, #0]
 81051c4:	68ba      	ldr	r2, [r7, #8]
 81051c6:	0151      	lsls	r1, r2, #5
 81051c8:	68fa      	ldr	r2, [r7, #12]
 81051ca:	440a      	add	r2, r1
 81051cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 81051d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81051d4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 81051d6:	2300      	movs	r3, #0
}
 81051d8:	4618      	mov	r0, r3
 81051da:	3714      	adds	r7, #20
 81051dc:	46bd      	mov	sp, r7
 81051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051e2:	4770      	bx	lr

081051e4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 81051e4:	b480      	push	{r7}
 81051e6:	b085      	sub	sp, #20
 81051e8:	af00      	add	r7, sp, #0
 81051ea:	6078      	str	r0, [r7, #4]
 81051ec:	460b      	mov	r3, r1
 81051ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81051f0:	687b      	ldr	r3, [r7, #4]
 81051f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 81051f4:	68fb      	ldr	r3, [r7, #12]
 81051f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81051fa:	681b      	ldr	r3, [r3, #0]
 81051fc:	68fa      	ldr	r2, [r7, #12]
 81051fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8105202:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8105206:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8105208:	68fb      	ldr	r3, [r7, #12]
 810520a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810520e:	681a      	ldr	r2, [r3, #0]
 8105210:	78fb      	ldrb	r3, [r7, #3]
 8105212:	011b      	lsls	r3, r3, #4
 8105214:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8105218:	68f9      	ldr	r1, [r7, #12]
 810521a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 810521e:	4313      	orrs	r3, r2
 8105220:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8105222:	2300      	movs	r3, #0
}
 8105224:	4618      	mov	r0, r3
 8105226:	3714      	adds	r7, #20
 8105228:	46bd      	mov	sp, r7
 810522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810522e:	4770      	bx	lr

08105230 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8105230:	b480      	push	{r7}
 8105232:	b085      	sub	sp, #20
 8105234:	af00      	add	r7, sp, #0
 8105236:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8105238:	687b      	ldr	r3, [r7, #4]
 810523a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 810523c:	68fb      	ldr	r3, [r7, #12]
 810523e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8105242:	681b      	ldr	r3, [r3, #0]
 8105244:	68fa      	ldr	r2, [r7, #12]
 8105246:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 810524a:	f023 0303 	bic.w	r3, r3, #3
 810524e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8105250:	68fb      	ldr	r3, [r7, #12]
 8105252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8105256:	685b      	ldr	r3, [r3, #4]
 8105258:	68fa      	ldr	r2, [r7, #12]
 810525a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 810525e:	f023 0302 	bic.w	r3, r3, #2
 8105262:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8105264:	2300      	movs	r3, #0
}
 8105266:	4618      	mov	r0, r3
 8105268:	3714      	adds	r7, #20
 810526a:	46bd      	mov	sp, r7
 810526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105270:	4770      	bx	lr

08105272 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8105272:	b480      	push	{r7}
 8105274:	b085      	sub	sp, #20
 8105276:	af00      	add	r7, sp, #0
 8105278:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810527a:	687b      	ldr	r3, [r7, #4]
 810527c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 810527e:	68fb      	ldr	r3, [r7, #12]
 8105280:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8105284:	681b      	ldr	r3, [r3, #0]
 8105286:	68fa      	ldr	r2, [r7, #12]
 8105288:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 810528c:	f023 0303 	bic.w	r3, r3, #3
 8105290:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8105292:	68fb      	ldr	r3, [r7, #12]
 8105294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8105298:	685b      	ldr	r3, [r3, #4]
 810529a:	68fa      	ldr	r2, [r7, #12]
 810529c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 81052a0:	f043 0302 	orr.w	r3, r3, #2
 81052a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 81052a6:	2300      	movs	r3, #0
}
 81052a8:	4618      	mov	r0, r3
 81052aa:	3714      	adds	r7, #20
 81052ac:	46bd      	mov	sp, r7
 81052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81052b2:	4770      	bx	lr

081052b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 81052b4:	b480      	push	{r7}
 81052b6:	b085      	sub	sp, #20
 81052b8:	af00      	add	r7, sp, #0
 81052ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 81052bc:	687b      	ldr	r3, [r7, #4]
 81052be:	695b      	ldr	r3, [r3, #20]
 81052c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 81052c2:	687b      	ldr	r3, [r7, #4]
 81052c4:	699b      	ldr	r3, [r3, #24]
 81052c6:	68fa      	ldr	r2, [r7, #12]
 81052c8:	4013      	ands	r3, r2
 81052ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 81052cc:	68fb      	ldr	r3, [r7, #12]
}
 81052ce:	4618      	mov	r0, r3
 81052d0:	3714      	adds	r7, #20
 81052d2:	46bd      	mov	sp, r7
 81052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81052d8:	4770      	bx	lr

081052da <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 81052da:	b480      	push	{r7}
 81052dc:	b085      	sub	sp, #20
 81052de:	af00      	add	r7, sp, #0
 81052e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81052e2:	687b      	ldr	r3, [r7, #4]
 81052e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 81052e6:	68fb      	ldr	r3, [r7, #12]
 81052e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81052ec:	699b      	ldr	r3, [r3, #24]
 81052ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 81052f0:	68fb      	ldr	r3, [r7, #12]
 81052f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81052f6:	69db      	ldr	r3, [r3, #28]
 81052f8:	68ba      	ldr	r2, [r7, #8]
 81052fa:	4013      	ands	r3, r2
 81052fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 81052fe:	68bb      	ldr	r3, [r7, #8]
 8105300:	0c1b      	lsrs	r3, r3, #16
}
 8105302:	4618      	mov	r0, r3
 8105304:	3714      	adds	r7, #20
 8105306:	46bd      	mov	sp, r7
 8105308:	f85d 7b04 	ldr.w	r7, [sp], #4
 810530c:	4770      	bx	lr

0810530e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 810530e:	b480      	push	{r7}
 8105310:	b085      	sub	sp, #20
 8105312:	af00      	add	r7, sp, #0
 8105314:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8105316:	687b      	ldr	r3, [r7, #4]
 8105318:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 810531a:	68fb      	ldr	r3, [r7, #12]
 810531c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8105320:	699b      	ldr	r3, [r3, #24]
 8105322:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8105324:	68fb      	ldr	r3, [r7, #12]
 8105326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810532a:	69db      	ldr	r3, [r3, #28]
 810532c:	68ba      	ldr	r2, [r7, #8]
 810532e:	4013      	ands	r3, r2
 8105330:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8105332:	68bb      	ldr	r3, [r7, #8]
 8105334:	b29b      	uxth	r3, r3
}
 8105336:	4618      	mov	r0, r3
 8105338:	3714      	adds	r7, #20
 810533a:	46bd      	mov	sp, r7
 810533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105340:	4770      	bx	lr

08105342 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8105342:	b480      	push	{r7}
 8105344:	b085      	sub	sp, #20
 8105346:	af00      	add	r7, sp, #0
 8105348:	6078      	str	r0, [r7, #4]
 810534a:	460b      	mov	r3, r1
 810534c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810534e:	687b      	ldr	r3, [r7, #4]
 8105350:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8105352:	78fb      	ldrb	r3, [r7, #3]
 8105354:	015a      	lsls	r2, r3, #5
 8105356:	68fb      	ldr	r3, [r7, #12]
 8105358:	4413      	add	r3, r2
 810535a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810535e:	689b      	ldr	r3, [r3, #8]
 8105360:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8105362:	68fb      	ldr	r3, [r7, #12]
 8105364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8105368:	695b      	ldr	r3, [r3, #20]
 810536a:	68ba      	ldr	r2, [r7, #8]
 810536c:	4013      	ands	r3, r2
 810536e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8105370:	68bb      	ldr	r3, [r7, #8]
}
 8105372:	4618      	mov	r0, r3
 8105374:	3714      	adds	r7, #20
 8105376:	46bd      	mov	sp, r7
 8105378:	f85d 7b04 	ldr.w	r7, [sp], #4
 810537c:	4770      	bx	lr

0810537e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 810537e:	b480      	push	{r7}
 8105380:	b087      	sub	sp, #28
 8105382:	af00      	add	r7, sp, #0
 8105384:	6078      	str	r0, [r7, #4]
 8105386:	460b      	mov	r3, r1
 8105388:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810538a:	687b      	ldr	r3, [r7, #4]
 810538c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 810538e:	697b      	ldr	r3, [r7, #20]
 8105390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8105394:	691b      	ldr	r3, [r3, #16]
 8105396:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8105398:	697b      	ldr	r3, [r7, #20]
 810539a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810539e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81053a0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 81053a2:	78fb      	ldrb	r3, [r7, #3]
 81053a4:	f003 030f 	and.w	r3, r3, #15
 81053a8:	68fa      	ldr	r2, [r7, #12]
 81053aa:	fa22 f303 	lsr.w	r3, r2, r3
 81053ae:	01db      	lsls	r3, r3, #7
 81053b0:	b2db      	uxtb	r3, r3
 81053b2:	693a      	ldr	r2, [r7, #16]
 81053b4:	4313      	orrs	r3, r2
 81053b6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 81053b8:	78fb      	ldrb	r3, [r7, #3]
 81053ba:	015a      	lsls	r2, r3, #5
 81053bc:	697b      	ldr	r3, [r7, #20]
 81053be:	4413      	add	r3, r2
 81053c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81053c4:	689b      	ldr	r3, [r3, #8]
 81053c6:	693a      	ldr	r2, [r7, #16]
 81053c8:	4013      	ands	r3, r2
 81053ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 81053cc:	68bb      	ldr	r3, [r7, #8]
}
 81053ce:	4618      	mov	r0, r3
 81053d0:	371c      	adds	r7, #28
 81053d2:	46bd      	mov	sp, r7
 81053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053d8:	4770      	bx	lr

081053da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 81053da:	b480      	push	{r7}
 81053dc:	b083      	sub	sp, #12
 81053de:	af00      	add	r7, sp, #0
 81053e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 81053e2:	687b      	ldr	r3, [r7, #4]
 81053e4:	695b      	ldr	r3, [r3, #20]
 81053e6:	f003 0301 	and.w	r3, r3, #1
}
 81053ea:	4618      	mov	r0, r3
 81053ec:	370c      	adds	r7, #12
 81053ee:	46bd      	mov	sp, r7
 81053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053f4:	4770      	bx	lr

081053f6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 81053f6:	b480      	push	{r7}
 81053f8:	b085      	sub	sp, #20
 81053fa:	af00      	add	r7, sp, #0
 81053fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81053fe:	687b      	ldr	r3, [r7, #4]
 8105400:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8105402:	68fb      	ldr	r3, [r7, #12]
 8105404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8105408:	681b      	ldr	r3, [r3, #0]
 810540a:	68fa      	ldr	r2, [r7, #12]
 810540c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8105410:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8105414:	f023 0307 	bic.w	r3, r3, #7
 8105418:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 810541a:	68fb      	ldr	r3, [r7, #12]
 810541c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8105420:	685b      	ldr	r3, [r3, #4]
 8105422:	68fa      	ldr	r2, [r7, #12]
 8105424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8105428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810542c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 810542e:	2300      	movs	r3, #0
}
 8105430:	4618      	mov	r0, r3
 8105432:	3714      	adds	r7, #20
 8105434:	46bd      	mov	sp, r7
 8105436:	f85d 7b04 	ldr.w	r7, [sp], #4
 810543a:	4770      	bx	lr

0810543c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 810543c:	b480      	push	{r7}
 810543e:	b085      	sub	sp, #20
 8105440:	af00      	add	r7, sp, #0
 8105442:	6078      	str	r0, [r7, #4]
 8105444:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8105446:	687b      	ldr	r3, [r7, #4]
 8105448:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 810544a:	687b      	ldr	r3, [r7, #4]
 810544c:	333c      	adds	r3, #60	; 0x3c
 810544e:	3304      	adds	r3, #4
 8105450:	681b      	ldr	r3, [r3, #0]
 8105452:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8105454:	68bb      	ldr	r3, [r7, #8]
 8105456:	4a1c      	ldr	r2, [pc, #112]	; (81054c8 <USB_EP0_OutStart+0x8c>)
 8105458:	4293      	cmp	r3, r2
 810545a:	d90a      	bls.n	8105472 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 810545c:	68fb      	ldr	r3, [r7, #12]
 810545e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8105462:	681b      	ldr	r3, [r3, #0]
 8105464:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8105468:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 810546c:	d101      	bne.n	8105472 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 810546e:	2300      	movs	r3, #0
 8105470:	e024      	b.n	81054bc <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8105472:	68fb      	ldr	r3, [r7, #12]
 8105474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8105478:	461a      	mov	r2, r3
 810547a:	2300      	movs	r3, #0
 810547c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 810547e:	68fb      	ldr	r3, [r7, #12]
 8105480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8105484:	691b      	ldr	r3, [r3, #16]
 8105486:	68fa      	ldr	r2, [r7, #12]
 8105488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 810548c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8105490:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8105492:	68fb      	ldr	r3, [r7, #12]
 8105494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8105498:	691b      	ldr	r3, [r3, #16]
 810549a:	68fa      	ldr	r2, [r7, #12]
 810549c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 81054a0:	f043 0318 	orr.w	r3, r3, #24
 81054a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 81054a6:	68fb      	ldr	r3, [r7, #12]
 81054a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81054ac:	691b      	ldr	r3, [r3, #16]
 81054ae:	68fa      	ldr	r2, [r7, #12]
 81054b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 81054b4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 81054b8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 81054ba:	2300      	movs	r3, #0
}
 81054bc:	4618      	mov	r0, r3
 81054be:	3714      	adds	r7, #20
 81054c0:	46bd      	mov	sp, r7
 81054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054c6:	4770      	bx	lr
 81054c8:	4f54300a 	.word	0x4f54300a

081054cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 81054cc:	b480      	push	{r7}
 81054ce:	b085      	sub	sp, #20
 81054d0:	af00      	add	r7, sp, #0
 81054d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 81054d4:	2300      	movs	r3, #0
 81054d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 81054d8:	68fb      	ldr	r3, [r7, #12]
 81054da:	3301      	adds	r3, #1
 81054dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 81054de:	68fb      	ldr	r3, [r7, #12]
 81054e0:	4a13      	ldr	r2, [pc, #76]	; (8105530 <USB_CoreReset+0x64>)
 81054e2:	4293      	cmp	r3, r2
 81054e4:	d901      	bls.n	81054ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 81054e6:	2303      	movs	r3, #3
 81054e8:	e01b      	b.n	8105522 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 81054ea:	687b      	ldr	r3, [r7, #4]
 81054ec:	691b      	ldr	r3, [r3, #16]
 81054ee:	2b00      	cmp	r3, #0
 81054f0:	daf2      	bge.n	81054d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 81054f2:	2300      	movs	r3, #0
 81054f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 81054f6:	687b      	ldr	r3, [r7, #4]
 81054f8:	691b      	ldr	r3, [r3, #16]
 81054fa:	f043 0201 	orr.w	r2, r3, #1
 81054fe:	687b      	ldr	r3, [r7, #4]
 8105500:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8105502:	68fb      	ldr	r3, [r7, #12]
 8105504:	3301      	adds	r3, #1
 8105506:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8105508:	68fb      	ldr	r3, [r7, #12]
 810550a:	4a09      	ldr	r2, [pc, #36]	; (8105530 <USB_CoreReset+0x64>)
 810550c:	4293      	cmp	r3, r2
 810550e:	d901      	bls.n	8105514 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8105510:	2303      	movs	r3, #3
 8105512:	e006      	b.n	8105522 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8105514:	687b      	ldr	r3, [r7, #4]
 8105516:	691b      	ldr	r3, [r3, #16]
 8105518:	f003 0301 	and.w	r3, r3, #1
 810551c:	2b01      	cmp	r3, #1
 810551e:	d0f0      	beq.n	8105502 <USB_CoreReset+0x36>

  return HAL_OK;
 8105520:	2300      	movs	r3, #0
}
 8105522:	4618      	mov	r0, r3
 8105524:	3714      	adds	r7, #20
 8105526:	46bd      	mov	sp, r7
 8105528:	f85d 7b04 	ldr.w	r7, [sp], #4
 810552c:	4770      	bx	lr
 810552e:	bf00      	nop
 8105530:	00030d40 	.word	0x00030d40

08105534 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8105534:	b580      	push	{r7, lr}
 8105536:	b084      	sub	sp, #16
 8105538:	af00      	add	r7, sp, #0
 810553a:	6078      	str	r0, [r7, #4]
 810553c:	460b      	mov	r3, r1
 810553e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8105540:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8105544:	f002 fa94 	bl	8107a70 <USBD_static_malloc>
 8105548:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 810554a:	68fb      	ldr	r3, [r7, #12]
 810554c:	2b00      	cmp	r3, #0
 810554e:	d105      	bne.n	810555c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8105550:	687b      	ldr	r3, [r7, #4]
 8105552:	2200      	movs	r2, #0
 8105554:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8105558:	2302      	movs	r3, #2
 810555a:	e066      	b.n	810562a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 810555c:	687b      	ldr	r3, [r7, #4]
 810555e:	68fa      	ldr	r2, [r7, #12]
 8105560:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8105564:	687b      	ldr	r3, [r7, #4]
 8105566:	7c1b      	ldrb	r3, [r3, #16]
 8105568:	2b00      	cmp	r3, #0
 810556a:	d119      	bne.n	81055a0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 810556c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8105570:	2202      	movs	r2, #2
 8105572:	2181      	movs	r1, #129	; 0x81
 8105574:	6878      	ldr	r0, [r7, #4]
 8105576:	f002 f867 	bl	8107648 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 810557a:	687b      	ldr	r3, [r7, #4]
 810557c:	2201      	movs	r2, #1
 810557e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8105580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8105584:	2202      	movs	r2, #2
 8105586:	2101      	movs	r1, #1
 8105588:	6878      	ldr	r0, [r7, #4]
 810558a:	f002 f85d 	bl	8107648 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 810558e:	687b      	ldr	r3, [r7, #4]
 8105590:	2201      	movs	r2, #1
 8105592:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8105596:	687b      	ldr	r3, [r7, #4]
 8105598:	2210      	movs	r2, #16
 810559a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 810559e:	e016      	b.n	81055ce <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 81055a0:	2340      	movs	r3, #64	; 0x40
 81055a2:	2202      	movs	r2, #2
 81055a4:	2181      	movs	r1, #129	; 0x81
 81055a6:	6878      	ldr	r0, [r7, #4]
 81055a8:	f002 f84e 	bl	8107648 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 81055ac:	687b      	ldr	r3, [r7, #4]
 81055ae:	2201      	movs	r2, #1
 81055b0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 81055b2:	2340      	movs	r3, #64	; 0x40
 81055b4:	2202      	movs	r2, #2
 81055b6:	2101      	movs	r1, #1
 81055b8:	6878      	ldr	r0, [r7, #4]
 81055ba:	f002 f845 	bl	8107648 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 81055be:	687b      	ldr	r3, [r7, #4]
 81055c0:	2201      	movs	r2, #1
 81055c2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 81055c6:	687b      	ldr	r3, [r7, #4]
 81055c8:	2210      	movs	r2, #16
 81055ca:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 81055ce:	2308      	movs	r3, #8
 81055d0:	2203      	movs	r2, #3
 81055d2:	2182      	movs	r1, #130	; 0x82
 81055d4:	6878      	ldr	r0, [r7, #4]
 81055d6:	f002 f837 	bl	8107648 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 81055da:	687b      	ldr	r3, [r7, #4]
 81055dc:	2201      	movs	r2, #1
 81055de:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 81055e2:	687b      	ldr	r3, [r7, #4]
 81055e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 81055e8:	681b      	ldr	r3, [r3, #0]
 81055ea:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 81055ec:	68fb      	ldr	r3, [r7, #12]
 81055ee:	2200      	movs	r2, #0
 81055f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 81055f4:	68fb      	ldr	r3, [r7, #12]
 81055f6:	2200      	movs	r2, #0
 81055f8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 81055fc:	687b      	ldr	r3, [r7, #4]
 81055fe:	7c1b      	ldrb	r3, [r3, #16]
 8105600:	2b00      	cmp	r3, #0
 8105602:	d109      	bne.n	8105618 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8105604:	68fb      	ldr	r3, [r7, #12]
 8105606:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 810560a:	f44f 7300 	mov.w	r3, #512	; 0x200
 810560e:	2101      	movs	r1, #1
 8105610:	6878      	ldr	r0, [r7, #4]
 8105612:	f002 f993 	bl	810793c <USBD_LL_PrepareReceive>
 8105616:	e007      	b.n	8105628 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8105618:	68fb      	ldr	r3, [r7, #12]
 810561a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 810561e:	2340      	movs	r3, #64	; 0x40
 8105620:	2101      	movs	r1, #1
 8105622:	6878      	ldr	r0, [r7, #4]
 8105624:	f002 f98a 	bl	810793c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8105628:	2300      	movs	r3, #0
}
 810562a:	4618      	mov	r0, r3
 810562c:	3710      	adds	r7, #16
 810562e:	46bd      	mov	sp, r7
 8105630:	bd80      	pop	{r7, pc}

08105632 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8105632:	b580      	push	{r7, lr}
 8105634:	b082      	sub	sp, #8
 8105636:	af00      	add	r7, sp, #0
 8105638:	6078      	str	r0, [r7, #4]
 810563a:	460b      	mov	r3, r1
 810563c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 810563e:	2181      	movs	r1, #129	; 0x81
 8105640:	6878      	ldr	r0, [r7, #4]
 8105642:	f002 f83f 	bl	81076c4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8105646:	687b      	ldr	r3, [r7, #4]
 8105648:	2200      	movs	r2, #0
 810564a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 810564c:	2101      	movs	r1, #1
 810564e:	6878      	ldr	r0, [r7, #4]
 8105650:	f002 f838 	bl	81076c4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8105654:	687b      	ldr	r3, [r7, #4]
 8105656:	2200      	movs	r2, #0
 8105658:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 810565c:	2182      	movs	r1, #130	; 0x82
 810565e:	6878      	ldr	r0, [r7, #4]
 8105660:	f002 f830 	bl	81076c4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8105664:	687b      	ldr	r3, [r7, #4]
 8105666:	2200      	movs	r2, #0
 8105668:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 810566c:	687b      	ldr	r3, [r7, #4]
 810566e:	2200      	movs	r2, #0
 8105670:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8105674:	687b      	ldr	r3, [r7, #4]
 8105676:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 810567a:	2b00      	cmp	r3, #0
 810567c:	d00e      	beq.n	810569c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 810567e:	687b      	ldr	r3, [r7, #4]
 8105680:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8105684:	685b      	ldr	r3, [r3, #4]
 8105686:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8105688:	687b      	ldr	r3, [r7, #4]
 810568a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 810568e:	4618      	mov	r0, r3
 8105690:	f002 f9fc 	bl	8107a8c <USBD_static_free>
    pdev->pClassData = NULL;
 8105694:	687b      	ldr	r3, [r7, #4]
 8105696:	2200      	movs	r2, #0
 8105698:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 810569c:	2300      	movs	r3, #0
}
 810569e:	4618      	mov	r0, r3
 81056a0:	3708      	adds	r7, #8
 81056a2:	46bd      	mov	sp, r7
 81056a4:	bd80      	pop	{r7, pc}
	...

081056a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 81056a8:	b580      	push	{r7, lr}
 81056aa:	b086      	sub	sp, #24
 81056ac:	af00      	add	r7, sp, #0
 81056ae:	6078      	str	r0, [r7, #4]
 81056b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 81056b2:	687b      	ldr	r3, [r7, #4]
 81056b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 81056b8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 81056ba:	2300      	movs	r3, #0
 81056bc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 81056be:	2300      	movs	r3, #0
 81056c0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 81056c2:	2300      	movs	r3, #0
 81056c4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 81056c6:	693b      	ldr	r3, [r7, #16]
 81056c8:	2b00      	cmp	r3, #0
 81056ca:	d101      	bne.n	81056d0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 81056cc:	2303      	movs	r3, #3
 81056ce:	e0af      	b.n	8105830 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 81056d0:	683b      	ldr	r3, [r7, #0]
 81056d2:	781b      	ldrb	r3, [r3, #0]
 81056d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 81056d8:	2b00      	cmp	r3, #0
 81056da:	d03f      	beq.n	810575c <USBD_CDC_Setup+0xb4>
 81056dc:	2b20      	cmp	r3, #32
 81056de:	f040 809f 	bne.w	8105820 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 81056e2:	683b      	ldr	r3, [r7, #0]
 81056e4:	88db      	ldrh	r3, [r3, #6]
 81056e6:	2b00      	cmp	r3, #0
 81056e8:	d02e      	beq.n	8105748 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 81056ea:	683b      	ldr	r3, [r7, #0]
 81056ec:	781b      	ldrb	r3, [r3, #0]
 81056ee:	b25b      	sxtb	r3, r3
 81056f0:	2b00      	cmp	r3, #0
 81056f2:	da16      	bge.n	8105722 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 81056f4:	687b      	ldr	r3, [r7, #4]
 81056f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 81056fa:	689b      	ldr	r3, [r3, #8]
 81056fc:	683a      	ldr	r2, [r7, #0]
 81056fe:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8105700:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8105702:	683a      	ldr	r2, [r7, #0]
 8105704:	88d2      	ldrh	r2, [r2, #6]
 8105706:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8105708:	683b      	ldr	r3, [r7, #0]
 810570a:	88db      	ldrh	r3, [r3, #6]
 810570c:	2b07      	cmp	r3, #7
 810570e:	bf28      	it	cs
 8105710:	2307      	movcs	r3, #7
 8105712:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8105714:	693b      	ldr	r3, [r7, #16]
 8105716:	89fa      	ldrh	r2, [r7, #14]
 8105718:	4619      	mov	r1, r3
 810571a:	6878      	ldr	r0, [r7, #4]
 810571c:	f001 fb13 	bl	8106d46 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8105720:	e085      	b.n	810582e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8105722:	683b      	ldr	r3, [r7, #0]
 8105724:	785a      	ldrb	r2, [r3, #1]
 8105726:	693b      	ldr	r3, [r7, #16]
 8105728:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 810572c:	683b      	ldr	r3, [r7, #0]
 810572e:	88db      	ldrh	r3, [r3, #6]
 8105730:	b2da      	uxtb	r2, r3
 8105732:	693b      	ldr	r3, [r7, #16]
 8105734:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8105738:	6939      	ldr	r1, [r7, #16]
 810573a:	683b      	ldr	r3, [r7, #0]
 810573c:	88db      	ldrh	r3, [r3, #6]
 810573e:	461a      	mov	r2, r3
 8105740:	6878      	ldr	r0, [r7, #4]
 8105742:	f001 fb2c 	bl	8106d9e <USBD_CtlPrepareRx>
      break;
 8105746:	e072      	b.n	810582e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8105748:	687b      	ldr	r3, [r7, #4]
 810574a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 810574e:	689b      	ldr	r3, [r3, #8]
 8105750:	683a      	ldr	r2, [r7, #0]
 8105752:	7850      	ldrb	r0, [r2, #1]
 8105754:	2200      	movs	r2, #0
 8105756:	6839      	ldr	r1, [r7, #0]
 8105758:	4798      	blx	r3
      break;
 810575a:	e068      	b.n	810582e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 810575c:	683b      	ldr	r3, [r7, #0]
 810575e:	785b      	ldrb	r3, [r3, #1]
 8105760:	2b0b      	cmp	r3, #11
 8105762:	d852      	bhi.n	810580a <USBD_CDC_Setup+0x162>
 8105764:	a201      	add	r2, pc, #4	; (adr r2, 810576c <USBD_CDC_Setup+0xc4>)
 8105766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810576a:	bf00      	nop
 810576c:	0810579d 	.word	0x0810579d
 8105770:	08105819 	.word	0x08105819
 8105774:	0810580b 	.word	0x0810580b
 8105778:	0810580b 	.word	0x0810580b
 810577c:	0810580b 	.word	0x0810580b
 8105780:	0810580b 	.word	0x0810580b
 8105784:	0810580b 	.word	0x0810580b
 8105788:	0810580b 	.word	0x0810580b
 810578c:	0810580b 	.word	0x0810580b
 8105790:	0810580b 	.word	0x0810580b
 8105794:	081057c7 	.word	0x081057c7
 8105798:	081057f1 	.word	0x081057f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810579c:	687b      	ldr	r3, [r7, #4]
 810579e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 81057a2:	b2db      	uxtb	r3, r3
 81057a4:	2b03      	cmp	r3, #3
 81057a6:	d107      	bne.n	81057b8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 81057a8:	f107 030a 	add.w	r3, r7, #10
 81057ac:	2202      	movs	r2, #2
 81057ae:	4619      	mov	r1, r3
 81057b0:	6878      	ldr	r0, [r7, #4]
 81057b2:	f001 fac8 	bl	8106d46 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 81057b6:	e032      	b.n	810581e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 81057b8:	6839      	ldr	r1, [r7, #0]
 81057ba:	6878      	ldr	r0, [r7, #4]
 81057bc:	f001 fa52 	bl	8106c64 <USBD_CtlError>
            ret = USBD_FAIL;
 81057c0:	2303      	movs	r3, #3
 81057c2:	75fb      	strb	r3, [r7, #23]
          break;
 81057c4:	e02b      	b.n	810581e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 81057c6:	687b      	ldr	r3, [r7, #4]
 81057c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 81057cc:	b2db      	uxtb	r3, r3
 81057ce:	2b03      	cmp	r3, #3
 81057d0:	d107      	bne.n	81057e2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 81057d2:	f107 030d 	add.w	r3, r7, #13
 81057d6:	2201      	movs	r2, #1
 81057d8:	4619      	mov	r1, r3
 81057da:	6878      	ldr	r0, [r7, #4]
 81057dc:	f001 fab3 	bl	8106d46 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 81057e0:	e01d      	b.n	810581e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 81057e2:	6839      	ldr	r1, [r7, #0]
 81057e4:	6878      	ldr	r0, [r7, #4]
 81057e6:	f001 fa3d 	bl	8106c64 <USBD_CtlError>
            ret = USBD_FAIL;
 81057ea:	2303      	movs	r3, #3
 81057ec:	75fb      	strb	r3, [r7, #23]
          break;
 81057ee:	e016      	b.n	810581e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 81057f0:	687b      	ldr	r3, [r7, #4]
 81057f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 81057f6:	b2db      	uxtb	r3, r3
 81057f8:	2b03      	cmp	r3, #3
 81057fa:	d00f      	beq.n	810581c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 81057fc:	6839      	ldr	r1, [r7, #0]
 81057fe:	6878      	ldr	r0, [r7, #4]
 8105800:	f001 fa30 	bl	8106c64 <USBD_CtlError>
            ret = USBD_FAIL;
 8105804:	2303      	movs	r3, #3
 8105806:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8105808:	e008      	b.n	810581c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 810580a:	6839      	ldr	r1, [r7, #0]
 810580c:	6878      	ldr	r0, [r7, #4]
 810580e:	f001 fa29 	bl	8106c64 <USBD_CtlError>
          ret = USBD_FAIL;
 8105812:	2303      	movs	r3, #3
 8105814:	75fb      	strb	r3, [r7, #23]
          break;
 8105816:	e002      	b.n	810581e <USBD_CDC_Setup+0x176>
          break;
 8105818:	bf00      	nop
 810581a:	e008      	b.n	810582e <USBD_CDC_Setup+0x186>
          break;
 810581c:	bf00      	nop
      }
      break;
 810581e:	e006      	b.n	810582e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8105820:	6839      	ldr	r1, [r7, #0]
 8105822:	6878      	ldr	r0, [r7, #4]
 8105824:	f001 fa1e 	bl	8106c64 <USBD_CtlError>
      ret = USBD_FAIL;
 8105828:	2303      	movs	r3, #3
 810582a:	75fb      	strb	r3, [r7, #23]
      break;
 810582c:	bf00      	nop
  }

  return (uint8_t)ret;
 810582e:	7dfb      	ldrb	r3, [r7, #23]
}
 8105830:	4618      	mov	r0, r3
 8105832:	3718      	adds	r7, #24
 8105834:	46bd      	mov	sp, r7
 8105836:	bd80      	pop	{r7, pc}

08105838 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8105838:	b580      	push	{r7, lr}
 810583a:	b084      	sub	sp, #16
 810583c:	af00      	add	r7, sp, #0
 810583e:	6078      	str	r0, [r7, #4]
 8105840:	460b      	mov	r3, r1
 8105842:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8105844:	687b      	ldr	r3, [r7, #4]
 8105846:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 810584a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 810584c:	687b      	ldr	r3, [r7, #4]
 810584e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8105852:	2b00      	cmp	r3, #0
 8105854:	d101      	bne.n	810585a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8105856:	2303      	movs	r3, #3
 8105858:	e04f      	b.n	81058fa <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 810585a:	687b      	ldr	r3, [r7, #4]
 810585c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8105860:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8105862:	78fa      	ldrb	r2, [r7, #3]
 8105864:	6879      	ldr	r1, [r7, #4]
 8105866:	4613      	mov	r3, r2
 8105868:	009b      	lsls	r3, r3, #2
 810586a:	4413      	add	r3, r2
 810586c:	009b      	lsls	r3, r3, #2
 810586e:	440b      	add	r3, r1
 8105870:	3318      	adds	r3, #24
 8105872:	681b      	ldr	r3, [r3, #0]
 8105874:	2b00      	cmp	r3, #0
 8105876:	d029      	beq.n	81058cc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8105878:	78fa      	ldrb	r2, [r7, #3]
 810587a:	6879      	ldr	r1, [r7, #4]
 810587c:	4613      	mov	r3, r2
 810587e:	009b      	lsls	r3, r3, #2
 8105880:	4413      	add	r3, r2
 8105882:	009b      	lsls	r3, r3, #2
 8105884:	440b      	add	r3, r1
 8105886:	3318      	adds	r3, #24
 8105888:	681a      	ldr	r2, [r3, #0]
 810588a:	78f9      	ldrb	r1, [r7, #3]
 810588c:	68f8      	ldr	r0, [r7, #12]
 810588e:	460b      	mov	r3, r1
 8105890:	00db      	lsls	r3, r3, #3
 8105892:	440b      	add	r3, r1
 8105894:	009b      	lsls	r3, r3, #2
 8105896:	4403      	add	r3, r0
 8105898:	3348      	adds	r3, #72	; 0x48
 810589a:	681b      	ldr	r3, [r3, #0]
 810589c:	fbb2 f1f3 	udiv	r1, r2, r3
 81058a0:	fb01 f303 	mul.w	r3, r1, r3
 81058a4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 81058a6:	2b00      	cmp	r3, #0
 81058a8:	d110      	bne.n	81058cc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 81058aa:	78fa      	ldrb	r2, [r7, #3]
 81058ac:	6879      	ldr	r1, [r7, #4]
 81058ae:	4613      	mov	r3, r2
 81058b0:	009b      	lsls	r3, r3, #2
 81058b2:	4413      	add	r3, r2
 81058b4:	009b      	lsls	r3, r3, #2
 81058b6:	440b      	add	r3, r1
 81058b8:	3318      	adds	r3, #24
 81058ba:	2200      	movs	r2, #0
 81058bc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 81058be:	78f9      	ldrb	r1, [r7, #3]
 81058c0:	2300      	movs	r3, #0
 81058c2:	2200      	movs	r2, #0
 81058c4:	6878      	ldr	r0, [r7, #4]
 81058c6:	f002 f801 	bl	81078cc <USBD_LL_Transmit>
 81058ca:	e015      	b.n	81058f8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 81058cc:	68bb      	ldr	r3, [r7, #8]
 81058ce:	2200      	movs	r2, #0
 81058d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 81058d4:	687b      	ldr	r3, [r7, #4]
 81058d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 81058da:	691b      	ldr	r3, [r3, #16]
 81058dc:	2b00      	cmp	r3, #0
 81058de:	d00b      	beq.n	81058f8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 81058e0:	687b      	ldr	r3, [r7, #4]
 81058e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 81058e6:	691b      	ldr	r3, [r3, #16]
 81058e8:	68ba      	ldr	r2, [r7, #8]
 81058ea:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 81058ee:	68ba      	ldr	r2, [r7, #8]
 81058f0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 81058f4:	78fa      	ldrb	r2, [r7, #3]
 81058f6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 81058f8:	2300      	movs	r3, #0
}
 81058fa:	4618      	mov	r0, r3
 81058fc:	3710      	adds	r7, #16
 81058fe:	46bd      	mov	sp, r7
 8105900:	bd80      	pop	{r7, pc}

08105902 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8105902:	b580      	push	{r7, lr}
 8105904:	b084      	sub	sp, #16
 8105906:	af00      	add	r7, sp, #0
 8105908:	6078      	str	r0, [r7, #4]
 810590a:	460b      	mov	r3, r1
 810590c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 810590e:	687b      	ldr	r3, [r7, #4]
 8105910:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8105914:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8105916:	687b      	ldr	r3, [r7, #4]
 8105918:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 810591c:	2b00      	cmp	r3, #0
 810591e:	d101      	bne.n	8105924 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8105920:	2303      	movs	r3, #3
 8105922:	e015      	b.n	8105950 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8105924:	78fb      	ldrb	r3, [r7, #3]
 8105926:	4619      	mov	r1, r3
 8105928:	6878      	ldr	r0, [r7, #4]
 810592a:	f002 f83f 	bl	81079ac <USBD_LL_GetRxDataSize>
 810592e:	4602      	mov	r2, r0
 8105930:	68fb      	ldr	r3, [r7, #12]
 8105932:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8105936:	687b      	ldr	r3, [r7, #4]
 8105938:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 810593c:	68db      	ldr	r3, [r3, #12]
 810593e:	68fa      	ldr	r2, [r7, #12]
 8105940:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8105944:	68fa      	ldr	r2, [r7, #12]
 8105946:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 810594a:	4611      	mov	r1, r2
 810594c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 810594e:	2300      	movs	r3, #0
}
 8105950:	4618      	mov	r0, r3
 8105952:	3710      	adds	r7, #16
 8105954:	46bd      	mov	sp, r7
 8105956:	bd80      	pop	{r7, pc}

08105958 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8105958:	b580      	push	{r7, lr}
 810595a:	b084      	sub	sp, #16
 810595c:	af00      	add	r7, sp, #0
 810595e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8105960:	687b      	ldr	r3, [r7, #4]
 8105962:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8105966:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8105968:	68fb      	ldr	r3, [r7, #12]
 810596a:	2b00      	cmp	r3, #0
 810596c:	d101      	bne.n	8105972 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 810596e:	2303      	movs	r3, #3
 8105970:	e01b      	b.n	81059aa <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8105972:	687b      	ldr	r3, [r7, #4]
 8105974:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8105978:	2b00      	cmp	r3, #0
 810597a:	d015      	beq.n	81059a8 <USBD_CDC_EP0_RxReady+0x50>
 810597c:	68fb      	ldr	r3, [r7, #12]
 810597e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8105982:	2bff      	cmp	r3, #255	; 0xff
 8105984:	d010      	beq.n	81059a8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8105986:	687b      	ldr	r3, [r7, #4]
 8105988:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 810598c:	689b      	ldr	r3, [r3, #8]
 810598e:	68fa      	ldr	r2, [r7, #12]
 8105990:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8105994:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8105996:	68fa      	ldr	r2, [r7, #12]
 8105998:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 810599c:	b292      	uxth	r2, r2
 810599e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 81059a0:	68fb      	ldr	r3, [r7, #12]
 81059a2:	22ff      	movs	r2, #255	; 0xff
 81059a4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 81059a8:	2300      	movs	r3, #0
}
 81059aa:	4618      	mov	r0, r3
 81059ac:	3710      	adds	r7, #16
 81059ae:	46bd      	mov	sp, r7
 81059b0:	bd80      	pop	{r7, pc}
	...

081059b4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 81059b4:	b480      	push	{r7}
 81059b6:	b083      	sub	sp, #12
 81059b8:	af00      	add	r7, sp, #0
 81059ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 81059bc:	687b      	ldr	r3, [r7, #4]
 81059be:	2243      	movs	r2, #67	; 0x43
 81059c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 81059c2:	4b03      	ldr	r3, [pc, #12]	; (81059d0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 81059c4:	4618      	mov	r0, r3
 81059c6:	370c      	adds	r7, #12
 81059c8:	46bd      	mov	sp, r7
 81059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059ce:	4770      	bx	lr
 81059d0:	200000b4 	.word	0x200000b4

081059d4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 81059d4:	b480      	push	{r7}
 81059d6:	b083      	sub	sp, #12
 81059d8:	af00      	add	r7, sp, #0
 81059da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 81059dc:	687b      	ldr	r3, [r7, #4]
 81059de:	2243      	movs	r2, #67	; 0x43
 81059e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 81059e2:	4b03      	ldr	r3, [pc, #12]	; (81059f0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 81059e4:	4618      	mov	r0, r3
 81059e6:	370c      	adds	r7, #12
 81059e8:	46bd      	mov	sp, r7
 81059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059ee:	4770      	bx	lr
 81059f0:	20000070 	.word	0x20000070

081059f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 81059f4:	b480      	push	{r7}
 81059f6:	b083      	sub	sp, #12
 81059f8:	af00      	add	r7, sp, #0
 81059fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 81059fc:	687b      	ldr	r3, [r7, #4]
 81059fe:	2243      	movs	r2, #67	; 0x43
 8105a00:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8105a02:	4b03      	ldr	r3, [pc, #12]	; (8105a10 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8105a04:	4618      	mov	r0, r3
 8105a06:	370c      	adds	r7, #12
 8105a08:	46bd      	mov	sp, r7
 8105a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a0e:	4770      	bx	lr
 8105a10:	200000f8 	.word	0x200000f8

08105a14 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8105a14:	b480      	push	{r7}
 8105a16:	b083      	sub	sp, #12
 8105a18:	af00      	add	r7, sp, #0
 8105a1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8105a1c:	687b      	ldr	r3, [r7, #4]
 8105a1e:	220a      	movs	r2, #10
 8105a20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8105a22:	4b03      	ldr	r3, [pc, #12]	; (8105a30 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8105a24:	4618      	mov	r0, r3
 8105a26:	370c      	adds	r7, #12
 8105a28:	46bd      	mov	sp, r7
 8105a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a2e:	4770      	bx	lr
 8105a30:	2000002c 	.word	0x2000002c

08105a34 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8105a34:	b480      	push	{r7}
 8105a36:	b083      	sub	sp, #12
 8105a38:	af00      	add	r7, sp, #0
 8105a3a:	6078      	str	r0, [r7, #4]
 8105a3c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8105a3e:	683b      	ldr	r3, [r7, #0]
 8105a40:	2b00      	cmp	r3, #0
 8105a42:	d101      	bne.n	8105a48 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8105a44:	2303      	movs	r3, #3
 8105a46:	e004      	b.n	8105a52 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8105a48:	687b      	ldr	r3, [r7, #4]
 8105a4a:	683a      	ldr	r2, [r7, #0]
 8105a4c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8105a50:	2300      	movs	r3, #0
}
 8105a52:	4618      	mov	r0, r3
 8105a54:	370c      	adds	r7, #12
 8105a56:	46bd      	mov	sp, r7
 8105a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a5c:	4770      	bx	lr

08105a5e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8105a5e:	b480      	push	{r7}
 8105a60:	b087      	sub	sp, #28
 8105a62:	af00      	add	r7, sp, #0
 8105a64:	60f8      	str	r0, [r7, #12]
 8105a66:	60b9      	str	r1, [r7, #8]
 8105a68:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8105a6a:	68fb      	ldr	r3, [r7, #12]
 8105a6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8105a70:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8105a72:	697b      	ldr	r3, [r7, #20]
 8105a74:	2b00      	cmp	r3, #0
 8105a76:	d101      	bne.n	8105a7c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8105a78:	2303      	movs	r3, #3
 8105a7a:	e008      	b.n	8105a8e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8105a7c:	697b      	ldr	r3, [r7, #20]
 8105a7e:	68ba      	ldr	r2, [r7, #8]
 8105a80:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8105a84:	697b      	ldr	r3, [r7, #20]
 8105a86:	687a      	ldr	r2, [r7, #4]
 8105a88:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8105a8c:	2300      	movs	r3, #0
}
 8105a8e:	4618      	mov	r0, r3
 8105a90:	371c      	adds	r7, #28
 8105a92:	46bd      	mov	sp, r7
 8105a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a98:	4770      	bx	lr

08105a9a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8105a9a:	b480      	push	{r7}
 8105a9c:	b085      	sub	sp, #20
 8105a9e:	af00      	add	r7, sp, #0
 8105aa0:	6078      	str	r0, [r7, #4]
 8105aa2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8105aa4:	687b      	ldr	r3, [r7, #4]
 8105aa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8105aaa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8105aac:	68fb      	ldr	r3, [r7, #12]
 8105aae:	2b00      	cmp	r3, #0
 8105ab0:	d101      	bne.n	8105ab6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8105ab2:	2303      	movs	r3, #3
 8105ab4:	e004      	b.n	8105ac0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8105ab6:	68fb      	ldr	r3, [r7, #12]
 8105ab8:	683a      	ldr	r2, [r7, #0]
 8105aba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8105abe:	2300      	movs	r3, #0
}
 8105ac0:	4618      	mov	r0, r3
 8105ac2:	3714      	adds	r7, #20
 8105ac4:	46bd      	mov	sp, r7
 8105ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105aca:	4770      	bx	lr

08105acc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8105acc:	b580      	push	{r7, lr}
 8105ace:	b084      	sub	sp, #16
 8105ad0:	af00      	add	r7, sp, #0
 8105ad2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8105ad4:	687b      	ldr	r3, [r7, #4]
 8105ad6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8105ada:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8105adc:	687b      	ldr	r3, [r7, #4]
 8105ade:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8105ae2:	2b00      	cmp	r3, #0
 8105ae4:	d101      	bne.n	8105aea <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8105ae6:	2303      	movs	r3, #3
 8105ae8:	e016      	b.n	8105b18 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8105aea:	687b      	ldr	r3, [r7, #4]
 8105aec:	7c1b      	ldrb	r3, [r3, #16]
 8105aee:	2b00      	cmp	r3, #0
 8105af0:	d109      	bne.n	8105b06 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8105af2:	68fb      	ldr	r3, [r7, #12]
 8105af4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8105af8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8105afc:	2101      	movs	r1, #1
 8105afe:	6878      	ldr	r0, [r7, #4]
 8105b00:	f001 ff1c 	bl	810793c <USBD_LL_PrepareReceive>
 8105b04:	e007      	b.n	8105b16 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8105b06:	68fb      	ldr	r3, [r7, #12]
 8105b08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8105b0c:	2340      	movs	r3, #64	; 0x40
 8105b0e:	2101      	movs	r1, #1
 8105b10:	6878      	ldr	r0, [r7, #4]
 8105b12:	f001 ff13 	bl	810793c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8105b16:	2300      	movs	r3, #0
}
 8105b18:	4618      	mov	r0, r3
 8105b1a:	3710      	adds	r7, #16
 8105b1c:	46bd      	mov	sp, r7
 8105b1e:	bd80      	pop	{r7, pc}

08105b20 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8105b20:	b580      	push	{r7, lr}
 8105b22:	b086      	sub	sp, #24
 8105b24:	af00      	add	r7, sp, #0
 8105b26:	60f8      	str	r0, [r7, #12]
 8105b28:	60b9      	str	r1, [r7, #8]
 8105b2a:	4613      	mov	r3, r2
 8105b2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8105b2e:	68fb      	ldr	r3, [r7, #12]
 8105b30:	2b00      	cmp	r3, #0
 8105b32:	d101      	bne.n	8105b38 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8105b34:	2303      	movs	r3, #3
 8105b36:	e01f      	b.n	8105b78 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8105b38:	68fb      	ldr	r3, [r7, #12]
 8105b3a:	2200      	movs	r2, #0
 8105b3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8105b40:	68fb      	ldr	r3, [r7, #12]
 8105b42:	2200      	movs	r2, #0
 8105b44:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8105b48:	68fb      	ldr	r3, [r7, #12]
 8105b4a:	2200      	movs	r2, #0
 8105b4c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8105b50:	68bb      	ldr	r3, [r7, #8]
 8105b52:	2b00      	cmp	r3, #0
 8105b54:	d003      	beq.n	8105b5e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8105b56:	68fb      	ldr	r3, [r7, #12]
 8105b58:	68ba      	ldr	r2, [r7, #8]
 8105b5a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8105b5e:	68fb      	ldr	r3, [r7, #12]
 8105b60:	2201      	movs	r2, #1
 8105b62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8105b66:	68fb      	ldr	r3, [r7, #12]
 8105b68:	79fa      	ldrb	r2, [r7, #7]
 8105b6a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8105b6c:	68f8      	ldr	r0, [r7, #12]
 8105b6e:	f001 fcef 	bl	8107550 <USBD_LL_Init>
 8105b72:	4603      	mov	r3, r0
 8105b74:	75fb      	strb	r3, [r7, #23]

  return ret;
 8105b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8105b78:	4618      	mov	r0, r3
 8105b7a:	3718      	adds	r7, #24
 8105b7c:	46bd      	mov	sp, r7
 8105b7e:	bd80      	pop	{r7, pc}

08105b80 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8105b80:	b580      	push	{r7, lr}
 8105b82:	b084      	sub	sp, #16
 8105b84:	af00      	add	r7, sp, #0
 8105b86:	6078      	str	r0, [r7, #4]
 8105b88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8105b8a:	2300      	movs	r3, #0
 8105b8c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8105b8e:	683b      	ldr	r3, [r7, #0]
 8105b90:	2b00      	cmp	r3, #0
 8105b92:	d101      	bne.n	8105b98 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8105b94:	2303      	movs	r3, #3
 8105b96:	e016      	b.n	8105bc6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8105b98:	687b      	ldr	r3, [r7, #4]
 8105b9a:	683a      	ldr	r2, [r7, #0]
 8105b9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8105ba0:	687b      	ldr	r3, [r7, #4]
 8105ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105ba8:	2b00      	cmp	r3, #0
 8105baa:	d00b      	beq.n	8105bc4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8105bac:	687b      	ldr	r3, [r7, #4]
 8105bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105bb4:	f107 020e 	add.w	r2, r7, #14
 8105bb8:	4610      	mov	r0, r2
 8105bba:	4798      	blx	r3
 8105bbc:	4602      	mov	r2, r0
 8105bbe:	687b      	ldr	r3, [r7, #4]
 8105bc0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8105bc4:	2300      	movs	r3, #0
}
 8105bc6:	4618      	mov	r0, r3
 8105bc8:	3710      	adds	r7, #16
 8105bca:	46bd      	mov	sp, r7
 8105bcc:	bd80      	pop	{r7, pc}

08105bce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8105bce:	b580      	push	{r7, lr}
 8105bd0:	b082      	sub	sp, #8
 8105bd2:	af00      	add	r7, sp, #0
 8105bd4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8105bd6:	6878      	ldr	r0, [r7, #4]
 8105bd8:	f001 fd04 	bl	81075e4 <USBD_LL_Start>
 8105bdc:	4603      	mov	r3, r0
}
 8105bde:	4618      	mov	r0, r3
 8105be0:	3708      	adds	r7, #8
 8105be2:	46bd      	mov	sp, r7
 8105be4:	bd80      	pop	{r7, pc}

08105be6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8105be6:	b480      	push	{r7}
 8105be8:	b083      	sub	sp, #12
 8105bea:	af00      	add	r7, sp, #0
 8105bec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8105bee:	2300      	movs	r3, #0
}
 8105bf0:	4618      	mov	r0, r3
 8105bf2:	370c      	adds	r7, #12
 8105bf4:	46bd      	mov	sp, r7
 8105bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105bfa:	4770      	bx	lr

08105bfc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8105bfc:	b580      	push	{r7, lr}
 8105bfe:	b084      	sub	sp, #16
 8105c00:	af00      	add	r7, sp, #0
 8105c02:	6078      	str	r0, [r7, #4]
 8105c04:	460b      	mov	r3, r1
 8105c06:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8105c08:	2303      	movs	r3, #3
 8105c0a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8105c0c:	687b      	ldr	r3, [r7, #4]
 8105c0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105c12:	2b00      	cmp	r3, #0
 8105c14:	d009      	beq.n	8105c2a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8105c16:	687b      	ldr	r3, [r7, #4]
 8105c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105c1c:	681b      	ldr	r3, [r3, #0]
 8105c1e:	78fa      	ldrb	r2, [r7, #3]
 8105c20:	4611      	mov	r1, r2
 8105c22:	6878      	ldr	r0, [r7, #4]
 8105c24:	4798      	blx	r3
 8105c26:	4603      	mov	r3, r0
 8105c28:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8105c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8105c2c:	4618      	mov	r0, r3
 8105c2e:	3710      	adds	r7, #16
 8105c30:	46bd      	mov	sp, r7
 8105c32:	bd80      	pop	{r7, pc}

08105c34 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8105c34:	b580      	push	{r7, lr}
 8105c36:	b082      	sub	sp, #8
 8105c38:	af00      	add	r7, sp, #0
 8105c3a:	6078      	str	r0, [r7, #4]
 8105c3c:	460b      	mov	r3, r1
 8105c3e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8105c40:	687b      	ldr	r3, [r7, #4]
 8105c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105c46:	2b00      	cmp	r3, #0
 8105c48:	d007      	beq.n	8105c5a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8105c4a:	687b      	ldr	r3, [r7, #4]
 8105c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105c50:	685b      	ldr	r3, [r3, #4]
 8105c52:	78fa      	ldrb	r2, [r7, #3]
 8105c54:	4611      	mov	r1, r2
 8105c56:	6878      	ldr	r0, [r7, #4]
 8105c58:	4798      	blx	r3
  }

  return USBD_OK;
 8105c5a:	2300      	movs	r3, #0
}
 8105c5c:	4618      	mov	r0, r3
 8105c5e:	3708      	adds	r7, #8
 8105c60:	46bd      	mov	sp, r7
 8105c62:	bd80      	pop	{r7, pc}

08105c64 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8105c64:	b580      	push	{r7, lr}
 8105c66:	b084      	sub	sp, #16
 8105c68:	af00      	add	r7, sp, #0
 8105c6a:	6078      	str	r0, [r7, #4]
 8105c6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8105c6e:	687b      	ldr	r3, [r7, #4]
 8105c70:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8105c74:	6839      	ldr	r1, [r7, #0]
 8105c76:	4618      	mov	r0, r3
 8105c78:	f000 ffba 	bl	8106bf0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8105c7c:	687b      	ldr	r3, [r7, #4]
 8105c7e:	2201      	movs	r2, #1
 8105c80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8105c84:	687b      	ldr	r3, [r7, #4]
 8105c86:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8105c8a:	461a      	mov	r2, r3
 8105c8c:	687b      	ldr	r3, [r7, #4]
 8105c8e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8105c92:	687b      	ldr	r3, [r7, #4]
 8105c94:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8105c98:	f003 031f 	and.w	r3, r3, #31
 8105c9c:	2b02      	cmp	r3, #2
 8105c9e:	d01a      	beq.n	8105cd6 <USBD_LL_SetupStage+0x72>
 8105ca0:	2b02      	cmp	r3, #2
 8105ca2:	d822      	bhi.n	8105cea <USBD_LL_SetupStage+0x86>
 8105ca4:	2b00      	cmp	r3, #0
 8105ca6:	d002      	beq.n	8105cae <USBD_LL_SetupStage+0x4a>
 8105ca8:	2b01      	cmp	r3, #1
 8105caa:	d00a      	beq.n	8105cc2 <USBD_LL_SetupStage+0x5e>
 8105cac:	e01d      	b.n	8105cea <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8105cae:	687b      	ldr	r3, [r7, #4]
 8105cb0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8105cb4:	4619      	mov	r1, r3
 8105cb6:	6878      	ldr	r0, [r7, #4]
 8105cb8:	f000 fa62 	bl	8106180 <USBD_StdDevReq>
 8105cbc:	4603      	mov	r3, r0
 8105cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8105cc0:	e020      	b.n	8105d04 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8105cc2:	687b      	ldr	r3, [r7, #4]
 8105cc4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8105cc8:	4619      	mov	r1, r3
 8105cca:	6878      	ldr	r0, [r7, #4]
 8105ccc:	f000 fac6 	bl	810625c <USBD_StdItfReq>
 8105cd0:	4603      	mov	r3, r0
 8105cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8105cd4:	e016      	b.n	8105d04 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8105cd6:	687b      	ldr	r3, [r7, #4]
 8105cd8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8105cdc:	4619      	mov	r1, r3
 8105cde:	6878      	ldr	r0, [r7, #4]
 8105ce0:	f000 fb05 	bl	81062ee <USBD_StdEPReq>
 8105ce4:	4603      	mov	r3, r0
 8105ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8105ce8:	e00c      	b.n	8105d04 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8105cea:	687b      	ldr	r3, [r7, #4]
 8105cec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8105cf0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8105cf4:	b2db      	uxtb	r3, r3
 8105cf6:	4619      	mov	r1, r3
 8105cf8:	6878      	ldr	r0, [r7, #4]
 8105cfa:	f001 fd19 	bl	8107730 <USBD_LL_StallEP>
 8105cfe:	4603      	mov	r3, r0
 8105d00:	73fb      	strb	r3, [r7, #15]
      break;
 8105d02:	bf00      	nop
  }

  return ret;
 8105d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8105d06:	4618      	mov	r0, r3
 8105d08:	3710      	adds	r7, #16
 8105d0a:	46bd      	mov	sp, r7
 8105d0c:	bd80      	pop	{r7, pc}

08105d0e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8105d0e:	b580      	push	{r7, lr}
 8105d10:	b086      	sub	sp, #24
 8105d12:	af00      	add	r7, sp, #0
 8105d14:	60f8      	str	r0, [r7, #12]
 8105d16:	460b      	mov	r3, r1
 8105d18:	607a      	str	r2, [r7, #4]
 8105d1a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8105d1c:	7afb      	ldrb	r3, [r7, #11]
 8105d1e:	2b00      	cmp	r3, #0
 8105d20:	d138      	bne.n	8105d94 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8105d22:	68fb      	ldr	r3, [r7, #12]
 8105d24:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8105d28:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8105d2a:	68fb      	ldr	r3, [r7, #12]
 8105d2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8105d30:	2b03      	cmp	r3, #3
 8105d32:	d14a      	bne.n	8105dca <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8105d34:	693b      	ldr	r3, [r7, #16]
 8105d36:	689a      	ldr	r2, [r3, #8]
 8105d38:	693b      	ldr	r3, [r7, #16]
 8105d3a:	68db      	ldr	r3, [r3, #12]
 8105d3c:	429a      	cmp	r2, r3
 8105d3e:	d913      	bls.n	8105d68 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8105d40:	693b      	ldr	r3, [r7, #16]
 8105d42:	689a      	ldr	r2, [r3, #8]
 8105d44:	693b      	ldr	r3, [r7, #16]
 8105d46:	68db      	ldr	r3, [r3, #12]
 8105d48:	1ad2      	subs	r2, r2, r3
 8105d4a:	693b      	ldr	r3, [r7, #16]
 8105d4c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8105d4e:	693b      	ldr	r3, [r7, #16]
 8105d50:	68da      	ldr	r2, [r3, #12]
 8105d52:	693b      	ldr	r3, [r7, #16]
 8105d54:	689b      	ldr	r3, [r3, #8]
 8105d56:	4293      	cmp	r3, r2
 8105d58:	bf28      	it	cs
 8105d5a:	4613      	movcs	r3, r2
 8105d5c:	461a      	mov	r2, r3
 8105d5e:	6879      	ldr	r1, [r7, #4]
 8105d60:	68f8      	ldr	r0, [r7, #12]
 8105d62:	f001 f839 	bl	8106dd8 <USBD_CtlContinueRx>
 8105d66:	e030      	b.n	8105dca <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8105d68:	68fb      	ldr	r3, [r7, #12]
 8105d6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8105d6e:	b2db      	uxtb	r3, r3
 8105d70:	2b03      	cmp	r3, #3
 8105d72:	d10b      	bne.n	8105d8c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8105d74:	68fb      	ldr	r3, [r7, #12]
 8105d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105d7a:	691b      	ldr	r3, [r3, #16]
 8105d7c:	2b00      	cmp	r3, #0
 8105d7e:	d005      	beq.n	8105d8c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8105d80:	68fb      	ldr	r3, [r7, #12]
 8105d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105d86:	691b      	ldr	r3, [r3, #16]
 8105d88:	68f8      	ldr	r0, [r7, #12]
 8105d8a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8105d8c:	68f8      	ldr	r0, [r7, #12]
 8105d8e:	f001 f834 	bl	8106dfa <USBD_CtlSendStatus>
 8105d92:	e01a      	b.n	8105dca <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8105d94:	68fb      	ldr	r3, [r7, #12]
 8105d96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8105d9a:	b2db      	uxtb	r3, r3
 8105d9c:	2b03      	cmp	r3, #3
 8105d9e:	d114      	bne.n	8105dca <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8105da0:	68fb      	ldr	r3, [r7, #12]
 8105da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105da6:	699b      	ldr	r3, [r3, #24]
 8105da8:	2b00      	cmp	r3, #0
 8105daa:	d00e      	beq.n	8105dca <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8105dac:	68fb      	ldr	r3, [r7, #12]
 8105dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105db2:	699b      	ldr	r3, [r3, #24]
 8105db4:	7afa      	ldrb	r2, [r7, #11]
 8105db6:	4611      	mov	r1, r2
 8105db8:	68f8      	ldr	r0, [r7, #12]
 8105dba:	4798      	blx	r3
 8105dbc:	4603      	mov	r3, r0
 8105dbe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8105dc0:	7dfb      	ldrb	r3, [r7, #23]
 8105dc2:	2b00      	cmp	r3, #0
 8105dc4:	d001      	beq.n	8105dca <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8105dc6:	7dfb      	ldrb	r3, [r7, #23]
 8105dc8:	e000      	b.n	8105dcc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8105dca:	2300      	movs	r3, #0
}
 8105dcc:	4618      	mov	r0, r3
 8105dce:	3718      	adds	r7, #24
 8105dd0:	46bd      	mov	sp, r7
 8105dd2:	bd80      	pop	{r7, pc}

08105dd4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8105dd4:	b580      	push	{r7, lr}
 8105dd6:	b086      	sub	sp, #24
 8105dd8:	af00      	add	r7, sp, #0
 8105dda:	60f8      	str	r0, [r7, #12]
 8105ddc:	460b      	mov	r3, r1
 8105dde:	607a      	str	r2, [r7, #4]
 8105de0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8105de2:	7afb      	ldrb	r3, [r7, #11]
 8105de4:	2b00      	cmp	r3, #0
 8105de6:	d16b      	bne.n	8105ec0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8105de8:	68fb      	ldr	r3, [r7, #12]
 8105dea:	3314      	adds	r3, #20
 8105dec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8105dee:	68fb      	ldr	r3, [r7, #12]
 8105df0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8105df4:	2b02      	cmp	r3, #2
 8105df6:	d156      	bne.n	8105ea6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8105df8:	693b      	ldr	r3, [r7, #16]
 8105dfa:	689a      	ldr	r2, [r3, #8]
 8105dfc:	693b      	ldr	r3, [r7, #16]
 8105dfe:	68db      	ldr	r3, [r3, #12]
 8105e00:	429a      	cmp	r2, r3
 8105e02:	d914      	bls.n	8105e2e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8105e04:	693b      	ldr	r3, [r7, #16]
 8105e06:	689a      	ldr	r2, [r3, #8]
 8105e08:	693b      	ldr	r3, [r7, #16]
 8105e0a:	68db      	ldr	r3, [r3, #12]
 8105e0c:	1ad2      	subs	r2, r2, r3
 8105e0e:	693b      	ldr	r3, [r7, #16]
 8105e10:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8105e12:	693b      	ldr	r3, [r7, #16]
 8105e14:	689b      	ldr	r3, [r3, #8]
 8105e16:	461a      	mov	r2, r3
 8105e18:	6879      	ldr	r1, [r7, #4]
 8105e1a:	68f8      	ldr	r0, [r7, #12]
 8105e1c:	f000 ffae 	bl	8106d7c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8105e20:	2300      	movs	r3, #0
 8105e22:	2200      	movs	r2, #0
 8105e24:	2100      	movs	r1, #0
 8105e26:	68f8      	ldr	r0, [r7, #12]
 8105e28:	f001 fd88 	bl	810793c <USBD_LL_PrepareReceive>
 8105e2c:	e03b      	b.n	8105ea6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8105e2e:	693b      	ldr	r3, [r7, #16]
 8105e30:	68da      	ldr	r2, [r3, #12]
 8105e32:	693b      	ldr	r3, [r7, #16]
 8105e34:	689b      	ldr	r3, [r3, #8]
 8105e36:	429a      	cmp	r2, r3
 8105e38:	d11c      	bne.n	8105e74 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8105e3a:	693b      	ldr	r3, [r7, #16]
 8105e3c:	685a      	ldr	r2, [r3, #4]
 8105e3e:	693b      	ldr	r3, [r7, #16]
 8105e40:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8105e42:	429a      	cmp	r2, r3
 8105e44:	d316      	bcc.n	8105e74 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8105e46:	693b      	ldr	r3, [r7, #16]
 8105e48:	685a      	ldr	r2, [r3, #4]
 8105e4a:	68fb      	ldr	r3, [r7, #12]
 8105e4c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8105e50:	429a      	cmp	r2, r3
 8105e52:	d20f      	bcs.n	8105e74 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8105e54:	2200      	movs	r2, #0
 8105e56:	2100      	movs	r1, #0
 8105e58:	68f8      	ldr	r0, [r7, #12]
 8105e5a:	f000 ff8f 	bl	8106d7c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8105e5e:	68fb      	ldr	r3, [r7, #12]
 8105e60:	2200      	movs	r2, #0
 8105e62:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8105e66:	2300      	movs	r3, #0
 8105e68:	2200      	movs	r2, #0
 8105e6a:	2100      	movs	r1, #0
 8105e6c:	68f8      	ldr	r0, [r7, #12]
 8105e6e:	f001 fd65 	bl	810793c <USBD_LL_PrepareReceive>
 8105e72:	e018      	b.n	8105ea6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8105e74:	68fb      	ldr	r3, [r7, #12]
 8105e76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8105e7a:	b2db      	uxtb	r3, r3
 8105e7c:	2b03      	cmp	r3, #3
 8105e7e:	d10b      	bne.n	8105e98 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8105e80:	68fb      	ldr	r3, [r7, #12]
 8105e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105e86:	68db      	ldr	r3, [r3, #12]
 8105e88:	2b00      	cmp	r3, #0
 8105e8a:	d005      	beq.n	8105e98 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8105e8c:	68fb      	ldr	r3, [r7, #12]
 8105e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105e92:	68db      	ldr	r3, [r3, #12]
 8105e94:	68f8      	ldr	r0, [r7, #12]
 8105e96:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8105e98:	2180      	movs	r1, #128	; 0x80
 8105e9a:	68f8      	ldr	r0, [r7, #12]
 8105e9c:	f001 fc48 	bl	8107730 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8105ea0:	68f8      	ldr	r0, [r7, #12]
 8105ea2:	f000 ffbd 	bl	8106e20 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8105ea6:	68fb      	ldr	r3, [r7, #12]
 8105ea8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8105eac:	2b01      	cmp	r3, #1
 8105eae:	d122      	bne.n	8105ef6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8105eb0:	68f8      	ldr	r0, [r7, #12]
 8105eb2:	f7ff fe98 	bl	8105be6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8105eb6:	68fb      	ldr	r3, [r7, #12]
 8105eb8:	2200      	movs	r2, #0
 8105eba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8105ebe:	e01a      	b.n	8105ef6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8105ec0:	68fb      	ldr	r3, [r7, #12]
 8105ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8105ec6:	b2db      	uxtb	r3, r3
 8105ec8:	2b03      	cmp	r3, #3
 8105eca:	d114      	bne.n	8105ef6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8105ecc:	68fb      	ldr	r3, [r7, #12]
 8105ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105ed2:	695b      	ldr	r3, [r3, #20]
 8105ed4:	2b00      	cmp	r3, #0
 8105ed6:	d00e      	beq.n	8105ef6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8105ed8:	68fb      	ldr	r3, [r7, #12]
 8105eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105ede:	695b      	ldr	r3, [r3, #20]
 8105ee0:	7afa      	ldrb	r2, [r7, #11]
 8105ee2:	4611      	mov	r1, r2
 8105ee4:	68f8      	ldr	r0, [r7, #12]
 8105ee6:	4798      	blx	r3
 8105ee8:	4603      	mov	r3, r0
 8105eea:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8105eec:	7dfb      	ldrb	r3, [r7, #23]
 8105eee:	2b00      	cmp	r3, #0
 8105ef0:	d001      	beq.n	8105ef6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8105ef2:	7dfb      	ldrb	r3, [r7, #23]
 8105ef4:	e000      	b.n	8105ef8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8105ef6:	2300      	movs	r3, #0
}
 8105ef8:	4618      	mov	r0, r3
 8105efa:	3718      	adds	r7, #24
 8105efc:	46bd      	mov	sp, r7
 8105efe:	bd80      	pop	{r7, pc}

08105f00 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8105f00:	b580      	push	{r7, lr}
 8105f02:	b082      	sub	sp, #8
 8105f04:	af00      	add	r7, sp, #0
 8105f06:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8105f08:	687b      	ldr	r3, [r7, #4]
 8105f0a:	2201      	movs	r2, #1
 8105f0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8105f10:	687b      	ldr	r3, [r7, #4]
 8105f12:	2200      	movs	r2, #0
 8105f14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8105f18:	687b      	ldr	r3, [r7, #4]
 8105f1a:	2200      	movs	r2, #0
 8105f1c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8105f1e:	687b      	ldr	r3, [r7, #4]
 8105f20:	2200      	movs	r2, #0
 8105f22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8105f26:	687b      	ldr	r3, [r7, #4]
 8105f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105f2c:	2b00      	cmp	r3, #0
 8105f2e:	d101      	bne.n	8105f34 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8105f30:	2303      	movs	r3, #3
 8105f32:	e02f      	b.n	8105f94 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8105f34:	687b      	ldr	r3, [r7, #4]
 8105f36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8105f3a:	2b00      	cmp	r3, #0
 8105f3c:	d00f      	beq.n	8105f5e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8105f3e:	687b      	ldr	r3, [r7, #4]
 8105f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105f44:	685b      	ldr	r3, [r3, #4]
 8105f46:	2b00      	cmp	r3, #0
 8105f48:	d009      	beq.n	8105f5e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8105f4a:	687b      	ldr	r3, [r7, #4]
 8105f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105f50:	685b      	ldr	r3, [r3, #4]
 8105f52:	687a      	ldr	r2, [r7, #4]
 8105f54:	6852      	ldr	r2, [r2, #4]
 8105f56:	b2d2      	uxtb	r2, r2
 8105f58:	4611      	mov	r1, r2
 8105f5a:	6878      	ldr	r0, [r7, #4]
 8105f5c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8105f5e:	2340      	movs	r3, #64	; 0x40
 8105f60:	2200      	movs	r2, #0
 8105f62:	2100      	movs	r1, #0
 8105f64:	6878      	ldr	r0, [r7, #4]
 8105f66:	f001 fb6f 	bl	8107648 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8105f6a:	687b      	ldr	r3, [r7, #4]
 8105f6c:	2201      	movs	r2, #1
 8105f6e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8105f72:	687b      	ldr	r3, [r7, #4]
 8105f74:	2240      	movs	r2, #64	; 0x40
 8105f76:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8105f7a:	2340      	movs	r3, #64	; 0x40
 8105f7c:	2200      	movs	r2, #0
 8105f7e:	2180      	movs	r1, #128	; 0x80
 8105f80:	6878      	ldr	r0, [r7, #4]
 8105f82:	f001 fb61 	bl	8107648 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8105f86:	687b      	ldr	r3, [r7, #4]
 8105f88:	2201      	movs	r2, #1
 8105f8a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8105f8c:	687b      	ldr	r3, [r7, #4]
 8105f8e:	2240      	movs	r2, #64	; 0x40
 8105f90:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8105f92:	2300      	movs	r3, #0
}
 8105f94:	4618      	mov	r0, r3
 8105f96:	3708      	adds	r7, #8
 8105f98:	46bd      	mov	sp, r7
 8105f9a:	bd80      	pop	{r7, pc}

08105f9c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8105f9c:	b480      	push	{r7}
 8105f9e:	b083      	sub	sp, #12
 8105fa0:	af00      	add	r7, sp, #0
 8105fa2:	6078      	str	r0, [r7, #4]
 8105fa4:	460b      	mov	r3, r1
 8105fa6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8105fa8:	687b      	ldr	r3, [r7, #4]
 8105faa:	78fa      	ldrb	r2, [r7, #3]
 8105fac:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8105fae:	2300      	movs	r3, #0
}
 8105fb0:	4618      	mov	r0, r3
 8105fb2:	370c      	adds	r7, #12
 8105fb4:	46bd      	mov	sp, r7
 8105fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105fba:	4770      	bx	lr

08105fbc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8105fbc:	b480      	push	{r7}
 8105fbe:	b083      	sub	sp, #12
 8105fc0:	af00      	add	r7, sp, #0
 8105fc2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8105fc4:	687b      	ldr	r3, [r7, #4]
 8105fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8105fca:	b2da      	uxtb	r2, r3
 8105fcc:	687b      	ldr	r3, [r7, #4]
 8105fce:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8105fd2:	687b      	ldr	r3, [r7, #4]
 8105fd4:	2204      	movs	r2, #4
 8105fd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8105fda:	2300      	movs	r3, #0
}
 8105fdc:	4618      	mov	r0, r3
 8105fde:	370c      	adds	r7, #12
 8105fe0:	46bd      	mov	sp, r7
 8105fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105fe6:	4770      	bx	lr

08105fe8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8105fe8:	b480      	push	{r7}
 8105fea:	b083      	sub	sp, #12
 8105fec:	af00      	add	r7, sp, #0
 8105fee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8105ff0:	687b      	ldr	r3, [r7, #4]
 8105ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8105ff6:	b2db      	uxtb	r3, r3
 8105ff8:	2b04      	cmp	r3, #4
 8105ffa:	d106      	bne.n	810600a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8105ffc:	687b      	ldr	r3, [r7, #4]
 8105ffe:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8106002:	b2da      	uxtb	r2, r3
 8106004:	687b      	ldr	r3, [r7, #4]
 8106006:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 810600a:	2300      	movs	r3, #0
}
 810600c:	4618      	mov	r0, r3
 810600e:	370c      	adds	r7, #12
 8106010:	46bd      	mov	sp, r7
 8106012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106016:	4770      	bx	lr

08106018 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8106018:	b580      	push	{r7, lr}
 810601a:	b082      	sub	sp, #8
 810601c:	af00      	add	r7, sp, #0
 810601e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8106020:	687b      	ldr	r3, [r7, #4]
 8106022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8106026:	2b00      	cmp	r3, #0
 8106028:	d101      	bne.n	810602e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 810602a:	2303      	movs	r3, #3
 810602c:	e012      	b.n	8106054 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810602e:	687b      	ldr	r3, [r7, #4]
 8106030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8106034:	b2db      	uxtb	r3, r3
 8106036:	2b03      	cmp	r3, #3
 8106038:	d10b      	bne.n	8106052 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 810603a:	687b      	ldr	r3, [r7, #4]
 810603c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8106040:	69db      	ldr	r3, [r3, #28]
 8106042:	2b00      	cmp	r3, #0
 8106044:	d005      	beq.n	8106052 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8106046:	687b      	ldr	r3, [r7, #4]
 8106048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 810604c:	69db      	ldr	r3, [r3, #28]
 810604e:	6878      	ldr	r0, [r7, #4]
 8106050:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8106052:	2300      	movs	r3, #0
}
 8106054:	4618      	mov	r0, r3
 8106056:	3708      	adds	r7, #8
 8106058:	46bd      	mov	sp, r7
 810605a:	bd80      	pop	{r7, pc}

0810605c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 810605c:	b580      	push	{r7, lr}
 810605e:	b082      	sub	sp, #8
 8106060:	af00      	add	r7, sp, #0
 8106062:	6078      	str	r0, [r7, #4]
 8106064:	460b      	mov	r3, r1
 8106066:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8106068:	687b      	ldr	r3, [r7, #4]
 810606a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 810606e:	2b00      	cmp	r3, #0
 8106070:	d101      	bne.n	8106076 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8106072:	2303      	movs	r3, #3
 8106074:	e014      	b.n	81060a0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8106076:	687b      	ldr	r3, [r7, #4]
 8106078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 810607c:	b2db      	uxtb	r3, r3
 810607e:	2b03      	cmp	r3, #3
 8106080:	d10d      	bne.n	810609e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8106082:	687b      	ldr	r3, [r7, #4]
 8106084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8106088:	6a1b      	ldr	r3, [r3, #32]
 810608a:	2b00      	cmp	r3, #0
 810608c:	d007      	beq.n	810609e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 810608e:	687b      	ldr	r3, [r7, #4]
 8106090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8106094:	6a1b      	ldr	r3, [r3, #32]
 8106096:	78fa      	ldrb	r2, [r7, #3]
 8106098:	4611      	mov	r1, r2
 810609a:	6878      	ldr	r0, [r7, #4]
 810609c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 810609e:	2300      	movs	r3, #0
}
 81060a0:	4618      	mov	r0, r3
 81060a2:	3708      	adds	r7, #8
 81060a4:	46bd      	mov	sp, r7
 81060a6:	bd80      	pop	{r7, pc}

081060a8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 81060a8:	b580      	push	{r7, lr}
 81060aa:	b082      	sub	sp, #8
 81060ac:	af00      	add	r7, sp, #0
 81060ae:	6078      	str	r0, [r7, #4]
 81060b0:	460b      	mov	r3, r1
 81060b2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 81060b4:	687b      	ldr	r3, [r7, #4]
 81060b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 81060ba:	2b00      	cmp	r3, #0
 81060bc:	d101      	bne.n	81060c2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 81060be:	2303      	movs	r3, #3
 81060c0:	e014      	b.n	81060ec <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 81060c2:	687b      	ldr	r3, [r7, #4]
 81060c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 81060c8:	b2db      	uxtb	r3, r3
 81060ca:	2b03      	cmp	r3, #3
 81060cc:	d10d      	bne.n	81060ea <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 81060ce:	687b      	ldr	r3, [r7, #4]
 81060d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 81060d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81060d6:	2b00      	cmp	r3, #0
 81060d8:	d007      	beq.n	81060ea <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 81060da:	687b      	ldr	r3, [r7, #4]
 81060dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 81060e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81060e2:	78fa      	ldrb	r2, [r7, #3]
 81060e4:	4611      	mov	r1, r2
 81060e6:	6878      	ldr	r0, [r7, #4]
 81060e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 81060ea:	2300      	movs	r3, #0
}
 81060ec:	4618      	mov	r0, r3
 81060ee:	3708      	adds	r7, #8
 81060f0:	46bd      	mov	sp, r7
 81060f2:	bd80      	pop	{r7, pc}

081060f4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 81060f4:	b480      	push	{r7}
 81060f6:	b083      	sub	sp, #12
 81060f8:	af00      	add	r7, sp, #0
 81060fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 81060fc:	2300      	movs	r3, #0
}
 81060fe:	4618      	mov	r0, r3
 8106100:	370c      	adds	r7, #12
 8106102:	46bd      	mov	sp, r7
 8106104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106108:	4770      	bx	lr

0810610a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 810610a:	b580      	push	{r7, lr}
 810610c:	b082      	sub	sp, #8
 810610e:	af00      	add	r7, sp, #0
 8106110:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8106112:	687b      	ldr	r3, [r7, #4]
 8106114:	2201      	movs	r2, #1
 8106116:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 810611a:	687b      	ldr	r3, [r7, #4]
 810611c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8106120:	2b00      	cmp	r3, #0
 8106122:	d009      	beq.n	8106138 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8106124:	687b      	ldr	r3, [r7, #4]
 8106126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 810612a:	685b      	ldr	r3, [r3, #4]
 810612c:	687a      	ldr	r2, [r7, #4]
 810612e:	6852      	ldr	r2, [r2, #4]
 8106130:	b2d2      	uxtb	r2, r2
 8106132:	4611      	mov	r1, r2
 8106134:	6878      	ldr	r0, [r7, #4]
 8106136:	4798      	blx	r3
  }

  return USBD_OK;
 8106138:	2300      	movs	r3, #0
}
 810613a:	4618      	mov	r0, r3
 810613c:	3708      	adds	r7, #8
 810613e:	46bd      	mov	sp, r7
 8106140:	bd80      	pop	{r7, pc}

08106142 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8106142:	b480      	push	{r7}
 8106144:	b087      	sub	sp, #28
 8106146:	af00      	add	r7, sp, #0
 8106148:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 810614a:	687b      	ldr	r3, [r7, #4]
 810614c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 810614e:	697b      	ldr	r3, [r7, #20]
 8106150:	781b      	ldrb	r3, [r3, #0]
 8106152:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8106154:	697b      	ldr	r3, [r7, #20]
 8106156:	3301      	adds	r3, #1
 8106158:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 810615a:	697b      	ldr	r3, [r7, #20]
 810615c:	781b      	ldrb	r3, [r3, #0]
 810615e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8106160:	8a3b      	ldrh	r3, [r7, #16]
 8106162:	021b      	lsls	r3, r3, #8
 8106164:	b21a      	sxth	r2, r3
 8106166:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 810616a:	4313      	orrs	r3, r2
 810616c:	b21b      	sxth	r3, r3
 810616e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8106170:	89fb      	ldrh	r3, [r7, #14]
}
 8106172:	4618      	mov	r0, r3
 8106174:	371c      	adds	r7, #28
 8106176:	46bd      	mov	sp, r7
 8106178:	f85d 7b04 	ldr.w	r7, [sp], #4
 810617c:	4770      	bx	lr
	...

08106180 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8106180:	b580      	push	{r7, lr}
 8106182:	b084      	sub	sp, #16
 8106184:	af00      	add	r7, sp, #0
 8106186:	6078      	str	r0, [r7, #4]
 8106188:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 810618a:	2300      	movs	r3, #0
 810618c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 810618e:	683b      	ldr	r3, [r7, #0]
 8106190:	781b      	ldrb	r3, [r3, #0]
 8106192:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8106196:	2b40      	cmp	r3, #64	; 0x40
 8106198:	d005      	beq.n	81061a6 <USBD_StdDevReq+0x26>
 810619a:	2b40      	cmp	r3, #64	; 0x40
 810619c:	d853      	bhi.n	8106246 <USBD_StdDevReq+0xc6>
 810619e:	2b00      	cmp	r3, #0
 81061a0:	d00b      	beq.n	81061ba <USBD_StdDevReq+0x3a>
 81061a2:	2b20      	cmp	r3, #32
 81061a4:	d14f      	bne.n	8106246 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 81061a6:	687b      	ldr	r3, [r7, #4]
 81061a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 81061ac:	689b      	ldr	r3, [r3, #8]
 81061ae:	6839      	ldr	r1, [r7, #0]
 81061b0:	6878      	ldr	r0, [r7, #4]
 81061b2:	4798      	blx	r3
 81061b4:	4603      	mov	r3, r0
 81061b6:	73fb      	strb	r3, [r7, #15]
      break;
 81061b8:	e04a      	b.n	8106250 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 81061ba:	683b      	ldr	r3, [r7, #0]
 81061bc:	785b      	ldrb	r3, [r3, #1]
 81061be:	2b09      	cmp	r3, #9
 81061c0:	d83b      	bhi.n	810623a <USBD_StdDevReq+0xba>
 81061c2:	a201      	add	r2, pc, #4	; (adr r2, 81061c8 <USBD_StdDevReq+0x48>)
 81061c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81061c8:	0810621d 	.word	0x0810621d
 81061cc:	08106231 	.word	0x08106231
 81061d0:	0810623b 	.word	0x0810623b
 81061d4:	08106227 	.word	0x08106227
 81061d8:	0810623b 	.word	0x0810623b
 81061dc:	081061fb 	.word	0x081061fb
 81061e0:	081061f1 	.word	0x081061f1
 81061e4:	0810623b 	.word	0x0810623b
 81061e8:	08106213 	.word	0x08106213
 81061ec:	08106205 	.word	0x08106205
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 81061f0:	6839      	ldr	r1, [r7, #0]
 81061f2:	6878      	ldr	r0, [r7, #4]
 81061f4:	f000 f9de 	bl	81065b4 <USBD_GetDescriptor>
          break;
 81061f8:	e024      	b.n	8106244 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 81061fa:	6839      	ldr	r1, [r7, #0]
 81061fc:	6878      	ldr	r0, [r7, #4]
 81061fe:	f000 fb6d 	bl	81068dc <USBD_SetAddress>
          break;
 8106202:	e01f      	b.n	8106244 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8106204:	6839      	ldr	r1, [r7, #0]
 8106206:	6878      	ldr	r0, [r7, #4]
 8106208:	f000 fbac 	bl	8106964 <USBD_SetConfig>
 810620c:	4603      	mov	r3, r0
 810620e:	73fb      	strb	r3, [r7, #15]
          break;
 8106210:	e018      	b.n	8106244 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8106212:	6839      	ldr	r1, [r7, #0]
 8106214:	6878      	ldr	r0, [r7, #4]
 8106216:	f000 fc4b 	bl	8106ab0 <USBD_GetConfig>
          break;
 810621a:	e013      	b.n	8106244 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 810621c:	6839      	ldr	r1, [r7, #0]
 810621e:	6878      	ldr	r0, [r7, #4]
 8106220:	f000 fc7c 	bl	8106b1c <USBD_GetStatus>
          break;
 8106224:	e00e      	b.n	8106244 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8106226:	6839      	ldr	r1, [r7, #0]
 8106228:	6878      	ldr	r0, [r7, #4]
 810622a:	f000 fcab 	bl	8106b84 <USBD_SetFeature>
          break;
 810622e:	e009      	b.n	8106244 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8106230:	6839      	ldr	r1, [r7, #0]
 8106232:	6878      	ldr	r0, [r7, #4]
 8106234:	f000 fcba 	bl	8106bac <USBD_ClrFeature>
          break;
 8106238:	e004      	b.n	8106244 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 810623a:	6839      	ldr	r1, [r7, #0]
 810623c:	6878      	ldr	r0, [r7, #4]
 810623e:	f000 fd11 	bl	8106c64 <USBD_CtlError>
          break;
 8106242:	bf00      	nop
      }
      break;
 8106244:	e004      	b.n	8106250 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8106246:	6839      	ldr	r1, [r7, #0]
 8106248:	6878      	ldr	r0, [r7, #4]
 810624a:	f000 fd0b 	bl	8106c64 <USBD_CtlError>
      break;
 810624e:	bf00      	nop
  }

  return ret;
 8106250:	7bfb      	ldrb	r3, [r7, #15]
}
 8106252:	4618      	mov	r0, r3
 8106254:	3710      	adds	r7, #16
 8106256:	46bd      	mov	sp, r7
 8106258:	bd80      	pop	{r7, pc}
 810625a:	bf00      	nop

0810625c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 810625c:	b580      	push	{r7, lr}
 810625e:	b084      	sub	sp, #16
 8106260:	af00      	add	r7, sp, #0
 8106262:	6078      	str	r0, [r7, #4]
 8106264:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8106266:	2300      	movs	r3, #0
 8106268:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 810626a:	683b      	ldr	r3, [r7, #0]
 810626c:	781b      	ldrb	r3, [r3, #0]
 810626e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8106272:	2b40      	cmp	r3, #64	; 0x40
 8106274:	d005      	beq.n	8106282 <USBD_StdItfReq+0x26>
 8106276:	2b40      	cmp	r3, #64	; 0x40
 8106278:	d82f      	bhi.n	81062da <USBD_StdItfReq+0x7e>
 810627a:	2b00      	cmp	r3, #0
 810627c:	d001      	beq.n	8106282 <USBD_StdItfReq+0x26>
 810627e:	2b20      	cmp	r3, #32
 8106280:	d12b      	bne.n	81062da <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8106282:	687b      	ldr	r3, [r7, #4]
 8106284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8106288:	b2db      	uxtb	r3, r3
 810628a:	3b01      	subs	r3, #1
 810628c:	2b02      	cmp	r3, #2
 810628e:	d81d      	bhi.n	81062cc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8106290:	683b      	ldr	r3, [r7, #0]
 8106292:	889b      	ldrh	r3, [r3, #4]
 8106294:	b2db      	uxtb	r3, r3
 8106296:	2b01      	cmp	r3, #1
 8106298:	d813      	bhi.n	81062c2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 810629a:	687b      	ldr	r3, [r7, #4]
 810629c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 81062a0:	689b      	ldr	r3, [r3, #8]
 81062a2:	6839      	ldr	r1, [r7, #0]
 81062a4:	6878      	ldr	r0, [r7, #4]
 81062a6:	4798      	blx	r3
 81062a8:	4603      	mov	r3, r0
 81062aa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 81062ac:	683b      	ldr	r3, [r7, #0]
 81062ae:	88db      	ldrh	r3, [r3, #6]
 81062b0:	2b00      	cmp	r3, #0
 81062b2:	d110      	bne.n	81062d6 <USBD_StdItfReq+0x7a>
 81062b4:	7bfb      	ldrb	r3, [r7, #15]
 81062b6:	2b00      	cmp	r3, #0
 81062b8:	d10d      	bne.n	81062d6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 81062ba:	6878      	ldr	r0, [r7, #4]
 81062bc:	f000 fd9d 	bl	8106dfa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 81062c0:	e009      	b.n	81062d6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 81062c2:	6839      	ldr	r1, [r7, #0]
 81062c4:	6878      	ldr	r0, [r7, #4]
 81062c6:	f000 fccd 	bl	8106c64 <USBD_CtlError>
          break;
 81062ca:	e004      	b.n	81062d6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 81062cc:	6839      	ldr	r1, [r7, #0]
 81062ce:	6878      	ldr	r0, [r7, #4]
 81062d0:	f000 fcc8 	bl	8106c64 <USBD_CtlError>
          break;
 81062d4:	e000      	b.n	81062d8 <USBD_StdItfReq+0x7c>
          break;
 81062d6:	bf00      	nop
      }
      break;
 81062d8:	e004      	b.n	81062e4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 81062da:	6839      	ldr	r1, [r7, #0]
 81062dc:	6878      	ldr	r0, [r7, #4]
 81062de:	f000 fcc1 	bl	8106c64 <USBD_CtlError>
      break;
 81062e2:	bf00      	nop
  }

  return ret;
 81062e4:	7bfb      	ldrb	r3, [r7, #15]
}
 81062e6:	4618      	mov	r0, r3
 81062e8:	3710      	adds	r7, #16
 81062ea:	46bd      	mov	sp, r7
 81062ec:	bd80      	pop	{r7, pc}

081062ee <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 81062ee:	b580      	push	{r7, lr}
 81062f0:	b084      	sub	sp, #16
 81062f2:	af00      	add	r7, sp, #0
 81062f4:	6078      	str	r0, [r7, #4]
 81062f6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 81062f8:	2300      	movs	r3, #0
 81062fa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 81062fc:	683b      	ldr	r3, [r7, #0]
 81062fe:	889b      	ldrh	r3, [r3, #4]
 8106300:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8106302:	683b      	ldr	r3, [r7, #0]
 8106304:	781b      	ldrb	r3, [r3, #0]
 8106306:	f003 0360 	and.w	r3, r3, #96	; 0x60
 810630a:	2b40      	cmp	r3, #64	; 0x40
 810630c:	d007      	beq.n	810631e <USBD_StdEPReq+0x30>
 810630e:	2b40      	cmp	r3, #64	; 0x40
 8106310:	f200 8145 	bhi.w	810659e <USBD_StdEPReq+0x2b0>
 8106314:	2b00      	cmp	r3, #0
 8106316:	d00c      	beq.n	8106332 <USBD_StdEPReq+0x44>
 8106318:	2b20      	cmp	r3, #32
 810631a:	f040 8140 	bne.w	810659e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 810631e:	687b      	ldr	r3, [r7, #4]
 8106320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8106324:	689b      	ldr	r3, [r3, #8]
 8106326:	6839      	ldr	r1, [r7, #0]
 8106328:	6878      	ldr	r0, [r7, #4]
 810632a:	4798      	blx	r3
 810632c:	4603      	mov	r3, r0
 810632e:	73fb      	strb	r3, [r7, #15]
      break;
 8106330:	e13a      	b.n	81065a8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8106332:	683b      	ldr	r3, [r7, #0]
 8106334:	785b      	ldrb	r3, [r3, #1]
 8106336:	2b03      	cmp	r3, #3
 8106338:	d007      	beq.n	810634a <USBD_StdEPReq+0x5c>
 810633a:	2b03      	cmp	r3, #3
 810633c:	f300 8129 	bgt.w	8106592 <USBD_StdEPReq+0x2a4>
 8106340:	2b00      	cmp	r3, #0
 8106342:	d07f      	beq.n	8106444 <USBD_StdEPReq+0x156>
 8106344:	2b01      	cmp	r3, #1
 8106346:	d03c      	beq.n	81063c2 <USBD_StdEPReq+0xd4>
 8106348:	e123      	b.n	8106592 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 810634a:	687b      	ldr	r3, [r7, #4]
 810634c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8106350:	b2db      	uxtb	r3, r3
 8106352:	2b02      	cmp	r3, #2
 8106354:	d002      	beq.n	810635c <USBD_StdEPReq+0x6e>
 8106356:	2b03      	cmp	r3, #3
 8106358:	d016      	beq.n	8106388 <USBD_StdEPReq+0x9a>
 810635a:	e02c      	b.n	81063b6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 810635c:	7bbb      	ldrb	r3, [r7, #14]
 810635e:	2b00      	cmp	r3, #0
 8106360:	d00d      	beq.n	810637e <USBD_StdEPReq+0x90>
 8106362:	7bbb      	ldrb	r3, [r7, #14]
 8106364:	2b80      	cmp	r3, #128	; 0x80
 8106366:	d00a      	beq.n	810637e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8106368:	7bbb      	ldrb	r3, [r7, #14]
 810636a:	4619      	mov	r1, r3
 810636c:	6878      	ldr	r0, [r7, #4]
 810636e:	f001 f9df 	bl	8107730 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8106372:	2180      	movs	r1, #128	; 0x80
 8106374:	6878      	ldr	r0, [r7, #4]
 8106376:	f001 f9db 	bl	8107730 <USBD_LL_StallEP>
 810637a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 810637c:	e020      	b.n	81063c0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 810637e:	6839      	ldr	r1, [r7, #0]
 8106380:	6878      	ldr	r0, [r7, #4]
 8106382:	f000 fc6f 	bl	8106c64 <USBD_CtlError>
              break;
 8106386:	e01b      	b.n	81063c0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8106388:	683b      	ldr	r3, [r7, #0]
 810638a:	885b      	ldrh	r3, [r3, #2]
 810638c:	2b00      	cmp	r3, #0
 810638e:	d10e      	bne.n	81063ae <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8106390:	7bbb      	ldrb	r3, [r7, #14]
 8106392:	2b00      	cmp	r3, #0
 8106394:	d00b      	beq.n	81063ae <USBD_StdEPReq+0xc0>
 8106396:	7bbb      	ldrb	r3, [r7, #14]
 8106398:	2b80      	cmp	r3, #128	; 0x80
 810639a:	d008      	beq.n	81063ae <USBD_StdEPReq+0xc0>
 810639c:	683b      	ldr	r3, [r7, #0]
 810639e:	88db      	ldrh	r3, [r3, #6]
 81063a0:	2b00      	cmp	r3, #0
 81063a2:	d104      	bne.n	81063ae <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 81063a4:	7bbb      	ldrb	r3, [r7, #14]
 81063a6:	4619      	mov	r1, r3
 81063a8:	6878      	ldr	r0, [r7, #4]
 81063aa:	f001 f9c1 	bl	8107730 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 81063ae:	6878      	ldr	r0, [r7, #4]
 81063b0:	f000 fd23 	bl	8106dfa <USBD_CtlSendStatus>

              break;
 81063b4:	e004      	b.n	81063c0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 81063b6:	6839      	ldr	r1, [r7, #0]
 81063b8:	6878      	ldr	r0, [r7, #4]
 81063ba:	f000 fc53 	bl	8106c64 <USBD_CtlError>
              break;
 81063be:	bf00      	nop
          }
          break;
 81063c0:	e0ec      	b.n	810659c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 81063c2:	687b      	ldr	r3, [r7, #4]
 81063c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 81063c8:	b2db      	uxtb	r3, r3
 81063ca:	2b02      	cmp	r3, #2
 81063cc:	d002      	beq.n	81063d4 <USBD_StdEPReq+0xe6>
 81063ce:	2b03      	cmp	r3, #3
 81063d0:	d016      	beq.n	8106400 <USBD_StdEPReq+0x112>
 81063d2:	e030      	b.n	8106436 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 81063d4:	7bbb      	ldrb	r3, [r7, #14]
 81063d6:	2b00      	cmp	r3, #0
 81063d8:	d00d      	beq.n	81063f6 <USBD_StdEPReq+0x108>
 81063da:	7bbb      	ldrb	r3, [r7, #14]
 81063dc:	2b80      	cmp	r3, #128	; 0x80
 81063de:	d00a      	beq.n	81063f6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 81063e0:	7bbb      	ldrb	r3, [r7, #14]
 81063e2:	4619      	mov	r1, r3
 81063e4:	6878      	ldr	r0, [r7, #4]
 81063e6:	f001 f9a3 	bl	8107730 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 81063ea:	2180      	movs	r1, #128	; 0x80
 81063ec:	6878      	ldr	r0, [r7, #4]
 81063ee:	f001 f99f 	bl	8107730 <USBD_LL_StallEP>
 81063f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 81063f4:	e025      	b.n	8106442 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 81063f6:	6839      	ldr	r1, [r7, #0]
 81063f8:	6878      	ldr	r0, [r7, #4]
 81063fa:	f000 fc33 	bl	8106c64 <USBD_CtlError>
              break;
 81063fe:	e020      	b.n	8106442 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8106400:	683b      	ldr	r3, [r7, #0]
 8106402:	885b      	ldrh	r3, [r3, #2]
 8106404:	2b00      	cmp	r3, #0
 8106406:	d11b      	bne.n	8106440 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8106408:	7bbb      	ldrb	r3, [r7, #14]
 810640a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810640e:	2b00      	cmp	r3, #0
 8106410:	d004      	beq.n	810641c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8106412:	7bbb      	ldrb	r3, [r7, #14]
 8106414:	4619      	mov	r1, r3
 8106416:	6878      	ldr	r0, [r7, #4]
 8106418:	f001 f9c0 	bl	810779c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 810641c:	6878      	ldr	r0, [r7, #4]
 810641e:	f000 fcec 	bl	8106dfa <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8106422:	687b      	ldr	r3, [r7, #4]
 8106424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8106428:	689b      	ldr	r3, [r3, #8]
 810642a:	6839      	ldr	r1, [r7, #0]
 810642c:	6878      	ldr	r0, [r7, #4]
 810642e:	4798      	blx	r3
 8106430:	4603      	mov	r3, r0
 8106432:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8106434:	e004      	b.n	8106440 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8106436:	6839      	ldr	r1, [r7, #0]
 8106438:	6878      	ldr	r0, [r7, #4]
 810643a:	f000 fc13 	bl	8106c64 <USBD_CtlError>
              break;
 810643e:	e000      	b.n	8106442 <USBD_StdEPReq+0x154>
              break;
 8106440:	bf00      	nop
          }
          break;
 8106442:	e0ab      	b.n	810659c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8106444:	687b      	ldr	r3, [r7, #4]
 8106446:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 810644a:	b2db      	uxtb	r3, r3
 810644c:	2b02      	cmp	r3, #2
 810644e:	d002      	beq.n	8106456 <USBD_StdEPReq+0x168>
 8106450:	2b03      	cmp	r3, #3
 8106452:	d032      	beq.n	81064ba <USBD_StdEPReq+0x1cc>
 8106454:	e097      	b.n	8106586 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8106456:	7bbb      	ldrb	r3, [r7, #14]
 8106458:	2b00      	cmp	r3, #0
 810645a:	d007      	beq.n	810646c <USBD_StdEPReq+0x17e>
 810645c:	7bbb      	ldrb	r3, [r7, #14]
 810645e:	2b80      	cmp	r3, #128	; 0x80
 8106460:	d004      	beq.n	810646c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8106462:	6839      	ldr	r1, [r7, #0]
 8106464:	6878      	ldr	r0, [r7, #4]
 8106466:	f000 fbfd 	bl	8106c64 <USBD_CtlError>
                break;
 810646a:	e091      	b.n	8106590 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 810646c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8106470:	2b00      	cmp	r3, #0
 8106472:	da0b      	bge.n	810648c <USBD_StdEPReq+0x19e>
 8106474:	7bbb      	ldrb	r3, [r7, #14]
 8106476:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 810647a:	4613      	mov	r3, r2
 810647c:	009b      	lsls	r3, r3, #2
 810647e:	4413      	add	r3, r2
 8106480:	009b      	lsls	r3, r3, #2
 8106482:	3310      	adds	r3, #16
 8106484:	687a      	ldr	r2, [r7, #4]
 8106486:	4413      	add	r3, r2
 8106488:	3304      	adds	r3, #4
 810648a:	e00b      	b.n	81064a4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 810648c:	7bbb      	ldrb	r3, [r7, #14]
 810648e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8106492:	4613      	mov	r3, r2
 8106494:	009b      	lsls	r3, r3, #2
 8106496:	4413      	add	r3, r2
 8106498:	009b      	lsls	r3, r3, #2
 810649a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 810649e:	687a      	ldr	r2, [r7, #4]
 81064a0:	4413      	add	r3, r2
 81064a2:	3304      	adds	r3, #4
 81064a4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 81064a6:	68bb      	ldr	r3, [r7, #8]
 81064a8:	2200      	movs	r2, #0
 81064aa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 81064ac:	68bb      	ldr	r3, [r7, #8]
 81064ae:	2202      	movs	r2, #2
 81064b0:	4619      	mov	r1, r3
 81064b2:	6878      	ldr	r0, [r7, #4]
 81064b4:	f000 fc47 	bl	8106d46 <USBD_CtlSendData>
              break;
 81064b8:	e06a      	b.n	8106590 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 81064ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 81064be:	2b00      	cmp	r3, #0
 81064c0:	da11      	bge.n	81064e6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 81064c2:	7bbb      	ldrb	r3, [r7, #14]
 81064c4:	f003 020f 	and.w	r2, r3, #15
 81064c8:	6879      	ldr	r1, [r7, #4]
 81064ca:	4613      	mov	r3, r2
 81064cc:	009b      	lsls	r3, r3, #2
 81064ce:	4413      	add	r3, r2
 81064d0:	009b      	lsls	r3, r3, #2
 81064d2:	440b      	add	r3, r1
 81064d4:	3324      	adds	r3, #36	; 0x24
 81064d6:	881b      	ldrh	r3, [r3, #0]
 81064d8:	2b00      	cmp	r3, #0
 81064da:	d117      	bne.n	810650c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 81064dc:	6839      	ldr	r1, [r7, #0]
 81064de:	6878      	ldr	r0, [r7, #4]
 81064e0:	f000 fbc0 	bl	8106c64 <USBD_CtlError>
                  break;
 81064e4:	e054      	b.n	8106590 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 81064e6:	7bbb      	ldrb	r3, [r7, #14]
 81064e8:	f003 020f 	and.w	r2, r3, #15
 81064ec:	6879      	ldr	r1, [r7, #4]
 81064ee:	4613      	mov	r3, r2
 81064f0:	009b      	lsls	r3, r3, #2
 81064f2:	4413      	add	r3, r2
 81064f4:	009b      	lsls	r3, r3, #2
 81064f6:	440b      	add	r3, r1
 81064f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 81064fc:	881b      	ldrh	r3, [r3, #0]
 81064fe:	2b00      	cmp	r3, #0
 8106500:	d104      	bne.n	810650c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8106502:	6839      	ldr	r1, [r7, #0]
 8106504:	6878      	ldr	r0, [r7, #4]
 8106506:	f000 fbad 	bl	8106c64 <USBD_CtlError>
                  break;
 810650a:	e041      	b.n	8106590 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 810650c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8106510:	2b00      	cmp	r3, #0
 8106512:	da0b      	bge.n	810652c <USBD_StdEPReq+0x23e>
 8106514:	7bbb      	ldrb	r3, [r7, #14]
 8106516:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 810651a:	4613      	mov	r3, r2
 810651c:	009b      	lsls	r3, r3, #2
 810651e:	4413      	add	r3, r2
 8106520:	009b      	lsls	r3, r3, #2
 8106522:	3310      	adds	r3, #16
 8106524:	687a      	ldr	r2, [r7, #4]
 8106526:	4413      	add	r3, r2
 8106528:	3304      	adds	r3, #4
 810652a:	e00b      	b.n	8106544 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 810652c:	7bbb      	ldrb	r3, [r7, #14]
 810652e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8106532:	4613      	mov	r3, r2
 8106534:	009b      	lsls	r3, r3, #2
 8106536:	4413      	add	r3, r2
 8106538:	009b      	lsls	r3, r3, #2
 810653a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 810653e:	687a      	ldr	r2, [r7, #4]
 8106540:	4413      	add	r3, r2
 8106542:	3304      	adds	r3, #4
 8106544:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8106546:	7bbb      	ldrb	r3, [r7, #14]
 8106548:	2b00      	cmp	r3, #0
 810654a:	d002      	beq.n	8106552 <USBD_StdEPReq+0x264>
 810654c:	7bbb      	ldrb	r3, [r7, #14]
 810654e:	2b80      	cmp	r3, #128	; 0x80
 8106550:	d103      	bne.n	810655a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8106552:	68bb      	ldr	r3, [r7, #8]
 8106554:	2200      	movs	r2, #0
 8106556:	601a      	str	r2, [r3, #0]
 8106558:	e00e      	b.n	8106578 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 810655a:	7bbb      	ldrb	r3, [r7, #14]
 810655c:	4619      	mov	r1, r3
 810655e:	6878      	ldr	r0, [r7, #4]
 8106560:	f001 f952 	bl	8107808 <USBD_LL_IsStallEP>
 8106564:	4603      	mov	r3, r0
 8106566:	2b00      	cmp	r3, #0
 8106568:	d003      	beq.n	8106572 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 810656a:	68bb      	ldr	r3, [r7, #8]
 810656c:	2201      	movs	r2, #1
 810656e:	601a      	str	r2, [r3, #0]
 8106570:	e002      	b.n	8106578 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8106572:	68bb      	ldr	r3, [r7, #8]
 8106574:	2200      	movs	r2, #0
 8106576:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8106578:	68bb      	ldr	r3, [r7, #8]
 810657a:	2202      	movs	r2, #2
 810657c:	4619      	mov	r1, r3
 810657e:	6878      	ldr	r0, [r7, #4]
 8106580:	f000 fbe1 	bl	8106d46 <USBD_CtlSendData>
              break;
 8106584:	e004      	b.n	8106590 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8106586:	6839      	ldr	r1, [r7, #0]
 8106588:	6878      	ldr	r0, [r7, #4]
 810658a:	f000 fb6b 	bl	8106c64 <USBD_CtlError>
              break;
 810658e:	bf00      	nop
          }
          break;
 8106590:	e004      	b.n	810659c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8106592:	6839      	ldr	r1, [r7, #0]
 8106594:	6878      	ldr	r0, [r7, #4]
 8106596:	f000 fb65 	bl	8106c64 <USBD_CtlError>
          break;
 810659a:	bf00      	nop
      }
      break;
 810659c:	e004      	b.n	81065a8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 810659e:	6839      	ldr	r1, [r7, #0]
 81065a0:	6878      	ldr	r0, [r7, #4]
 81065a2:	f000 fb5f 	bl	8106c64 <USBD_CtlError>
      break;
 81065a6:	bf00      	nop
  }

  return ret;
 81065a8:	7bfb      	ldrb	r3, [r7, #15]
}
 81065aa:	4618      	mov	r0, r3
 81065ac:	3710      	adds	r7, #16
 81065ae:	46bd      	mov	sp, r7
 81065b0:	bd80      	pop	{r7, pc}
	...

081065b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 81065b4:	b580      	push	{r7, lr}
 81065b6:	b084      	sub	sp, #16
 81065b8:	af00      	add	r7, sp, #0
 81065ba:	6078      	str	r0, [r7, #4]
 81065bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 81065be:	2300      	movs	r3, #0
 81065c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 81065c2:	2300      	movs	r3, #0
 81065c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 81065c6:	2300      	movs	r3, #0
 81065c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 81065ca:	683b      	ldr	r3, [r7, #0]
 81065cc:	885b      	ldrh	r3, [r3, #2]
 81065ce:	0a1b      	lsrs	r3, r3, #8
 81065d0:	b29b      	uxth	r3, r3
 81065d2:	3b01      	subs	r3, #1
 81065d4:	2b0e      	cmp	r3, #14
 81065d6:	f200 8152 	bhi.w	810687e <USBD_GetDescriptor+0x2ca>
 81065da:	a201      	add	r2, pc, #4	; (adr r2, 81065e0 <USBD_GetDescriptor+0x2c>)
 81065dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81065e0:	08106651 	.word	0x08106651
 81065e4:	08106669 	.word	0x08106669
 81065e8:	081066a9 	.word	0x081066a9
 81065ec:	0810687f 	.word	0x0810687f
 81065f0:	0810687f 	.word	0x0810687f
 81065f4:	0810681f 	.word	0x0810681f
 81065f8:	0810684b 	.word	0x0810684b
 81065fc:	0810687f 	.word	0x0810687f
 8106600:	0810687f 	.word	0x0810687f
 8106604:	0810687f 	.word	0x0810687f
 8106608:	0810687f 	.word	0x0810687f
 810660c:	0810687f 	.word	0x0810687f
 8106610:	0810687f 	.word	0x0810687f
 8106614:	0810687f 	.word	0x0810687f
 8106618:	0810661d 	.word	0x0810661d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 810661c:	687b      	ldr	r3, [r7, #4]
 810661e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8106622:	69db      	ldr	r3, [r3, #28]
 8106624:	2b00      	cmp	r3, #0
 8106626:	d00b      	beq.n	8106640 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8106628:	687b      	ldr	r3, [r7, #4]
 810662a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 810662e:	69db      	ldr	r3, [r3, #28]
 8106630:	687a      	ldr	r2, [r7, #4]
 8106632:	7c12      	ldrb	r2, [r2, #16]
 8106634:	f107 0108 	add.w	r1, r7, #8
 8106638:	4610      	mov	r0, r2
 810663a:	4798      	blx	r3
 810663c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 810663e:	e126      	b.n	810688e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8106640:	6839      	ldr	r1, [r7, #0]
 8106642:	6878      	ldr	r0, [r7, #4]
 8106644:	f000 fb0e 	bl	8106c64 <USBD_CtlError>
        err++;
 8106648:	7afb      	ldrb	r3, [r7, #11]
 810664a:	3301      	adds	r3, #1
 810664c:	72fb      	strb	r3, [r7, #11]
      break;
 810664e:	e11e      	b.n	810688e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8106650:	687b      	ldr	r3, [r7, #4]
 8106652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8106656:	681b      	ldr	r3, [r3, #0]
 8106658:	687a      	ldr	r2, [r7, #4]
 810665a:	7c12      	ldrb	r2, [r2, #16]
 810665c:	f107 0108 	add.w	r1, r7, #8
 8106660:	4610      	mov	r0, r2
 8106662:	4798      	blx	r3
 8106664:	60f8      	str	r0, [r7, #12]
      break;
 8106666:	e112      	b.n	810688e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8106668:	687b      	ldr	r3, [r7, #4]
 810666a:	7c1b      	ldrb	r3, [r3, #16]
 810666c:	2b00      	cmp	r3, #0
 810666e:	d10d      	bne.n	810668c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8106670:	687b      	ldr	r3, [r7, #4]
 8106672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8106676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106678:	f107 0208 	add.w	r2, r7, #8
 810667c:	4610      	mov	r0, r2
 810667e:	4798      	blx	r3
 8106680:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8106682:	68fb      	ldr	r3, [r7, #12]
 8106684:	3301      	adds	r3, #1
 8106686:	2202      	movs	r2, #2
 8106688:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 810668a:	e100      	b.n	810688e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 810668c:	687b      	ldr	r3, [r7, #4]
 810668e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8106692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106694:	f107 0208 	add.w	r2, r7, #8
 8106698:	4610      	mov	r0, r2
 810669a:	4798      	blx	r3
 810669c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 810669e:	68fb      	ldr	r3, [r7, #12]
 81066a0:	3301      	adds	r3, #1
 81066a2:	2202      	movs	r2, #2
 81066a4:	701a      	strb	r2, [r3, #0]
      break;
 81066a6:	e0f2      	b.n	810688e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 81066a8:	683b      	ldr	r3, [r7, #0]
 81066aa:	885b      	ldrh	r3, [r3, #2]
 81066ac:	b2db      	uxtb	r3, r3
 81066ae:	2b05      	cmp	r3, #5
 81066b0:	f200 80ac 	bhi.w	810680c <USBD_GetDescriptor+0x258>
 81066b4:	a201      	add	r2, pc, #4	; (adr r2, 81066bc <USBD_GetDescriptor+0x108>)
 81066b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81066ba:	bf00      	nop
 81066bc:	081066d5 	.word	0x081066d5
 81066c0:	08106709 	.word	0x08106709
 81066c4:	0810673d 	.word	0x0810673d
 81066c8:	08106771 	.word	0x08106771
 81066cc:	081067a5 	.word	0x081067a5
 81066d0:	081067d9 	.word	0x081067d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 81066d4:	687b      	ldr	r3, [r7, #4]
 81066d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 81066da:	685b      	ldr	r3, [r3, #4]
 81066dc:	2b00      	cmp	r3, #0
 81066de:	d00b      	beq.n	81066f8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 81066e0:	687b      	ldr	r3, [r7, #4]
 81066e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 81066e6:	685b      	ldr	r3, [r3, #4]
 81066e8:	687a      	ldr	r2, [r7, #4]
 81066ea:	7c12      	ldrb	r2, [r2, #16]
 81066ec:	f107 0108 	add.w	r1, r7, #8
 81066f0:	4610      	mov	r0, r2
 81066f2:	4798      	blx	r3
 81066f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 81066f6:	e091      	b.n	810681c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 81066f8:	6839      	ldr	r1, [r7, #0]
 81066fa:	6878      	ldr	r0, [r7, #4]
 81066fc:	f000 fab2 	bl	8106c64 <USBD_CtlError>
            err++;
 8106700:	7afb      	ldrb	r3, [r7, #11]
 8106702:	3301      	adds	r3, #1
 8106704:	72fb      	strb	r3, [r7, #11]
          break;
 8106706:	e089      	b.n	810681c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8106708:	687b      	ldr	r3, [r7, #4]
 810670a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 810670e:	689b      	ldr	r3, [r3, #8]
 8106710:	2b00      	cmp	r3, #0
 8106712:	d00b      	beq.n	810672c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8106714:	687b      	ldr	r3, [r7, #4]
 8106716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 810671a:	689b      	ldr	r3, [r3, #8]
 810671c:	687a      	ldr	r2, [r7, #4]
 810671e:	7c12      	ldrb	r2, [r2, #16]
 8106720:	f107 0108 	add.w	r1, r7, #8
 8106724:	4610      	mov	r0, r2
 8106726:	4798      	blx	r3
 8106728:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 810672a:	e077      	b.n	810681c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 810672c:	6839      	ldr	r1, [r7, #0]
 810672e:	6878      	ldr	r0, [r7, #4]
 8106730:	f000 fa98 	bl	8106c64 <USBD_CtlError>
            err++;
 8106734:	7afb      	ldrb	r3, [r7, #11]
 8106736:	3301      	adds	r3, #1
 8106738:	72fb      	strb	r3, [r7, #11]
          break;
 810673a:	e06f      	b.n	810681c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 810673c:	687b      	ldr	r3, [r7, #4]
 810673e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8106742:	68db      	ldr	r3, [r3, #12]
 8106744:	2b00      	cmp	r3, #0
 8106746:	d00b      	beq.n	8106760 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8106748:	687b      	ldr	r3, [r7, #4]
 810674a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 810674e:	68db      	ldr	r3, [r3, #12]
 8106750:	687a      	ldr	r2, [r7, #4]
 8106752:	7c12      	ldrb	r2, [r2, #16]
 8106754:	f107 0108 	add.w	r1, r7, #8
 8106758:	4610      	mov	r0, r2
 810675a:	4798      	blx	r3
 810675c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 810675e:	e05d      	b.n	810681c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8106760:	6839      	ldr	r1, [r7, #0]
 8106762:	6878      	ldr	r0, [r7, #4]
 8106764:	f000 fa7e 	bl	8106c64 <USBD_CtlError>
            err++;
 8106768:	7afb      	ldrb	r3, [r7, #11]
 810676a:	3301      	adds	r3, #1
 810676c:	72fb      	strb	r3, [r7, #11]
          break;
 810676e:	e055      	b.n	810681c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8106770:	687b      	ldr	r3, [r7, #4]
 8106772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8106776:	691b      	ldr	r3, [r3, #16]
 8106778:	2b00      	cmp	r3, #0
 810677a:	d00b      	beq.n	8106794 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 810677c:	687b      	ldr	r3, [r7, #4]
 810677e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8106782:	691b      	ldr	r3, [r3, #16]
 8106784:	687a      	ldr	r2, [r7, #4]
 8106786:	7c12      	ldrb	r2, [r2, #16]
 8106788:	f107 0108 	add.w	r1, r7, #8
 810678c:	4610      	mov	r0, r2
 810678e:	4798      	blx	r3
 8106790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8106792:	e043      	b.n	810681c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8106794:	6839      	ldr	r1, [r7, #0]
 8106796:	6878      	ldr	r0, [r7, #4]
 8106798:	f000 fa64 	bl	8106c64 <USBD_CtlError>
            err++;
 810679c:	7afb      	ldrb	r3, [r7, #11]
 810679e:	3301      	adds	r3, #1
 81067a0:	72fb      	strb	r3, [r7, #11]
          break;
 81067a2:	e03b      	b.n	810681c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 81067a4:	687b      	ldr	r3, [r7, #4]
 81067a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 81067aa:	695b      	ldr	r3, [r3, #20]
 81067ac:	2b00      	cmp	r3, #0
 81067ae:	d00b      	beq.n	81067c8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 81067b0:	687b      	ldr	r3, [r7, #4]
 81067b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 81067b6:	695b      	ldr	r3, [r3, #20]
 81067b8:	687a      	ldr	r2, [r7, #4]
 81067ba:	7c12      	ldrb	r2, [r2, #16]
 81067bc:	f107 0108 	add.w	r1, r7, #8
 81067c0:	4610      	mov	r0, r2
 81067c2:	4798      	blx	r3
 81067c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 81067c6:	e029      	b.n	810681c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 81067c8:	6839      	ldr	r1, [r7, #0]
 81067ca:	6878      	ldr	r0, [r7, #4]
 81067cc:	f000 fa4a 	bl	8106c64 <USBD_CtlError>
            err++;
 81067d0:	7afb      	ldrb	r3, [r7, #11]
 81067d2:	3301      	adds	r3, #1
 81067d4:	72fb      	strb	r3, [r7, #11]
          break;
 81067d6:	e021      	b.n	810681c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 81067d8:	687b      	ldr	r3, [r7, #4]
 81067da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 81067de:	699b      	ldr	r3, [r3, #24]
 81067e0:	2b00      	cmp	r3, #0
 81067e2:	d00b      	beq.n	81067fc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 81067e4:	687b      	ldr	r3, [r7, #4]
 81067e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 81067ea:	699b      	ldr	r3, [r3, #24]
 81067ec:	687a      	ldr	r2, [r7, #4]
 81067ee:	7c12      	ldrb	r2, [r2, #16]
 81067f0:	f107 0108 	add.w	r1, r7, #8
 81067f4:	4610      	mov	r0, r2
 81067f6:	4798      	blx	r3
 81067f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 81067fa:	e00f      	b.n	810681c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 81067fc:	6839      	ldr	r1, [r7, #0]
 81067fe:	6878      	ldr	r0, [r7, #4]
 8106800:	f000 fa30 	bl	8106c64 <USBD_CtlError>
            err++;
 8106804:	7afb      	ldrb	r3, [r7, #11]
 8106806:	3301      	adds	r3, #1
 8106808:	72fb      	strb	r3, [r7, #11]
          break;
 810680a:	e007      	b.n	810681c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 810680c:	6839      	ldr	r1, [r7, #0]
 810680e:	6878      	ldr	r0, [r7, #4]
 8106810:	f000 fa28 	bl	8106c64 <USBD_CtlError>
          err++;
 8106814:	7afb      	ldrb	r3, [r7, #11]
 8106816:	3301      	adds	r3, #1
 8106818:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 810681a:	bf00      	nop
      }
      break;
 810681c:	e037      	b.n	810688e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 810681e:	687b      	ldr	r3, [r7, #4]
 8106820:	7c1b      	ldrb	r3, [r3, #16]
 8106822:	2b00      	cmp	r3, #0
 8106824:	d109      	bne.n	810683a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8106826:	687b      	ldr	r3, [r7, #4]
 8106828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 810682c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810682e:	f107 0208 	add.w	r2, r7, #8
 8106832:	4610      	mov	r0, r2
 8106834:	4798      	blx	r3
 8106836:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8106838:	e029      	b.n	810688e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 810683a:	6839      	ldr	r1, [r7, #0]
 810683c:	6878      	ldr	r0, [r7, #4]
 810683e:	f000 fa11 	bl	8106c64 <USBD_CtlError>
        err++;
 8106842:	7afb      	ldrb	r3, [r7, #11]
 8106844:	3301      	adds	r3, #1
 8106846:	72fb      	strb	r3, [r7, #11]
      break;
 8106848:	e021      	b.n	810688e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 810684a:	687b      	ldr	r3, [r7, #4]
 810684c:	7c1b      	ldrb	r3, [r3, #16]
 810684e:	2b00      	cmp	r3, #0
 8106850:	d10d      	bne.n	810686e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8106852:	687b      	ldr	r3, [r7, #4]
 8106854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8106858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810685a:	f107 0208 	add.w	r2, r7, #8
 810685e:	4610      	mov	r0, r2
 8106860:	4798      	blx	r3
 8106862:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8106864:	68fb      	ldr	r3, [r7, #12]
 8106866:	3301      	adds	r3, #1
 8106868:	2207      	movs	r2, #7
 810686a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 810686c:	e00f      	b.n	810688e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 810686e:	6839      	ldr	r1, [r7, #0]
 8106870:	6878      	ldr	r0, [r7, #4]
 8106872:	f000 f9f7 	bl	8106c64 <USBD_CtlError>
        err++;
 8106876:	7afb      	ldrb	r3, [r7, #11]
 8106878:	3301      	adds	r3, #1
 810687a:	72fb      	strb	r3, [r7, #11]
      break;
 810687c:	e007      	b.n	810688e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 810687e:	6839      	ldr	r1, [r7, #0]
 8106880:	6878      	ldr	r0, [r7, #4]
 8106882:	f000 f9ef 	bl	8106c64 <USBD_CtlError>
      err++;
 8106886:	7afb      	ldrb	r3, [r7, #11]
 8106888:	3301      	adds	r3, #1
 810688a:	72fb      	strb	r3, [r7, #11]
      break;
 810688c:	bf00      	nop
  }

  if (err != 0U)
 810688e:	7afb      	ldrb	r3, [r7, #11]
 8106890:	2b00      	cmp	r3, #0
 8106892:	d11e      	bne.n	81068d2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8106894:	683b      	ldr	r3, [r7, #0]
 8106896:	88db      	ldrh	r3, [r3, #6]
 8106898:	2b00      	cmp	r3, #0
 810689a:	d016      	beq.n	81068ca <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 810689c:	893b      	ldrh	r3, [r7, #8]
 810689e:	2b00      	cmp	r3, #0
 81068a0:	d00e      	beq.n	81068c0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 81068a2:	683b      	ldr	r3, [r7, #0]
 81068a4:	88da      	ldrh	r2, [r3, #6]
 81068a6:	893b      	ldrh	r3, [r7, #8]
 81068a8:	4293      	cmp	r3, r2
 81068aa:	bf28      	it	cs
 81068ac:	4613      	movcs	r3, r2
 81068ae:	b29b      	uxth	r3, r3
 81068b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 81068b2:	893b      	ldrh	r3, [r7, #8]
 81068b4:	461a      	mov	r2, r3
 81068b6:	68f9      	ldr	r1, [r7, #12]
 81068b8:	6878      	ldr	r0, [r7, #4]
 81068ba:	f000 fa44 	bl	8106d46 <USBD_CtlSendData>
 81068be:	e009      	b.n	81068d4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 81068c0:	6839      	ldr	r1, [r7, #0]
 81068c2:	6878      	ldr	r0, [r7, #4]
 81068c4:	f000 f9ce 	bl	8106c64 <USBD_CtlError>
 81068c8:	e004      	b.n	81068d4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 81068ca:	6878      	ldr	r0, [r7, #4]
 81068cc:	f000 fa95 	bl	8106dfa <USBD_CtlSendStatus>
 81068d0:	e000      	b.n	81068d4 <USBD_GetDescriptor+0x320>
    return;
 81068d2:	bf00      	nop
  }
}
 81068d4:	3710      	adds	r7, #16
 81068d6:	46bd      	mov	sp, r7
 81068d8:	bd80      	pop	{r7, pc}
 81068da:	bf00      	nop

081068dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 81068dc:	b580      	push	{r7, lr}
 81068de:	b084      	sub	sp, #16
 81068e0:	af00      	add	r7, sp, #0
 81068e2:	6078      	str	r0, [r7, #4]
 81068e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 81068e6:	683b      	ldr	r3, [r7, #0]
 81068e8:	889b      	ldrh	r3, [r3, #4]
 81068ea:	2b00      	cmp	r3, #0
 81068ec:	d131      	bne.n	8106952 <USBD_SetAddress+0x76>
 81068ee:	683b      	ldr	r3, [r7, #0]
 81068f0:	88db      	ldrh	r3, [r3, #6]
 81068f2:	2b00      	cmp	r3, #0
 81068f4:	d12d      	bne.n	8106952 <USBD_SetAddress+0x76>
 81068f6:	683b      	ldr	r3, [r7, #0]
 81068f8:	885b      	ldrh	r3, [r3, #2]
 81068fa:	2b7f      	cmp	r3, #127	; 0x7f
 81068fc:	d829      	bhi.n	8106952 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 81068fe:	683b      	ldr	r3, [r7, #0]
 8106900:	885b      	ldrh	r3, [r3, #2]
 8106902:	b2db      	uxtb	r3, r3
 8106904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106908:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810690a:	687b      	ldr	r3, [r7, #4]
 810690c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8106910:	b2db      	uxtb	r3, r3
 8106912:	2b03      	cmp	r3, #3
 8106914:	d104      	bne.n	8106920 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8106916:	6839      	ldr	r1, [r7, #0]
 8106918:	6878      	ldr	r0, [r7, #4]
 810691a:	f000 f9a3 	bl	8106c64 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810691e:	e01d      	b.n	810695c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8106920:	687b      	ldr	r3, [r7, #4]
 8106922:	7bfa      	ldrb	r2, [r7, #15]
 8106924:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8106928:	7bfb      	ldrb	r3, [r7, #15]
 810692a:	4619      	mov	r1, r3
 810692c:	6878      	ldr	r0, [r7, #4]
 810692e:	f000 ff97 	bl	8107860 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8106932:	6878      	ldr	r0, [r7, #4]
 8106934:	f000 fa61 	bl	8106dfa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8106938:	7bfb      	ldrb	r3, [r7, #15]
 810693a:	2b00      	cmp	r3, #0
 810693c:	d004      	beq.n	8106948 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 810693e:	687b      	ldr	r3, [r7, #4]
 8106940:	2202      	movs	r2, #2
 8106942:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8106946:	e009      	b.n	810695c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8106948:	687b      	ldr	r3, [r7, #4]
 810694a:	2201      	movs	r2, #1
 810694c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8106950:	e004      	b.n	810695c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8106952:	6839      	ldr	r1, [r7, #0]
 8106954:	6878      	ldr	r0, [r7, #4]
 8106956:	f000 f985 	bl	8106c64 <USBD_CtlError>
  }
}
 810695a:	bf00      	nop
 810695c:	bf00      	nop
 810695e:	3710      	adds	r7, #16
 8106960:	46bd      	mov	sp, r7
 8106962:	bd80      	pop	{r7, pc}

08106964 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8106964:	b580      	push	{r7, lr}
 8106966:	b084      	sub	sp, #16
 8106968:	af00      	add	r7, sp, #0
 810696a:	6078      	str	r0, [r7, #4]
 810696c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 810696e:	2300      	movs	r3, #0
 8106970:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8106972:	683b      	ldr	r3, [r7, #0]
 8106974:	885b      	ldrh	r3, [r3, #2]
 8106976:	b2da      	uxtb	r2, r3
 8106978:	4b4c      	ldr	r3, [pc, #304]	; (8106aac <USBD_SetConfig+0x148>)
 810697a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 810697c:	4b4b      	ldr	r3, [pc, #300]	; (8106aac <USBD_SetConfig+0x148>)
 810697e:	781b      	ldrb	r3, [r3, #0]
 8106980:	2b01      	cmp	r3, #1
 8106982:	d905      	bls.n	8106990 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8106984:	6839      	ldr	r1, [r7, #0]
 8106986:	6878      	ldr	r0, [r7, #4]
 8106988:	f000 f96c 	bl	8106c64 <USBD_CtlError>
    return USBD_FAIL;
 810698c:	2303      	movs	r3, #3
 810698e:	e088      	b.n	8106aa2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8106990:	687b      	ldr	r3, [r7, #4]
 8106992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8106996:	b2db      	uxtb	r3, r3
 8106998:	2b02      	cmp	r3, #2
 810699a:	d002      	beq.n	81069a2 <USBD_SetConfig+0x3e>
 810699c:	2b03      	cmp	r3, #3
 810699e:	d025      	beq.n	81069ec <USBD_SetConfig+0x88>
 81069a0:	e071      	b.n	8106a86 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 81069a2:	4b42      	ldr	r3, [pc, #264]	; (8106aac <USBD_SetConfig+0x148>)
 81069a4:	781b      	ldrb	r3, [r3, #0]
 81069a6:	2b00      	cmp	r3, #0
 81069a8:	d01c      	beq.n	81069e4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 81069aa:	4b40      	ldr	r3, [pc, #256]	; (8106aac <USBD_SetConfig+0x148>)
 81069ac:	781b      	ldrb	r3, [r3, #0]
 81069ae:	461a      	mov	r2, r3
 81069b0:	687b      	ldr	r3, [r7, #4]
 81069b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 81069b4:	4b3d      	ldr	r3, [pc, #244]	; (8106aac <USBD_SetConfig+0x148>)
 81069b6:	781b      	ldrb	r3, [r3, #0]
 81069b8:	4619      	mov	r1, r3
 81069ba:	6878      	ldr	r0, [r7, #4]
 81069bc:	f7ff f91e 	bl	8105bfc <USBD_SetClassConfig>
 81069c0:	4603      	mov	r3, r0
 81069c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 81069c4:	7bfb      	ldrb	r3, [r7, #15]
 81069c6:	2b00      	cmp	r3, #0
 81069c8:	d004      	beq.n	81069d4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 81069ca:	6839      	ldr	r1, [r7, #0]
 81069cc:	6878      	ldr	r0, [r7, #4]
 81069ce:	f000 f949 	bl	8106c64 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 81069d2:	e065      	b.n	8106aa0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 81069d4:	6878      	ldr	r0, [r7, #4]
 81069d6:	f000 fa10 	bl	8106dfa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 81069da:	687b      	ldr	r3, [r7, #4]
 81069dc:	2203      	movs	r2, #3
 81069de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 81069e2:	e05d      	b.n	8106aa0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 81069e4:	6878      	ldr	r0, [r7, #4]
 81069e6:	f000 fa08 	bl	8106dfa <USBD_CtlSendStatus>
      break;
 81069ea:	e059      	b.n	8106aa0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 81069ec:	4b2f      	ldr	r3, [pc, #188]	; (8106aac <USBD_SetConfig+0x148>)
 81069ee:	781b      	ldrb	r3, [r3, #0]
 81069f0:	2b00      	cmp	r3, #0
 81069f2:	d112      	bne.n	8106a1a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 81069f4:	687b      	ldr	r3, [r7, #4]
 81069f6:	2202      	movs	r2, #2
 81069f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 81069fc:	4b2b      	ldr	r3, [pc, #172]	; (8106aac <USBD_SetConfig+0x148>)
 81069fe:	781b      	ldrb	r3, [r3, #0]
 8106a00:	461a      	mov	r2, r3
 8106a02:	687b      	ldr	r3, [r7, #4]
 8106a04:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8106a06:	4b29      	ldr	r3, [pc, #164]	; (8106aac <USBD_SetConfig+0x148>)
 8106a08:	781b      	ldrb	r3, [r3, #0]
 8106a0a:	4619      	mov	r1, r3
 8106a0c:	6878      	ldr	r0, [r7, #4]
 8106a0e:	f7ff f911 	bl	8105c34 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8106a12:	6878      	ldr	r0, [r7, #4]
 8106a14:	f000 f9f1 	bl	8106dfa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8106a18:	e042      	b.n	8106aa0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8106a1a:	4b24      	ldr	r3, [pc, #144]	; (8106aac <USBD_SetConfig+0x148>)
 8106a1c:	781b      	ldrb	r3, [r3, #0]
 8106a1e:	461a      	mov	r2, r3
 8106a20:	687b      	ldr	r3, [r7, #4]
 8106a22:	685b      	ldr	r3, [r3, #4]
 8106a24:	429a      	cmp	r2, r3
 8106a26:	d02a      	beq.n	8106a7e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8106a28:	687b      	ldr	r3, [r7, #4]
 8106a2a:	685b      	ldr	r3, [r3, #4]
 8106a2c:	b2db      	uxtb	r3, r3
 8106a2e:	4619      	mov	r1, r3
 8106a30:	6878      	ldr	r0, [r7, #4]
 8106a32:	f7ff f8ff 	bl	8105c34 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8106a36:	4b1d      	ldr	r3, [pc, #116]	; (8106aac <USBD_SetConfig+0x148>)
 8106a38:	781b      	ldrb	r3, [r3, #0]
 8106a3a:	461a      	mov	r2, r3
 8106a3c:	687b      	ldr	r3, [r7, #4]
 8106a3e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8106a40:	4b1a      	ldr	r3, [pc, #104]	; (8106aac <USBD_SetConfig+0x148>)
 8106a42:	781b      	ldrb	r3, [r3, #0]
 8106a44:	4619      	mov	r1, r3
 8106a46:	6878      	ldr	r0, [r7, #4]
 8106a48:	f7ff f8d8 	bl	8105bfc <USBD_SetClassConfig>
 8106a4c:	4603      	mov	r3, r0
 8106a4e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8106a50:	7bfb      	ldrb	r3, [r7, #15]
 8106a52:	2b00      	cmp	r3, #0
 8106a54:	d00f      	beq.n	8106a76 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8106a56:	6839      	ldr	r1, [r7, #0]
 8106a58:	6878      	ldr	r0, [r7, #4]
 8106a5a:	f000 f903 	bl	8106c64 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8106a5e:	687b      	ldr	r3, [r7, #4]
 8106a60:	685b      	ldr	r3, [r3, #4]
 8106a62:	b2db      	uxtb	r3, r3
 8106a64:	4619      	mov	r1, r3
 8106a66:	6878      	ldr	r0, [r7, #4]
 8106a68:	f7ff f8e4 	bl	8105c34 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8106a6c:	687b      	ldr	r3, [r7, #4]
 8106a6e:	2202      	movs	r2, #2
 8106a70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8106a74:	e014      	b.n	8106aa0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8106a76:	6878      	ldr	r0, [r7, #4]
 8106a78:	f000 f9bf 	bl	8106dfa <USBD_CtlSendStatus>
      break;
 8106a7c:	e010      	b.n	8106aa0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8106a7e:	6878      	ldr	r0, [r7, #4]
 8106a80:	f000 f9bb 	bl	8106dfa <USBD_CtlSendStatus>
      break;
 8106a84:	e00c      	b.n	8106aa0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8106a86:	6839      	ldr	r1, [r7, #0]
 8106a88:	6878      	ldr	r0, [r7, #4]
 8106a8a:	f000 f8eb 	bl	8106c64 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8106a8e:	4b07      	ldr	r3, [pc, #28]	; (8106aac <USBD_SetConfig+0x148>)
 8106a90:	781b      	ldrb	r3, [r3, #0]
 8106a92:	4619      	mov	r1, r3
 8106a94:	6878      	ldr	r0, [r7, #4]
 8106a96:	f7ff f8cd 	bl	8105c34 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8106a9a:	2303      	movs	r3, #3
 8106a9c:	73fb      	strb	r3, [r7, #15]
      break;
 8106a9e:	bf00      	nop
  }

  return ret;
 8106aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8106aa2:	4618      	mov	r0, r3
 8106aa4:	3710      	adds	r7, #16
 8106aa6:	46bd      	mov	sp, r7
 8106aa8:	bd80      	pop	{r7, pc}
 8106aaa:	bf00      	nop
 8106aac:	200001d0 	.word	0x200001d0

08106ab0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8106ab0:	b580      	push	{r7, lr}
 8106ab2:	b082      	sub	sp, #8
 8106ab4:	af00      	add	r7, sp, #0
 8106ab6:	6078      	str	r0, [r7, #4]
 8106ab8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8106aba:	683b      	ldr	r3, [r7, #0]
 8106abc:	88db      	ldrh	r3, [r3, #6]
 8106abe:	2b01      	cmp	r3, #1
 8106ac0:	d004      	beq.n	8106acc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8106ac2:	6839      	ldr	r1, [r7, #0]
 8106ac4:	6878      	ldr	r0, [r7, #4]
 8106ac6:	f000 f8cd 	bl	8106c64 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8106aca:	e023      	b.n	8106b14 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8106acc:	687b      	ldr	r3, [r7, #4]
 8106ace:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8106ad2:	b2db      	uxtb	r3, r3
 8106ad4:	2b02      	cmp	r3, #2
 8106ad6:	dc02      	bgt.n	8106ade <USBD_GetConfig+0x2e>
 8106ad8:	2b00      	cmp	r3, #0
 8106ada:	dc03      	bgt.n	8106ae4 <USBD_GetConfig+0x34>
 8106adc:	e015      	b.n	8106b0a <USBD_GetConfig+0x5a>
 8106ade:	2b03      	cmp	r3, #3
 8106ae0:	d00b      	beq.n	8106afa <USBD_GetConfig+0x4a>
 8106ae2:	e012      	b.n	8106b0a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8106ae4:	687b      	ldr	r3, [r7, #4]
 8106ae6:	2200      	movs	r2, #0
 8106ae8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8106aea:	687b      	ldr	r3, [r7, #4]
 8106aec:	3308      	adds	r3, #8
 8106aee:	2201      	movs	r2, #1
 8106af0:	4619      	mov	r1, r3
 8106af2:	6878      	ldr	r0, [r7, #4]
 8106af4:	f000 f927 	bl	8106d46 <USBD_CtlSendData>
        break;
 8106af8:	e00c      	b.n	8106b14 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8106afa:	687b      	ldr	r3, [r7, #4]
 8106afc:	3304      	adds	r3, #4
 8106afe:	2201      	movs	r2, #1
 8106b00:	4619      	mov	r1, r3
 8106b02:	6878      	ldr	r0, [r7, #4]
 8106b04:	f000 f91f 	bl	8106d46 <USBD_CtlSendData>
        break;
 8106b08:	e004      	b.n	8106b14 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8106b0a:	6839      	ldr	r1, [r7, #0]
 8106b0c:	6878      	ldr	r0, [r7, #4]
 8106b0e:	f000 f8a9 	bl	8106c64 <USBD_CtlError>
        break;
 8106b12:	bf00      	nop
}
 8106b14:	bf00      	nop
 8106b16:	3708      	adds	r7, #8
 8106b18:	46bd      	mov	sp, r7
 8106b1a:	bd80      	pop	{r7, pc}

08106b1c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8106b1c:	b580      	push	{r7, lr}
 8106b1e:	b082      	sub	sp, #8
 8106b20:	af00      	add	r7, sp, #0
 8106b22:	6078      	str	r0, [r7, #4]
 8106b24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8106b26:	687b      	ldr	r3, [r7, #4]
 8106b28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8106b2c:	b2db      	uxtb	r3, r3
 8106b2e:	3b01      	subs	r3, #1
 8106b30:	2b02      	cmp	r3, #2
 8106b32:	d81e      	bhi.n	8106b72 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8106b34:	683b      	ldr	r3, [r7, #0]
 8106b36:	88db      	ldrh	r3, [r3, #6]
 8106b38:	2b02      	cmp	r3, #2
 8106b3a:	d004      	beq.n	8106b46 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8106b3c:	6839      	ldr	r1, [r7, #0]
 8106b3e:	6878      	ldr	r0, [r7, #4]
 8106b40:	f000 f890 	bl	8106c64 <USBD_CtlError>
        break;
 8106b44:	e01a      	b.n	8106b7c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8106b46:	687b      	ldr	r3, [r7, #4]
 8106b48:	2201      	movs	r2, #1
 8106b4a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8106b4c:	687b      	ldr	r3, [r7, #4]
 8106b4e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8106b52:	2b00      	cmp	r3, #0
 8106b54:	d005      	beq.n	8106b62 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8106b56:	687b      	ldr	r3, [r7, #4]
 8106b58:	68db      	ldr	r3, [r3, #12]
 8106b5a:	f043 0202 	orr.w	r2, r3, #2
 8106b5e:	687b      	ldr	r3, [r7, #4]
 8106b60:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8106b62:	687b      	ldr	r3, [r7, #4]
 8106b64:	330c      	adds	r3, #12
 8106b66:	2202      	movs	r2, #2
 8106b68:	4619      	mov	r1, r3
 8106b6a:	6878      	ldr	r0, [r7, #4]
 8106b6c:	f000 f8eb 	bl	8106d46 <USBD_CtlSendData>
      break;
 8106b70:	e004      	b.n	8106b7c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8106b72:	6839      	ldr	r1, [r7, #0]
 8106b74:	6878      	ldr	r0, [r7, #4]
 8106b76:	f000 f875 	bl	8106c64 <USBD_CtlError>
      break;
 8106b7a:	bf00      	nop
  }
}
 8106b7c:	bf00      	nop
 8106b7e:	3708      	adds	r7, #8
 8106b80:	46bd      	mov	sp, r7
 8106b82:	bd80      	pop	{r7, pc}

08106b84 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8106b84:	b580      	push	{r7, lr}
 8106b86:	b082      	sub	sp, #8
 8106b88:	af00      	add	r7, sp, #0
 8106b8a:	6078      	str	r0, [r7, #4]
 8106b8c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8106b8e:	683b      	ldr	r3, [r7, #0]
 8106b90:	885b      	ldrh	r3, [r3, #2]
 8106b92:	2b01      	cmp	r3, #1
 8106b94:	d106      	bne.n	8106ba4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8106b96:	687b      	ldr	r3, [r7, #4]
 8106b98:	2201      	movs	r2, #1
 8106b9a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8106b9e:	6878      	ldr	r0, [r7, #4]
 8106ba0:	f000 f92b 	bl	8106dfa <USBD_CtlSendStatus>
  }
}
 8106ba4:	bf00      	nop
 8106ba6:	3708      	adds	r7, #8
 8106ba8:	46bd      	mov	sp, r7
 8106baa:	bd80      	pop	{r7, pc}

08106bac <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8106bac:	b580      	push	{r7, lr}
 8106bae:	b082      	sub	sp, #8
 8106bb0:	af00      	add	r7, sp, #0
 8106bb2:	6078      	str	r0, [r7, #4]
 8106bb4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8106bb6:	687b      	ldr	r3, [r7, #4]
 8106bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8106bbc:	b2db      	uxtb	r3, r3
 8106bbe:	3b01      	subs	r3, #1
 8106bc0:	2b02      	cmp	r3, #2
 8106bc2:	d80b      	bhi.n	8106bdc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8106bc4:	683b      	ldr	r3, [r7, #0]
 8106bc6:	885b      	ldrh	r3, [r3, #2]
 8106bc8:	2b01      	cmp	r3, #1
 8106bca:	d10c      	bne.n	8106be6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8106bcc:	687b      	ldr	r3, [r7, #4]
 8106bce:	2200      	movs	r2, #0
 8106bd0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8106bd4:	6878      	ldr	r0, [r7, #4]
 8106bd6:	f000 f910 	bl	8106dfa <USBD_CtlSendStatus>
      }
      break;
 8106bda:	e004      	b.n	8106be6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8106bdc:	6839      	ldr	r1, [r7, #0]
 8106bde:	6878      	ldr	r0, [r7, #4]
 8106be0:	f000 f840 	bl	8106c64 <USBD_CtlError>
      break;
 8106be4:	e000      	b.n	8106be8 <USBD_ClrFeature+0x3c>
      break;
 8106be6:	bf00      	nop
  }
}
 8106be8:	bf00      	nop
 8106bea:	3708      	adds	r7, #8
 8106bec:	46bd      	mov	sp, r7
 8106bee:	bd80      	pop	{r7, pc}

08106bf0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8106bf0:	b580      	push	{r7, lr}
 8106bf2:	b084      	sub	sp, #16
 8106bf4:	af00      	add	r7, sp, #0
 8106bf6:	6078      	str	r0, [r7, #4]
 8106bf8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8106bfa:	683b      	ldr	r3, [r7, #0]
 8106bfc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8106bfe:	68fb      	ldr	r3, [r7, #12]
 8106c00:	781a      	ldrb	r2, [r3, #0]
 8106c02:	687b      	ldr	r3, [r7, #4]
 8106c04:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8106c06:	68fb      	ldr	r3, [r7, #12]
 8106c08:	3301      	adds	r3, #1
 8106c0a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8106c0c:	68fb      	ldr	r3, [r7, #12]
 8106c0e:	781a      	ldrb	r2, [r3, #0]
 8106c10:	687b      	ldr	r3, [r7, #4]
 8106c12:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8106c14:	68fb      	ldr	r3, [r7, #12]
 8106c16:	3301      	adds	r3, #1
 8106c18:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8106c1a:	68f8      	ldr	r0, [r7, #12]
 8106c1c:	f7ff fa91 	bl	8106142 <SWAPBYTE>
 8106c20:	4603      	mov	r3, r0
 8106c22:	461a      	mov	r2, r3
 8106c24:	687b      	ldr	r3, [r7, #4]
 8106c26:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8106c28:	68fb      	ldr	r3, [r7, #12]
 8106c2a:	3301      	adds	r3, #1
 8106c2c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8106c2e:	68fb      	ldr	r3, [r7, #12]
 8106c30:	3301      	adds	r3, #1
 8106c32:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8106c34:	68f8      	ldr	r0, [r7, #12]
 8106c36:	f7ff fa84 	bl	8106142 <SWAPBYTE>
 8106c3a:	4603      	mov	r3, r0
 8106c3c:	461a      	mov	r2, r3
 8106c3e:	687b      	ldr	r3, [r7, #4]
 8106c40:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8106c42:	68fb      	ldr	r3, [r7, #12]
 8106c44:	3301      	adds	r3, #1
 8106c46:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8106c48:	68fb      	ldr	r3, [r7, #12]
 8106c4a:	3301      	adds	r3, #1
 8106c4c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8106c4e:	68f8      	ldr	r0, [r7, #12]
 8106c50:	f7ff fa77 	bl	8106142 <SWAPBYTE>
 8106c54:	4603      	mov	r3, r0
 8106c56:	461a      	mov	r2, r3
 8106c58:	687b      	ldr	r3, [r7, #4]
 8106c5a:	80da      	strh	r2, [r3, #6]
}
 8106c5c:	bf00      	nop
 8106c5e:	3710      	adds	r7, #16
 8106c60:	46bd      	mov	sp, r7
 8106c62:	bd80      	pop	{r7, pc}

08106c64 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8106c64:	b580      	push	{r7, lr}
 8106c66:	b082      	sub	sp, #8
 8106c68:	af00      	add	r7, sp, #0
 8106c6a:	6078      	str	r0, [r7, #4]
 8106c6c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8106c6e:	2180      	movs	r1, #128	; 0x80
 8106c70:	6878      	ldr	r0, [r7, #4]
 8106c72:	f000 fd5d 	bl	8107730 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8106c76:	2100      	movs	r1, #0
 8106c78:	6878      	ldr	r0, [r7, #4]
 8106c7a:	f000 fd59 	bl	8107730 <USBD_LL_StallEP>
}
 8106c7e:	bf00      	nop
 8106c80:	3708      	adds	r7, #8
 8106c82:	46bd      	mov	sp, r7
 8106c84:	bd80      	pop	{r7, pc}

08106c86 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8106c86:	b580      	push	{r7, lr}
 8106c88:	b086      	sub	sp, #24
 8106c8a:	af00      	add	r7, sp, #0
 8106c8c:	60f8      	str	r0, [r7, #12]
 8106c8e:	60b9      	str	r1, [r7, #8]
 8106c90:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8106c92:	2300      	movs	r3, #0
 8106c94:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8106c96:	68fb      	ldr	r3, [r7, #12]
 8106c98:	2b00      	cmp	r3, #0
 8106c9a:	d036      	beq.n	8106d0a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8106c9c:	68fb      	ldr	r3, [r7, #12]
 8106c9e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8106ca0:	6938      	ldr	r0, [r7, #16]
 8106ca2:	f000 f836 	bl	8106d12 <USBD_GetLen>
 8106ca6:	4603      	mov	r3, r0
 8106ca8:	3301      	adds	r3, #1
 8106caa:	b29b      	uxth	r3, r3
 8106cac:	005b      	lsls	r3, r3, #1
 8106cae:	b29a      	uxth	r2, r3
 8106cb0:	687b      	ldr	r3, [r7, #4]
 8106cb2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8106cb4:	7dfb      	ldrb	r3, [r7, #23]
 8106cb6:	68ba      	ldr	r2, [r7, #8]
 8106cb8:	4413      	add	r3, r2
 8106cba:	687a      	ldr	r2, [r7, #4]
 8106cbc:	7812      	ldrb	r2, [r2, #0]
 8106cbe:	701a      	strb	r2, [r3, #0]
  idx++;
 8106cc0:	7dfb      	ldrb	r3, [r7, #23]
 8106cc2:	3301      	adds	r3, #1
 8106cc4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8106cc6:	7dfb      	ldrb	r3, [r7, #23]
 8106cc8:	68ba      	ldr	r2, [r7, #8]
 8106cca:	4413      	add	r3, r2
 8106ccc:	2203      	movs	r2, #3
 8106cce:	701a      	strb	r2, [r3, #0]
  idx++;
 8106cd0:	7dfb      	ldrb	r3, [r7, #23]
 8106cd2:	3301      	adds	r3, #1
 8106cd4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8106cd6:	e013      	b.n	8106d00 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8106cd8:	7dfb      	ldrb	r3, [r7, #23]
 8106cda:	68ba      	ldr	r2, [r7, #8]
 8106cdc:	4413      	add	r3, r2
 8106cde:	693a      	ldr	r2, [r7, #16]
 8106ce0:	7812      	ldrb	r2, [r2, #0]
 8106ce2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8106ce4:	693b      	ldr	r3, [r7, #16]
 8106ce6:	3301      	adds	r3, #1
 8106ce8:	613b      	str	r3, [r7, #16]
    idx++;
 8106cea:	7dfb      	ldrb	r3, [r7, #23]
 8106cec:	3301      	adds	r3, #1
 8106cee:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8106cf0:	7dfb      	ldrb	r3, [r7, #23]
 8106cf2:	68ba      	ldr	r2, [r7, #8]
 8106cf4:	4413      	add	r3, r2
 8106cf6:	2200      	movs	r2, #0
 8106cf8:	701a      	strb	r2, [r3, #0]
    idx++;
 8106cfa:	7dfb      	ldrb	r3, [r7, #23]
 8106cfc:	3301      	adds	r3, #1
 8106cfe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8106d00:	693b      	ldr	r3, [r7, #16]
 8106d02:	781b      	ldrb	r3, [r3, #0]
 8106d04:	2b00      	cmp	r3, #0
 8106d06:	d1e7      	bne.n	8106cd8 <USBD_GetString+0x52>
 8106d08:	e000      	b.n	8106d0c <USBD_GetString+0x86>
    return;
 8106d0a:	bf00      	nop
  }
}
 8106d0c:	3718      	adds	r7, #24
 8106d0e:	46bd      	mov	sp, r7
 8106d10:	bd80      	pop	{r7, pc}

08106d12 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8106d12:	b480      	push	{r7}
 8106d14:	b085      	sub	sp, #20
 8106d16:	af00      	add	r7, sp, #0
 8106d18:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8106d1a:	2300      	movs	r3, #0
 8106d1c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8106d1e:	687b      	ldr	r3, [r7, #4]
 8106d20:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8106d22:	e005      	b.n	8106d30 <USBD_GetLen+0x1e>
  {
    len++;
 8106d24:	7bfb      	ldrb	r3, [r7, #15]
 8106d26:	3301      	adds	r3, #1
 8106d28:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8106d2a:	68bb      	ldr	r3, [r7, #8]
 8106d2c:	3301      	adds	r3, #1
 8106d2e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8106d30:	68bb      	ldr	r3, [r7, #8]
 8106d32:	781b      	ldrb	r3, [r3, #0]
 8106d34:	2b00      	cmp	r3, #0
 8106d36:	d1f5      	bne.n	8106d24 <USBD_GetLen+0x12>
  }

  return len;
 8106d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8106d3a:	4618      	mov	r0, r3
 8106d3c:	3714      	adds	r7, #20
 8106d3e:	46bd      	mov	sp, r7
 8106d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d44:	4770      	bx	lr

08106d46 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8106d46:	b580      	push	{r7, lr}
 8106d48:	b084      	sub	sp, #16
 8106d4a:	af00      	add	r7, sp, #0
 8106d4c:	60f8      	str	r0, [r7, #12]
 8106d4e:	60b9      	str	r1, [r7, #8]
 8106d50:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8106d52:	68fb      	ldr	r3, [r7, #12]
 8106d54:	2202      	movs	r2, #2
 8106d56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8106d5a:	68fb      	ldr	r3, [r7, #12]
 8106d5c:	687a      	ldr	r2, [r7, #4]
 8106d5e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8106d60:	68fb      	ldr	r3, [r7, #12]
 8106d62:	687a      	ldr	r2, [r7, #4]
 8106d64:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8106d66:	687b      	ldr	r3, [r7, #4]
 8106d68:	68ba      	ldr	r2, [r7, #8]
 8106d6a:	2100      	movs	r1, #0
 8106d6c:	68f8      	ldr	r0, [r7, #12]
 8106d6e:	f000 fdad 	bl	81078cc <USBD_LL_Transmit>

  return USBD_OK;
 8106d72:	2300      	movs	r3, #0
}
 8106d74:	4618      	mov	r0, r3
 8106d76:	3710      	adds	r7, #16
 8106d78:	46bd      	mov	sp, r7
 8106d7a:	bd80      	pop	{r7, pc}

08106d7c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8106d7c:	b580      	push	{r7, lr}
 8106d7e:	b084      	sub	sp, #16
 8106d80:	af00      	add	r7, sp, #0
 8106d82:	60f8      	str	r0, [r7, #12]
 8106d84:	60b9      	str	r1, [r7, #8]
 8106d86:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8106d88:	687b      	ldr	r3, [r7, #4]
 8106d8a:	68ba      	ldr	r2, [r7, #8]
 8106d8c:	2100      	movs	r1, #0
 8106d8e:	68f8      	ldr	r0, [r7, #12]
 8106d90:	f000 fd9c 	bl	81078cc <USBD_LL_Transmit>

  return USBD_OK;
 8106d94:	2300      	movs	r3, #0
}
 8106d96:	4618      	mov	r0, r3
 8106d98:	3710      	adds	r7, #16
 8106d9a:	46bd      	mov	sp, r7
 8106d9c:	bd80      	pop	{r7, pc}

08106d9e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8106d9e:	b580      	push	{r7, lr}
 8106da0:	b084      	sub	sp, #16
 8106da2:	af00      	add	r7, sp, #0
 8106da4:	60f8      	str	r0, [r7, #12]
 8106da6:	60b9      	str	r1, [r7, #8]
 8106da8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8106daa:	68fb      	ldr	r3, [r7, #12]
 8106dac:	2203      	movs	r2, #3
 8106dae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8106db2:	68fb      	ldr	r3, [r7, #12]
 8106db4:	687a      	ldr	r2, [r7, #4]
 8106db6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8106dba:	68fb      	ldr	r3, [r7, #12]
 8106dbc:	687a      	ldr	r2, [r7, #4]
 8106dbe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8106dc2:	687b      	ldr	r3, [r7, #4]
 8106dc4:	68ba      	ldr	r2, [r7, #8]
 8106dc6:	2100      	movs	r1, #0
 8106dc8:	68f8      	ldr	r0, [r7, #12]
 8106dca:	f000 fdb7 	bl	810793c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8106dce:	2300      	movs	r3, #0
}
 8106dd0:	4618      	mov	r0, r3
 8106dd2:	3710      	adds	r7, #16
 8106dd4:	46bd      	mov	sp, r7
 8106dd6:	bd80      	pop	{r7, pc}

08106dd8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8106dd8:	b580      	push	{r7, lr}
 8106dda:	b084      	sub	sp, #16
 8106ddc:	af00      	add	r7, sp, #0
 8106dde:	60f8      	str	r0, [r7, #12]
 8106de0:	60b9      	str	r1, [r7, #8]
 8106de2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8106de4:	687b      	ldr	r3, [r7, #4]
 8106de6:	68ba      	ldr	r2, [r7, #8]
 8106de8:	2100      	movs	r1, #0
 8106dea:	68f8      	ldr	r0, [r7, #12]
 8106dec:	f000 fda6 	bl	810793c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8106df0:	2300      	movs	r3, #0
}
 8106df2:	4618      	mov	r0, r3
 8106df4:	3710      	adds	r7, #16
 8106df6:	46bd      	mov	sp, r7
 8106df8:	bd80      	pop	{r7, pc}

08106dfa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8106dfa:	b580      	push	{r7, lr}
 8106dfc:	b082      	sub	sp, #8
 8106dfe:	af00      	add	r7, sp, #0
 8106e00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8106e02:	687b      	ldr	r3, [r7, #4]
 8106e04:	2204      	movs	r2, #4
 8106e06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8106e0a:	2300      	movs	r3, #0
 8106e0c:	2200      	movs	r2, #0
 8106e0e:	2100      	movs	r1, #0
 8106e10:	6878      	ldr	r0, [r7, #4]
 8106e12:	f000 fd5b 	bl	81078cc <USBD_LL_Transmit>

  return USBD_OK;
 8106e16:	2300      	movs	r3, #0
}
 8106e18:	4618      	mov	r0, r3
 8106e1a:	3708      	adds	r7, #8
 8106e1c:	46bd      	mov	sp, r7
 8106e1e:	bd80      	pop	{r7, pc}

08106e20 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8106e20:	b580      	push	{r7, lr}
 8106e22:	b082      	sub	sp, #8
 8106e24:	af00      	add	r7, sp, #0
 8106e26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8106e28:	687b      	ldr	r3, [r7, #4]
 8106e2a:	2205      	movs	r2, #5
 8106e2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8106e30:	2300      	movs	r3, #0
 8106e32:	2200      	movs	r2, #0
 8106e34:	2100      	movs	r1, #0
 8106e36:	6878      	ldr	r0, [r7, #4]
 8106e38:	f000 fd80 	bl	810793c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8106e3c:	2300      	movs	r3, #0
}
 8106e3e:	4618      	mov	r0, r3
 8106e40:	3708      	adds	r7, #8
 8106e42:	46bd      	mov	sp, r7
 8106e44:	bd80      	pop	{r7, pc}
	...

08106e48 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8106e48:	b580      	push	{r7, lr}
 8106e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8106e4c:	2200      	movs	r2, #0
 8106e4e:	4912      	ldr	r1, [pc, #72]	; (8106e98 <MX_USB_DEVICE_Init+0x50>)
 8106e50:	4812      	ldr	r0, [pc, #72]	; (8106e9c <MX_USB_DEVICE_Init+0x54>)
 8106e52:	f7fe fe65 	bl	8105b20 <USBD_Init>
 8106e56:	4603      	mov	r3, r0
 8106e58:	2b00      	cmp	r3, #0
 8106e5a:	d001      	beq.n	8106e60 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8106e5c:	f7f9 fad9 	bl	8100412 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8106e60:	490f      	ldr	r1, [pc, #60]	; (8106ea0 <MX_USB_DEVICE_Init+0x58>)
 8106e62:	480e      	ldr	r0, [pc, #56]	; (8106e9c <MX_USB_DEVICE_Init+0x54>)
 8106e64:	f7fe fe8c 	bl	8105b80 <USBD_RegisterClass>
 8106e68:	4603      	mov	r3, r0
 8106e6a:	2b00      	cmp	r3, #0
 8106e6c:	d001      	beq.n	8106e72 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8106e6e:	f7f9 fad0 	bl	8100412 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8106e72:	490c      	ldr	r1, [pc, #48]	; (8106ea4 <MX_USB_DEVICE_Init+0x5c>)
 8106e74:	4809      	ldr	r0, [pc, #36]	; (8106e9c <MX_USB_DEVICE_Init+0x54>)
 8106e76:	f7fe fddd 	bl	8105a34 <USBD_CDC_RegisterInterface>
 8106e7a:	4603      	mov	r3, r0
 8106e7c:	2b00      	cmp	r3, #0
 8106e7e:	d001      	beq.n	8106e84 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8106e80:	f7f9 fac7 	bl	8100412 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8106e84:	4805      	ldr	r0, [pc, #20]	; (8106e9c <MX_USB_DEVICE_Init+0x54>)
 8106e86:	f7fe fea2 	bl	8105bce <USBD_Start>
 8106e8a:	4603      	mov	r3, r0
 8106e8c:	2b00      	cmp	r3, #0
 8106e8e:	d001      	beq.n	8106e94 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8106e90:	f7f9 fabf 	bl	8100412 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8106e94:	bf00      	nop
 8106e96:	bd80      	pop	{r7, pc}
 8106e98:	20000150 	.word	0x20000150
 8106e9c:	200001d4 	.word	0x200001d4
 8106ea0:	20000038 	.word	0x20000038
 8106ea4:	2000013c 	.word	0x2000013c

08106ea8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8106ea8:	b580      	push	{r7, lr}
 8106eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8106eac:	2200      	movs	r2, #0
 8106eae:	4905      	ldr	r1, [pc, #20]	; (8106ec4 <CDC_Init_FS+0x1c>)
 8106eb0:	4805      	ldr	r0, [pc, #20]	; (8106ec8 <CDC_Init_FS+0x20>)
 8106eb2:	f7fe fdd4 	bl	8105a5e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8106eb6:	4905      	ldr	r1, [pc, #20]	; (8106ecc <CDC_Init_FS+0x24>)
 8106eb8:	4803      	ldr	r0, [pc, #12]	; (8106ec8 <CDC_Init_FS+0x20>)
 8106eba:	f7fe fdee 	bl	8105a9a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8106ebe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8106ec0:	4618      	mov	r0, r3
 8106ec2:	bd80      	pop	{r7, pc}
 8106ec4:	20000ca4 	.word	0x20000ca4
 8106ec8:	200001d4 	.word	0x200001d4
 8106ecc:	200004a4 	.word	0x200004a4

08106ed0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8106ed0:	b480      	push	{r7}
 8106ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8106ed4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8106ed6:	4618      	mov	r0, r3
 8106ed8:	46bd      	mov	sp, r7
 8106eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ede:	4770      	bx	lr

08106ee0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8106ee0:	b480      	push	{r7}
 8106ee2:	b083      	sub	sp, #12
 8106ee4:	af00      	add	r7, sp, #0
 8106ee6:	4603      	mov	r3, r0
 8106ee8:	6039      	str	r1, [r7, #0]
 8106eea:	71fb      	strb	r3, [r7, #7]
 8106eec:	4613      	mov	r3, r2
 8106eee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8106ef0:	79fb      	ldrb	r3, [r7, #7]
 8106ef2:	2b23      	cmp	r3, #35	; 0x23
 8106ef4:	d84a      	bhi.n	8106f8c <CDC_Control_FS+0xac>
 8106ef6:	a201      	add	r2, pc, #4	; (adr r2, 8106efc <CDC_Control_FS+0x1c>)
 8106ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106efc:	08106f8d 	.word	0x08106f8d
 8106f00:	08106f8d 	.word	0x08106f8d
 8106f04:	08106f8d 	.word	0x08106f8d
 8106f08:	08106f8d 	.word	0x08106f8d
 8106f0c:	08106f8d 	.word	0x08106f8d
 8106f10:	08106f8d 	.word	0x08106f8d
 8106f14:	08106f8d 	.word	0x08106f8d
 8106f18:	08106f8d 	.word	0x08106f8d
 8106f1c:	08106f8d 	.word	0x08106f8d
 8106f20:	08106f8d 	.word	0x08106f8d
 8106f24:	08106f8d 	.word	0x08106f8d
 8106f28:	08106f8d 	.word	0x08106f8d
 8106f2c:	08106f8d 	.word	0x08106f8d
 8106f30:	08106f8d 	.word	0x08106f8d
 8106f34:	08106f8d 	.word	0x08106f8d
 8106f38:	08106f8d 	.word	0x08106f8d
 8106f3c:	08106f8d 	.word	0x08106f8d
 8106f40:	08106f8d 	.word	0x08106f8d
 8106f44:	08106f8d 	.word	0x08106f8d
 8106f48:	08106f8d 	.word	0x08106f8d
 8106f4c:	08106f8d 	.word	0x08106f8d
 8106f50:	08106f8d 	.word	0x08106f8d
 8106f54:	08106f8d 	.word	0x08106f8d
 8106f58:	08106f8d 	.word	0x08106f8d
 8106f5c:	08106f8d 	.word	0x08106f8d
 8106f60:	08106f8d 	.word	0x08106f8d
 8106f64:	08106f8d 	.word	0x08106f8d
 8106f68:	08106f8d 	.word	0x08106f8d
 8106f6c:	08106f8d 	.word	0x08106f8d
 8106f70:	08106f8d 	.word	0x08106f8d
 8106f74:	08106f8d 	.word	0x08106f8d
 8106f78:	08106f8d 	.word	0x08106f8d
 8106f7c:	08106f8d 	.word	0x08106f8d
 8106f80:	08106f8d 	.word	0x08106f8d
 8106f84:	08106f8d 	.word	0x08106f8d
 8106f88:	08106f8d 	.word	0x08106f8d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8106f8c:	bf00      	nop
  }

  return (USBD_OK);
 8106f8e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8106f90:	4618      	mov	r0, r3
 8106f92:	370c      	adds	r7, #12
 8106f94:	46bd      	mov	sp, r7
 8106f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f9a:	4770      	bx	lr

08106f9c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8106f9c:	b580      	push	{r7, lr}
 8106f9e:	b082      	sub	sp, #8
 8106fa0:	af00      	add	r7, sp, #0
 8106fa2:	6078      	str	r0, [r7, #4]
 8106fa4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8106fa6:	6879      	ldr	r1, [r7, #4]
 8106fa8:	480b      	ldr	r0, [pc, #44]	; (8106fd8 <CDC_Receive_FS+0x3c>)
 8106faa:	f7fe fd76 	bl	8105a9a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8106fae:	480a      	ldr	r0, [pc, #40]	; (8106fd8 <CDC_Receive_FS+0x3c>)
 8106fb0:	f7fe fd8c 	bl	8105acc <USBD_CDC_ReceivePacket>
  USB_CDC_RxHandler(UserRxBufferFS, *Len);
 8106fb4:	683b      	ldr	r3, [r7, #0]
 8106fb6:	681b      	ldr	r3, [r3, #0]
 8106fb8:	4619      	mov	r1, r3
 8106fba:	4808      	ldr	r0, [pc, #32]	; (8106fdc <CDC_Receive_FS+0x40>)
 8106fbc:	f7f9 fa1a 	bl	81003f4 <USB_CDC_RxHandler>
  memset(UserRxBufferFS, '\0', *Len);
 8106fc0:	683b      	ldr	r3, [r7, #0]
 8106fc2:	681b      	ldr	r3, [r3, #0]
 8106fc4:	461a      	mov	r2, r3
 8106fc6:	2100      	movs	r1, #0
 8106fc8:	4804      	ldr	r0, [pc, #16]	; (8106fdc <CDC_Receive_FS+0x40>)
 8106fca:	f000 fd93 	bl	8107af4 <memset>
  return (USBD_OK);
 8106fce:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8106fd0:	4618      	mov	r0, r3
 8106fd2:	3708      	adds	r7, #8
 8106fd4:	46bd      	mov	sp, r7
 8106fd6:	bd80      	pop	{r7, pc}
 8106fd8:	200001d4 	.word	0x200001d4
 8106fdc:	200004a4 	.word	0x200004a4

08106fe0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8106fe0:	b480      	push	{r7}
 8106fe2:	b087      	sub	sp, #28
 8106fe4:	af00      	add	r7, sp, #0
 8106fe6:	60f8      	str	r0, [r7, #12]
 8106fe8:	60b9      	str	r1, [r7, #8]
 8106fea:	4613      	mov	r3, r2
 8106fec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8106fee:	2300      	movs	r3, #0
 8106ff0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8106ff2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8106ff6:	4618      	mov	r0, r3
 8106ff8:	371c      	adds	r7, #28
 8106ffa:	46bd      	mov	sp, r7
 8106ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107000:	4770      	bx	lr
	...

08107004 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8107004:	b480      	push	{r7}
 8107006:	b083      	sub	sp, #12
 8107008:	af00      	add	r7, sp, #0
 810700a:	4603      	mov	r3, r0
 810700c:	6039      	str	r1, [r7, #0]
 810700e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8107010:	683b      	ldr	r3, [r7, #0]
 8107012:	2212      	movs	r2, #18
 8107014:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8107016:	4b03      	ldr	r3, [pc, #12]	; (8107024 <USBD_FS_DeviceDescriptor+0x20>)
}
 8107018:	4618      	mov	r0, r3
 810701a:	370c      	adds	r7, #12
 810701c:	46bd      	mov	sp, r7
 810701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107022:	4770      	bx	lr
 8107024:	20000170 	.word	0x20000170

08107028 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8107028:	b480      	push	{r7}
 810702a:	b083      	sub	sp, #12
 810702c:	af00      	add	r7, sp, #0
 810702e:	4603      	mov	r3, r0
 8107030:	6039      	str	r1, [r7, #0]
 8107032:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8107034:	683b      	ldr	r3, [r7, #0]
 8107036:	2204      	movs	r2, #4
 8107038:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 810703a:	4b03      	ldr	r3, [pc, #12]	; (8107048 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 810703c:	4618      	mov	r0, r3
 810703e:	370c      	adds	r7, #12
 8107040:	46bd      	mov	sp, r7
 8107042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107046:	4770      	bx	lr
 8107048:	20000190 	.word	0x20000190

0810704c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 810704c:	b580      	push	{r7, lr}
 810704e:	b082      	sub	sp, #8
 8107050:	af00      	add	r7, sp, #0
 8107052:	4603      	mov	r3, r0
 8107054:	6039      	str	r1, [r7, #0]
 8107056:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8107058:	79fb      	ldrb	r3, [r7, #7]
 810705a:	2b00      	cmp	r3, #0
 810705c:	d105      	bne.n	810706a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 810705e:	683a      	ldr	r2, [r7, #0]
 8107060:	4907      	ldr	r1, [pc, #28]	; (8107080 <USBD_FS_ProductStrDescriptor+0x34>)
 8107062:	4808      	ldr	r0, [pc, #32]	; (8107084 <USBD_FS_ProductStrDescriptor+0x38>)
 8107064:	f7ff fe0f 	bl	8106c86 <USBD_GetString>
 8107068:	e004      	b.n	8107074 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 810706a:	683a      	ldr	r2, [r7, #0]
 810706c:	4904      	ldr	r1, [pc, #16]	; (8107080 <USBD_FS_ProductStrDescriptor+0x34>)
 810706e:	4805      	ldr	r0, [pc, #20]	; (8107084 <USBD_FS_ProductStrDescriptor+0x38>)
 8107070:	f7ff fe09 	bl	8106c86 <USBD_GetString>
  }
  return USBD_StrDesc;
 8107074:	4b02      	ldr	r3, [pc, #8]	; (8107080 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8107076:	4618      	mov	r0, r3
 8107078:	3708      	adds	r7, #8
 810707a:	46bd      	mov	sp, r7
 810707c:	bd80      	pop	{r7, pc}
 810707e:	bf00      	nop
 8107080:	200014a4 	.word	0x200014a4
 8107084:	08107b1c 	.word	0x08107b1c

08107088 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8107088:	b580      	push	{r7, lr}
 810708a:	b082      	sub	sp, #8
 810708c:	af00      	add	r7, sp, #0
 810708e:	4603      	mov	r3, r0
 8107090:	6039      	str	r1, [r7, #0]
 8107092:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8107094:	683a      	ldr	r2, [r7, #0]
 8107096:	4904      	ldr	r1, [pc, #16]	; (81070a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8107098:	4804      	ldr	r0, [pc, #16]	; (81070ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 810709a:	f7ff fdf4 	bl	8106c86 <USBD_GetString>
  return USBD_StrDesc;
 810709e:	4b02      	ldr	r3, [pc, #8]	; (81070a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 81070a0:	4618      	mov	r0, r3
 81070a2:	3708      	adds	r7, #8
 81070a4:	46bd      	mov	sp, r7
 81070a6:	bd80      	pop	{r7, pc}
 81070a8:	200014a4 	.word	0x200014a4
 81070ac:	08107b34 	.word	0x08107b34

081070b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 81070b0:	b580      	push	{r7, lr}
 81070b2:	b082      	sub	sp, #8
 81070b4:	af00      	add	r7, sp, #0
 81070b6:	4603      	mov	r3, r0
 81070b8:	6039      	str	r1, [r7, #0]
 81070ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 81070bc:	683b      	ldr	r3, [r7, #0]
 81070be:	221a      	movs	r2, #26
 81070c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 81070c2:	f000 f855 	bl	8107170 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 81070c6:	4b02      	ldr	r3, [pc, #8]	; (81070d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 81070c8:	4618      	mov	r0, r3
 81070ca:	3708      	adds	r7, #8
 81070cc:	46bd      	mov	sp, r7
 81070ce:	bd80      	pop	{r7, pc}
 81070d0:	20000194 	.word	0x20000194

081070d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 81070d4:	b580      	push	{r7, lr}
 81070d6:	b082      	sub	sp, #8
 81070d8:	af00      	add	r7, sp, #0
 81070da:	4603      	mov	r3, r0
 81070dc:	6039      	str	r1, [r7, #0]
 81070de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 81070e0:	79fb      	ldrb	r3, [r7, #7]
 81070e2:	2b00      	cmp	r3, #0
 81070e4:	d105      	bne.n	81070f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 81070e6:	683a      	ldr	r2, [r7, #0]
 81070e8:	4907      	ldr	r1, [pc, #28]	; (8107108 <USBD_FS_ConfigStrDescriptor+0x34>)
 81070ea:	4808      	ldr	r0, [pc, #32]	; (810710c <USBD_FS_ConfigStrDescriptor+0x38>)
 81070ec:	f7ff fdcb 	bl	8106c86 <USBD_GetString>
 81070f0:	e004      	b.n	81070fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 81070f2:	683a      	ldr	r2, [r7, #0]
 81070f4:	4904      	ldr	r1, [pc, #16]	; (8107108 <USBD_FS_ConfigStrDescriptor+0x34>)
 81070f6:	4805      	ldr	r0, [pc, #20]	; (810710c <USBD_FS_ConfigStrDescriptor+0x38>)
 81070f8:	f7ff fdc5 	bl	8106c86 <USBD_GetString>
  }
  return USBD_StrDesc;
 81070fc:	4b02      	ldr	r3, [pc, #8]	; (8107108 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 81070fe:	4618      	mov	r0, r3
 8107100:	3708      	adds	r7, #8
 8107102:	46bd      	mov	sp, r7
 8107104:	bd80      	pop	{r7, pc}
 8107106:	bf00      	nop
 8107108:	200014a4 	.word	0x200014a4
 810710c:	08107b3c 	.word	0x08107b3c

08107110 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8107110:	b580      	push	{r7, lr}
 8107112:	b082      	sub	sp, #8
 8107114:	af00      	add	r7, sp, #0
 8107116:	4603      	mov	r3, r0
 8107118:	6039      	str	r1, [r7, #0]
 810711a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 810711c:	79fb      	ldrb	r3, [r7, #7]
 810711e:	2b00      	cmp	r3, #0
 8107120:	d105      	bne.n	810712e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8107122:	683a      	ldr	r2, [r7, #0]
 8107124:	4907      	ldr	r1, [pc, #28]	; (8107144 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8107126:	4808      	ldr	r0, [pc, #32]	; (8107148 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8107128:	f7ff fdad 	bl	8106c86 <USBD_GetString>
 810712c:	e004      	b.n	8107138 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 810712e:	683a      	ldr	r2, [r7, #0]
 8107130:	4904      	ldr	r1, [pc, #16]	; (8107144 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8107132:	4805      	ldr	r0, [pc, #20]	; (8107148 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8107134:	f7ff fda7 	bl	8106c86 <USBD_GetString>
  }
  return USBD_StrDesc;
 8107138:	4b02      	ldr	r3, [pc, #8]	; (8107144 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 810713a:	4618      	mov	r0, r3
 810713c:	3708      	adds	r7, #8
 810713e:	46bd      	mov	sp, r7
 8107140:	bd80      	pop	{r7, pc}
 8107142:	bf00      	nop
 8107144:	200014a4 	.word	0x200014a4
 8107148:	08107b48 	.word	0x08107b48

0810714c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 810714c:	b480      	push	{r7}
 810714e:	b083      	sub	sp, #12
 8107150:	af00      	add	r7, sp, #0
 8107152:	4603      	mov	r3, r0
 8107154:	6039      	str	r1, [r7, #0]
 8107156:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8107158:	683b      	ldr	r3, [r7, #0]
 810715a:	220c      	movs	r2, #12
 810715c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 810715e:	4b03      	ldr	r3, [pc, #12]	; (810716c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8107160:	4618      	mov	r0, r3
 8107162:	370c      	adds	r7, #12
 8107164:	46bd      	mov	sp, r7
 8107166:	f85d 7b04 	ldr.w	r7, [sp], #4
 810716a:	4770      	bx	lr
 810716c:	20000184 	.word	0x20000184

08107170 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8107170:	b580      	push	{r7, lr}
 8107172:	b084      	sub	sp, #16
 8107174:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8107176:	4b0f      	ldr	r3, [pc, #60]	; (81071b4 <Get_SerialNum+0x44>)
 8107178:	681b      	ldr	r3, [r3, #0]
 810717a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 810717c:	4b0e      	ldr	r3, [pc, #56]	; (81071b8 <Get_SerialNum+0x48>)
 810717e:	681b      	ldr	r3, [r3, #0]
 8107180:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8107182:	4b0e      	ldr	r3, [pc, #56]	; (81071bc <Get_SerialNum+0x4c>)
 8107184:	681b      	ldr	r3, [r3, #0]
 8107186:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8107188:	68fa      	ldr	r2, [r7, #12]
 810718a:	687b      	ldr	r3, [r7, #4]
 810718c:	4413      	add	r3, r2
 810718e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8107190:	68fb      	ldr	r3, [r7, #12]
 8107192:	2b00      	cmp	r3, #0
 8107194:	d009      	beq.n	81071aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8107196:	2208      	movs	r2, #8
 8107198:	4909      	ldr	r1, [pc, #36]	; (81071c0 <Get_SerialNum+0x50>)
 810719a:	68f8      	ldr	r0, [r7, #12]
 810719c:	f000 f814 	bl	81071c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 81071a0:	2204      	movs	r2, #4
 81071a2:	4908      	ldr	r1, [pc, #32]	; (81071c4 <Get_SerialNum+0x54>)
 81071a4:	68b8      	ldr	r0, [r7, #8]
 81071a6:	f000 f80f 	bl	81071c8 <IntToUnicode>
  }
}
 81071aa:	bf00      	nop
 81071ac:	3710      	adds	r7, #16
 81071ae:	46bd      	mov	sp, r7
 81071b0:	bd80      	pop	{r7, pc}
 81071b2:	bf00      	nop
 81071b4:	1fff7590 	.word	0x1fff7590
 81071b8:	1fff7594 	.word	0x1fff7594
 81071bc:	1fff7598 	.word	0x1fff7598
 81071c0:	20000196 	.word	0x20000196
 81071c4:	200001a6 	.word	0x200001a6

081071c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 81071c8:	b480      	push	{r7}
 81071ca:	b087      	sub	sp, #28
 81071cc:	af00      	add	r7, sp, #0
 81071ce:	60f8      	str	r0, [r7, #12]
 81071d0:	60b9      	str	r1, [r7, #8]
 81071d2:	4613      	mov	r3, r2
 81071d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 81071d6:	2300      	movs	r3, #0
 81071d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 81071da:	2300      	movs	r3, #0
 81071dc:	75fb      	strb	r3, [r7, #23]
 81071de:	e027      	b.n	8107230 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 81071e0:	68fb      	ldr	r3, [r7, #12]
 81071e2:	0f1b      	lsrs	r3, r3, #28
 81071e4:	2b09      	cmp	r3, #9
 81071e6:	d80b      	bhi.n	8107200 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 81071e8:	68fb      	ldr	r3, [r7, #12]
 81071ea:	0f1b      	lsrs	r3, r3, #28
 81071ec:	b2da      	uxtb	r2, r3
 81071ee:	7dfb      	ldrb	r3, [r7, #23]
 81071f0:	005b      	lsls	r3, r3, #1
 81071f2:	4619      	mov	r1, r3
 81071f4:	68bb      	ldr	r3, [r7, #8]
 81071f6:	440b      	add	r3, r1
 81071f8:	3230      	adds	r2, #48	; 0x30
 81071fa:	b2d2      	uxtb	r2, r2
 81071fc:	701a      	strb	r2, [r3, #0]
 81071fe:	e00a      	b.n	8107216 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8107200:	68fb      	ldr	r3, [r7, #12]
 8107202:	0f1b      	lsrs	r3, r3, #28
 8107204:	b2da      	uxtb	r2, r3
 8107206:	7dfb      	ldrb	r3, [r7, #23]
 8107208:	005b      	lsls	r3, r3, #1
 810720a:	4619      	mov	r1, r3
 810720c:	68bb      	ldr	r3, [r7, #8]
 810720e:	440b      	add	r3, r1
 8107210:	3237      	adds	r2, #55	; 0x37
 8107212:	b2d2      	uxtb	r2, r2
 8107214:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8107216:	68fb      	ldr	r3, [r7, #12]
 8107218:	011b      	lsls	r3, r3, #4
 810721a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 810721c:	7dfb      	ldrb	r3, [r7, #23]
 810721e:	005b      	lsls	r3, r3, #1
 8107220:	3301      	adds	r3, #1
 8107222:	68ba      	ldr	r2, [r7, #8]
 8107224:	4413      	add	r3, r2
 8107226:	2200      	movs	r2, #0
 8107228:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 810722a:	7dfb      	ldrb	r3, [r7, #23]
 810722c:	3301      	adds	r3, #1
 810722e:	75fb      	strb	r3, [r7, #23]
 8107230:	7dfa      	ldrb	r2, [r7, #23]
 8107232:	79fb      	ldrb	r3, [r7, #7]
 8107234:	429a      	cmp	r2, r3
 8107236:	d3d3      	bcc.n	81071e0 <IntToUnicode+0x18>
  }
}
 8107238:	bf00      	nop
 810723a:	bf00      	nop
 810723c:	371c      	adds	r7, #28
 810723e:	46bd      	mov	sp, r7
 8107240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107244:	4770      	bx	lr
	...

08107248 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8107248:	b580      	push	{r7, lr}
 810724a:	b0b2      	sub	sp, #200	; 0xc8
 810724c:	af00      	add	r7, sp, #0
 810724e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8107250:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8107254:	2200      	movs	r2, #0
 8107256:	601a      	str	r2, [r3, #0]
 8107258:	605a      	str	r2, [r3, #4]
 810725a:	609a      	str	r2, [r3, #8]
 810725c:	60da      	str	r2, [r3, #12]
 810725e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8107260:	f107 0318 	add.w	r3, r7, #24
 8107264:	229c      	movs	r2, #156	; 0x9c
 8107266:	2100      	movs	r1, #0
 8107268:	4618      	mov	r0, r3
 810726a:	f000 fc43 	bl	8107af4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 810726e:	687b      	ldr	r3, [r7, #4]
 8107270:	681b      	ldr	r3, [r3, #0]
 8107272:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8107276:	d163      	bne.n	8107340 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8107278:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 810727c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 810727e:	2300      	movs	r3, #0
 8107280:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8107284:	f107 0318 	add.w	r3, r7, #24
 8107288:	4618      	mov	r0, r3
 810728a:	f7fc f88f 	bl	81033ac <HAL_RCCEx_PeriphCLKConfig>
 810728e:	4603      	mov	r3, r0
 8107290:	2b00      	cmp	r3, #0
 8107292:	d001      	beq.n	8107298 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8107294:	f7f9 f8bd 	bl	8100412 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8107298:	4b2b      	ldr	r3, [pc, #172]	; (8107348 <HAL_PCD_MspInit+0x100>)
 810729a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810729c:	4a2a      	ldr	r2, [pc, #168]	; (8107348 <HAL_PCD_MspInit+0x100>)
 810729e:	f043 0301 	orr.w	r3, r3, #1
 81072a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 81072a4:	4b28      	ldr	r3, [pc, #160]	; (8107348 <HAL_PCD_MspInit+0x100>)
 81072a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81072a8:	f003 0301 	and.w	r3, r3, #1
 81072ac:	617b      	str	r3, [r7, #20]
 81072ae:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 81072b0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 81072b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81072b8:	2302      	movs	r3, #2
 81072ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81072be:	2300      	movs	r3, #0
 81072c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81072c4:	2303      	movs	r3, #3
 81072c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 81072ca:	230a      	movs	r3, #10
 81072cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81072d0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 81072d4:	4619      	mov	r1, r3
 81072d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 81072da:	f7f9 fd95 	bl	8100e08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 81072de:	4b1a      	ldr	r3, [pc, #104]	; (8107348 <HAL_PCD_MspInit+0x100>)
 81072e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81072e2:	4a19      	ldr	r2, [pc, #100]	; (8107348 <HAL_PCD_MspInit+0x100>)
 81072e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 81072e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 81072ea:	4b17      	ldr	r3, [pc, #92]	; (8107348 <HAL_PCD_MspInit+0x100>)
 81072ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81072ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81072f2:	613b      	str	r3, [r7, #16]
 81072f4:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 81072f6:	4b14      	ldr	r3, [pc, #80]	; (8107348 <HAL_PCD_MspInit+0x100>)
 81072f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81072fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81072fe:	2b00      	cmp	r3, #0
 8107300:	d114      	bne.n	810732c <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8107302:	4b11      	ldr	r3, [pc, #68]	; (8107348 <HAL_PCD_MspInit+0x100>)
 8107304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107306:	4a10      	ldr	r2, [pc, #64]	; (8107348 <HAL_PCD_MspInit+0x100>)
 8107308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 810730c:	6593      	str	r3, [r2, #88]	; 0x58
 810730e:	4b0e      	ldr	r3, [pc, #56]	; (8107348 <HAL_PCD_MspInit+0x100>)
 8107310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8107316:	60fb      	str	r3, [r7, #12]
 8107318:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 810731a:	f7fb f98b 	bl	8102634 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 810731e:	4b0a      	ldr	r3, [pc, #40]	; (8107348 <HAL_PCD_MspInit+0x100>)
 8107320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107322:	4a09      	ldr	r2, [pc, #36]	; (8107348 <HAL_PCD_MspInit+0x100>)
 8107324:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8107328:	6593      	str	r3, [r2, #88]	; 0x58
 810732a:	e001      	b.n	8107330 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 810732c:	f7fb f982 	bl	8102634 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8107330:	2200      	movs	r2, #0
 8107332:	2100      	movs	r1, #0
 8107334:	2043      	movs	r0, #67	; 0x43
 8107336:	f7f9 fa7c 	bl	8100832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 810733a:	2043      	movs	r0, #67	; 0x43
 810733c:	f7f9 fa95 	bl	810086a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8107340:	bf00      	nop
 8107342:	37c8      	adds	r7, #200	; 0xc8
 8107344:	46bd      	mov	sp, r7
 8107346:	bd80      	pop	{r7, pc}
 8107348:	40021000 	.word	0x40021000

0810734c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 810734c:	b580      	push	{r7, lr}
 810734e:	b082      	sub	sp, #8
 8107350:	af00      	add	r7, sp, #0
 8107352:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8107354:	687b      	ldr	r3, [r7, #4]
 8107356:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 810735a:	687b      	ldr	r3, [r7, #4]
 810735c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8107360:	4619      	mov	r1, r3
 8107362:	4610      	mov	r0, r2
 8107364:	f7fe fc7e 	bl	8105c64 <USBD_LL_SetupStage>
}
 8107368:	bf00      	nop
 810736a:	3708      	adds	r7, #8
 810736c:	46bd      	mov	sp, r7
 810736e:	bd80      	pop	{r7, pc}

08107370 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8107370:	b580      	push	{r7, lr}
 8107372:	b082      	sub	sp, #8
 8107374:	af00      	add	r7, sp, #0
 8107376:	6078      	str	r0, [r7, #4]
 8107378:	460b      	mov	r3, r1
 810737a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 810737c:	687b      	ldr	r3, [r7, #4]
 810737e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8107382:	78fa      	ldrb	r2, [r7, #3]
 8107384:	6879      	ldr	r1, [r7, #4]
 8107386:	4613      	mov	r3, r2
 8107388:	00db      	lsls	r3, r3, #3
 810738a:	4413      	add	r3, r2
 810738c:	009b      	lsls	r3, r3, #2
 810738e:	440b      	add	r3, r1
 8107390:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8107394:	681a      	ldr	r2, [r3, #0]
 8107396:	78fb      	ldrb	r3, [r7, #3]
 8107398:	4619      	mov	r1, r3
 810739a:	f7fe fcb8 	bl	8105d0e <USBD_LL_DataOutStage>
}
 810739e:	bf00      	nop
 81073a0:	3708      	adds	r7, #8
 81073a2:	46bd      	mov	sp, r7
 81073a4:	bd80      	pop	{r7, pc}

081073a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 81073a6:	b580      	push	{r7, lr}
 81073a8:	b082      	sub	sp, #8
 81073aa:	af00      	add	r7, sp, #0
 81073ac:	6078      	str	r0, [r7, #4]
 81073ae:	460b      	mov	r3, r1
 81073b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 81073b2:	687b      	ldr	r3, [r7, #4]
 81073b4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 81073b8:	78fa      	ldrb	r2, [r7, #3]
 81073ba:	6879      	ldr	r1, [r7, #4]
 81073bc:	4613      	mov	r3, r2
 81073be:	00db      	lsls	r3, r3, #3
 81073c0:	4413      	add	r3, r2
 81073c2:	009b      	lsls	r3, r3, #2
 81073c4:	440b      	add	r3, r1
 81073c6:	334c      	adds	r3, #76	; 0x4c
 81073c8:	681a      	ldr	r2, [r3, #0]
 81073ca:	78fb      	ldrb	r3, [r7, #3]
 81073cc:	4619      	mov	r1, r3
 81073ce:	f7fe fd01 	bl	8105dd4 <USBD_LL_DataInStage>
}
 81073d2:	bf00      	nop
 81073d4:	3708      	adds	r7, #8
 81073d6:	46bd      	mov	sp, r7
 81073d8:	bd80      	pop	{r7, pc}

081073da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 81073da:	b580      	push	{r7, lr}
 81073dc:	b082      	sub	sp, #8
 81073de:	af00      	add	r7, sp, #0
 81073e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 81073e2:	687b      	ldr	r3, [r7, #4]
 81073e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 81073e8:	4618      	mov	r0, r3
 81073ea:	f7fe fe15 	bl	8106018 <USBD_LL_SOF>
}
 81073ee:	bf00      	nop
 81073f0:	3708      	adds	r7, #8
 81073f2:	46bd      	mov	sp, r7
 81073f4:	bd80      	pop	{r7, pc}

081073f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 81073f6:	b580      	push	{r7, lr}
 81073f8:	b084      	sub	sp, #16
 81073fa:	af00      	add	r7, sp, #0
 81073fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 81073fe:	2301      	movs	r3, #1
 8107400:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8107402:	687b      	ldr	r3, [r7, #4]
 8107404:	68db      	ldr	r3, [r3, #12]
 8107406:	2b02      	cmp	r3, #2
 8107408:	d001      	beq.n	810740e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 810740a:	f7f9 f802 	bl	8100412 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 810740e:	687b      	ldr	r3, [r7, #4]
 8107410:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8107414:	7bfa      	ldrb	r2, [r7, #15]
 8107416:	4611      	mov	r1, r2
 8107418:	4618      	mov	r0, r3
 810741a:	f7fe fdbf 	bl	8105f9c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 810741e:	687b      	ldr	r3, [r7, #4]
 8107420:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8107424:	4618      	mov	r0, r3
 8107426:	f7fe fd6b 	bl	8105f00 <USBD_LL_Reset>
}
 810742a:	bf00      	nop
 810742c:	3710      	adds	r7, #16
 810742e:	46bd      	mov	sp, r7
 8107430:	bd80      	pop	{r7, pc}
	...

08107434 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8107434:	b580      	push	{r7, lr}
 8107436:	b082      	sub	sp, #8
 8107438:	af00      	add	r7, sp, #0
 810743a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 810743c:	687b      	ldr	r3, [r7, #4]
 810743e:	681b      	ldr	r3, [r3, #0]
 8107440:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8107444:	681b      	ldr	r3, [r3, #0]
 8107446:	687a      	ldr	r2, [r7, #4]
 8107448:	6812      	ldr	r2, [r2, #0]
 810744a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 810744e:	f043 0301 	orr.w	r3, r3, #1
 8107452:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8107454:	687b      	ldr	r3, [r7, #4]
 8107456:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 810745a:	4618      	mov	r0, r3
 810745c:	f7fe fdae 	bl	8105fbc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8107460:	687b      	ldr	r3, [r7, #4]
 8107462:	6a1b      	ldr	r3, [r3, #32]
 8107464:	2b00      	cmp	r3, #0
 8107466:	d005      	beq.n	8107474 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8107468:	4b04      	ldr	r3, [pc, #16]	; (810747c <HAL_PCD_SuspendCallback+0x48>)
 810746a:	691b      	ldr	r3, [r3, #16]
 810746c:	4a03      	ldr	r2, [pc, #12]	; (810747c <HAL_PCD_SuspendCallback+0x48>)
 810746e:	f043 0306 	orr.w	r3, r3, #6
 8107472:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8107474:	bf00      	nop
 8107476:	3708      	adds	r7, #8
 8107478:	46bd      	mov	sp, r7
 810747a:	bd80      	pop	{r7, pc}
 810747c:	e000ed00 	.word	0xe000ed00

08107480 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8107480:	b580      	push	{r7, lr}
 8107482:	b082      	sub	sp, #8
 8107484:	af00      	add	r7, sp, #0
 8107486:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8107488:	687b      	ldr	r3, [r7, #4]
 810748a:	681b      	ldr	r3, [r3, #0]
 810748c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8107490:	681b      	ldr	r3, [r3, #0]
 8107492:	687a      	ldr	r2, [r7, #4]
 8107494:	6812      	ldr	r2, [r2, #0]
 8107496:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 810749a:	f023 0301 	bic.w	r3, r3, #1
 810749e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 81074a0:	687b      	ldr	r3, [r7, #4]
 81074a2:	6a1b      	ldr	r3, [r3, #32]
 81074a4:	2b00      	cmp	r3, #0
 81074a6:	d007      	beq.n	81074b8 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 81074a8:	4b08      	ldr	r3, [pc, #32]	; (81074cc <HAL_PCD_ResumeCallback+0x4c>)
 81074aa:	691b      	ldr	r3, [r3, #16]
 81074ac:	4a07      	ldr	r2, [pc, #28]	; (81074cc <HAL_PCD_ResumeCallback+0x4c>)
 81074ae:	f023 0306 	bic.w	r3, r3, #6
 81074b2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 81074b4:	f000 faf4 	bl	8107aa0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 81074b8:	687b      	ldr	r3, [r7, #4]
 81074ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 81074be:	4618      	mov	r0, r3
 81074c0:	f7fe fd92 	bl	8105fe8 <USBD_LL_Resume>
}
 81074c4:	bf00      	nop
 81074c6:	3708      	adds	r7, #8
 81074c8:	46bd      	mov	sp, r7
 81074ca:	bd80      	pop	{r7, pc}
 81074cc:	e000ed00 	.word	0xe000ed00

081074d0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 81074d0:	b580      	push	{r7, lr}
 81074d2:	b082      	sub	sp, #8
 81074d4:	af00      	add	r7, sp, #0
 81074d6:	6078      	str	r0, [r7, #4]
 81074d8:	460b      	mov	r3, r1
 81074da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 81074dc:	687b      	ldr	r3, [r7, #4]
 81074de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 81074e2:	78fa      	ldrb	r2, [r7, #3]
 81074e4:	4611      	mov	r1, r2
 81074e6:	4618      	mov	r0, r3
 81074e8:	f7fe fdde 	bl	81060a8 <USBD_LL_IsoOUTIncomplete>
}
 81074ec:	bf00      	nop
 81074ee:	3708      	adds	r7, #8
 81074f0:	46bd      	mov	sp, r7
 81074f2:	bd80      	pop	{r7, pc}

081074f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 81074f4:	b580      	push	{r7, lr}
 81074f6:	b082      	sub	sp, #8
 81074f8:	af00      	add	r7, sp, #0
 81074fa:	6078      	str	r0, [r7, #4]
 81074fc:	460b      	mov	r3, r1
 81074fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8107500:	687b      	ldr	r3, [r7, #4]
 8107502:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8107506:	78fa      	ldrb	r2, [r7, #3]
 8107508:	4611      	mov	r1, r2
 810750a:	4618      	mov	r0, r3
 810750c:	f7fe fda6 	bl	810605c <USBD_LL_IsoINIncomplete>
}
 8107510:	bf00      	nop
 8107512:	3708      	adds	r7, #8
 8107514:	46bd      	mov	sp, r7
 8107516:	bd80      	pop	{r7, pc}

08107518 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8107518:	b580      	push	{r7, lr}
 810751a:	b082      	sub	sp, #8
 810751c:	af00      	add	r7, sp, #0
 810751e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8107520:	687b      	ldr	r3, [r7, #4]
 8107522:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8107526:	4618      	mov	r0, r3
 8107528:	f7fe fde4 	bl	81060f4 <USBD_LL_DevConnected>
}
 810752c:	bf00      	nop
 810752e:	3708      	adds	r7, #8
 8107530:	46bd      	mov	sp, r7
 8107532:	bd80      	pop	{r7, pc}

08107534 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8107534:	b580      	push	{r7, lr}
 8107536:	b082      	sub	sp, #8
 8107538:	af00      	add	r7, sp, #0
 810753a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 810753c:	687b      	ldr	r3, [r7, #4]
 810753e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8107542:	4618      	mov	r0, r3
 8107544:	f7fe fde1 	bl	810610a <USBD_LL_DevDisconnected>
}
 8107548:	bf00      	nop
 810754a:	3708      	adds	r7, #8
 810754c:	46bd      	mov	sp, r7
 810754e:	bd80      	pop	{r7, pc}

08107550 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8107550:	b580      	push	{r7, lr}
 8107552:	b082      	sub	sp, #8
 8107554:	af00      	add	r7, sp, #0
 8107556:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8107558:	687b      	ldr	r3, [r7, #4]
 810755a:	781b      	ldrb	r3, [r3, #0]
 810755c:	2b00      	cmp	r3, #0
 810755e:	d139      	bne.n	81075d4 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8107560:	4a1f      	ldr	r2, [pc, #124]	; (81075e0 <USBD_LL_Init+0x90>)
 8107562:	687b      	ldr	r3, [r7, #4]
 8107564:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8107568:	687b      	ldr	r3, [r7, #4]
 810756a:	4a1d      	ldr	r2, [pc, #116]	; (81075e0 <USBD_LL_Init+0x90>)
 810756c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8107570:	4b1b      	ldr	r3, [pc, #108]	; (81075e0 <USBD_LL_Init+0x90>)
 8107572:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8107576:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8107578:	4b19      	ldr	r3, [pc, #100]	; (81075e0 <USBD_LL_Init+0x90>)
 810757a:	2206      	movs	r2, #6
 810757c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 810757e:	4b18      	ldr	r3, [pc, #96]	; (81075e0 <USBD_LL_Init+0x90>)
 8107580:	2202      	movs	r2, #2
 8107582:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8107584:	4b16      	ldr	r3, [pc, #88]	; (81075e0 <USBD_LL_Init+0x90>)
 8107586:	2200      	movs	r2, #0
 8107588:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 810758a:	4b15      	ldr	r3, [pc, #84]	; (81075e0 <USBD_LL_Init+0x90>)
 810758c:	2200      	movs	r2, #0
 810758e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8107590:	4b13      	ldr	r3, [pc, #76]	; (81075e0 <USBD_LL_Init+0x90>)
 8107592:	2200      	movs	r2, #0
 8107594:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8107596:	4b12      	ldr	r3, [pc, #72]	; (81075e0 <USBD_LL_Init+0x90>)
 8107598:	2200      	movs	r2, #0
 810759a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 810759c:	4b10      	ldr	r3, [pc, #64]	; (81075e0 <USBD_LL_Init+0x90>)
 810759e:	2200      	movs	r2, #0
 81075a0:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 81075a2:	4b0f      	ldr	r3, [pc, #60]	; (81075e0 <USBD_LL_Init+0x90>)
 81075a4:	2200      	movs	r2, #0
 81075a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 81075a8:	480d      	ldr	r0, [pc, #52]	; (81075e0 <USBD_LL_Init+0x90>)
 81075aa:	f7f9 fdbf 	bl	810112c <HAL_PCD_Init>
 81075ae:	4603      	mov	r3, r0
 81075b0:	2b00      	cmp	r3, #0
 81075b2:	d001      	beq.n	81075b8 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 81075b4:	f7f8 ff2d 	bl	8100412 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 81075b8:	2180      	movs	r1, #128	; 0x80
 81075ba:	4809      	ldr	r0, [pc, #36]	; (81075e0 <USBD_LL_Init+0x90>)
 81075bc:	f7fa ff41 	bl	8102442 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 81075c0:	2240      	movs	r2, #64	; 0x40
 81075c2:	2100      	movs	r1, #0
 81075c4:	4806      	ldr	r0, [pc, #24]	; (81075e0 <USBD_LL_Init+0x90>)
 81075c6:	f7fa fef5 	bl	81023b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 81075ca:	2280      	movs	r2, #128	; 0x80
 81075cc:	2101      	movs	r1, #1
 81075ce:	4804      	ldr	r0, [pc, #16]	; (81075e0 <USBD_LL_Init+0x90>)
 81075d0:	f7fa fef0 	bl	81023b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 81075d4:	2300      	movs	r3, #0
}
 81075d6:	4618      	mov	r0, r3
 81075d8:	3708      	adds	r7, #8
 81075da:	46bd      	mov	sp, r7
 81075dc:	bd80      	pop	{r7, pc}
 81075de:	bf00      	nop
 81075e0:	200016a4 	.word	0x200016a4

081075e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 81075e4:	b580      	push	{r7, lr}
 81075e6:	b084      	sub	sp, #16
 81075e8:	af00      	add	r7, sp, #0
 81075ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 81075ec:	2300      	movs	r3, #0
 81075ee:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 81075f0:	2300      	movs	r3, #0
 81075f2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 81075f4:	687b      	ldr	r3, [r7, #4]
 81075f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 81075fa:	4618      	mov	r0, r3
 81075fc:	f7f9 feba 	bl	8101374 <HAL_PCD_Start>
 8107600:	4603      	mov	r3, r0
 8107602:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8107604:	7bbb      	ldrb	r3, [r7, #14]
 8107606:	2b03      	cmp	r3, #3
 8107608:	d816      	bhi.n	8107638 <USBD_LL_Start+0x54>
 810760a:	a201      	add	r2, pc, #4	; (adr r2, 8107610 <USBD_LL_Start+0x2c>)
 810760c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107610:	08107621 	.word	0x08107621
 8107614:	08107627 	.word	0x08107627
 8107618:	0810762d 	.word	0x0810762d
 810761c:	08107633 	.word	0x08107633
    case HAL_OK :
      usb_status = USBD_OK;
 8107620:	2300      	movs	r3, #0
 8107622:	73fb      	strb	r3, [r7, #15]
    break;
 8107624:	e00b      	b.n	810763e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8107626:	2303      	movs	r3, #3
 8107628:	73fb      	strb	r3, [r7, #15]
    break;
 810762a:	e008      	b.n	810763e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 810762c:	2301      	movs	r3, #1
 810762e:	73fb      	strb	r3, [r7, #15]
    break;
 8107630:	e005      	b.n	810763e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8107632:	2303      	movs	r3, #3
 8107634:	73fb      	strb	r3, [r7, #15]
    break;
 8107636:	e002      	b.n	810763e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8107638:	2303      	movs	r3, #3
 810763a:	73fb      	strb	r3, [r7, #15]
    break;
 810763c:	bf00      	nop
  }
  return usb_status;
 810763e:	7bfb      	ldrb	r3, [r7, #15]
}
 8107640:	4618      	mov	r0, r3
 8107642:	3710      	adds	r7, #16
 8107644:	46bd      	mov	sp, r7
 8107646:	bd80      	pop	{r7, pc}

08107648 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8107648:	b580      	push	{r7, lr}
 810764a:	b084      	sub	sp, #16
 810764c:	af00      	add	r7, sp, #0
 810764e:	6078      	str	r0, [r7, #4]
 8107650:	4608      	mov	r0, r1
 8107652:	4611      	mov	r1, r2
 8107654:	461a      	mov	r2, r3
 8107656:	4603      	mov	r3, r0
 8107658:	70fb      	strb	r3, [r7, #3]
 810765a:	460b      	mov	r3, r1
 810765c:	70bb      	strb	r3, [r7, #2]
 810765e:	4613      	mov	r3, r2
 8107660:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8107662:	2300      	movs	r3, #0
 8107664:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8107666:	2300      	movs	r3, #0
 8107668:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 810766a:	687b      	ldr	r3, [r7, #4]
 810766c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8107670:	78bb      	ldrb	r3, [r7, #2]
 8107672:	883a      	ldrh	r2, [r7, #0]
 8107674:	78f9      	ldrb	r1, [r7, #3]
 8107676:	f7fa fb64 	bl	8101d42 <HAL_PCD_EP_Open>
 810767a:	4603      	mov	r3, r0
 810767c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 810767e:	7bbb      	ldrb	r3, [r7, #14]
 8107680:	2b03      	cmp	r3, #3
 8107682:	d817      	bhi.n	81076b4 <USBD_LL_OpenEP+0x6c>
 8107684:	a201      	add	r2, pc, #4	; (adr r2, 810768c <USBD_LL_OpenEP+0x44>)
 8107686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810768a:	bf00      	nop
 810768c:	0810769d 	.word	0x0810769d
 8107690:	081076a3 	.word	0x081076a3
 8107694:	081076a9 	.word	0x081076a9
 8107698:	081076af 	.word	0x081076af
    case HAL_OK :
      usb_status = USBD_OK;
 810769c:	2300      	movs	r3, #0
 810769e:	73fb      	strb	r3, [r7, #15]
    break;
 81076a0:	e00b      	b.n	81076ba <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 81076a2:	2303      	movs	r3, #3
 81076a4:	73fb      	strb	r3, [r7, #15]
    break;
 81076a6:	e008      	b.n	81076ba <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 81076a8:	2301      	movs	r3, #1
 81076aa:	73fb      	strb	r3, [r7, #15]
    break;
 81076ac:	e005      	b.n	81076ba <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 81076ae:	2303      	movs	r3, #3
 81076b0:	73fb      	strb	r3, [r7, #15]
    break;
 81076b2:	e002      	b.n	81076ba <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 81076b4:	2303      	movs	r3, #3
 81076b6:	73fb      	strb	r3, [r7, #15]
    break;
 81076b8:	bf00      	nop
  }
  return usb_status;
 81076ba:	7bfb      	ldrb	r3, [r7, #15]
}
 81076bc:	4618      	mov	r0, r3
 81076be:	3710      	adds	r7, #16
 81076c0:	46bd      	mov	sp, r7
 81076c2:	bd80      	pop	{r7, pc}

081076c4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 81076c4:	b580      	push	{r7, lr}
 81076c6:	b084      	sub	sp, #16
 81076c8:	af00      	add	r7, sp, #0
 81076ca:	6078      	str	r0, [r7, #4]
 81076cc:	460b      	mov	r3, r1
 81076ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 81076d0:	2300      	movs	r3, #0
 81076d2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 81076d4:	2300      	movs	r3, #0
 81076d6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 81076d8:	687b      	ldr	r3, [r7, #4]
 81076da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 81076de:	78fa      	ldrb	r2, [r7, #3]
 81076e0:	4611      	mov	r1, r2
 81076e2:	4618      	mov	r0, r3
 81076e4:	f7fa fb95 	bl	8101e12 <HAL_PCD_EP_Close>
 81076e8:	4603      	mov	r3, r0
 81076ea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 81076ec:	7bbb      	ldrb	r3, [r7, #14]
 81076ee:	2b03      	cmp	r3, #3
 81076f0:	d816      	bhi.n	8107720 <USBD_LL_CloseEP+0x5c>
 81076f2:	a201      	add	r2, pc, #4	; (adr r2, 81076f8 <USBD_LL_CloseEP+0x34>)
 81076f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81076f8:	08107709 	.word	0x08107709
 81076fc:	0810770f 	.word	0x0810770f
 8107700:	08107715 	.word	0x08107715
 8107704:	0810771b 	.word	0x0810771b
    case HAL_OK :
      usb_status = USBD_OK;
 8107708:	2300      	movs	r3, #0
 810770a:	73fb      	strb	r3, [r7, #15]
    break;
 810770c:	e00b      	b.n	8107726 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 810770e:	2303      	movs	r3, #3
 8107710:	73fb      	strb	r3, [r7, #15]
    break;
 8107712:	e008      	b.n	8107726 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8107714:	2301      	movs	r3, #1
 8107716:	73fb      	strb	r3, [r7, #15]
    break;
 8107718:	e005      	b.n	8107726 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 810771a:	2303      	movs	r3, #3
 810771c:	73fb      	strb	r3, [r7, #15]
    break;
 810771e:	e002      	b.n	8107726 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8107720:	2303      	movs	r3, #3
 8107722:	73fb      	strb	r3, [r7, #15]
    break;
 8107724:	bf00      	nop
  }
  return usb_status;
 8107726:	7bfb      	ldrb	r3, [r7, #15]
}
 8107728:	4618      	mov	r0, r3
 810772a:	3710      	adds	r7, #16
 810772c:	46bd      	mov	sp, r7
 810772e:	bd80      	pop	{r7, pc}

08107730 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8107730:	b580      	push	{r7, lr}
 8107732:	b084      	sub	sp, #16
 8107734:	af00      	add	r7, sp, #0
 8107736:	6078      	str	r0, [r7, #4]
 8107738:	460b      	mov	r3, r1
 810773a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 810773c:	2300      	movs	r3, #0
 810773e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8107740:	2300      	movs	r3, #0
 8107742:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8107744:	687b      	ldr	r3, [r7, #4]
 8107746:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 810774a:	78fa      	ldrb	r2, [r7, #3]
 810774c:	4611      	mov	r1, r2
 810774e:	4618      	mov	r0, r3
 8107750:	f7fa fc3c 	bl	8101fcc <HAL_PCD_EP_SetStall>
 8107754:	4603      	mov	r3, r0
 8107756:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8107758:	7bbb      	ldrb	r3, [r7, #14]
 810775a:	2b03      	cmp	r3, #3
 810775c:	d816      	bhi.n	810778c <USBD_LL_StallEP+0x5c>
 810775e:	a201      	add	r2, pc, #4	; (adr r2, 8107764 <USBD_LL_StallEP+0x34>)
 8107760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107764:	08107775 	.word	0x08107775
 8107768:	0810777b 	.word	0x0810777b
 810776c:	08107781 	.word	0x08107781
 8107770:	08107787 	.word	0x08107787
    case HAL_OK :
      usb_status = USBD_OK;
 8107774:	2300      	movs	r3, #0
 8107776:	73fb      	strb	r3, [r7, #15]
    break;
 8107778:	e00b      	b.n	8107792 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 810777a:	2303      	movs	r3, #3
 810777c:	73fb      	strb	r3, [r7, #15]
    break;
 810777e:	e008      	b.n	8107792 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8107780:	2301      	movs	r3, #1
 8107782:	73fb      	strb	r3, [r7, #15]
    break;
 8107784:	e005      	b.n	8107792 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8107786:	2303      	movs	r3, #3
 8107788:	73fb      	strb	r3, [r7, #15]
    break;
 810778a:	e002      	b.n	8107792 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 810778c:	2303      	movs	r3, #3
 810778e:	73fb      	strb	r3, [r7, #15]
    break;
 8107790:	bf00      	nop
  }
  return usb_status;
 8107792:	7bfb      	ldrb	r3, [r7, #15]
}
 8107794:	4618      	mov	r0, r3
 8107796:	3710      	adds	r7, #16
 8107798:	46bd      	mov	sp, r7
 810779a:	bd80      	pop	{r7, pc}

0810779c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 810779c:	b580      	push	{r7, lr}
 810779e:	b084      	sub	sp, #16
 81077a0:	af00      	add	r7, sp, #0
 81077a2:	6078      	str	r0, [r7, #4]
 81077a4:	460b      	mov	r3, r1
 81077a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 81077a8:	2300      	movs	r3, #0
 81077aa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 81077ac:	2300      	movs	r3, #0
 81077ae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 81077b0:	687b      	ldr	r3, [r7, #4]
 81077b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 81077b6:	78fa      	ldrb	r2, [r7, #3]
 81077b8:	4611      	mov	r1, r2
 81077ba:	4618      	mov	r0, r3
 81077bc:	f7fa fc68 	bl	8102090 <HAL_PCD_EP_ClrStall>
 81077c0:	4603      	mov	r3, r0
 81077c2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 81077c4:	7bbb      	ldrb	r3, [r7, #14]
 81077c6:	2b03      	cmp	r3, #3
 81077c8:	d816      	bhi.n	81077f8 <USBD_LL_ClearStallEP+0x5c>
 81077ca:	a201      	add	r2, pc, #4	; (adr r2, 81077d0 <USBD_LL_ClearStallEP+0x34>)
 81077cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81077d0:	081077e1 	.word	0x081077e1
 81077d4:	081077e7 	.word	0x081077e7
 81077d8:	081077ed 	.word	0x081077ed
 81077dc:	081077f3 	.word	0x081077f3
    case HAL_OK :
      usb_status = USBD_OK;
 81077e0:	2300      	movs	r3, #0
 81077e2:	73fb      	strb	r3, [r7, #15]
    break;
 81077e4:	e00b      	b.n	81077fe <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 81077e6:	2303      	movs	r3, #3
 81077e8:	73fb      	strb	r3, [r7, #15]
    break;
 81077ea:	e008      	b.n	81077fe <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 81077ec:	2301      	movs	r3, #1
 81077ee:	73fb      	strb	r3, [r7, #15]
    break;
 81077f0:	e005      	b.n	81077fe <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 81077f2:	2303      	movs	r3, #3
 81077f4:	73fb      	strb	r3, [r7, #15]
    break;
 81077f6:	e002      	b.n	81077fe <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 81077f8:	2303      	movs	r3, #3
 81077fa:	73fb      	strb	r3, [r7, #15]
    break;
 81077fc:	bf00      	nop
  }
  return usb_status;
 81077fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8107800:	4618      	mov	r0, r3
 8107802:	3710      	adds	r7, #16
 8107804:	46bd      	mov	sp, r7
 8107806:	bd80      	pop	{r7, pc}

08107808 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8107808:	b480      	push	{r7}
 810780a:	b085      	sub	sp, #20
 810780c:	af00      	add	r7, sp, #0
 810780e:	6078      	str	r0, [r7, #4]
 8107810:	460b      	mov	r3, r1
 8107812:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8107814:	687b      	ldr	r3, [r7, #4]
 8107816:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 810781a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 810781c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8107820:	2b00      	cmp	r3, #0
 8107822:	da0b      	bge.n	810783c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8107824:	78fb      	ldrb	r3, [r7, #3]
 8107826:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 810782a:	68f9      	ldr	r1, [r7, #12]
 810782c:	4613      	mov	r3, r2
 810782e:	00db      	lsls	r3, r3, #3
 8107830:	4413      	add	r3, r2
 8107832:	009b      	lsls	r3, r3, #2
 8107834:	440b      	add	r3, r1
 8107836:	333e      	adds	r3, #62	; 0x3e
 8107838:	781b      	ldrb	r3, [r3, #0]
 810783a:	e00b      	b.n	8107854 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 810783c:	78fb      	ldrb	r3, [r7, #3]
 810783e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8107842:	68f9      	ldr	r1, [r7, #12]
 8107844:	4613      	mov	r3, r2
 8107846:	00db      	lsls	r3, r3, #3
 8107848:	4413      	add	r3, r2
 810784a:	009b      	lsls	r3, r3, #2
 810784c:	440b      	add	r3, r1
 810784e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8107852:	781b      	ldrb	r3, [r3, #0]
  }
}
 8107854:	4618      	mov	r0, r3
 8107856:	3714      	adds	r7, #20
 8107858:	46bd      	mov	sp, r7
 810785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810785e:	4770      	bx	lr

08107860 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8107860:	b580      	push	{r7, lr}
 8107862:	b084      	sub	sp, #16
 8107864:	af00      	add	r7, sp, #0
 8107866:	6078      	str	r0, [r7, #4]
 8107868:	460b      	mov	r3, r1
 810786a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 810786c:	2300      	movs	r3, #0
 810786e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8107870:	2300      	movs	r3, #0
 8107872:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8107874:	687b      	ldr	r3, [r7, #4]
 8107876:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 810787a:	78fa      	ldrb	r2, [r7, #3]
 810787c:	4611      	mov	r1, r2
 810787e:	4618      	mov	r0, r3
 8107880:	f7fa fa3a 	bl	8101cf8 <HAL_PCD_SetAddress>
 8107884:	4603      	mov	r3, r0
 8107886:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8107888:	7bbb      	ldrb	r3, [r7, #14]
 810788a:	2b03      	cmp	r3, #3
 810788c:	d816      	bhi.n	81078bc <USBD_LL_SetUSBAddress+0x5c>
 810788e:	a201      	add	r2, pc, #4	; (adr r2, 8107894 <USBD_LL_SetUSBAddress+0x34>)
 8107890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107894:	081078a5 	.word	0x081078a5
 8107898:	081078ab 	.word	0x081078ab
 810789c:	081078b1 	.word	0x081078b1
 81078a0:	081078b7 	.word	0x081078b7
    case HAL_OK :
      usb_status = USBD_OK;
 81078a4:	2300      	movs	r3, #0
 81078a6:	73fb      	strb	r3, [r7, #15]
    break;
 81078a8:	e00b      	b.n	81078c2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 81078aa:	2303      	movs	r3, #3
 81078ac:	73fb      	strb	r3, [r7, #15]
    break;
 81078ae:	e008      	b.n	81078c2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 81078b0:	2301      	movs	r3, #1
 81078b2:	73fb      	strb	r3, [r7, #15]
    break;
 81078b4:	e005      	b.n	81078c2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 81078b6:	2303      	movs	r3, #3
 81078b8:	73fb      	strb	r3, [r7, #15]
    break;
 81078ba:	e002      	b.n	81078c2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 81078bc:	2303      	movs	r3, #3
 81078be:	73fb      	strb	r3, [r7, #15]
    break;
 81078c0:	bf00      	nop
  }
  return usb_status;
 81078c2:	7bfb      	ldrb	r3, [r7, #15]
}
 81078c4:	4618      	mov	r0, r3
 81078c6:	3710      	adds	r7, #16
 81078c8:	46bd      	mov	sp, r7
 81078ca:	bd80      	pop	{r7, pc}

081078cc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 81078cc:	b580      	push	{r7, lr}
 81078ce:	b086      	sub	sp, #24
 81078d0:	af00      	add	r7, sp, #0
 81078d2:	60f8      	str	r0, [r7, #12]
 81078d4:	607a      	str	r2, [r7, #4]
 81078d6:	603b      	str	r3, [r7, #0]
 81078d8:	460b      	mov	r3, r1
 81078da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 81078dc:	2300      	movs	r3, #0
 81078de:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 81078e0:	2300      	movs	r3, #0
 81078e2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 81078e4:	68fb      	ldr	r3, [r7, #12]
 81078e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 81078ea:	7af9      	ldrb	r1, [r7, #11]
 81078ec:	683b      	ldr	r3, [r7, #0]
 81078ee:	687a      	ldr	r2, [r7, #4]
 81078f0:	f7fa fb2f 	bl	8101f52 <HAL_PCD_EP_Transmit>
 81078f4:	4603      	mov	r3, r0
 81078f6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 81078f8:	7dbb      	ldrb	r3, [r7, #22]
 81078fa:	2b03      	cmp	r3, #3
 81078fc:	d816      	bhi.n	810792c <USBD_LL_Transmit+0x60>
 81078fe:	a201      	add	r2, pc, #4	; (adr r2, 8107904 <USBD_LL_Transmit+0x38>)
 8107900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107904:	08107915 	.word	0x08107915
 8107908:	0810791b 	.word	0x0810791b
 810790c:	08107921 	.word	0x08107921
 8107910:	08107927 	.word	0x08107927
    case HAL_OK :
      usb_status = USBD_OK;
 8107914:	2300      	movs	r3, #0
 8107916:	75fb      	strb	r3, [r7, #23]
    break;
 8107918:	e00b      	b.n	8107932 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 810791a:	2303      	movs	r3, #3
 810791c:	75fb      	strb	r3, [r7, #23]
    break;
 810791e:	e008      	b.n	8107932 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8107920:	2301      	movs	r3, #1
 8107922:	75fb      	strb	r3, [r7, #23]
    break;
 8107924:	e005      	b.n	8107932 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8107926:	2303      	movs	r3, #3
 8107928:	75fb      	strb	r3, [r7, #23]
    break;
 810792a:	e002      	b.n	8107932 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 810792c:	2303      	movs	r3, #3
 810792e:	75fb      	strb	r3, [r7, #23]
    break;
 8107930:	bf00      	nop
  }
  return usb_status;
 8107932:	7dfb      	ldrb	r3, [r7, #23]
}
 8107934:	4618      	mov	r0, r3
 8107936:	3718      	adds	r7, #24
 8107938:	46bd      	mov	sp, r7
 810793a:	bd80      	pop	{r7, pc}

0810793c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 810793c:	b580      	push	{r7, lr}
 810793e:	b086      	sub	sp, #24
 8107940:	af00      	add	r7, sp, #0
 8107942:	60f8      	str	r0, [r7, #12]
 8107944:	607a      	str	r2, [r7, #4]
 8107946:	603b      	str	r3, [r7, #0]
 8107948:	460b      	mov	r3, r1
 810794a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 810794c:	2300      	movs	r3, #0
 810794e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8107950:	2300      	movs	r3, #0
 8107952:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8107954:	68fb      	ldr	r3, [r7, #12]
 8107956:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 810795a:	7af9      	ldrb	r1, [r7, #11]
 810795c:	683b      	ldr	r3, [r7, #0]
 810795e:	687a      	ldr	r2, [r7, #4]
 8107960:	f7fa faa1 	bl	8101ea6 <HAL_PCD_EP_Receive>
 8107964:	4603      	mov	r3, r0
 8107966:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8107968:	7dbb      	ldrb	r3, [r7, #22]
 810796a:	2b03      	cmp	r3, #3
 810796c:	d816      	bhi.n	810799c <USBD_LL_PrepareReceive+0x60>
 810796e:	a201      	add	r2, pc, #4	; (adr r2, 8107974 <USBD_LL_PrepareReceive+0x38>)
 8107970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107974:	08107985 	.word	0x08107985
 8107978:	0810798b 	.word	0x0810798b
 810797c:	08107991 	.word	0x08107991
 8107980:	08107997 	.word	0x08107997
    case HAL_OK :
      usb_status = USBD_OK;
 8107984:	2300      	movs	r3, #0
 8107986:	75fb      	strb	r3, [r7, #23]
    break;
 8107988:	e00b      	b.n	81079a2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 810798a:	2303      	movs	r3, #3
 810798c:	75fb      	strb	r3, [r7, #23]
    break;
 810798e:	e008      	b.n	81079a2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8107990:	2301      	movs	r3, #1
 8107992:	75fb      	strb	r3, [r7, #23]
    break;
 8107994:	e005      	b.n	81079a2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8107996:	2303      	movs	r3, #3
 8107998:	75fb      	strb	r3, [r7, #23]
    break;
 810799a:	e002      	b.n	81079a2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 810799c:	2303      	movs	r3, #3
 810799e:	75fb      	strb	r3, [r7, #23]
    break;
 81079a0:	bf00      	nop
  }
  return usb_status;
 81079a2:	7dfb      	ldrb	r3, [r7, #23]
}
 81079a4:	4618      	mov	r0, r3
 81079a6:	3718      	adds	r7, #24
 81079a8:	46bd      	mov	sp, r7
 81079aa:	bd80      	pop	{r7, pc}

081079ac <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 81079ac:	b580      	push	{r7, lr}
 81079ae:	b082      	sub	sp, #8
 81079b0:	af00      	add	r7, sp, #0
 81079b2:	6078      	str	r0, [r7, #4]
 81079b4:	460b      	mov	r3, r1
 81079b6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 81079b8:	687b      	ldr	r3, [r7, #4]
 81079ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 81079be:	78fa      	ldrb	r2, [r7, #3]
 81079c0:	4611      	mov	r1, r2
 81079c2:	4618      	mov	r0, r3
 81079c4:	f7fa faad 	bl	8101f22 <HAL_PCD_EP_GetRxCount>
 81079c8:	4603      	mov	r3, r0
}
 81079ca:	4618      	mov	r0, r3
 81079cc:	3708      	adds	r7, #8
 81079ce:	46bd      	mov	sp, r7
 81079d0:	bd80      	pop	{r7, pc}
	...

081079d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 81079d4:	b580      	push	{r7, lr}
 81079d6:	b082      	sub	sp, #8
 81079d8:	af00      	add	r7, sp, #0
 81079da:	6078      	str	r0, [r7, #4]
 81079dc:	460b      	mov	r3, r1
 81079de:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 81079e0:	78fb      	ldrb	r3, [r7, #3]
 81079e2:	2b00      	cmp	r3, #0
 81079e4:	d002      	beq.n	81079ec <HAL_PCDEx_LPM_Callback+0x18>
 81079e6:	2b01      	cmp	r3, #1
 81079e8:	d01f      	beq.n	8107a2a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 81079ea:	e03b      	b.n	8107a64 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 81079ec:	687b      	ldr	r3, [r7, #4]
 81079ee:	6a1b      	ldr	r3, [r3, #32]
 81079f0:	2b00      	cmp	r3, #0
 81079f2:	d007      	beq.n	8107a04 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 81079f4:	f000 f854 	bl	8107aa0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 81079f8:	4b1c      	ldr	r3, [pc, #112]	; (8107a6c <HAL_PCDEx_LPM_Callback+0x98>)
 81079fa:	691b      	ldr	r3, [r3, #16]
 81079fc:	4a1b      	ldr	r2, [pc, #108]	; (8107a6c <HAL_PCDEx_LPM_Callback+0x98>)
 81079fe:	f023 0306 	bic.w	r3, r3, #6
 8107a02:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8107a04:	687b      	ldr	r3, [r7, #4]
 8107a06:	681b      	ldr	r3, [r3, #0]
 8107a08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8107a0c:	681b      	ldr	r3, [r3, #0]
 8107a0e:	687a      	ldr	r2, [r7, #4]
 8107a10:	6812      	ldr	r2, [r2, #0]
 8107a12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8107a16:	f023 0301 	bic.w	r3, r3, #1
 8107a1a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8107a1c:	687b      	ldr	r3, [r7, #4]
 8107a1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8107a22:	4618      	mov	r0, r3
 8107a24:	f7fe fae0 	bl	8105fe8 <USBD_LL_Resume>
    break;
 8107a28:	e01c      	b.n	8107a64 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8107a2a:	687b      	ldr	r3, [r7, #4]
 8107a2c:	681b      	ldr	r3, [r3, #0]
 8107a2e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8107a32:	681b      	ldr	r3, [r3, #0]
 8107a34:	687a      	ldr	r2, [r7, #4]
 8107a36:	6812      	ldr	r2, [r2, #0]
 8107a38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8107a3c:	f043 0301 	orr.w	r3, r3, #1
 8107a40:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8107a42:	687b      	ldr	r3, [r7, #4]
 8107a44:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8107a48:	4618      	mov	r0, r3
 8107a4a:	f7fe fab7 	bl	8105fbc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8107a4e:	687b      	ldr	r3, [r7, #4]
 8107a50:	6a1b      	ldr	r3, [r3, #32]
 8107a52:	2b00      	cmp	r3, #0
 8107a54:	d005      	beq.n	8107a62 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8107a56:	4b05      	ldr	r3, [pc, #20]	; (8107a6c <HAL_PCDEx_LPM_Callback+0x98>)
 8107a58:	691b      	ldr	r3, [r3, #16]
 8107a5a:	4a04      	ldr	r2, [pc, #16]	; (8107a6c <HAL_PCDEx_LPM_Callback+0x98>)
 8107a5c:	f043 0306 	orr.w	r3, r3, #6
 8107a60:	6113      	str	r3, [r2, #16]
    break;
 8107a62:	bf00      	nop
}
 8107a64:	bf00      	nop
 8107a66:	3708      	adds	r7, #8
 8107a68:	46bd      	mov	sp, r7
 8107a6a:	bd80      	pop	{r7, pc}
 8107a6c:	e000ed00 	.word	0xe000ed00

08107a70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8107a70:	b480      	push	{r7}
 8107a72:	b083      	sub	sp, #12
 8107a74:	af00      	add	r7, sp, #0
 8107a76:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8107a78:	4b03      	ldr	r3, [pc, #12]	; (8107a88 <USBD_static_malloc+0x18>)
}
 8107a7a:	4618      	mov	r0, r3
 8107a7c:	370c      	adds	r7, #12
 8107a7e:	46bd      	mov	sp, r7
 8107a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a84:	4770      	bx	lr
 8107a86:	bf00      	nop
 8107a88:	20001bb0 	.word	0x20001bb0

08107a8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8107a8c:	b480      	push	{r7}
 8107a8e:	b083      	sub	sp, #12
 8107a90:	af00      	add	r7, sp, #0
 8107a92:	6078      	str	r0, [r7, #4]

}
 8107a94:	bf00      	nop
 8107a96:	370c      	adds	r7, #12
 8107a98:	46bd      	mov	sp, r7
 8107a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a9e:	4770      	bx	lr

08107aa0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8107aa0:	b580      	push	{r7, lr}
 8107aa2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8107aa4:	f7f8 fc30 	bl	8100308 <SystemClock_Config>
}
 8107aa8:	bf00      	nop
 8107aaa:	bd80      	pop	{r7, pc}

08107aac <__libc_init_array>:
 8107aac:	b570      	push	{r4, r5, r6, lr}
 8107aae:	4d0d      	ldr	r5, [pc, #52]	; (8107ae4 <__libc_init_array+0x38>)
 8107ab0:	4c0d      	ldr	r4, [pc, #52]	; (8107ae8 <__libc_init_array+0x3c>)
 8107ab2:	1b64      	subs	r4, r4, r5
 8107ab4:	10a4      	asrs	r4, r4, #2
 8107ab6:	2600      	movs	r6, #0
 8107ab8:	42a6      	cmp	r6, r4
 8107aba:	d109      	bne.n	8107ad0 <__libc_init_array+0x24>
 8107abc:	4d0b      	ldr	r5, [pc, #44]	; (8107aec <__libc_init_array+0x40>)
 8107abe:	4c0c      	ldr	r4, [pc, #48]	; (8107af0 <__libc_init_array+0x44>)
 8107ac0:	f000 f820 	bl	8107b04 <_init>
 8107ac4:	1b64      	subs	r4, r4, r5
 8107ac6:	10a4      	asrs	r4, r4, #2
 8107ac8:	2600      	movs	r6, #0
 8107aca:	42a6      	cmp	r6, r4
 8107acc:	d105      	bne.n	8107ada <__libc_init_array+0x2e>
 8107ace:	bd70      	pop	{r4, r5, r6, pc}
 8107ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8107ad4:	4798      	blx	r3
 8107ad6:	3601      	adds	r6, #1
 8107ad8:	e7ee      	b.n	8107ab8 <__libc_init_array+0xc>
 8107ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8107ade:	4798      	blx	r3
 8107ae0:	3601      	adds	r6, #1
 8107ae2:	e7f2      	b.n	8107aca <__libc_init_array+0x1e>
 8107ae4:	08107b98 	.word	0x08107b98
 8107ae8:	08107b98 	.word	0x08107b98
 8107aec:	08107b98 	.word	0x08107b98
 8107af0:	08107b9c 	.word	0x08107b9c

08107af4 <memset>:
 8107af4:	4402      	add	r2, r0
 8107af6:	4603      	mov	r3, r0
 8107af8:	4293      	cmp	r3, r2
 8107afa:	d100      	bne.n	8107afe <memset+0xa>
 8107afc:	4770      	bx	lr
 8107afe:	f803 1b01 	strb.w	r1, [r3], #1
 8107b02:	e7f9      	b.n	8107af8 <memset+0x4>

08107b04 <_init>:
 8107b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107b06:	bf00      	nop
 8107b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8107b0a:	bc08      	pop	{r3}
 8107b0c:	469e      	mov	lr, r3
 8107b0e:	4770      	bx	lr

08107b10 <_fini>:
 8107b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107b12:	bf00      	nop
 8107b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8107b16:	bc08      	pop	{r3}
 8107b18:	469e      	mov	lr, r3
 8107b1a:	4770      	bx	lr
