
usb_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073b4  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08007570  08007570  00017570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075f8  080075f8  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  080075f8  080075f8  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  080075f8  080075f8  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075f8  080075f8  000175f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075fc  080075fc  000175fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08007600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c20  20000190  08007790  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001db0  08007790  00021db0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001041b  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e48  00000000  00000000  000305db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  00033428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  00034240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031fcd  00000000  00000000  00034f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011770  00000000  00000000  00066ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011c8c9  00000000  00000000  0007863d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00194f06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037e8  00000000  00000000  00194f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000190 	.word	0x20000190
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08007558 	.word	0x08007558

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000194 	.word	0x20000194
 80001f8:	08007558 	.word	0x08007558

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 f92b 	bl	800045a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f805 	bl	8000212 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f000 f856 	bl	80002b8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800020c:	f006 fb20 	bl	8006850 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000210:	e7fe      	b.n	8000210 <main+0x14>

08000212 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000212:	b580      	push	{r7, lr}
 8000214:	b096      	sub	sp, #88	; 0x58
 8000216:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000218:	f107 0314 	add.w	r3, r7, #20
 800021c:	2244      	movs	r2, #68	; 0x44
 800021e:	2100      	movs	r1, #0
 8000220:	4618      	mov	r0, r3
 8000222:	f007 f991 	bl	8007548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000226:	463b      	mov	r3, r7
 8000228:	2200      	movs	r2, #0
 800022a:	601a      	str	r2, [r3, #0]
 800022c:	605a      	str	r2, [r3, #4]
 800022e:	609a      	str	r2, [r3, #8]
 8000230:	60da      	str	r2, [r3, #12]
 8000232:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000234:	2000      	movs	r0, #0
 8000236:	f001 fe2d 	bl	8001e94 <HAL_PWREx_ControlVoltageScaling>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000240:	f000 f872 	bl	8000328 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000244:	2321      	movs	r3, #33	; 0x21
 8000246:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000248:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800024e:	2301      	movs	r3, #1
 8000250:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000252:	2302      	movs	r3, #2
 8000254:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000256:	2303      	movs	r3, #3
 8000258:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800025a:	2301      	movs	r3, #1
 800025c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 800025e:	231e      	movs	r3, #30
 8000260:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000262:	2302      	movs	r3, #2
 8000264:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000266:	2302      	movs	r3, #2
 8000268:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800026a:	2302      	movs	r3, #2
 800026c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026e:	f107 0314 	add.w	r3, r7, #20
 8000272:	4618      	mov	r0, r3
 8000274:	f001 fec2 	bl	8001ffc <HAL_RCC_OscConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800027e:	f000 f853 	bl	8000328 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000282:	230f      	movs	r3, #15
 8000284:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000286:	2303      	movs	r3, #3
 8000288:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000296:	463b      	mov	r3, r7
 8000298:	2105      	movs	r1, #5
 800029a:	4618      	mov	r0, r3
 800029c:	f002 fac8 	bl	8002830 <HAL_RCC_ClockConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002a6:	f000 f83f 	bl	8000328 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80002aa:	f003 f8e3 	bl	8003474 <HAL_RCCEx_EnableMSIPLLMode>
}
 80002ae:	bf00      	nop
 80002b0:	3758      	adds	r7, #88	; 0x58
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
	...

080002b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002be:	4b0f      	ldr	r3, [pc, #60]	; (80002fc <MX_GPIO_Init+0x44>)
 80002c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c2:	4a0e      	ldr	r2, [pc, #56]	; (80002fc <MX_GPIO_Init+0x44>)
 80002c4:	f043 0301 	orr.w	r3, r3, #1
 80002c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ca:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <MX_GPIO_Init+0x44>)
 80002cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ce:	f003 0301 	and.w	r3, r3, #1
 80002d2:	607b      	str	r3, [r7, #4]
 80002d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002d6:	4b09      	ldr	r3, [pc, #36]	; (80002fc <MX_GPIO_Init+0x44>)
 80002d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002da:	4a08      	ldr	r2, [pc, #32]	; (80002fc <MX_GPIO_Init+0x44>)
 80002dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002e2:	4b06      	ldr	r3, [pc, #24]	; (80002fc <MX_GPIO_Init+0x44>)
 80002e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002ea:	603b      	str	r3, [r7, #0]
 80002ec:	683b      	ldr	r3, [r7, #0]

}
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	40021000 	.word	0x40021000

08000300 <USB_CDC_RxHandler>:

/* USER CODE BEGIN 4 */

void USB_CDC_RxHandler(uint8_t* USB_Buf, uint32_t Len)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	6039      	str	r1, [r7, #0]
	USB_Buf[0]=USB_Buf[0];
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	781a      	ldrb	r2, [r3, #0]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	701a      	strb	r2, [r3, #0]
	CDC_Transmit_FS((uint8_t*)"I am app", sizeof("I am app") - 1);
 8000312:	2108      	movs	r1, #8
 8000314:	4803      	ldr	r0, [pc, #12]	; (8000324 <USB_CDC_RxHandler+0x24>)
 8000316:	f006 fb67 	bl	80069e8 <CDC_Transmit_FS>
}
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	08007570 	.word	0x08007570

08000328 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800032c:	b672      	cpsid	i
}
 800032e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000330:	e7fe      	b.n	8000330 <Error_Handler+0x8>
	...

08000334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800033a:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <HAL_MspInit+0x44>)
 800033c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800033e:	4a0e      	ldr	r2, [pc, #56]	; (8000378 <HAL_MspInit+0x44>)
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	6613      	str	r3, [r2, #96]	; 0x60
 8000346:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <HAL_MspInit+0x44>)
 8000348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	607b      	str	r3, [r7, #4]
 8000350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000352:	4b09      	ldr	r3, [pc, #36]	; (8000378 <HAL_MspInit+0x44>)
 8000354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000356:	4a08      	ldr	r2, [pc, #32]	; (8000378 <HAL_MspInit+0x44>)
 8000358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800035c:	6593      	str	r3, [r2, #88]	; 0x58
 800035e:	4b06      	ldr	r3, [pc, #24]	; (8000378 <HAL_MspInit+0x44>)
 8000360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000366:	603b      	str	r3, [r7, #0]
 8000368:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800036a:	bf00      	nop
 800036c:	370c      	adds	r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	40021000 	.word	0x40021000

0800037c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000380:	e7fe      	b.n	8000380 <NMI_Handler+0x4>

08000382 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000382:	b480      	push	{r7}
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000386:	e7fe      	b.n	8000386 <HardFault_Handler+0x4>

08000388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800038c:	e7fe      	b.n	800038c <MemManage_Handler+0x4>

0800038e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800038e:	b480      	push	{r7}
 8000390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000392:	e7fe      	b.n	8000392 <BusFault_Handler+0x4>

08000394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000398:	e7fe      	b.n	8000398 <UsageFault_Handler+0x4>

0800039a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800039a:	b480      	push	{r7}
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800039e:	bf00      	nop
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr

080003b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003b6:	b480      	push	{r7}
 80003b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003ba:	bf00      	nop
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr

080003c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003c8:	f000 f89c 	bl	8000504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80003d4:	4802      	ldr	r0, [pc, #8]	; (80003e0 <OTG_FS_IRQHandler+0x10>)
 80003d6:	f000 fcd0 	bl	8000d7a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20001684 	.word	0x20001684

080003e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <SystemInit+0x20>)
 80003ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003ee:	4a05      	ldr	r2, [pc, #20]	; (8000404 <SystemInit+0x20>)
 80003f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	e000ed00 	.word	0xe000ed00

08000408 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000408:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000440 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800040c:	f7ff ffea 	bl	80003e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000410:	480c      	ldr	r0, [pc, #48]	; (8000444 <LoopForever+0x6>)
  ldr r1, =_edata
 8000412:	490d      	ldr	r1, [pc, #52]	; (8000448 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000414:	4a0d      	ldr	r2, [pc, #52]	; (800044c <LoopForever+0xe>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000418:	e002      	b.n	8000420 <LoopCopyDataInit>

0800041a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800041a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800041c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800041e:	3304      	adds	r3, #4

08000420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000424:	d3f9      	bcc.n	800041a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000426:	4a0a      	ldr	r2, [pc, #40]	; (8000450 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000428:	4c0a      	ldr	r4, [pc, #40]	; (8000454 <LoopForever+0x16>)
  movs r3, #0
 800042a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800042c:	e001      	b.n	8000432 <LoopFillZerobss>

0800042e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800042e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000430:	3204      	adds	r2, #4

08000432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000434:	d3fb      	bcc.n	800042e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000436:	f007 f863 	bl	8007500 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800043a:	f7ff fedf 	bl	80001fc <main>

0800043e <LoopForever>:

LoopForever:
    b LoopForever
 800043e:	e7fe      	b.n	800043e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000440:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000448:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 800044c:	08007600 	.word	0x08007600
  ldr r2, =_sbss
 8000450:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8000454:	20001db0 	.word	0x20001db0

08000458 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000458:	e7fe      	b.n	8000458 <ADC1_IRQHandler>

0800045a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	b082      	sub	sp, #8
 800045e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000460:	2300      	movs	r3, #0
 8000462:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000464:	2003      	movs	r0, #3
 8000466:	f000 f961 	bl	800072c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800046a:	200f      	movs	r0, #15
 800046c:	f000 f80e 	bl	800048c <HAL_InitTick>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d002      	beq.n	800047c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000476:	2301      	movs	r3, #1
 8000478:	71fb      	strb	r3, [r7, #7]
 800047a:	e001      	b.n	8000480 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800047c:	f7ff ff5a 	bl	8000334 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000480:	79fb      	ldrb	r3, [r7, #7]
}
 8000482:	4618      	mov	r0, r3
 8000484:	3708      	adds	r7, #8
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
	...

0800048c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000494:	2300      	movs	r3, #0
 8000496:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000498:	4b17      	ldr	r3, [pc, #92]	; (80004f8 <HAL_InitTick+0x6c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d023      	beq.n	80004e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80004a0:	4b16      	ldr	r3, [pc, #88]	; (80004fc <HAL_InitTick+0x70>)
 80004a2:	681a      	ldr	r2, [r3, #0]
 80004a4:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <HAL_InitTick+0x6c>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	4619      	mov	r1, r3
 80004aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80004b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80004b6:	4618      	mov	r0, r3
 80004b8:	f000 f96d 	bl	8000796 <HAL_SYSTICK_Config>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d10f      	bne.n	80004e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	2b0f      	cmp	r3, #15
 80004c6:	d809      	bhi.n	80004dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004c8:	2200      	movs	r2, #0
 80004ca:	6879      	ldr	r1, [r7, #4]
 80004cc:	f04f 30ff 	mov.w	r0, #4294967295
 80004d0:	f000 f937 	bl	8000742 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004d4:	4a0a      	ldr	r2, [pc, #40]	; (8000500 <HAL_InitTick+0x74>)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	6013      	str	r3, [r2, #0]
 80004da:	e007      	b.n	80004ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80004dc:	2301      	movs	r3, #1
 80004de:	73fb      	strb	r3, [r7, #15]
 80004e0:	e004      	b.n	80004ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80004e2:	2301      	movs	r3, #1
 80004e4:	73fb      	strb	r3, [r7, #15]
 80004e6:	e001      	b.n	80004ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80004e8:	2301      	movs	r3, #1
 80004ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80004ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	3710      	adds	r7, #16
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000008 	.word	0x20000008
 80004fc:	20000000 	.word	0x20000000
 8000500:	20000004 	.word	0x20000004

08000504 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <HAL_IncTick+0x20>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	461a      	mov	r2, r3
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <HAL_IncTick+0x24>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4413      	add	r3, r2
 8000514:	4a04      	ldr	r2, [pc, #16]	; (8000528 <HAL_IncTick+0x24>)
 8000516:	6013      	str	r3, [r2, #0]
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	20000008 	.word	0x20000008
 8000528:	200001ac 	.word	0x200001ac

0800052c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  return uwTick;
 8000530:	4b03      	ldr	r3, [pc, #12]	; (8000540 <HAL_GetTick+0x14>)
 8000532:	681b      	ldr	r3, [r3, #0]
}
 8000534:	4618      	mov	r0, r3
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	200001ac 	.word	0x200001ac

08000544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800054c:	f7ff ffee 	bl	800052c <HAL_GetTick>
 8000550:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800055c:	d005      	beq.n	800056a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800055e:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <HAL_Delay+0x44>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	461a      	mov	r2, r3
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	4413      	add	r3, r2
 8000568:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800056a:	bf00      	nop
 800056c:	f7ff ffde 	bl	800052c <HAL_GetTick>
 8000570:	4602      	mov	r2, r0
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	1ad3      	subs	r3, r2, r3
 8000576:	68fa      	ldr	r2, [r7, #12]
 8000578:	429a      	cmp	r2, r3
 800057a:	d8f7      	bhi.n	800056c <HAL_Delay+0x28>
  {
  }
}
 800057c:	bf00      	nop
 800057e:	bf00      	nop
 8000580:	3710      	adds	r7, #16
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20000008 	.word	0x20000008

0800058c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	f003 0307 	and.w	r3, r3, #7
 800059a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <__NVIC_SetPriorityGrouping+0x44>)
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005a2:	68ba      	ldr	r2, [r7, #8]
 80005a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005a8:	4013      	ands	r3, r2
 80005aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005be:	4a04      	ldr	r2, [pc, #16]	; (80005d0 <__NVIC_SetPriorityGrouping+0x44>)
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	60d3      	str	r3, [r2, #12]
}
 80005c4:	bf00      	nop
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005d8:	4b04      	ldr	r3, [pc, #16]	; (80005ec <__NVIC_GetPriorityGrouping+0x18>)
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	0a1b      	lsrs	r3, r3, #8
 80005de:	f003 0307 	and.w	r3, r3, #7
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	e000ed00 	.word	0xe000ed00

080005f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	db0b      	blt.n	800061a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	f003 021f 	and.w	r2, r3, #31
 8000608:	4907      	ldr	r1, [pc, #28]	; (8000628 <__NVIC_EnableIRQ+0x38>)
 800060a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060e:	095b      	lsrs	r3, r3, #5
 8000610:	2001      	movs	r0, #1
 8000612:	fa00 f202 	lsl.w	r2, r0, r2
 8000616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	e000e100 	.word	0xe000e100

0800062c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	6039      	str	r1, [r7, #0]
 8000636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063c:	2b00      	cmp	r3, #0
 800063e:	db0a      	blt.n	8000656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	b2da      	uxtb	r2, r3
 8000644:	490c      	ldr	r1, [pc, #48]	; (8000678 <__NVIC_SetPriority+0x4c>)
 8000646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064a:	0112      	lsls	r2, r2, #4
 800064c:	b2d2      	uxtb	r2, r2
 800064e:	440b      	add	r3, r1
 8000650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000654:	e00a      	b.n	800066c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	b2da      	uxtb	r2, r3
 800065a:	4908      	ldr	r1, [pc, #32]	; (800067c <__NVIC_SetPriority+0x50>)
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	f003 030f 	and.w	r3, r3, #15
 8000662:	3b04      	subs	r3, #4
 8000664:	0112      	lsls	r2, r2, #4
 8000666:	b2d2      	uxtb	r2, r2
 8000668:	440b      	add	r3, r1
 800066a:	761a      	strb	r2, [r3, #24]
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000e100 	.word	0xe000e100
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000680:	b480      	push	{r7}
 8000682:	b089      	sub	sp, #36	; 0x24
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f003 0307 	and.w	r3, r3, #7
 8000692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000694:	69fb      	ldr	r3, [r7, #28]
 8000696:	f1c3 0307 	rsb	r3, r3, #7
 800069a:	2b04      	cmp	r3, #4
 800069c:	bf28      	it	cs
 800069e:	2304      	movcs	r3, #4
 80006a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	3304      	adds	r3, #4
 80006a6:	2b06      	cmp	r3, #6
 80006a8:	d902      	bls.n	80006b0 <NVIC_EncodePriority+0x30>
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	3b03      	subs	r3, #3
 80006ae:	e000      	b.n	80006b2 <NVIC_EncodePriority+0x32>
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	f04f 32ff 	mov.w	r2, #4294967295
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	fa02 f303 	lsl.w	r3, r2, r3
 80006be:	43da      	mvns	r2, r3
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	401a      	ands	r2, r3
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006c8:	f04f 31ff 	mov.w	r1, #4294967295
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	fa01 f303 	lsl.w	r3, r1, r3
 80006d2:	43d9      	mvns	r1, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d8:	4313      	orrs	r3, r2
         );
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3724      	adds	r7, #36	; 0x24
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
	...

080006e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006f8:	d301      	bcc.n	80006fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006fa:	2301      	movs	r3, #1
 80006fc:	e00f      	b.n	800071e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006fe:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <SysTick_Config+0x40>)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3b01      	subs	r3, #1
 8000704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000706:	210f      	movs	r1, #15
 8000708:	f04f 30ff 	mov.w	r0, #4294967295
 800070c:	f7ff ff8e 	bl	800062c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <SysTick_Config+0x40>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000716:	4b04      	ldr	r3, [pc, #16]	; (8000728 <SysTick_Config+0x40>)
 8000718:	2207      	movs	r2, #7
 800071a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800071c:	2300      	movs	r3, #0
}
 800071e:	4618      	mov	r0, r3
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	e000e010 	.word	0xe000e010

0800072c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff ff29 	bl	800058c <__NVIC_SetPriorityGrouping>
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	b086      	sub	sp, #24
 8000746:	af00      	add	r7, sp, #0
 8000748:	4603      	mov	r3, r0
 800074a:	60b9      	str	r1, [r7, #8]
 800074c:	607a      	str	r2, [r7, #4]
 800074e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000754:	f7ff ff3e 	bl	80005d4 <__NVIC_GetPriorityGrouping>
 8000758:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	68b9      	ldr	r1, [r7, #8]
 800075e:	6978      	ldr	r0, [r7, #20]
 8000760:	f7ff ff8e 	bl	8000680 <NVIC_EncodePriority>
 8000764:	4602      	mov	r2, r0
 8000766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800076a:	4611      	mov	r1, r2
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ff5d 	bl	800062c <__NVIC_SetPriority>
}
 8000772:	bf00      	nop
 8000774:	3718      	adds	r7, #24
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	4603      	mov	r3, r0
 8000782:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ff31 	bl	80005f0 <__NVIC_EnableIRQ>
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f7ff ffa2 	bl	80006e8 <SysTick_Config>
 80007a4:	4603      	mov	r3, r0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b087      	sub	sp, #28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007be:	e166      	b.n	8000a8e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	2101      	movs	r1, #1
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	fa01 f303 	lsl.w	r3, r1, r3
 80007cc:	4013      	ands	r3, r2
 80007ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	f000 8158 	beq.w	8000a88 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	f003 0303 	and.w	r3, r3, #3
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d005      	beq.n	80007f0 <HAL_GPIO_Init+0x40>
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	f003 0303 	and.w	r3, r3, #3
 80007ec:	2b02      	cmp	r3, #2
 80007ee:	d130      	bne.n	8000852 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	689b      	ldr	r3, [r3, #8]
 80007f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	2203      	movs	r2, #3
 80007fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000800:	43db      	mvns	r3, r3
 8000802:	693a      	ldr	r2, [r7, #16]
 8000804:	4013      	ands	r3, r2
 8000806:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	68da      	ldr	r2, [r3, #12]
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	fa02 f303 	lsl.w	r3, r2, r3
 8000814:	693a      	ldr	r2, [r7, #16]
 8000816:	4313      	orrs	r3, r2
 8000818:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	693a      	ldr	r2, [r7, #16]
 800081e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000826:	2201      	movs	r2, #1
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	fa02 f303 	lsl.w	r3, r2, r3
 800082e:	43db      	mvns	r3, r3
 8000830:	693a      	ldr	r2, [r7, #16]
 8000832:	4013      	ands	r3, r2
 8000834:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	091b      	lsrs	r3, r3, #4
 800083c:	f003 0201 	and.w	r2, r3, #1
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	693a      	ldr	r2, [r7, #16]
 8000848:	4313      	orrs	r3, r2
 800084a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	f003 0303 	and.w	r3, r3, #3
 800085a:	2b03      	cmp	r3, #3
 800085c:	d017      	beq.n	800088e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	68db      	ldr	r3, [r3, #12]
 8000862:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	2203      	movs	r2, #3
 800086a:	fa02 f303 	lsl.w	r3, r2, r3
 800086e:	43db      	mvns	r3, r3
 8000870:	693a      	ldr	r2, [r7, #16]
 8000872:	4013      	ands	r3, r2
 8000874:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	689a      	ldr	r2, [r3, #8]
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	693a      	ldr	r2, [r7, #16]
 8000884:	4313      	orrs	r3, r2
 8000886:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	f003 0303 	and.w	r3, r3, #3
 8000896:	2b02      	cmp	r3, #2
 8000898:	d123      	bne.n	80008e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	08da      	lsrs	r2, r3, #3
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	3208      	adds	r2, #8
 80008a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	220f      	movs	r2, #15
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	43db      	mvns	r3, r3
 80008b8:	693a      	ldr	r2, [r7, #16]
 80008ba:	4013      	ands	r3, r2
 80008bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	691a      	ldr	r2, [r3, #16]
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	f003 0307 	and.w	r3, r3, #7
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	08da      	lsrs	r2, r3, #3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3208      	adds	r2, #8
 80008dc:	6939      	ldr	r1, [r7, #16]
 80008de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	2203      	movs	r2, #3
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	43db      	mvns	r3, r3
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	4013      	ands	r3, r2
 80008f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	f003 0203 	and.w	r2, r3, #3
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	4313      	orrs	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800091e:	2b00      	cmp	r3, #0
 8000920:	f000 80b2 	beq.w	8000a88 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000924:	4b61      	ldr	r3, [pc, #388]	; (8000aac <HAL_GPIO_Init+0x2fc>)
 8000926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000928:	4a60      	ldr	r2, [pc, #384]	; (8000aac <HAL_GPIO_Init+0x2fc>)
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	6613      	str	r3, [r2, #96]	; 0x60
 8000930:	4b5e      	ldr	r3, [pc, #376]	; (8000aac <HAL_GPIO_Init+0x2fc>)
 8000932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800093c:	4a5c      	ldr	r2, [pc, #368]	; (8000ab0 <HAL_GPIO_Init+0x300>)
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	089b      	lsrs	r3, r3, #2
 8000942:	3302      	adds	r3, #2
 8000944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000948:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	f003 0303 	and.w	r3, r3, #3
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	220f      	movs	r2, #15
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	43db      	mvns	r3, r3
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	4013      	ands	r3, r2
 800095e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000966:	d02b      	beq.n	80009c0 <HAL_GPIO_Init+0x210>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a52      	ldr	r2, [pc, #328]	; (8000ab4 <HAL_GPIO_Init+0x304>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d025      	beq.n	80009bc <HAL_GPIO_Init+0x20c>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a51      	ldr	r2, [pc, #324]	; (8000ab8 <HAL_GPIO_Init+0x308>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d01f      	beq.n	80009b8 <HAL_GPIO_Init+0x208>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4a50      	ldr	r2, [pc, #320]	; (8000abc <HAL_GPIO_Init+0x30c>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d019      	beq.n	80009b4 <HAL_GPIO_Init+0x204>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a4f      	ldr	r2, [pc, #316]	; (8000ac0 <HAL_GPIO_Init+0x310>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d013      	beq.n	80009b0 <HAL_GPIO_Init+0x200>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a4e      	ldr	r2, [pc, #312]	; (8000ac4 <HAL_GPIO_Init+0x314>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d00d      	beq.n	80009ac <HAL_GPIO_Init+0x1fc>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a4d      	ldr	r2, [pc, #308]	; (8000ac8 <HAL_GPIO_Init+0x318>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d007      	beq.n	80009a8 <HAL_GPIO_Init+0x1f8>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a4c      	ldr	r2, [pc, #304]	; (8000acc <HAL_GPIO_Init+0x31c>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d101      	bne.n	80009a4 <HAL_GPIO_Init+0x1f4>
 80009a0:	2307      	movs	r3, #7
 80009a2:	e00e      	b.n	80009c2 <HAL_GPIO_Init+0x212>
 80009a4:	2308      	movs	r3, #8
 80009a6:	e00c      	b.n	80009c2 <HAL_GPIO_Init+0x212>
 80009a8:	2306      	movs	r3, #6
 80009aa:	e00a      	b.n	80009c2 <HAL_GPIO_Init+0x212>
 80009ac:	2305      	movs	r3, #5
 80009ae:	e008      	b.n	80009c2 <HAL_GPIO_Init+0x212>
 80009b0:	2304      	movs	r3, #4
 80009b2:	e006      	b.n	80009c2 <HAL_GPIO_Init+0x212>
 80009b4:	2303      	movs	r3, #3
 80009b6:	e004      	b.n	80009c2 <HAL_GPIO_Init+0x212>
 80009b8:	2302      	movs	r3, #2
 80009ba:	e002      	b.n	80009c2 <HAL_GPIO_Init+0x212>
 80009bc:	2301      	movs	r3, #1
 80009be:	e000      	b.n	80009c2 <HAL_GPIO_Init+0x212>
 80009c0:	2300      	movs	r3, #0
 80009c2:	697a      	ldr	r2, [r7, #20]
 80009c4:	f002 0203 	and.w	r2, r2, #3
 80009c8:	0092      	lsls	r2, r2, #2
 80009ca:	4093      	lsls	r3, r2
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009d2:	4937      	ldr	r1, [pc, #220]	; (8000ab0 <HAL_GPIO_Init+0x300>)
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	089b      	lsrs	r3, r3, #2
 80009d8:	3302      	adds	r3, #2
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009e0:	4b3b      	ldr	r3, [pc, #236]	; (8000ad0 <HAL_GPIO_Init+0x320>)
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	43db      	mvns	r3, r3
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	4013      	ands	r3, r2
 80009ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d003      	beq.n	8000a04 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a04:	4a32      	ldr	r2, [pc, #200]	; (8000ad0 <HAL_GPIO_Init+0x320>)
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a0a:	4b31      	ldr	r3, [pc, #196]	; (8000ad0 <HAL_GPIO_Init+0x320>)
 8000a0c:	68db      	ldr	r3, [r3, #12]
 8000a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	43db      	mvns	r3, r3
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	4013      	ands	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d003      	beq.n	8000a2e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a2e:	4a28      	ldr	r2, [pc, #160]	; (8000ad0 <HAL_GPIO_Init+0x320>)
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000a34:	4b26      	ldr	r3, [pc, #152]	; (8000ad0 <HAL_GPIO_Init+0x320>)
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4013      	ands	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d003      	beq.n	8000a58 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a58:	4a1d      	ldr	r2, [pc, #116]	; (8000ad0 <HAL_GPIO_Init+0x320>)
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <HAL_GPIO_Init+0x320>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	43db      	mvns	r3, r3
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d003      	beq.n	8000a82 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a82:	4a13      	ldr	r2, [pc, #76]	; (8000ad0 <HAL_GPIO_Init+0x320>)
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	fa22 f303 	lsr.w	r3, r2, r3
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	f47f ae91 	bne.w	80007c0 <HAL_GPIO_Init+0x10>
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	bf00      	nop
 8000aa2:	371c      	adds	r7, #28
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40010000 	.word	0x40010000
 8000ab4:	48000400 	.word	0x48000400
 8000ab8:	48000800 	.word	0x48000800
 8000abc:	48000c00 	.word	0x48000c00
 8000ac0:	48001000 	.word	0x48001000
 8000ac4:	48001400 	.word	0x48001400
 8000ac8:	48001800 	.word	0x48001800
 8000acc:	48001c00 	.word	0x48001c00
 8000ad0:	40010400 	.word	0x40010400

08000ad4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad6:	b08f      	sub	sp, #60	; 0x3c
 8000ad8:	af0a      	add	r7, sp, #40	; 0x28
 8000ada:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d101      	bne.n	8000ae6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e116      	b.n	8000d14 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d106      	bne.n	8000b06 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2200      	movs	r2, #0
 8000afc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f006 f8cb 	bl	8006c9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2203      	movs	r2, #3
 8000b0a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d102      	bne.n	8000b20 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f002 ff76 	bl	8003a16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	687e      	ldr	r6, [r7, #4]
 8000b32:	466d      	mov	r5, sp
 8000b34:	f106 0410 	add.w	r4, r6, #16
 8000b38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b44:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b48:	1d33      	adds	r3, r6, #4
 8000b4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b4c:	6838      	ldr	r0, [r7, #0]
 8000b4e:	f002 fe89 	bl	8003864 <USB_CoreInit>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d005      	beq.n	8000b64 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	e0d7      	b.n	8000d14 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f002 ff64 	bl	8003a38 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b70:	2300      	movs	r3, #0
 8000b72:	73fb      	strb	r3, [r7, #15]
 8000b74:	e04a      	b.n	8000c0c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000b76:	7bfa      	ldrb	r2, [r7, #15]
 8000b78:	6879      	ldr	r1, [r7, #4]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	4413      	add	r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	440b      	add	r3, r1
 8000b84:	333d      	adds	r3, #61	; 0x3d
 8000b86:	2201      	movs	r2, #1
 8000b88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000b8a:	7bfa      	ldrb	r2, [r7, #15]
 8000b8c:	6879      	ldr	r1, [r7, #4]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	4413      	add	r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	440b      	add	r3, r1
 8000b98:	333c      	adds	r3, #60	; 0x3c
 8000b9a:	7bfa      	ldrb	r2, [r7, #15]
 8000b9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000b9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	b298      	uxth	r0, r3
 8000ba4:	6879      	ldr	r1, [r7, #4]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	4413      	add	r3, r2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	440b      	add	r3, r1
 8000bb0:	3344      	adds	r3, #68	; 0x44
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000bb6:	7bfa      	ldrb	r2, [r7, #15]
 8000bb8:	6879      	ldr	r1, [r7, #4]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	4413      	add	r3, r2
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	440b      	add	r3, r1
 8000bc4:	3340      	adds	r3, #64	; 0x40
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000bca:	7bfa      	ldrb	r2, [r7, #15]
 8000bcc:	6879      	ldr	r1, [r7, #4]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	4413      	add	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	3348      	adds	r3, #72	; 0x48
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000bde:	7bfa      	ldrb	r2, [r7, #15]
 8000be0:	6879      	ldr	r1, [r7, #4]
 8000be2:	4613      	mov	r3, r2
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	4413      	add	r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	440b      	add	r3, r1
 8000bec:	334c      	adds	r3, #76	; 0x4c
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000bf2:	7bfa      	ldrb	r2, [r7, #15]
 8000bf4:	6879      	ldr	r1, [r7, #4]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	4413      	add	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	440b      	add	r3, r1
 8000c00:	3354      	adds	r3, #84	; 0x54
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c06:	7bfb      	ldrb	r3, [r7, #15]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	73fb      	strb	r3, [r7, #15]
 8000c0c:	7bfa      	ldrb	r2, [r7, #15]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d3af      	bcc.n	8000b76 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c16:	2300      	movs	r3, #0
 8000c18:	73fb      	strb	r3, [r7, #15]
 8000c1a:	e044      	b.n	8000ca6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c1c:	7bfa      	ldrb	r2, [r7, #15]
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	4613      	mov	r3, r2
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	4413      	add	r3, r2
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	440b      	add	r3, r1
 8000c2a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c32:	7bfa      	ldrb	r2, [r7, #15]
 8000c34:	6879      	ldr	r1, [r7, #4]
 8000c36:	4613      	mov	r3, r2
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	4413      	add	r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	440b      	add	r3, r1
 8000c40:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000c44:	7bfa      	ldrb	r2, [r7, #15]
 8000c46:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c48:	7bfa      	ldrb	r2, [r7, #15]
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	4413      	add	r3, r2
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	440b      	add	r3, r1
 8000c56:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000c5e:	7bfa      	ldrb	r2, [r7, #15]
 8000c60:	6879      	ldr	r1, [r7, #4]
 8000c62:	4613      	mov	r3, r2
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	4413      	add	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c74:	7bfa      	ldrb	r2, [r7, #15]
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	00db      	lsls	r3, r3, #3
 8000c7c:	4413      	add	r3, r2
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	440b      	add	r3, r1
 8000c82:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000c8a:	7bfa      	ldrb	r2, [r7, #15]
 8000c8c:	6879      	ldr	r1, [r7, #4]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	4413      	add	r3, r2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	440b      	add	r3, r1
 8000c98:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	73fb      	strb	r3, [r7, #15]
 8000ca6:	7bfa      	ldrb	r2, [r7, #15]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d3b5      	bcc.n	8000c1c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	687e      	ldr	r6, [r7, #4]
 8000cb8:	466d      	mov	r5, sp
 8000cba:	f106 0410 	add.w	r4, r6, #16
 8000cbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cca:	e885 0003 	stmia.w	r5, {r0, r1}
 8000cce:	1d33      	adds	r3, r6, #4
 8000cd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cd2:	6838      	ldr	r0, [r7, #0]
 8000cd4:	f002 fefc 	bl	8003ad0 <USB_DevInit>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d005      	beq.n	8000cea <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2202      	movs	r2, #2
 8000ce2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e014      	b.n	8000d14 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d102      	bne.n	8000d08 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f001 f882 	bl	8001e0c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f003 ff84 	bl	8004c1a <USB_DevDisconnect>

  return HAL_OK;
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d1c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d101      	bne.n	8000d38 <HAL_PCD_Start+0x1c>
 8000d34:	2302      	movs	r3, #2
 8000d36:	e01c      	b.n	8000d72 <HAL_PCD_Start+0x56>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d105      	bne.n	8000d54 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d4c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f002 fe4b 	bl	80039f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f003 ff38 	bl	8004bd8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d7a:	b590      	push	{r4, r7, lr}
 8000d7c:	b08d      	sub	sp, #52	; 0x34
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000d88:	6a3b      	ldr	r3, [r7, #32]
 8000d8a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f003 fff6 	bl	8004d82 <USB_GetMode>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f040 847e 	bne.w	800169a <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f003 ff5a 	bl	8004c5c <USB_ReadInterrupts>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f000 8474 	beq.w	8001698 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	0a1b      	lsrs	r3, r3, #8
 8000dba:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f003 ff47 	bl	8004c5c <USB_ReadInterrupts>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	f003 0302 	and.w	r3, r3, #2
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d107      	bne.n	8000de8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	695a      	ldr	r2, [r3, #20]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f002 0202 	and.w	r2, r2, #2
 8000de6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f003 ff35 	bl	8004c5c <USB_ReadInterrupts>
 8000df2:	4603      	mov	r3, r0
 8000df4:	f003 0310 	and.w	r3, r3, #16
 8000df8:	2b10      	cmp	r3, #16
 8000dfa:	d161      	bne.n	8000ec0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	699a      	ldr	r2, [r3, #24]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f022 0210 	bic.w	r2, r2, #16
 8000e0a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8000e0c:	6a3b      	ldr	r3, [r7, #32]
 8000e0e:	6a1b      	ldr	r3, [r3, #32]
 8000e10:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	f003 020f 	and.w	r2, r3, #15
 8000e18:	4613      	mov	r3, r2
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	4413      	add	r3, r2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	4413      	add	r3, r2
 8000e28:	3304      	adds	r3, #4
 8000e2a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	0c5b      	lsrs	r3, r3, #17
 8000e30:	f003 030f 	and.w	r3, r3, #15
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d124      	bne.n	8000e82 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000e3e:	4013      	ands	r3, r2
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d035      	beq.n	8000eb0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	091b      	lsrs	r3, r3, #4
 8000e4c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000e4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	461a      	mov	r2, r3
 8000e56:	6a38      	ldr	r0, [r7, #32]
 8000e58:	f003 fd6c 	bl	8004934 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	691a      	ldr	r2, [r3, #16]
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	091b      	lsrs	r3, r3, #4
 8000e64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e68:	441a      	add	r2, r3
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	6a1a      	ldr	r2, [r3, #32]
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	091b      	lsrs	r3, r3, #4
 8000e76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e7a:	441a      	add	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	621a      	str	r2, [r3, #32]
 8000e80:	e016      	b.n	8000eb0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	0c5b      	lsrs	r3, r3, #17
 8000e86:	f003 030f 	and.w	r3, r3, #15
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d110      	bne.n	8000eb0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8000e94:	2208      	movs	r2, #8
 8000e96:	4619      	mov	r1, r3
 8000e98:	6a38      	ldr	r0, [r7, #32]
 8000e9a:	f003 fd4b 	bl	8004934 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	6a1a      	ldr	r2, [r3, #32]
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	091b      	lsrs	r3, r3, #4
 8000ea6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000eaa:	441a      	add	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	699a      	ldr	r2, [r3, #24]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f042 0210 	orr.w	r2, r2, #16
 8000ebe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f003 fec9 	bl	8004c5c <USB_ReadInterrupts>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ed0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000ed4:	f040 80a7 	bne.w	8001026 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f003 fece 	bl	8004c82 <USB_ReadDevAllOutEpInterrupt>
 8000ee6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8000ee8:	e099      	b.n	800101e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8000eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f000 808e 	beq.w	8001012 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f003 fef2 	bl	8004cea <USB_ReadDevOutEPInterrupt>
 8000f06:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d00c      	beq.n	8000f2c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f14:	015a      	lsls	r2, r3, #5
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	4413      	add	r3, r2
 8000f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f1e:	461a      	mov	r2, r3
 8000f20:	2301      	movs	r3, #1
 8000f22:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8000f24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f000 fe96 	bl	8001c58 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	f003 0308 	and.w	r3, r3, #8
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d00c      	beq.n	8000f50 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f38:	015a      	lsls	r2, r3, #5
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f42:	461a      	mov	r2, r3
 8000f44:	2308      	movs	r3, #8
 8000f46:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8000f48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f000 fed2 	bl	8001cf4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	f003 0310 	and.w	r3, r3, #16
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d008      	beq.n	8000f6c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5c:	015a      	lsls	r2, r3, #5
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	4413      	add	r3, r2
 8000f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f66:	461a      	mov	r2, r3
 8000f68:	2310      	movs	r3, #16
 8000f6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d030      	beq.n	8000fd8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8000f76:	6a3b      	ldr	r3, [r7, #32]
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f7e:	2b80      	cmp	r3, #128	; 0x80
 8000f80:	d109      	bne.n	8000f96 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	69fa      	ldr	r2, [r7, #28]
 8000f8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000f90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f94:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8000f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f98:	4613      	mov	r3, r2
 8000f9a:	00db      	lsls	r3, r3, #3
 8000f9c:	4413      	add	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	3304      	adds	r3, #4
 8000faa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	78db      	ldrb	r3, [r3, #3]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d108      	bne.n	8000fc6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8000fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f005 ffaf 	bl	8006f24 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc8:	015a      	lsls	r2, r3, #5
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	4413      	add	r3, r2
 8000fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	f003 0320 	and.w	r3, r3, #32
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d008      	beq.n	8000ff4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe4:	015a      	lsls	r2, r3, #5
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	4413      	add	r3, r2
 8000fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fee:	461a      	mov	r2, r3
 8000ff0:	2320      	movs	r3, #32
 8000ff2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d009      	beq.n	8001012 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001000:	015a      	lsls	r2, r3, #5
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	4413      	add	r3, r2
 8001006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800100a:	461a      	mov	r2, r3
 800100c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001010:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001014:	3301      	adds	r3, #1
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101a:	085b      	lsrs	r3, r3, #1
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800101e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001020:	2b00      	cmp	r3, #0
 8001022:	f47f af62 	bne.w	8000eea <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4618      	mov	r0, r3
 800102c:	f003 fe16 	bl	8004c5c <USB_ReadInterrupts>
 8001030:	4603      	mov	r3, r0
 8001032:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001036:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800103a:	f040 80a4 	bne.w	8001186 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f003 fe37 	bl	8004cb6 <USB_ReadDevAllInEpInterrupt>
 8001048:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800104a:	2300      	movs	r3, #0
 800104c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800104e:	e096      	b.n	800117e <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 808b 	beq.w	8001172 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	4611      	mov	r1, r2
 8001066:	4618      	mov	r0, r3
 8001068:	f003 fe5d 	bl	8004d26 <USB_ReadDevInEPInterrupt>
 800106c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	2b00      	cmp	r3, #0
 8001076:	d020      	beq.n	80010ba <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	2201      	movs	r2, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800108c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	43db      	mvns	r3, r3
 8001092:	69f9      	ldr	r1, [r7, #28]
 8001094:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001098:	4013      	ands	r3, r2
 800109a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800109c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109e:	015a      	lsls	r2, r3, #5
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	4413      	add	r3, r2
 80010a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010a8:	461a      	mov	r2, r3
 80010aa:	2301      	movs	r3, #1
 80010ac:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	4619      	mov	r1, r3
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f005 fea0 	bl	8006dfa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	f003 0308 	and.w	r3, r3, #8
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d008      	beq.n	80010d6 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80010c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c6:	015a      	lsls	r2, r3, #5
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	4413      	add	r3, r2
 80010cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010d0:	461a      	mov	r2, r3
 80010d2:	2308      	movs	r3, #8
 80010d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	f003 0310 	and.w	r3, r3, #16
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d008      	beq.n	80010f2 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	015a      	lsls	r2, r3, #5
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	4413      	add	r3, r2
 80010e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010ec:	461a      	mov	r2, r3
 80010ee:	2310      	movs	r3, #16
 80010f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d008      	beq.n	800110e <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	015a      	lsls	r2, r3, #5
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	4413      	add	r3, r2
 8001104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001108:	461a      	mov	r2, r3
 800110a:	2340      	movs	r3, #64	; 0x40
 800110c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d023      	beq.n	8001160 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001118:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800111a:	6a38      	ldr	r0, [r7, #32]
 800111c:	f002 fe24 	bl	8003d68 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001122:	4613      	mov	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	4413      	add	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	3338      	adds	r3, #56	; 0x38
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	4413      	add	r3, r2
 8001130:	3304      	adds	r3, #4
 8001132:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	78db      	ldrb	r3, [r3, #3]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d108      	bne.n	800114e <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	2200      	movs	r2, #0
 8001140:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4619      	mov	r1, r3
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f005 fefd 	bl	8006f48 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	015a      	lsls	r2, r3, #5
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	4413      	add	r3, r2
 8001156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800115a:	461a      	mov	r2, r3
 800115c:	2302      	movs	r3, #2
 800115e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800116a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 fcea 	bl	8001b46 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	3301      	adds	r3, #1
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117a:	085b      	lsrs	r3, r3, #1
 800117c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800117e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001180:	2b00      	cmp	r3, #0
 8001182:	f47f af65 	bne.w	8001050 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f003 fd66 	bl	8004c5c <USB_ReadInterrupts>
 8001190:	4603      	mov	r3, r0
 8001192:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001196:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800119a:	d122      	bne.n	80011e2 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	69fa      	ldr	r2, [r7, #28]
 80011a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80011aa:	f023 0301 	bic.w	r3, r3, #1
 80011ae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d108      	bne.n	80011cc <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80011c2:	2100      	movs	r1, #0
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f006 f92f 	bl	8007428 <HAL_PCDEx_LPM_Callback>
 80011ca:	e002      	b.n	80011d2 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f005 fe81 	bl	8006ed4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	695a      	ldr	r2, [r3, #20]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80011e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f003 fd38 	bl	8004c5c <USB_ReadInterrupts>
 80011ec:	4603      	mov	r3, r0
 80011ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011f6:	d112      	bne.n	800121e <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	2b01      	cmp	r3, #1
 8001206:	d102      	bne.n	800120e <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f005 fe3d 	bl	8006e88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	695a      	ldr	r2, [r3, #20]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800121c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f003 fd1a 	bl	8004c5c <USB_ReadInterrupts>
 8001228:	4603      	mov	r3, r0
 800122a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800122e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001232:	d121      	bne.n	8001278 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	695a      	ldr	r2, [r3, #20]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001242:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800124a:	2b00      	cmp	r3, #0
 800124c:	d111      	bne.n	8001272 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2201      	movs	r2, #1
 8001252:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125c:	089b      	lsrs	r3, r3, #2
 800125e:	f003 020f 	and.w	r2, r3, #15
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001268:	2101      	movs	r1, #1
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f006 f8dc 	bl	8007428 <HAL_PCDEx_LPM_Callback>
 8001270:	e002      	b.n	8001278 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f005 fe08 	bl	8006e88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f003 fced 	bl	8004c5c <USB_ReadInterrupts>
 8001282:	4603      	mov	r3, r0
 8001284:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800128c:	f040 80b5 	bne.w	80013fa <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	69fa      	ldr	r2, [r7, #28]
 800129a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800129e:	f023 0301 	bic.w	r3, r3, #1
 80012a2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2110      	movs	r1, #16
 80012aa:	4618      	mov	r0, r3
 80012ac:	f002 fd5c 	bl	8003d68 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012b0:	2300      	movs	r3, #0
 80012b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012b4:	e046      	b.n	8001344 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80012b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b8:	015a      	lsls	r2, r3, #5
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	4413      	add	r3, r2
 80012be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012c2:	461a      	mov	r2, r3
 80012c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80012c8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80012ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012cc:	015a      	lsls	r2, r3, #5
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	4413      	add	r3, r2
 80012d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012da:	0151      	lsls	r1, r2, #5
 80012dc:	69fa      	ldr	r2, [r7, #28]
 80012de:	440a      	add	r2, r1
 80012e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80012e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80012ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ec:	015a      	lsls	r2, r3, #5
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	4413      	add	r3, r2
 80012f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012f6:	461a      	mov	r2, r3
 80012f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80012fc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80012fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001300:	015a      	lsls	r2, r3, #5
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	4413      	add	r3, r2
 8001306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800130e:	0151      	lsls	r1, r2, #5
 8001310:	69fa      	ldr	r2, [r7, #28]
 8001312:	440a      	add	r2, r1
 8001314:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001318:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800131c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800131e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001320:	015a      	lsls	r2, r3, #5
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	4413      	add	r3, r2
 8001326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800132e:	0151      	lsls	r1, r2, #5
 8001330:	69fa      	ldr	r2, [r7, #28]
 8001332:	440a      	add	r2, r1
 8001334:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001338:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800133c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800133e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001340:	3301      	adds	r3, #1
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800134a:	429a      	cmp	r2, r3
 800134c:	d3b3      	bcc.n	80012b6 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	69fa      	ldr	r2, [r7, #28]
 8001358:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800135c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001360:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	2b00      	cmp	r3, #0
 8001368:	d016      	beq.n	8001398 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001374:	69fa      	ldr	r2, [r7, #28]
 8001376:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800137a:	f043 030b 	orr.w	r3, r3, #11
 800137e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	69fa      	ldr	r2, [r7, #28]
 800138c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001390:	f043 030b 	orr.w	r3, r3, #11
 8001394:	6453      	str	r3, [r2, #68]	; 0x44
 8001396:	e015      	b.n	80013c4 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	69fa      	ldr	r2, [r7, #28]
 80013a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013aa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80013ae:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	69fa      	ldr	r2, [r7, #28]
 80013ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013be:	f043 030b 	orr.w	r3, r3, #11
 80013c2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	69fa      	ldr	r2, [r7, #28]
 80013ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013d2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80013d6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80013e2:	4619      	mov	r1, r3
 80013e4:	4610      	mov	r0, r2
 80013e6:	f003 fcfd 	bl	8004de4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	695a      	ldr	r2, [r3, #20]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80013f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f003 fc2c 	bl	8004c5c <USB_ReadInterrupts>
 8001404:	4603      	mov	r3, r0
 8001406:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800140a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800140e:	d124      	bne.n	800145a <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f003 fcc2 	bl	8004d9e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f002 fd1f 	bl	8003e62 <USB_GetDevSpeed>
 8001424:	4603      	mov	r3, r0
 8001426:	461a      	mov	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681c      	ldr	r4, [r3, #0]
 8001430:	f001 fbc4 	bl	8002bbc <HAL_RCC_GetHCLKFreq>
 8001434:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800143a:	b2db      	uxtb	r3, r3
 800143c:	461a      	mov	r2, r3
 800143e:	4620      	mov	r0, r4
 8001440:	f002 fa3c 	bl	80038bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f005 fd00 	bl	8006e4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	695a      	ldr	r2, [r3, #20]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001458:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f003 fbfc 	bl	8004c5c <USB_ReadInterrupts>
 8001464:	4603      	mov	r3, r0
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	2b08      	cmp	r3, #8
 800146c:	d10a      	bne.n	8001484 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f005 fcdd 	bl	8006e2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	695a      	ldr	r2, [r3, #20]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f002 0208 	and.w	r2, r2, #8
 8001482:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f003 fbe7 	bl	8004c5c <USB_ReadInterrupts>
 800148e:	4603      	mov	r3, r0
 8001490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001494:	2b80      	cmp	r3, #128	; 0x80
 8001496:	d122      	bne.n	80014de <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80014a0:	6a3b      	ldr	r3, [r7, #32]
 80014a2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80014a4:	2301      	movs	r3, #1
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
 80014a8:	e014      	b.n	80014d4 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ae:	4613      	mov	r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	4413      	add	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	440b      	add	r3, r1
 80014b8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d105      	bne.n	80014ce <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	4619      	mov	r1, r3
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 fb0b 	bl	8001ae4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	3301      	adds	r3, #1
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014da:	429a      	cmp	r2, r3
 80014dc:	d3e5      	bcc.n	80014aa <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f003 fbba 	bl	8004c5c <USB_ReadInterrupts>
 80014e8:	4603      	mov	r3, r0
 80014ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014f2:	d13b      	bne.n	800156c <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80014f4:	2301      	movs	r3, #1
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
 80014f8:	e02b      	b.n	8001552 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	015a      	lsls	r2, r3, #5
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	4413      	add	r3, r2
 8001502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800150e:	4613      	mov	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	3340      	adds	r3, #64	; 0x40
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d115      	bne.n	800154c <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001520:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001522:	2b00      	cmp	r3, #0
 8001524:	da12      	bge.n	800154c <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800152a:	4613      	mov	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	4413      	add	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	440b      	add	r3, r1
 8001534:	333f      	adds	r3, #63	; 0x3f
 8001536:	2201      	movs	r2, #1
 8001538:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	b2db      	uxtb	r3, r3
 800153e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001542:	b2db      	uxtb	r3, r3
 8001544:	4619      	mov	r1, r3
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 facc 	bl	8001ae4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	3301      	adds	r3, #1
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001558:	429a      	cmp	r2, r3
 800155a:	d3ce      	bcc.n	80014fa <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	695a      	ldr	r2, [r3, #20]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800156a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f003 fb73 	bl	8004c5c <USB_ReadInterrupts>
 8001576:	4603      	mov	r3, r0
 8001578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800157c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001580:	d155      	bne.n	800162e <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001582:	2301      	movs	r3, #1
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
 8001586:	e045      	b.n	8001614 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	015a      	lsls	r2, r3, #5
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	4413      	add	r3, r2
 8001590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800159c:	4613      	mov	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	4413      	add	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d12e      	bne.n	800160e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80015b0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	da2b      	bge.n	800160e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80015c2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d121      	bne.n	800160e <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ce:	4613      	mov	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	4413      	add	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	440b      	add	r3, r1
 80015d8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80015dc:	2201      	movs	r2, #1
 80015de:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80015e0:	6a3b      	ldr	r3, [r7, #32]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80015e8:	6a3b      	ldr	r3, [r7, #32]
 80015ea:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80015ec:	6a3b      	ldr	r3, [r7, #32]
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d10a      	bne.n	800160e <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	69fa      	ldr	r2, [r7, #28]
 8001602:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800160a:	6053      	str	r3, [r2, #4]
            break;
 800160c:	e007      	b.n	800161e <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	3301      	adds	r3, #1
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161a:	429a      	cmp	r2, r3
 800161c:	d3b4      	bcc.n	8001588 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	695a      	ldr	r2, [r3, #20]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800162c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f003 fb12 	bl	8004c5c <USB_ReadInterrupts>
 8001638:	4603      	mov	r3, r0
 800163a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800163e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001642:	d10a      	bne.n	800165a <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f005 fc91 	bl	8006f6c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	695a      	ldr	r2, [r3, #20]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001658:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f003 fafc 	bl	8004c5c <USB_ReadInterrupts>
 8001664:	4603      	mov	r3, r0
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	2b04      	cmp	r3, #4
 800166c:	d115      	bne.n	800169a <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	d002      	beq.n	8001686 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f005 fc81 	bl	8006f88 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6859      	ldr	r1, [r3, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	430a      	orrs	r2, r1
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	e000      	b.n	800169a <HAL_PCD_IRQHandler+0x920>
      return;
 8001698:	bf00      	nop
    }
  }
}
 800169a:	3734      	adds	r7, #52	; 0x34
 800169c:	46bd      	mov	sp, r7
 800169e:	bd90      	pop	{r4, r7, pc}

080016a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d101      	bne.n	80016ba <HAL_PCD_SetAddress+0x1a>
 80016b6:	2302      	movs	r3, #2
 80016b8:	e013      	b.n	80016e2 <HAL_PCD_SetAddress+0x42>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	78fa      	ldrb	r2, [r7, #3]
 80016c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	78fa      	ldrb	r2, [r7, #3]
 80016d0:	4611      	mov	r1, r2
 80016d2:	4618      	mov	r0, r3
 80016d4:	f003 fa5a 	bl	8004b8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b084      	sub	sp, #16
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	4608      	mov	r0, r1
 80016f4:	4611      	mov	r1, r2
 80016f6:	461a      	mov	r2, r3
 80016f8:	4603      	mov	r3, r0
 80016fa:	70fb      	strb	r3, [r7, #3]
 80016fc:	460b      	mov	r3, r1
 80016fe:	803b      	strh	r3, [r7, #0]
 8001700:	4613      	mov	r3, r2
 8001702:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001708:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800170c:	2b00      	cmp	r3, #0
 800170e:	da0f      	bge.n	8001730 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001710:	78fb      	ldrb	r3, [r7, #3]
 8001712:	f003 020f 	and.w	r2, r3, #15
 8001716:	4613      	mov	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	4413      	add	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	3338      	adds	r3, #56	; 0x38
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	4413      	add	r3, r2
 8001724:	3304      	adds	r3, #4
 8001726:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2201      	movs	r2, #1
 800172c:	705a      	strb	r2, [r3, #1]
 800172e:	e00f      	b.n	8001750 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001730:	78fb      	ldrb	r3, [r7, #3]
 8001732:	f003 020f 	and.w	r2, r3, #15
 8001736:	4613      	mov	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	4413      	add	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	4413      	add	r3, r2
 8001746:	3304      	adds	r3, #4
 8001748:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2200      	movs	r2, #0
 800174e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001750:	78fb      	ldrb	r3, [r7, #3]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	b2da      	uxtb	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800175c:	883a      	ldrh	r2, [r7, #0]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	78ba      	ldrb	r2, [r7, #2]
 8001766:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	785b      	ldrb	r3, [r3, #1]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d004      	beq.n	800177a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	b29a      	uxth	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800177a:	78bb      	ldrb	r3, [r7, #2]
 800177c:	2b02      	cmp	r3, #2
 800177e:	d102      	bne.n	8001786 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2200      	movs	r2, #0
 8001784:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800178c:	2b01      	cmp	r3, #1
 800178e:	d101      	bne.n	8001794 <HAL_PCD_EP_Open+0xaa>
 8001790:	2302      	movs	r3, #2
 8001792:	e00e      	b.n	80017b2 <HAL_PCD_EP_Open+0xc8>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68f9      	ldr	r1, [r7, #12]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f002 fb7c 	bl	8003ea0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80017b0:	7afb      	ldrb	r3, [r7, #11]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b084      	sub	sp, #16
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	460b      	mov	r3, r1
 80017c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	da0f      	bge.n	80017ee <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017ce:	78fb      	ldrb	r3, [r7, #3]
 80017d0:	f003 020f 	and.w	r2, r3, #15
 80017d4:	4613      	mov	r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	4413      	add	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	3338      	adds	r3, #56	; 0x38
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	3304      	adds	r3, #4
 80017e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2201      	movs	r2, #1
 80017ea:	705a      	strb	r2, [r3, #1]
 80017ec:	e00f      	b.n	800180e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017ee:	78fb      	ldrb	r3, [r7, #3]
 80017f0:	f003 020f 	and.w	r2, r3, #15
 80017f4:	4613      	mov	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4413      	add	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	4413      	add	r3, r2
 8001804:	3304      	adds	r3, #4
 8001806:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2200      	movs	r2, #0
 800180c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	f003 030f 	and.w	r3, r3, #15
 8001814:	b2da      	uxtb	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001820:	2b01      	cmp	r3, #1
 8001822:	d101      	bne.n	8001828 <HAL_PCD_EP_Close+0x6e>
 8001824:	2302      	movs	r3, #2
 8001826:	e00e      	b.n	8001846 <HAL_PCD_EP_Close+0x8c>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68f9      	ldr	r1, [r7, #12]
 8001836:	4618      	mov	r0, r3
 8001838:	f002 fbba 	bl	8003fb0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b086      	sub	sp, #24
 8001852:	af00      	add	r7, sp, #0
 8001854:	60f8      	str	r0, [r7, #12]
 8001856:	607a      	str	r2, [r7, #4]
 8001858:	603b      	str	r3, [r7, #0]
 800185a:	460b      	mov	r3, r1
 800185c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800185e:	7afb      	ldrb	r3, [r7, #11]
 8001860:	f003 020f 	and.w	r2, r3, #15
 8001864:	4613      	mov	r3, r2
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	4413      	add	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	3304      	adds	r3, #4
 8001876:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	2200      	movs	r2, #0
 8001888:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	2200      	movs	r2, #0
 800188e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001890:	7afb      	ldrb	r3, [r7, #11]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	b2da      	uxtb	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800189c:	7afb      	ldrb	r3, [r7, #11]
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d106      	bne.n	80018b4 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6979      	ldr	r1, [r7, #20]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f002 fe3b 	bl	8004528 <USB_EP0StartXfer>
 80018b2:	e005      	b.n	80018c0 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6979      	ldr	r1, [r7, #20]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f002 fc54 	bl	8004168 <USB_EPStartXfer>
  }

  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	460b      	mov	r3, r1
 80018d4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	f003 020f 	and.w	r2, r3, #15
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	4413      	add	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	440b      	add	r3, r1
 80018e8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80018ec:	681b      	ldr	r3, [r3, #0]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b086      	sub	sp, #24
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	603b      	str	r3, [r7, #0]
 8001906:	460b      	mov	r3, r1
 8001908:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800190a:	7afb      	ldrb	r3, [r7, #11]
 800190c:	f003 020f 	and.w	r2, r3, #15
 8001910:	4613      	mov	r3, r2
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	4413      	add	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	3338      	adds	r3, #56	; 0x38
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	4413      	add	r3, r2
 800191e:	3304      	adds	r3, #4
 8001920:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	2201      	movs	r2, #1
 8001938:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800193a:	7afb      	ldrb	r3, [r7, #11]
 800193c:	f003 030f 	and.w	r3, r3, #15
 8001940:	b2da      	uxtb	r2, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001946:	7afb      	ldrb	r3, [r7, #11]
 8001948:	f003 030f 	and.w	r3, r3, #15
 800194c:	2b00      	cmp	r3, #0
 800194e:	d106      	bne.n	800195e <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6979      	ldr	r1, [r7, #20]
 8001956:	4618      	mov	r0, r3
 8001958:	f002 fde6 	bl	8004528 <USB_EP0StartXfer>
 800195c:	e005      	b.n	800196a <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6979      	ldr	r1, [r7, #20]
 8001964:	4618      	mov	r0, r3
 8001966:	f002 fbff 	bl	8004168 <USB_EPStartXfer>
  }

  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	f003 020f 	and.w	r2, r3, #15
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	429a      	cmp	r2, r3
 800198c:	d901      	bls.n	8001992 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e04e      	b.n	8001a30 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001992:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001996:	2b00      	cmp	r3, #0
 8001998:	da0f      	bge.n	80019ba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	f003 020f 	and.w	r2, r3, #15
 80019a0:	4613      	mov	r3, r2
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	4413      	add	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	3338      	adds	r3, #56	; 0x38
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	3304      	adds	r3, #4
 80019b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2201      	movs	r2, #1
 80019b6:	705a      	strb	r2, [r3, #1]
 80019b8:	e00d      	b.n	80019d6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80019ba:	78fa      	ldrb	r2, [r7, #3]
 80019bc:	4613      	mov	r3, r2
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	4413      	add	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	4413      	add	r3, r2
 80019cc:	3304      	adds	r3, #4
 80019ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2200      	movs	r2, #0
 80019d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2201      	movs	r2, #1
 80019da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d101      	bne.n	80019f6 <HAL_PCD_EP_SetStall+0x82>
 80019f2:	2302      	movs	r3, #2
 80019f4:	e01c      	b.n	8001a30 <HAL_PCD_EP_SetStall+0xbc>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68f9      	ldr	r1, [r7, #12]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f002 ffed 	bl	80049e4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a0a:	78fb      	ldrb	r3, [r7, #3]
 8001a0c:	f003 030f 	and.w	r3, r3, #15
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d108      	bne.n	8001a26 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4610      	mov	r0, r2
 8001a22:	f003 f9df 	bl	8004de4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	f003 020f 	and.w	r2, r3, #15
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d901      	bls.n	8001a56 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e042      	b.n	8001adc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	da0f      	bge.n	8001a7e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a5e:	78fb      	ldrb	r3, [r7, #3]
 8001a60:	f003 020f 	and.w	r2, r3, #15
 8001a64:	4613      	mov	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	4413      	add	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	3338      	adds	r3, #56	; 0x38
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	3304      	adds	r3, #4
 8001a74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	705a      	strb	r2, [r3, #1]
 8001a7c:	e00f      	b.n	8001a9e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a7e:	78fb      	ldrb	r3, [r7, #3]
 8001a80:	f003 020f 	and.w	r2, r3, #15
 8001a84:	4613      	mov	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	4413      	add	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	4413      	add	r3, r2
 8001a94:	3304      	adds	r3, #4
 8001a96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aa4:	78fb      	ldrb	r3, [r7, #3]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d101      	bne.n	8001abe <HAL_PCD_EP_ClrStall+0x86>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e00e      	b.n	8001adc <HAL_PCD_EP_ClrStall+0xa4>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68f9      	ldr	r1, [r7, #12]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f002 fff7 	bl	8004ac0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001af0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	da0c      	bge.n	8001b12 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001af8:	78fb      	ldrb	r3, [r7, #3]
 8001afa:	f003 020f 	and.w	r2, r3, #15
 8001afe:	4613      	mov	r3, r2
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	4413      	add	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	3338      	adds	r3, #56	; 0x38
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	e00c      	b.n	8001b2c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b12:	78fb      	ldrb	r3, [r7, #3]
 8001b14:	f003 020f 	and.w	r2, r3, #15
 8001b18:	4613      	mov	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	4413      	add	r3, r2
 8001b28:	3304      	adds	r3, #4
 8001b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68f9      	ldr	r1, [r7, #12]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f002 fe1a 	bl	800476c <USB_EPStopXfer>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001b3c:	7afb      	ldrb	r3, [r7, #11]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b088      	sub	sp, #32
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	4413      	add	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	3338      	adds	r3, #56	; 0x38
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	4413      	add	r3, r2
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6a1a      	ldr	r2, [r3, #32]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d901      	bls.n	8001b7e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e067      	b.n	8001c4e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	699a      	ldr	r2, [r3, #24]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d902      	bls.n	8001b9a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3303      	adds	r3, #3
 8001b9e:	089b      	lsrs	r3, r3, #2
 8001ba0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ba2:	e026      	b.n	8001bf2 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	699a      	ldr	r2, [r3, #24]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	69fa      	ldr	r2, [r7, #28]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d902      	bls.n	8001bc0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	3303      	adds	r3, #3
 8001bc4:	089b      	lsrs	r3, r3, #2
 8001bc6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6919      	ldr	r1, [r3, #16]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	6978      	ldr	r0, [r7, #20]
 8001bd6:	f002 fe73 	bl	80048c0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	691a      	ldr	r2, [r3, #16]
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	441a      	add	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6a1a      	ldr	r2, [r3, #32]
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	441a      	add	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	015a      	lsls	r2, r3, #5
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d809      	bhi.n	8001c1c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6a1a      	ldr	r2, [r3, #32]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d203      	bcs.n	8001c1c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1c3      	bne.n	8001ba4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	699a      	ldr	r2, [r3, #24]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d811      	bhi.n	8001c4c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	2201      	movs	r2, #1
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	43db      	mvns	r3, r3
 8001c42:	6939      	ldr	r1, [r7, #16]
 8001c44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001c48:	4013      	ands	r3, r2
 8001c4a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3720      	adds	r7, #32
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	333c      	adds	r3, #60	; 0x3c
 8001c70:	3304      	adds	r3, #4
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	015a      	lsls	r2, r3, #5
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4a19      	ldr	r2, [pc, #100]	; (8001cf0 <PCD_EP_OutXfrComplete_int+0x98>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d124      	bne.n	8001cd8 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00a      	beq.n	8001cae <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	015a      	lsls	r2, r3, #5
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001caa:	6093      	str	r3, [r2, #8]
 8001cac:	e01a      	b.n	8001ce4 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	f003 0320 	and.w	r3, r3, #32
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d008      	beq.n	8001cca <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	015a      	lsls	r2, r3, #5
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	2320      	movs	r3, #32
 8001cc8:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	4619      	mov	r1, r3
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f005 f877 	bl	8006dc4 <HAL_PCD_DataOutStageCallback>
 8001cd6:	e005      	b.n	8001ce4 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	4619      	mov	r1, r3
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f005 f870 	bl	8006dc4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	4f54310a 	.word	0x4f54310a

08001cf4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	333c      	adds	r3, #60	; 0x3c
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	015a      	lsls	r2, r3, #5
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4413      	add	r3, r2
 8001d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4a0c      	ldr	r2, [pc, #48]	; (8001d58 <PCD_EP_OutSetupPacket_int+0x64>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d90e      	bls.n	8001d48 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d009      	beq.n	8001d48 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	015a      	lsls	r2, r3, #5
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d40:	461a      	mov	r2, r3
 8001d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d46:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f005 f829 	bl	8006da0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	4f54300a 	.word	0x4f54300a

08001d5c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	70fb      	strb	r3, [r7, #3]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d107      	bne.n	8001d8a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001d7a:	883b      	ldrh	r3, [r7, #0]
 8001d7c:	0419      	lsls	r1, r3, #16
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	629a      	str	r2, [r3, #40]	; 0x28
 8001d88:	e028      	b.n	8001ddc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d90:	0c1b      	lsrs	r3, r3, #16
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	4413      	add	r3, r2
 8001d96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001d98:	2300      	movs	r3, #0
 8001d9a:	73fb      	strb	r3, [r7, #15]
 8001d9c:	e00d      	b.n	8001dba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
 8001da4:	3340      	adds	r3, #64	; 0x40
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	0c1b      	lsrs	r3, r3, #16
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	4413      	add	r3, r2
 8001db2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	3301      	adds	r3, #1
 8001db8:	73fb      	strb	r3, [r7, #15]
 8001dba:	7bfa      	ldrb	r2, [r7, #15]
 8001dbc:	78fb      	ldrb	r3, [r7, #3]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d3ec      	bcc.n	8001d9e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001dc4:	883b      	ldrh	r3, [r7, #0]
 8001dc6:	0418      	lsls	r0, r3, #16
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6819      	ldr	r1, [r3, #0]
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	68ba      	ldr	r2, [r7, #8]
 8001dd2:	4302      	orrs	r2, r0
 8001dd4:	3340      	adds	r3, #64	; 0x40
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	460b      	mov	r3, r1
 8001df4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	887a      	ldrh	r2, [r7, #2]
 8001dfc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	f043 0303 	orr.w	r3, r3, #3
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e58:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e64:	d102      	bne.n	8001e6c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001e66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e6a:	e00b      	b.n	8001e84 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001e6c:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e7a:	d102      	bne.n	8001e82 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e80:	e000      	b.n	8001e84 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001e82:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40007000 	.word	0x40007000

08001e94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d141      	bne.n	8001f26 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ea2:	4b4b      	ldr	r3, [pc, #300]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eae:	d131      	bne.n	8001f14 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001eb0:	4b47      	ldr	r3, [pc, #284]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eb6:	4a46      	ldr	r2, [pc, #280]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ebc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ec0:	4b43      	ldr	r3, [pc, #268]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ec8:	4a41      	ldr	r2, [pc, #260]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ece:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001ed0:	4b40      	ldr	r3, [pc, #256]	; (8001fd4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2232      	movs	r2, #50	; 0x32
 8001ed6:	fb02 f303 	mul.w	r3, r2, r3
 8001eda:	4a3f      	ldr	r2, [pc, #252]	; (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001edc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee0:	0c9b      	lsrs	r3, r3, #18
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ee6:	e002      	b.n	8001eee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eee:	4b38      	ldr	r3, [pc, #224]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001efa:	d102      	bne.n	8001f02 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f2      	bne.n	8001ee8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f02:	4b33      	ldr	r3, [pc, #204]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f0e:	d158      	bne.n	8001fc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e057      	b.n	8001fc4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f14:	4b2e      	ldr	r3, [pc, #184]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f1a:	4a2d      	ldr	r2, [pc, #180]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f24:	e04d      	b.n	8001fc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f2c:	d141      	bne.n	8001fb2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f2e:	4b28      	ldr	r3, [pc, #160]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f3a:	d131      	bne.n	8001fa0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f3c:	4b24      	ldr	r3, [pc, #144]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f42:	4a23      	ldr	r2, [pc, #140]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f4c:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f54:	4a1e      	ldr	r2, [pc, #120]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001f5c:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2232      	movs	r2, #50	; 0x32
 8001f62:	fb02 f303 	mul.w	r3, r2, r3
 8001f66:	4a1c      	ldr	r2, [pc, #112]	; (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f68:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6c:	0c9b      	lsrs	r3, r3, #18
 8001f6e:	3301      	adds	r3, #1
 8001f70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f72:	e002      	b.n	8001f7a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f7a:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f86:	d102      	bne.n	8001f8e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f2      	bne.n	8001f74 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f9a:	d112      	bne.n	8001fc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e011      	b.n	8001fc4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fa6:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001fb0:	e007      	b.n	8001fc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fb2:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fba:	4a05      	ldr	r2, [pc, #20]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fc0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	40007000 	.word	0x40007000
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	431bde83 	.word	0x431bde83

08001fdc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001fe0:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	4a04      	ldr	r2, [pc, #16]	; (8001ff8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001fe6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fea:	6053      	str	r3, [r2, #4]
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40007000 	.word	0x40007000

08001ffc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d102      	bne.n	8002010 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	f000 bc08 	b.w	8002820 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002010:	4b96      	ldr	r3, [pc, #600]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 030c 	and.w	r3, r3, #12
 8002018:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800201a:	4b94      	ldr	r3, [pc, #592]	; (800226c <HAL_RCC_OscConfig+0x270>)
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0310 	and.w	r3, r3, #16
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 80e4 	beq.w	80021fa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d007      	beq.n	8002048 <HAL_RCC_OscConfig+0x4c>
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	2b0c      	cmp	r3, #12
 800203c:	f040 808b 	bne.w	8002156 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	2b01      	cmp	r3, #1
 8002044:	f040 8087 	bne.w	8002156 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002048:	4b88      	ldr	r3, [pc, #544]	; (800226c <HAL_RCC_OscConfig+0x270>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d005      	beq.n	8002060 <HAL_RCC_OscConfig+0x64>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e3df      	b.n	8002820 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a1a      	ldr	r2, [r3, #32]
 8002064:	4b81      	ldr	r3, [pc, #516]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0308 	and.w	r3, r3, #8
 800206c:	2b00      	cmp	r3, #0
 800206e:	d004      	beq.n	800207a <HAL_RCC_OscConfig+0x7e>
 8002070:	4b7e      	ldr	r3, [pc, #504]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002078:	e005      	b.n	8002086 <HAL_RCC_OscConfig+0x8a>
 800207a:	4b7c      	ldr	r3, [pc, #496]	; (800226c <HAL_RCC_OscConfig+0x270>)
 800207c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002080:	091b      	lsrs	r3, r3, #4
 8002082:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002086:	4293      	cmp	r3, r2
 8002088:	d223      	bcs.n	80020d2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	4618      	mov	r0, r3
 8002090:	f000 fda0 	bl	8002bd4 <RCC_SetFlashLatencyFromMSIRange>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e3c0      	b.n	8002820 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800209e:	4b73      	ldr	r3, [pc, #460]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a72      	ldr	r2, [pc, #456]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020a4:	f043 0308 	orr.w	r3, r3, #8
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	4b70      	ldr	r3, [pc, #448]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	496d      	ldr	r1, [pc, #436]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020bc:	4b6b      	ldr	r3, [pc, #428]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	021b      	lsls	r3, r3, #8
 80020ca:	4968      	ldr	r1, [pc, #416]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
 80020d0:	e025      	b.n	800211e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020d2:	4b66      	ldr	r3, [pc, #408]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a65      	ldr	r2, [pc, #404]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020d8:	f043 0308 	orr.w	r3, r3, #8
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	4b63      	ldr	r3, [pc, #396]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	4960      	ldr	r1, [pc, #384]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020f0:	4b5e      	ldr	r3, [pc, #376]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	021b      	lsls	r3, r3, #8
 80020fe:	495b      	ldr	r1, [pc, #364]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002100:	4313      	orrs	r3, r2
 8002102:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d109      	bne.n	800211e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	4618      	mov	r0, r3
 8002110:	f000 fd60 	bl	8002bd4 <RCC_SetFlashLatencyFromMSIRange>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e380      	b.n	8002820 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800211e:	f000 fcc1 	bl	8002aa4 <HAL_RCC_GetSysClockFreq>
 8002122:	4602      	mov	r2, r0
 8002124:	4b51      	ldr	r3, [pc, #324]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	4950      	ldr	r1, [pc, #320]	; (8002270 <HAL_RCC_OscConfig+0x274>)
 8002130:	5ccb      	ldrb	r3, [r1, r3]
 8002132:	f003 031f 	and.w	r3, r3, #31
 8002136:	fa22 f303 	lsr.w	r3, r2, r3
 800213a:	4a4e      	ldr	r2, [pc, #312]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 800213c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800213e:	4b4e      	ldr	r3, [pc, #312]	; (8002278 <HAL_RCC_OscConfig+0x27c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe f9a2 	bl	800048c <HAL_InitTick>
 8002148:	4603      	mov	r3, r0
 800214a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d052      	beq.n	80021f8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	e364      	b.n	8002820 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d032      	beq.n	80021c4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800215e:	4b43      	ldr	r3, [pc, #268]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a42      	ldr	r2, [pc, #264]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800216a:	f7fe f9df 	bl	800052c <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002172:	f7fe f9db 	bl	800052c <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e34d      	b.n	8002820 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002184:	4b39      	ldr	r3, [pc, #228]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0f0      	beq.n	8002172 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002190:	4b36      	ldr	r3, [pc, #216]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a35      	ldr	r2, [pc, #212]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002196:	f043 0308 	orr.w	r3, r3, #8
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	4b33      	ldr	r3, [pc, #204]	; (800226c <HAL_RCC_OscConfig+0x270>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	4930      	ldr	r1, [pc, #192]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021ae:	4b2f      	ldr	r3, [pc, #188]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	021b      	lsls	r3, r3, #8
 80021bc:	492b      	ldr	r1, [pc, #172]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	604b      	str	r3, [r1, #4]
 80021c2:	e01a      	b.n	80021fa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021c4:	4b29      	ldr	r3, [pc, #164]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a28      	ldr	r2, [pc, #160]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80021ca:	f023 0301 	bic.w	r3, r3, #1
 80021ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021d0:	f7fe f9ac 	bl	800052c <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021d8:	f7fe f9a8 	bl	800052c <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e31a      	b.n	8002820 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021ea:	4b20      	ldr	r3, [pc, #128]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x1dc>
 80021f6:	e000      	b.n	80021fa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d073      	beq.n	80022ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	2b08      	cmp	r3, #8
 800220a:	d005      	beq.n	8002218 <HAL_RCC_OscConfig+0x21c>
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	2b0c      	cmp	r3, #12
 8002210:	d10e      	bne.n	8002230 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2b03      	cmp	r3, #3
 8002216:	d10b      	bne.n	8002230 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002218:	4b14      	ldr	r3, [pc, #80]	; (800226c <HAL_RCC_OscConfig+0x270>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d063      	beq.n	80022ec <HAL_RCC_OscConfig+0x2f0>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d15f      	bne.n	80022ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e2f7      	b.n	8002820 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002238:	d106      	bne.n	8002248 <HAL_RCC_OscConfig+0x24c>
 800223a:	4b0c      	ldr	r3, [pc, #48]	; (800226c <HAL_RCC_OscConfig+0x270>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a0b      	ldr	r2, [pc, #44]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	e025      	b.n	8002294 <HAL_RCC_OscConfig+0x298>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002250:	d114      	bne.n	800227c <HAL_RCC_OscConfig+0x280>
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a05      	ldr	r2, [pc, #20]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	4b03      	ldr	r3, [pc, #12]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a02      	ldr	r2, [pc, #8]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	e013      	b.n	8002294 <HAL_RCC_OscConfig+0x298>
 800226c:	40021000 	.word	0x40021000
 8002270:	080075b8 	.word	0x080075b8
 8002274:	20000000 	.word	0x20000000
 8002278:	20000004 	.word	0x20000004
 800227c:	4ba0      	ldr	r3, [pc, #640]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a9f      	ldr	r2, [pc, #636]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	4b9d      	ldr	r3, [pc, #628]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a9c      	ldr	r2, [pc, #624]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 800228e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d013      	beq.n	80022c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7fe f946 	bl	800052c <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a4:	f7fe f942 	bl	800052c <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b64      	cmp	r3, #100	; 0x64
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e2b4      	b.n	8002820 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022b6:	4b92      	ldr	r3, [pc, #584]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0x2a8>
 80022c2:	e014      	b.n	80022ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c4:	f7fe f932 	bl	800052c <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022cc:	f7fe f92e 	bl	800052c <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b64      	cmp	r3, #100	; 0x64
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e2a0      	b.n	8002820 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022de:	4b88      	ldr	r3, [pc, #544]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x2d0>
 80022ea:	e000      	b.n	80022ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d060      	beq.n	80023bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d005      	beq.n	800230c <HAL_RCC_OscConfig+0x310>
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	2b0c      	cmp	r3, #12
 8002304:	d119      	bne.n	800233a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2b02      	cmp	r3, #2
 800230a:	d116      	bne.n	800233a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800230c:	4b7c      	ldr	r3, [pc, #496]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_RCC_OscConfig+0x328>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e27d      	b.n	8002820 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002324:	4b76      	ldr	r3, [pc, #472]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	061b      	lsls	r3, r3, #24
 8002332:	4973      	ldr	r1, [pc, #460]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002338:	e040      	b.n	80023bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d023      	beq.n	800238a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002342:	4b6f      	ldr	r3, [pc, #444]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a6e      	ldr	r2, [pc, #440]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800234c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234e:	f7fe f8ed 	bl	800052c <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002356:	f7fe f8e9 	bl	800052c <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e25b      	b.n	8002820 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002368:	4b65      	ldr	r3, [pc, #404]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0f0      	beq.n	8002356 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002374:	4b62      	ldr	r3, [pc, #392]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	061b      	lsls	r3, r3, #24
 8002382:	495f      	ldr	r1, [pc, #380]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002384:	4313      	orrs	r3, r2
 8002386:	604b      	str	r3, [r1, #4]
 8002388:	e018      	b.n	80023bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800238a:	4b5d      	ldr	r3, [pc, #372]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a5c      	ldr	r2, [pc, #368]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002394:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002396:	f7fe f8c9 	bl	800052c <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239e:	f7fe f8c5 	bl	800052c <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e237      	b.n	8002820 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023b0:	4b53      	ldr	r3, [pc, #332]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1f0      	bne.n	800239e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d03c      	beq.n	8002442 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d01c      	beq.n	800240a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d0:	4b4b      	ldr	r3, [pc, #300]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80023d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023d6:	4a4a      	ldr	r2, [pc, #296]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e0:	f7fe f8a4 	bl	800052c <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e8:	f7fe f8a0 	bl	800052c <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e212      	b.n	8002820 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023fa:	4b41      	ldr	r3, [pc, #260]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80023fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0ef      	beq.n	80023e8 <HAL_RCC_OscConfig+0x3ec>
 8002408:	e01b      	b.n	8002442 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800240a:	4b3d      	ldr	r3, [pc, #244]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 800240c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002410:	4a3b      	ldr	r2, [pc, #236]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002412:	f023 0301 	bic.w	r3, r3, #1
 8002416:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241a:	f7fe f887 	bl	800052c <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002422:	f7fe f883 	bl	800052c <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e1f5      	b.n	8002820 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002434:	4b32      	ldr	r3, [pc, #200]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1ef      	bne.n	8002422 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 80a6 	beq.w	800259c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002450:	2300      	movs	r3, #0
 8002452:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002454:	4b2a      	ldr	r3, [pc, #168]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10d      	bne.n	800247c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002460:	4b27      	ldr	r3, [pc, #156]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002464:	4a26      	ldr	r2, [pc, #152]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800246a:	6593      	str	r3, [r2, #88]	; 0x58
 800246c:	4b24      	ldr	r3, [pc, #144]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 800246e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002478:	2301      	movs	r3, #1
 800247a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800247c:	4b21      	ldr	r3, [pc, #132]	; (8002504 <HAL_RCC_OscConfig+0x508>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002484:	2b00      	cmp	r3, #0
 8002486:	d118      	bne.n	80024ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002488:	4b1e      	ldr	r3, [pc, #120]	; (8002504 <HAL_RCC_OscConfig+0x508>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a1d      	ldr	r2, [pc, #116]	; (8002504 <HAL_RCC_OscConfig+0x508>)
 800248e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002492:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002494:	f7fe f84a 	bl	800052c <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249c:	f7fe f846 	bl	800052c <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e1b8      	b.n	8002820 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <HAL_RCC_OscConfig+0x508>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d108      	bne.n	80024d4 <HAL_RCC_OscConfig+0x4d8>
 80024c2:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80024c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c8:	4a0d      	ldr	r2, [pc, #52]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024d2:	e029      	b.n	8002528 <HAL_RCC_OscConfig+0x52c>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2b05      	cmp	r3, #5
 80024da:	d115      	bne.n	8002508 <HAL_RCC_OscConfig+0x50c>
 80024dc:	4b08      	ldr	r3, [pc, #32]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80024de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e2:	4a07      	ldr	r2, [pc, #28]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80024e4:	f043 0304 	orr.w	r3, r3, #4
 80024e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80024ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f2:	4a03      	ldr	r2, [pc, #12]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024fc:	e014      	b.n	8002528 <HAL_RCC_OscConfig+0x52c>
 80024fe:	bf00      	nop
 8002500:	40021000 	.word	0x40021000
 8002504:	40007000 	.word	0x40007000
 8002508:	4b9d      	ldr	r3, [pc, #628]	; (8002780 <HAL_RCC_OscConfig+0x784>)
 800250a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250e:	4a9c      	ldr	r2, [pc, #624]	; (8002780 <HAL_RCC_OscConfig+0x784>)
 8002510:	f023 0301 	bic.w	r3, r3, #1
 8002514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002518:	4b99      	ldr	r3, [pc, #612]	; (8002780 <HAL_RCC_OscConfig+0x784>)
 800251a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251e:	4a98      	ldr	r2, [pc, #608]	; (8002780 <HAL_RCC_OscConfig+0x784>)
 8002520:	f023 0304 	bic.w	r3, r3, #4
 8002524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d016      	beq.n	800255e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7fd fffc 	bl	800052c <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002536:	e00a      	b.n	800254e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002538:	f7fd fff8 	bl	800052c <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f241 3288 	movw	r2, #5000	; 0x1388
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e168      	b.n	8002820 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800254e:	4b8c      	ldr	r3, [pc, #560]	; (8002780 <HAL_RCC_OscConfig+0x784>)
 8002550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0ed      	beq.n	8002538 <HAL_RCC_OscConfig+0x53c>
 800255c:	e015      	b.n	800258a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255e:	f7fd ffe5 	bl	800052c <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002564:	e00a      	b.n	800257c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f7fd ffe1 	bl	800052c <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	f241 3288 	movw	r2, #5000	; 0x1388
 8002574:	4293      	cmp	r3, r2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e151      	b.n	8002820 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800257c:	4b80      	ldr	r3, [pc, #512]	; (8002780 <HAL_RCC_OscConfig+0x784>)
 800257e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1ed      	bne.n	8002566 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800258a:	7ffb      	ldrb	r3, [r7, #31]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d105      	bne.n	800259c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002590:	4b7b      	ldr	r3, [pc, #492]	; (8002780 <HAL_RCC_OscConfig+0x784>)
 8002592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002594:	4a7a      	ldr	r2, [pc, #488]	; (8002780 <HAL_RCC_OscConfig+0x784>)
 8002596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800259a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0320 	and.w	r3, r3, #32
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d03c      	beq.n	8002622 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d01c      	beq.n	80025ea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025b0:	4b73      	ldr	r3, [pc, #460]	; (8002780 <HAL_RCC_OscConfig+0x784>)
 80025b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025b6:	4a72      	ldr	r2, [pc, #456]	; (8002780 <HAL_RCC_OscConfig+0x784>)
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c0:	f7fd ffb4 	bl	800052c <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025c8:	f7fd ffb0 	bl	800052c <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e122      	b.n	8002820 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025da:	4b69      	ldr	r3, [pc, #420]	; (8002780 <HAL_RCC_OscConfig+0x784>)
 80025dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0ef      	beq.n	80025c8 <HAL_RCC_OscConfig+0x5cc>
 80025e8:	e01b      	b.n	8002622 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025ea:	4b65      	ldr	r3, [pc, #404]	; (8002780 <HAL_RCC_OscConfig+0x784>)
 80025ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025f0:	4a63      	ldr	r2, [pc, #396]	; (8002780 <HAL_RCC_OscConfig+0x784>)
 80025f2:	f023 0301 	bic.w	r3, r3, #1
 80025f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fa:	f7fd ff97 	bl	800052c <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002602:	f7fd ff93 	bl	800052c <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e105      	b.n	8002820 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002614:	4b5a      	ldr	r3, [pc, #360]	; (8002780 <HAL_RCC_OscConfig+0x784>)
 8002616:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1ef      	bne.n	8002602 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 80f9 	beq.w	800281e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002630:	2b02      	cmp	r3, #2
 8002632:	f040 80cf 	bne.w	80027d4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002636:	4b52      	ldr	r3, [pc, #328]	; (8002780 <HAL_RCC_OscConfig+0x784>)
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	f003 0203 	and.w	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002646:	429a      	cmp	r2, r3
 8002648:	d12c      	bne.n	80026a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	3b01      	subs	r3, #1
 8002656:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002658:	429a      	cmp	r2, r3
 800265a:	d123      	bne.n	80026a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002666:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002668:	429a      	cmp	r2, r3
 800266a:	d11b      	bne.n	80026a4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002676:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002678:	429a      	cmp	r2, r3
 800267a:	d113      	bne.n	80026a4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002686:	085b      	lsrs	r3, r3, #1
 8002688:	3b01      	subs	r3, #1
 800268a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800268c:	429a      	cmp	r2, r3
 800268e:	d109      	bne.n	80026a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	085b      	lsrs	r3, r3, #1
 800269c:	3b01      	subs	r3, #1
 800269e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d071      	beq.n	8002788 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	2b0c      	cmp	r3, #12
 80026a8:	d068      	beq.n	800277c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026aa:	4b35      	ldr	r3, [pc, #212]	; (8002780 <HAL_RCC_OscConfig+0x784>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d105      	bne.n	80026c2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80026b6:	4b32      	ldr	r3, [pc, #200]	; (8002780 <HAL_RCC_OscConfig+0x784>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e0ac      	b.n	8002820 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026c6:	4b2e      	ldr	r3, [pc, #184]	; (8002780 <HAL_RCC_OscConfig+0x784>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a2d      	ldr	r2, [pc, #180]	; (8002780 <HAL_RCC_OscConfig+0x784>)
 80026cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026d0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026d2:	f7fd ff2b 	bl	800052c <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026da:	f7fd ff27 	bl	800052c <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e099      	b.n	8002820 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ec:	4b24      	ldr	r3, [pc, #144]	; (8002780 <HAL_RCC_OscConfig+0x784>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f0      	bne.n	80026da <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026f8:	4b21      	ldr	r3, [pc, #132]	; (8002780 <HAL_RCC_OscConfig+0x784>)
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	4b21      	ldr	r3, [pc, #132]	; (8002784 <HAL_RCC_OscConfig+0x788>)
 80026fe:	4013      	ands	r3, r2
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002708:	3a01      	subs	r2, #1
 800270a:	0112      	lsls	r2, r2, #4
 800270c:	4311      	orrs	r1, r2
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002712:	0212      	lsls	r2, r2, #8
 8002714:	4311      	orrs	r1, r2
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800271a:	0852      	lsrs	r2, r2, #1
 800271c:	3a01      	subs	r2, #1
 800271e:	0552      	lsls	r2, r2, #21
 8002720:	4311      	orrs	r1, r2
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002726:	0852      	lsrs	r2, r2, #1
 8002728:	3a01      	subs	r2, #1
 800272a:	0652      	lsls	r2, r2, #25
 800272c:	4311      	orrs	r1, r2
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002732:	06d2      	lsls	r2, r2, #27
 8002734:	430a      	orrs	r2, r1
 8002736:	4912      	ldr	r1, [pc, #72]	; (8002780 <HAL_RCC_OscConfig+0x784>)
 8002738:	4313      	orrs	r3, r2
 800273a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800273c:	4b10      	ldr	r3, [pc, #64]	; (8002780 <HAL_RCC_OscConfig+0x784>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a0f      	ldr	r2, [pc, #60]	; (8002780 <HAL_RCC_OscConfig+0x784>)
 8002742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002746:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002748:	4b0d      	ldr	r3, [pc, #52]	; (8002780 <HAL_RCC_OscConfig+0x784>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4a0c      	ldr	r2, [pc, #48]	; (8002780 <HAL_RCC_OscConfig+0x784>)
 800274e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002752:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002754:	f7fd feea 	bl	800052c <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275c:	f7fd fee6 	bl	800052c <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e058      	b.n	8002820 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800276e:	4b04      	ldr	r3, [pc, #16]	; (8002780 <HAL_RCC_OscConfig+0x784>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0f0      	beq.n	800275c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800277a:	e050      	b.n	800281e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e04f      	b.n	8002820 <HAL_RCC_OscConfig+0x824>
 8002780:	40021000 	.word	0x40021000
 8002784:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002788:	4b27      	ldr	r3, [pc, #156]	; (8002828 <HAL_RCC_OscConfig+0x82c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d144      	bne.n	800281e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002794:	4b24      	ldr	r3, [pc, #144]	; (8002828 <HAL_RCC_OscConfig+0x82c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a23      	ldr	r2, [pc, #140]	; (8002828 <HAL_RCC_OscConfig+0x82c>)
 800279a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800279e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027a0:	4b21      	ldr	r3, [pc, #132]	; (8002828 <HAL_RCC_OscConfig+0x82c>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	4a20      	ldr	r2, [pc, #128]	; (8002828 <HAL_RCC_OscConfig+0x82c>)
 80027a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027ac:	f7fd febe 	bl	800052c <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b4:	f7fd feba 	bl	800052c <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e02c      	b.n	8002820 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027c6:	4b18      	ldr	r3, [pc, #96]	; (8002828 <HAL_RCC_OscConfig+0x82c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0f0      	beq.n	80027b4 <HAL_RCC_OscConfig+0x7b8>
 80027d2:	e024      	b.n	800281e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	2b0c      	cmp	r3, #12
 80027d8:	d01f      	beq.n	800281a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027da:	4b13      	ldr	r3, [pc, #76]	; (8002828 <HAL_RCC_OscConfig+0x82c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a12      	ldr	r2, [pc, #72]	; (8002828 <HAL_RCC_OscConfig+0x82c>)
 80027e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e6:	f7fd fea1 	bl	800052c <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ee:	f7fd fe9d 	bl	800052c <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e00f      	b.n	8002820 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002800:	4b09      	ldr	r3, [pc, #36]	; (8002828 <HAL_RCC_OscConfig+0x82c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1f0      	bne.n	80027ee <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <HAL_RCC_OscConfig+0x82c>)
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	4905      	ldr	r1, [pc, #20]	; (8002828 <HAL_RCC_OscConfig+0x82c>)
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_RCC_OscConfig+0x830>)
 8002814:	4013      	ands	r3, r2
 8002816:	60cb      	str	r3, [r1, #12]
 8002818:	e001      	b.n	800281e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3720      	adds	r7, #32
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40021000 	.word	0x40021000
 800282c:	feeefffc 	.word	0xfeeefffc

08002830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e11d      	b.n	8002a84 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002848:	4b90      	ldr	r3, [pc, #576]	; (8002a8c <HAL_RCC_ClockConfig+0x25c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	d910      	bls.n	8002878 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002856:	4b8d      	ldr	r3, [pc, #564]	; (8002a8c <HAL_RCC_ClockConfig+0x25c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 020f 	bic.w	r2, r3, #15
 800285e:	498b      	ldr	r1, [pc, #556]	; (8002a8c <HAL_RCC_ClockConfig+0x25c>)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	4313      	orrs	r3, r2
 8002864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002866:	4b89      	ldr	r3, [pc, #548]	; (8002a8c <HAL_RCC_ClockConfig+0x25c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	d001      	beq.n	8002878 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e105      	b.n	8002a84 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d010      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	4b81      	ldr	r3, [pc, #516]	; (8002a90 <HAL_RCC_ClockConfig+0x260>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002890:	429a      	cmp	r2, r3
 8002892:	d908      	bls.n	80028a6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002894:	4b7e      	ldr	r3, [pc, #504]	; (8002a90 <HAL_RCC_ClockConfig+0x260>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	497b      	ldr	r1, [pc, #492]	; (8002a90 <HAL_RCC_ClockConfig+0x260>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d079      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d11e      	bne.n	80028f8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ba:	4b75      	ldr	r3, [pc, #468]	; (8002a90 <HAL_RCC_ClockConfig+0x260>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e0dc      	b.n	8002a84 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80028ca:	f000 f9dd 	bl	8002c88 <RCC_GetSysClockFreqFromPLLSource>
 80028ce:	4603      	mov	r3, r0
 80028d0:	4a70      	ldr	r2, [pc, #448]	; (8002a94 <HAL_RCC_ClockConfig+0x264>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d946      	bls.n	8002964 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80028d6:	4b6e      	ldr	r3, [pc, #440]	; (8002a90 <HAL_RCC_ClockConfig+0x260>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d140      	bne.n	8002964 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028e2:	4b6b      	ldr	r3, [pc, #428]	; (8002a90 <HAL_RCC_ClockConfig+0x260>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028ea:	4a69      	ldr	r2, [pc, #420]	; (8002a90 <HAL_RCC_ClockConfig+0x260>)
 80028ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80028f2:	2380      	movs	r3, #128	; 0x80
 80028f4:	617b      	str	r3, [r7, #20]
 80028f6:	e035      	b.n	8002964 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d107      	bne.n	8002910 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002900:	4b63      	ldr	r3, [pc, #396]	; (8002a90 <HAL_RCC_ClockConfig+0x260>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d115      	bne.n	8002938 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0b9      	b.n	8002a84 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d107      	bne.n	8002928 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002918:	4b5d      	ldr	r3, [pc, #372]	; (8002a90 <HAL_RCC_ClockConfig+0x260>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d109      	bne.n	8002938 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0ad      	b.n	8002a84 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002928:	4b59      	ldr	r3, [pc, #356]	; (8002a90 <HAL_RCC_ClockConfig+0x260>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0a5      	b.n	8002a84 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002938:	f000 f8b4 	bl	8002aa4 <HAL_RCC_GetSysClockFreq>
 800293c:	4603      	mov	r3, r0
 800293e:	4a55      	ldr	r2, [pc, #340]	; (8002a94 <HAL_RCC_ClockConfig+0x264>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d90f      	bls.n	8002964 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002944:	4b52      	ldr	r3, [pc, #328]	; (8002a90 <HAL_RCC_ClockConfig+0x260>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d109      	bne.n	8002964 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002950:	4b4f      	ldr	r3, [pc, #316]	; (8002a90 <HAL_RCC_ClockConfig+0x260>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002958:	4a4d      	ldr	r2, [pc, #308]	; (8002a90 <HAL_RCC_ClockConfig+0x260>)
 800295a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800295e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002960:	2380      	movs	r3, #128	; 0x80
 8002962:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002964:	4b4a      	ldr	r3, [pc, #296]	; (8002a90 <HAL_RCC_ClockConfig+0x260>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f023 0203 	bic.w	r2, r3, #3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	4947      	ldr	r1, [pc, #284]	; (8002a90 <HAL_RCC_ClockConfig+0x260>)
 8002972:	4313      	orrs	r3, r2
 8002974:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002976:	f7fd fdd9 	bl	800052c <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297c:	e00a      	b.n	8002994 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800297e:	f7fd fdd5 	bl	800052c <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	f241 3288 	movw	r2, #5000	; 0x1388
 800298c:	4293      	cmp	r3, r2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e077      	b.n	8002a84 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002994:	4b3e      	ldr	r3, [pc, #248]	; (8002a90 <HAL_RCC_ClockConfig+0x260>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 020c 	and.w	r2, r3, #12
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d1eb      	bne.n	800297e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2b80      	cmp	r3, #128	; 0x80
 80029aa:	d105      	bne.n	80029b8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80029ac:	4b38      	ldr	r3, [pc, #224]	; (8002a90 <HAL_RCC_ClockConfig+0x260>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4a37      	ldr	r2, [pc, #220]	; (8002a90 <HAL_RCC_ClockConfig+0x260>)
 80029b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029b6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d010      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	4b31      	ldr	r3, [pc, #196]	; (8002a90 <HAL_RCC_ClockConfig+0x260>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d208      	bcs.n	80029e6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d4:	4b2e      	ldr	r3, [pc, #184]	; (8002a90 <HAL_RCC_ClockConfig+0x260>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	492b      	ldr	r1, [pc, #172]	; (8002a90 <HAL_RCC_ClockConfig+0x260>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029e6:	4b29      	ldr	r3, [pc, #164]	; (8002a8c <HAL_RCC_ClockConfig+0x25c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d210      	bcs.n	8002a16 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f4:	4b25      	ldr	r3, [pc, #148]	; (8002a8c <HAL_RCC_ClockConfig+0x25c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f023 020f 	bic.w	r2, r3, #15
 80029fc:	4923      	ldr	r1, [pc, #140]	; (8002a8c <HAL_RCC_ClockConfig+0x25c>)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a04:	4b21      	ldr	r3, [pc, #132]	; (8002a8c <HAL_RCC_ClockConfig+0x25c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 030f 	and.w	r3, r3, #15
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d001      	beq.n	8002a16 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e036      	b.n	8002a84 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d008      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a22:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <HAL_RCC_ClockConfig+0x260>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	4918      	ldr	r1, [pc, #96]	; (8002a90 <HAL_RCC_ClockConfig+0x260>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0308 	and.w	r3, r3, #8
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d009      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a40:	4b13      	ldr	r3, [pc, #76]	; (8002a90 <HAL_RCC_ClockConfig+0x260>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4910      	ldr	r1, [pc, #64]	; (8002a90 <HAL_RCC_ClockConfig+0x260>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a54:	f000 f826 	bl	8002aa4 <HAL_RCC_GetSysClockFreq>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <HAL_RCC_ClockConfig+0x260>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	091b      	lsrs	r3, r3, #4
 8002a60:	f003 030f 	and.w	r3, r3, #15
 8002a64:	490c      	ldr	r1, [pc, #48]	; (8002a98 <HAL_RCC_ClockConfig+0x268>)
 8002a66:	5ccb      	ldrb	r3, [r1, r3]
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a70:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <HAL_RCC_ClockConfig+0x26c>)
 8002a72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a74:	4b0a      	ldr	r3, [pc, #40]	; (8002aa0 <HAL_RCC_ClockConfig+0x270>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fd fd07 	bl	800048c <HAL_InitTick>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	73fb      	strb	r3, [r7, #15]

  return status;
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40022000 	.word	0x40022000
 8002a90:	40021000 	.word	0x40021000
 8002a94:	04c4b400 	.word	0x04c4b400
 8002a98:	080075b8 	.word	0x080075b8
 8002a9c:	20000000 	.word	0x20000000
 8002aa0:	20000004 	.word	0x20000004

08002aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b089      	sub	sp, #36	; 0x24
 8002aa8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61fb      	str	r3, [r7, #28]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ab2:	4b3e      	ldr	r3, [pc, #248]	; (8002bac <HAL_RCC_GetSysClockFreq+0x108>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002abc:	4b3b      	ldr	r3, [pc, #236]	; (8002bac <HAL_RCC_GetSysClockFreq+0x108>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d005      	beq.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x34>
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	2b0c      	cmp	r3, #12
 8002ad0:	d121      	bne.n	8002b16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d11e      	bne.n	8002b16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ad8:	4b34      	ldr	r3, [pc, #208]	; (8002bac <HAL_RCC_GetSysClockFreq+0x108>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0308 	and.w	r3, r3, #8
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d107      	bne.n	8002af4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ae4:	4b31      	ldr	r3, [pc, #196]	; (8002bac <HAL_RCC_GetSysClockFreq+0x108>)
 8002ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aea:	0a1b      	lsrs	r3, r3, #8
 8002aec:	f003 030f 	and.w	r3, r3, #15
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	e005      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002af4:	4b2d      	ldr	r3, [pc, #180]	; (8002bac <HAL_RCC_GetSysClockFreq+0x108>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	091b      	lsrs	r3, r3, #4
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b00:	4a2b      	ldr	r2, [pc, #172]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10d      	bne.n	8002b2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b14:	e00a      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d102      	bne.n	8002b22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b1c:	4b25      	ldr	r3, [pc, #148]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b1e:	61bb      	str	r3, [r7, #24]
 8002b20:	e004      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d101      	bne.n	8002b2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b28:	4b23      	ldr	r3, [pc, #140]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	2b0c      	cmp	r3, #12
 8002b30:	d134      	bne.n	8002b9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b32:	4b1e      	ldr	r3, [pc, #120]	; (8002bac <HAL_RCC_GetSysClockFreq+0x108>)
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d003      	beq.n	8002b4a <HAL_RCC_GetSysClockFreq+0xa6>
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d003      	beq.n	8002b50 <HAL_RCC_GetSysClockFreq+0xac>
 8002b48:	e005      	b.n	8002b56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b4a:	4b1a      	ldr	r3, [pc, #104]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b4c:	617b      	str	r3, [r7, #20]
      break;
 8002b4e:	e005      	b.n	8002b5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b50:	4b19      	ldr	r3, [pc, #100]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b52:	617b      	str	r3, [r7, #20]
      break;
 8002b54:	e002      	b.n	8002b5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	617b      	str	r3, [r7, #20]
      break;
 8002b5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b5c:	4b13      	ldr	r3, [pc, #76]	; (8002bac <HAL_RCC_GetSysClockFreq+0x108>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	091b      	lsrs	r3, r3, #4
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	3301      	adds	r3, #1
 8002b68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b6a:	4b10      	ldr	r3, [pc, #64]	; (8002bac <HAL_RCC_GetSysClockFreq+0x108>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	0a1b      	lsrs	r3, r3, #8
 8002b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	fb03 f202 	mul.w	r2, r3, r2
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b82:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <HAL_RCC_GetSysClockFreq+0x108>)
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	0e5b      	lsrs	r3, r3, #25
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b9c:	69bb      	ldr	r3, [r7, #24]
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3724      	adds	r7, #36	; 0x24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	080075c8 	.word	0x080075c8
 8002bb4:	00f42400 	.word	0x00f42400
 8002bb8:	007a1200 	.word	0x007a1200

08002bbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bc0:	4b03      	ldr	r3, [pc, #12]	; (8002bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	20000000 	.word	0x20000000

08002bd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002bdc:	2300      	movs	r3, #0
 8002bde:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002be0:	4b27      	ldr	r3, [pc, #156]	; (8002c80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002bec:	f7ff f932 	bl	8001e54 <HAL_PWREx_GetVoltageRange>
 8002bf0:	6178      	str	r0, [r7, #20]
 8002bf2:	e014      	b.n	8002c1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bf4:	4b22      	ldr	r3, [pc, #136]	; (8002c80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf8:	4a21      	ldr	r2, [pc, #132]	; (8002c80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	6593      	str	r3, [r2, #88]	; 0x58
 8002c00:	4b1f      	ldr	r3, [pc, #124]	; (8002c80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c0c:	f7ff f922 	bl	8001e54 <HAL_PWREx_GetVoltageRange>
 8002c10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c12:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c16:	4a1a      	ldr	r2, [pc, #104]	; (8002c80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c24:	d10b      	bne.n	8002c3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b80      	cmp	r3, #128	; 0x80
 8002c2a:	d913      	bls.n	8002c54 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2ba0      	cmp	r3, #160	; 0xa0
 8002c30:	d902      	bls.n	8002c38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c32:	2302      	movs	r3, #2
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	e00d      	b.n	8002c54 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c38:	2301      	movs	r3, #1
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	e00a      	b.n	8002c54 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b7f      	cmp	r3, #127	; 0x7f
 8002c42:	d902      	bls.n	8002c4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002c44:	2302      	movs	r3, #2
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	e004      	b.n	8002c54 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b70      	cmp	r3, #112	; 0x70
 8002c4e:	d101      	bne.n	8002c54 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c50:	2301      	movs	r3, #1
 8002c52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f023 020f 	bic.w	r2, r3, #15
 8002c5c:	4909      	ldr	r1, [pc, #36]	; (8002c84 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c64:	4b07      	ldr	r3, [pc, #28]	; (8002c84 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 030f 	and.w	r3, r3, #15
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d001      	beq.n	8002c76 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40022000 	.word	0x40022000

08002c88 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c8e:	4b2d      	ldr	r3, [pc, #180]	; (8002d44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	d00b      	beq.n	8002cb6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d825      	bhi.n	8002cf0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d008      	beq.n	8002cbc <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d11f      	bne.n	8002cf0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002cb0:	4b25      	ldr	r3, [pc, #148]	; (8002d48 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002cb2:	613b      	str	r3, [r7, #16]
    break;
 8002cb4:	e01f      	b.n	8002cf6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002cb6:	4b25      	ldr	r3, [pc, #148]	; (8002d4c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002cb8:	613b      	str	r3, [r7, #16]
    break;
 8002cba:	e01c      	b.n	8002cf6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cbc:	4b21      	ldr	r3, [pc, #132]	; (8002d44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d107      	bne.n	8002cd8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cc8:	4b1e      	ldr	r3, [pc, #120]	; (8002d44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cce:	0a1b      	lsrs	r3, r3, #8
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	e005      	b.n	8002ce4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002cd8:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	091b      	lsrs	r3, r3, #4
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002ce4:	4a1a      	ldr	r2, [pc, #104]	; (8002d50 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cec:	613b      	str	r3, [r7, #16]
    break;
 8002cee:	e002      	b.n	8002cf6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	613b      	str	r3, [r7, #16]
    break;
 8002cf4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cf6:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	091b      	lsrs	r3, r3, #4
 8002cfc:	f003 030f 	and.w	r3, r3, #15
 8002d00:	3301      	adds	r3, #1
 8002d02:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d04:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	0a1b      	lsrs	r3, r3, #8
 8002d0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	fb03 f202 	mul.w	r2, r3, r2
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d1c:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	0e5b      	lsrs	r3, r3, #25
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	3301      	adds	r3, #1
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d34:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002d36:	683b      	ldr	r3, [r7, #0]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	371c      	adds	r7, #28
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	40021000 	.word	0x40021000
 8002d48:	00f42400 	.word	0x00f42400
 8002d4c:	007a1200 	.word	0x007a1200
 8002d50:	080075c8 	.word	0x080075c8

08002d54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d60:	2300      	movs	r3, #0
 8002d62:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d040      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d74:	2b80      	cmp	r3, #128	; 0x80
 8002d76:	d02a      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002d78:	2b80      	cmp	r3, #128	; 0x80
 8002d7a:	d825      	bhi.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002d7c:	2b60      	cmp	r3, #96	; 0x60
 8002d7e:	d026      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002d80:	2b60      	cmp	r3, #96	; 0x60
 8002d82:	d821      	bhi.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002d84:	2b40      	cmp	r3, #64	; 0x40
 8002d86:	d006      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002d88:	2b40      	cmp	r3, #64	; 0x40
 8002d8a:	d81d      	bhi.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d009      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002d90:	2b20      	cmp	r3, #32
 8002d92:	d010      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002d94:	e018      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d96:	4b89      	ldr	r3, [pc, #548]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	4a88      	ldr	r2, [pc, #544]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002da2:	e015      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3304      	adds	r3, #4
 8002da8:	2100      	movs	r1, #0
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 fb72 	bl	8003494 <RCCEx_PLLSAI1_Config>
 8002db0:	4603      	mov	r3, r0
 8002db2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002db4:	e00c      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3320      	adds	r3, #32
 8002dba:	2100      	movs	r1, #0
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 fc5d 	bl	800367c <RCCEx_PLLSAI2_Config>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dc6:	e003      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	74fb      	strb	r3, [r7, #19]
      break;
 8002dcc:	e000      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002dce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dd0:	7cfb      	ldrb	r3, [r7, #19]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10b      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002dd6:	4b79      	ldr	r3, [pc, #484]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ddc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002de4:	4975      	ldr	r1, [pc, #468]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002dec:	e001      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dee:	7cfb      	ldrb	r3, [r7, #19]
 8002df0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d047      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e06:	d030      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e0c:	d82a      	bhi.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002e0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e12:	d02a      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002e14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e18:	d824      	bhi.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002e1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e1e:	d008      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e24:	d81e      	bhi.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00a      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e2e:	d010      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002e30:	e018      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e32:	4b62      	ldr	r3, [pc, #392]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	4a61      	ldr	r2, [pc, #388]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e3c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e3e:	e015      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3304      	adds	r3, #4
 8002e44:	2100      	movs	r1, #0
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fb24 	bl	8003494 <RCCEx_PLLSAI1_Config>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e50:	e00c      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3320      	adds	r3, #32
 8002e56:	2100      	movs	r1, #0
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 fc0f 	bl	800367c <RCCEx_PLLSAI2_Config>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e62:	e003      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	74fb      	strb	r3, [r7, #19]
      break;
 8002e68:	e000      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002e6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e6c:	7cfb      	ldrb	r3, [r7, #19]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10b      	bne.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e72:	4b52      	ldr	r3, [pc, #328]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e80:	494e      	ldr	r1, [pc, #312]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002e88:	e001      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e8a:	7cfb      	ldrb	r3, [r7, #19]
 8002e8c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 809f 	beq.w	8002fda <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ea0:	4b46      	ldr	r3, [pc, #280]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00d      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eb6:	4b41      	ldr	r3, [pc, #260]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eba:	4a40      	ldr	r2, [pc, #256]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ec2:	4b3e      	ldr	r3, [pc, #248]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eca:	60bb      	str	r3, [r7, #8]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ed2:	4b3b      	ldr	r3, [pc, #236]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a3a      	ldr	r2, [pc, #232]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002edc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ede:	f7fd fb25 	bl	800052c <HAL_GetTick>
 8002ee2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ee4:	e009      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee6:	f7fd fb21 	bl	800052c <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d902      	bls.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	74fb      	strb	r3, [r7, #19]
        break;
 8002ef8:	e005      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002efa:	4b31      	ldr	r3, [pc, #196]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0ef      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002f06:	7cfb      	ldrb	r3, [r7, #19]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d15b      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f0c:	4b2b      	ldr	r3, [pc, #172]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f16:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d01f      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d019      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f2a:	4b24      	ldr	r3, [pc, #144]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f34:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f36:	4b21      	ldr	r3, [pc, #132]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3c:	4a1f      	ldr	r2, [pc, #124]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f46:	4b1d      	ldr	r3, [pc, #116]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4c:	4a1b      	ldr	r2, [pc, #108]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f56:	4a19      	ldr	r2, [pc, #100]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d016      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f68:	f7fd fae0 	bl	800052c <HAL_GetTick>
 8002f6c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f6e:	e00b      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f70:	f7fd fadc 	bl	800052c <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d902      	bls.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	74fb      	strb	r3, [r7, #19]
            break;
 8002f86:	e006      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f88:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0ec      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002f96:	7cfb      	ldrb	r3, [r7, #19]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10c      	bne.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f9c:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fac:	4903      	ldr	r1, [pc, #12]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fb6:	7cfb      	ldrb	r3, [r7, #19]
 8002fb8:	74bb      	strb	r3, [r7, #18]
 8002fba:	e005      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc4:	7cfb      	ldrb	r3, [r7, #19]
 8002fc6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fc8:	7c7b      	ldrb	r3, [r7, #17]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d105      	bne.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fce:	4ba0      	ldr	r3, [pc, #640]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd2:	4a9f      	ldr	r2, [pc, #636]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fd8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fe6:	4b9a      	ldr	r3, [pc, #616]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fec:	f023 0203 	bic.w	r2, r3, #3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff4:	4996      	ldr	r1, [pc, #600]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00a      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003008:	4b91      	ldr	r3, [pc, #580]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800300a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300e:	f023 020c 	bic.w	r2, r3, #12
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	498e      	ldr	r1, [pc, #568]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0304 	and.w	r3, r3, #4
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800302a:	4b89      	ldr	r3, [pc, #548]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800302c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003030:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003038:	4985      	ldr	r1, [pc, #532]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0308 	and.w	r3, r3, #8
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800304c:	4b80      	ldr	r3, [pc, #512]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800304e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003052:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800305a:	497d      	ldr	r1, [pc, #500]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0310 	and.w	r3, r3, #16
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800306e:	4b78      	ldr	r3, [pc, #480]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003074:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307c:	4974      	ldr	r1, [pc, #464]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0320 	and.w	r3, r3, #32
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003090:	4b6f      	ldr	r3, [pc, #444]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003096:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800309e:	496c      	ldr	r1, [pc, #432]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030b2:	4b67      	ldr	r3, [pc, #412]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030c0:	4963      	ldr	r1, [pc, #396]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030d4:	4b5e      	ldr	r3, [pc, #376]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030e2:	495b      	ldr	r1, [pc, #364]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030f6:	4b56      	ldr	r3, [pc, #344]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003104:	4952      	ldr	r1, [pc, #328]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003118:	4b4d      	ldr	r3, [pc, #308]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800311a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003126:	494a      	ldr	r1, [pc, #296]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800313a:	4b45      	ldr	r3, [pc, #276]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800313c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003140:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003148:	4941      	ldr	r1, [pc, #260]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00a      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800315c:	4b3c      	ldr	r3, [pc, #240]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800315e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003162:	f023 0203 	bic.w	r2, r3, #3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800316a:	4939      	ldr	r1, [pc, #228]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d028      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800317e:	4b34      	ldr	r3, [pc, #208]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003184:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800318c:	4930      	ldr	r1, [pc, #192]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003198:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800319c:	d106      	bne.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800319e:	4b2c      	ldr	r3, [pc, #176]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	4a2b      	ldr	r2, [pc, #172]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031a8:	60d3      	str	r3, [r2, #12]
 80031aa:	e011      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031b4:	d10c      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3304      	adds	r3, #4
 80031ba:	2101      	movs	r1, #1
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 f969 	bl	8003494 <RCCEx_PLLSAI1_Config>
 80031c2:	4603      	mov	r3, r0
 80031c4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80031c6:	7cfb      	ldrb	r3, [r7, #19]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80031cc:	7cfb      	ldrb	r3, [r7, #19]
 80031ce:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d04d      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031e4:	d108      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80031e6:	4b1a      	ldr	r3, [pc, #104]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031ec:	4a18      	ldr	r2, [pc, #96]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031f2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80031f6:	e012      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80031f8:	4b15      	ldr	r3, [pc, #84]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031fe:	4a14      	ldr	r2, [pc, #80]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003200:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003204:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003208:	4b11      	ldr	r3, [pc, #68]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800320a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003216:	490e      	ldr	r1, [pc, #56]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003222:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003226:	d106      	bne.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003228:	4b09      	ldr	r3, [pc, #36]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	4a08      	ldr	r2, [pc, #32]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800322e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003232:	60d3      	str	r3, [r2, #12]
 8003234:	e020      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800323a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800323e:	d109      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003240:	4b03      	ldr	r3, [pc, #12]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	4a02      	ldr	r2, [pc, #8]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324a:	60d3      	str	r3, [r2, #12]
 800324c:	e014      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800324e:	bf00      	nop
 8003250:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003258:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800325c:	d10c      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3304      	adds	r3, #4
 8003262:	2101      	movs	r1, #1
 8003264:	4618      	mov	r0, r3
 8003266:	f000 f915 	bl	8003494 <RCCEx_PLLSAI1_Config>
 800326a:	4603      	mov	r3, r0
 800326c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800326e:	7cfb      	ldrb	r3, [r7, #19]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003274:	7cfb      	ldrb	r3, [r7, #19]
 8003276:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d028      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003284:	4b7a      	ldr	r3, [pc, #488]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003292:	4977      	ldr	r1, [pc, #476]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800329e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032a2:	d106      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032a4:	4b72      	ldr	r3, [pc, #456]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	4a71      	ldr	r2, [pc, #452]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80032aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032ae:	60d3      	str	r3, [r2, #12]
 80032b0:	e011      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032ba:	d10c      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3304      	adds	r3, #4
 80032c0:	2101      	movs	r1, #1
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 f8e6 	bl	8003494 <RCCEx_PLLSAI1_Config>
 80032c8:	4603      	mov	r3, r0
 80032ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032cc:	7cfb      	ldrb	r3, [r7, #19]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80032d2:	7cfb      	ldrb	r3, [r7, #19]
 80032d4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d01e      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032e2:	4b63      	ldr	r3, [pc, #396]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80032e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032f2:	495f      	ldr	r1, [pc, #380]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003300:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003304:	d10c      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3304      	adds	r3, #4
 800330a:	2102      	movs	r1, #2
 800330c:	4618      	mov	r0, r3
 800330e:	f000 f8c1 	bl	8003494 <RCCEx_PLLSAI1_Config>
 8003312:	4603      	mov	r3, r0
 8003314:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003316:	7cfb      	ldrb	r3, [r7, #19]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800331c:	7cfb      	ldrb	r3, [r7, #19]
 800331e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00b      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800332c:	4b50      	ldr	r3, [pc, #320]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800332e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003332:	f023 0204 	bic.w	r2, r3, #4
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800333c:	494c      	ldr	r1, [pc, #304]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800333e:	4313      	orrs	r3, r2
 8003340:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00b      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003350:	4b47      	ldr	r3, [pc, #284]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003352:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003356:	f023 0218 	bic.w	r2, r3, #24
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003360:	4943      	ldr	r1, [pc, #268]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003362:	4313      	orrs	r3, r2
 8003364:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d035      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003374:	4b3e      	ldr	r3, [pc, #248]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a3d      	ldr	r2, [pc, #244]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800337a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800337e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003380:	f7fd f8d4 	bl	800052c <HAL_GetTick>
 8003384:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003386:	e009      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003388:	f7fd f8d0 	bl	800052c <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d902      	bls.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	74fb      	strb	r3, [r7, #19]
        break;
 800339a:	e005      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800339c:	4b34      	ldr	r3, [pc, #208]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1ef      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 80033a8:	7cfb      	ldrb	r3, [r7, #19]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d113      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80033ae:	4b30      	ldr	r3, [pc, #192]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80033b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033be:	492c      	ldr	r1, [pc, #176]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3320      	adds	r3, #32
 80033ca:	2102      	movs	r1, #2
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 f955 	bl	800367c <RCCEx_PLLSAI2_Config>
 80033d2:	4603      	mov	r3, r0
 80033d4:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80033d6:	7cfb      	ldrb	r3, [r7, #19]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80033dc:	7cfb      	ldrb	r3, [r7, #19]
 80033de:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d01e      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80033ec:	4b20      	ldr	r3, [pc, #128]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80033ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fc:	491c      	ldr	r1, [pc, #112]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800340e:	d10c      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3320      	adds	r3, #32
 8003414:	2101      	movs	r1, #1
 8003416:	4618      	mov	r0, r3
 8003418:	f000 f930 	bl	800367c <RCCEx_PLLSAI2_Config>
 800341c:	4603      	mov	r3, r0
 800341e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003420:	7cfb      	ldrb	r3, [r7, #19]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8003426:	7cfb      	ldrb	r3, [r7, #19]
 8003428:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d017      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003436:	4b0e      	ldr	r3, [pc, #56]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003438:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800343c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003446:	490a      	ldr	r1, [pc, #40]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003454:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003458:	d105      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800345a:	4b05      	ldr	r3, [pc, #20]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	4a04      	ldr	r2, [pc, #16]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003460:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003464:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003466:	7cbb      	ldrb	r3, [r7, #18]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40021000 	.word	0x40021000

08003474 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003478:	4b05      	ldr	r3, [pc, #20]	; (8003490 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a04      	ldr	r2, [pc, #16]	; (8003490 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800347e:	f043 0304 	orr.w	r3, r3, #4
 8003482:	6013      	str	r3, [r2, #0]
}
 8003484:	bf00      	nop
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	40021000 	.word	0x40021000

08003494 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034a2:	4b72      	ldr	r3, [pc, #456]	; (800366c <RCCEx_PLLSAI1_Config+0x1d8>)
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00e      	beq.n	80034cc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034ae:	4b6f      	ldr	r3, [pc, #444]	; (800366c <RCCEx_PLLSAI1_Config+0x1d8>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f003 0203 	and.w	r2, r3, #3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d103      	bne.n	80034c6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
       ||
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d142      	bne.n	800354c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	73fb      	strb	r3, [r7, #15]
 80034ca:	e03f      	b.n	800354c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d018      	beq.n	8003506 <RCCEx_PLLSAI1_Config+0x72>
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d825      	bhi.n	8003524 <RCCEx_PLLSAI1_Config+0x90>
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d002      	beq.n	80034e2 <RCCEx_PLLSAI1_Config+0x4e>
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d009      	beq.n	80034f4 <RCCEx_PLLSAI1_Config+0x60>
 80034e0:	e020      	b.n	8003524 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034e2:	4b62      	ldr	r3, [pc, #392]	; (800366c <RCCEx_PLLSAI1_Config+0x1d8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d11d      	bne.n	800352a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034f2:	e01a      	b.n	800352a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034f4:	4b5d      	ldr	r3, [pc, #372]	; (800366c <RCCEx_PLLSAI1_Config+0x1d8>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d116      	bne.n	800352e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003504:	e013      	b.n	800352e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003506:	4b59      	ldr	r3, [pc, #356]	; (800366c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10f      	bne.n	8003532 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003512:	4b56      	ldr	r3, [pc, #344]	; (800366c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d109      	bne.n	8003532 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003522:	e006      	b.n	8003532 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	73fb      	strb	r3, [r7, #15]
      break;
 8003528:	e004      	b.n	8003534 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800352a:	bf00      	nop
 800352c:	e002      	b.n	8003534 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800352e:	bf00      	nop
 8003530:	e000      	b.n	8003534 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003532:	bf00      	nop
    }

    if(status == HAL_OK)
 8003534:	7bfb      	ldrb	r3, [r7, #15]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d108      	bne.n	800354c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800353a:	4b4c      	ldr	r3, [pc, #304]	; (800366c <RCCEx_PLLSAI1_Config+0x1d8>)
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f023 0203 	bic.w	r2, r3, #3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4949      	ldr	r1, [pc, #292]	; (800366c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003548:	4313      	orrs	r3, r2
 800354a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	2b00      	cmp	r3, #0
 8003550:	f040 8086 	bne.w	8003660 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003554:	4b45      	ldr	r3, [pc, #276]	; (800366c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a44      	ldr	r2, [pc, #272]	; (800366c <RCCEx_PLLSAI1_Config+0x1d8>)
 800355a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800355e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003560:	f7fc ffe4 	bl	800052c <HAL_GetTick>
 8003564:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003566:	e009      	b.n	800357c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003568:	f7fc ffe0 	bl	800052c <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d902      	bls.n	800357c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	73fb      	strb	r3, [r7, #15]
        break;
 800357a:	e005      	b.n	8003588 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800357c:	4b3b      	ldr	r3, [pc, #236]	; (800366c <RCCEx_PLLSAI1_Config+0x1d8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1ef      	bne.n	8003568 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d168      	bne.n	8003660 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d113      	bne.n	80035bc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003594:	4b35      	ldr	r3, [pc, #212]	; (800366c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003596:	691a      	ldr	r2, [r3, #16]
 8003598:	4b35      	ldr	r3, [pc, #212]	; (8003670 <RCCEx_PLLSAI1_Config+0x1dc>)
 800359a:	4013      	ands	r3, r2
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6892      	ldr	r2, [r2, #8]
 80035a0:	0211      	lsls	r1, r2, #8
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	68d2      	ldr	r2, [r2, #12]
 80035a6:	06d2      	lsls	r2, r2, #27
 80035a8:	4311      	orrs	r1, r2
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6852      	ldr	r2, [r2, #4]
 80035ae:	3a01      	subs	r2, #1
 80035b0:	0112      	lsls	r2, r2, #4
 80035b2:	430a      	orrs	r2, r1
 80035b4:	492d      	ldr	r1, [pc, #180]	; (800366c <RCCEx_PLLSAI1_Config+0x1d8>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	610b      	str	r3, [r1, #16]
 80035ba:	e02d      	b.n	8003618 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d115      	bne.n	80035ee <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035c2:	4b2a      	ldr	r3, [pc, #168]	; (800366c <RCCEx_PLLSAI1_Config+0x1d8>)
 80035c4:	691a      	ldr	r2, [r3, #16]
 80035c6:	4b2b      	ldr	r3, [pc, #172]	; (8003674 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6892      	ldr	r2, [r2, #8]
 80035ce:	0211      	lsls	r1, r2, #8
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6912      	ldr	r2, [r2, #16]
 80035d4:	0852      	lsrs	r2, r2, #1
 80035d6:	3a01      	subs	r2, #1
 80035d8:	0552      	lsls	r2, r2, #21
 80035da:	4311      	orrs	r1, r2
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6852      	ldr	r2, [r2, #4]
 80035e0:	3a01      	subs	r2, #1
 80035e2:	0112      	lsls	r2, r2, #4
 80035e4:	430a      	orrs	r2, r1
 80035e6:	4921      	ldr	r1, [pc, #132]	; (800366c <RCCEx_PLLSAI1_Config+0x1d8>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	610b      	str	r3, [r1, #16]
 80035ec:	e014      	b.n	8003618 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035ee:	4b1f      	ldr	r3, [pc, #124]	; (800366c <RCCEx_PLLSAI1_Config+0x1d8>)
 80035f0:	691a      	ldr	r2, [r3, #16]
 80035f2:	4b21      	ldr	r3, [pc, #132]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6892      	ldr	r2, [r2, #8]
 80035fa:	0211      	lsls	r1, r2, #8
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6952      	ldr	r2, [r2, #20]
 8003600:	0852      	lsrs	r2, r2, #1
 8003602:	3a01      	subs	r2, #1
 8003604:	0652      	lsls	r2, r2, #25
 8003606:	4311      	orrs	r1, r2
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6852      	ldr	r2, [r2, #4]
 800360c:	3a01      	subs	r2, #1
 800360e:	0112      	lsls	r2, r2, #4
 8003610:	430a      	orrs	r2, r1
 8003612:	4916      	ldr	r1, [pc, #88]	; (800366c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003614:	4313      	orrs	r3, r2
 8003616:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003618:	4b14      	ldr	r3, [pc, #80]	; (800366c <RCCEx_PLLSAI1_Config+0x1d8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a13      	ldr	r2, [pc, #76]	; (800366c <RCCEx_PLLSAI1_Config+0x1d8>)
 800361e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003622:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003624:	f7fc ff82 	bl	800052c <HAL_GetTick>
 8003628:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800362a:	e009      	b.n	8003640 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800362c:	f7fc ff7e 	bl	800052c <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d902      	bls.n	8003640 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	73fb      	strb	r3, [r7, #15]
          break;
 800363e:	e005      	b.n	800364c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003640:	4b0a      	ldr	r3, [pc, #40]	; (800366c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0ef      	beq.n	800362c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800364c:	7bfb      	ldrb	r3, [r7, #15]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003652:	4b06      	ldr	r3, [pc, #24]	; (800366c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003654:	691a      	ldr	r2, [r3, #16]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	4904      	ldr	r1, [pc, #16]	; (800366c <RCCEx_PLLSAI1_Config+0x1d8>)
 800365c:	4313      	orrs	r3, r2
 800365e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003660:	7bfb      	ldrb	r3, [r7, #15]
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40021000 	.word	0x40021000
 8003670:	07ff800f 	.word	0x07ff800f
 8003674:	ff9f800f 	.word	0xff9f800f
 8003678:	f9ff800f 	.word	0xf9ff800f

0800367c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800368a:	4b72      	ldr	r3, [pc, #456]	; (8003854 <RCCEx_PLLSAI2_Config+0x1d8>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00e      	beq.n	80036b4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003696:	4b6f      	ldr	r3, [pc, #444]	; (8003854 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f003 0203 	and.w	r2, r3, #3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d103      	bne.n	80036ae <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
       ||
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d142      	bne.n	8003734 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	73fb      	strb	r3, [r7, #15]
 80036b2:	e03f      	b.n	8003734 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	d018      	beq.n	80036ee <RCCEx_PLLSAI2_Config+0x72>
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d825      	bhi.n	800370c <RCCEx_PLLSAI2_Config+0x90>
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d002      	beq.n	80036ca <RCCEx_PLLSAI2_Config+0x4e>
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d009      	beq.n	80036dc <RCCEx_PLLSAI2_Config+0x60>
 80036c8:	e020      	b.n	800370c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036ca:	4b62      	ldr	r3, [pc, #392]	; (8003854 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d11d      	bne.n	8003712 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036da:	e01a      	b.n	8003712 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036dc:	4b5d      	ldr	r3, [pc, #372]	; (8003854 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d116      	bne.n	8003716 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ec:	e013      	b.n	8003716 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036ee:	4b59      	ldr	r3, [pc, #356]	; (8003854 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10f      	bne.n	800371a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036fa:	4b56      	ldr	r3, [pc, #344]	; (8003854 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d109      	bne.n	800371a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800370a:	e006      	b.n	800371a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
      break;
 8003710:	e004      	b.n	800371c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003712:	bf00      	nop
 8003714:	e002      	b.n	800371c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003716:	bf00      	nop
 8003718:	e000      	b.n	800371c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800371a:	bf00      	nop
    }

    if(status == HAL_OK)
 800371c:	7bfb      	ldrb	r3, [r7, #15]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d108      	bne.n	8003734 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003722:	4b4c      	ldr	r3, [pc, #304]	; (8003854 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f023 0203 	bic.w	r2, r3, #3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4949      	ldr	r1, [pc, #292]	; (8003854 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003730:	4313      	orrs	r3, r2
 8003732:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003734:	7bfb      	ldrb	r3, [r7, #15]
 8003736:	2b00      	cmp	r3, #0
 8003738:	f040 8086 	bne.w	8003848 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800373c:	4b45      	ldr	r3, [pc, #276]	; (8003854 <RCCEx_PLLSAI2_Config+0x1d8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a44      	ldr	r2, [pc, #272]	; (8003854 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003742:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003746:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003748:	f7fc fef0 	bl	800052c <HAL_GetTick>
 800374c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800374e:	e009      	b.n	8003764 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003750:	f7fc feec 	bl	800052c <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d902      	bls.n	8003764 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	73fb      	strb	r3, [r7, #15]
        break;
 8003762:	e005      	b.n	8003770 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003764:	4b3b      	ldr	r3, [pc, #236]	; (8003854 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1ef      	bne.n	8003750 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d168      	bne.n	8003848 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d113      	bne.n	80037a4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800377c:	4b35      	ldr	r3, [pc, #212]	; (8003854 <RCCEx_PLLSAI2_Config+0x1d8>)
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	4b35      	ldr	r3, [pc, #212]	; (8003858 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003782:	4013      	ands	r3, r2
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6892      	ldr	r2, [r2, #8]
 8003788:	0211      	lsls	r1, r2, #8
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	68d2      	ldr	r2, [r2, #12]
 800378e:	06d2      	lsls	r2, r2, #27
 8003790:	4311      	orrs	r1, r2
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6852      	ldr	r2, [r2, #4]
 8003796:	3a01      	subs	r2, #1
 8003798:	0112      	lsls	r2, r2, #4
 800379a:	430a      	orrs	r2, r1
 800379c:	492d      	ldr	r1, [pc, #180]	; (8003854 <RCCEx_PLLSAI2_Config+0x1d8>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	614b      	str	r3, [r1, #20]
 80037a2:	e02d      	b.n	8003800 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d115      	bne.n	80037d6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037aa:	4b2a      	ldr	r3, [pc, #168]	; (8003854 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037ac:	695a      	ldr	r2, [r3, #20]
 80037ae:	4b2b      	ldr	r3, [pc, #172]	; (800385c <RCCEx_PLLSAI2_Config+0x1e0>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6892      	ldr	r2, [r2, #8]
 80037b6:	0211      	lsls	r1, r2, #8
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6912      	ldr	r2, [r2, #16]
 80037bc:	0852      	lsrs	r2, r2, #1
 80037be:	3a01      	subs	r2, #1
 80037c0:	0552      	lsls	r2, r2, #21
 80037c2:	4311      	orrs	r1, r2
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6852      	ldr	r2, [r2, #4]
 80037c8:	3a01      	subs	r2, #1
 80037ca:	0112      	lsls	r2, r2, #4
 80037cc:	430a      	orrs	r2, r1
 80037ce:	4921      	ldr	r1, [pc, #132]	; (8003854 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	614b      	str	r3, [r1, #20]
 80037d4:	e014      	b.n	8003800 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037d6:	4b1f      	ldr	r3, [pc, #124]	; (8003854 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037d8:	695a      	ldr	r2, [r3, #20]
 80037da:	4b21      	ldr	r3, [pc, #132]	; (8003860 <RCCEx_PLLSAI2_Config+0x1e4>)
 80037dc:	4013      	ands	r3, r2
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6892      	ldr	r2, [r2, #8]
 80037e2:	0211      	lsls	r1, r2, #8
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6952      	ldr	r2, [r2, #20]
 80037e8:	0852      	lsrs	r2, r2, #1
 80037ea:	3a01      	subs	r2, #1
 80037ec:	0652      	lsls	r2, r2, #25
 80037ee:	4311      	orrs	r1, r2
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6852      	ldr	r2, [r2, #4]
 80037f4:	3a01      	subs	r2, #1
 80037f6:	0112      	lsls	r2, r2, #4
 80037f8:	430a      	orrs	r2, r1
 80037fa:	4916      	ldr	r1, [pc, #88]	; (8003854 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003800:	4b14      	ldr	r3, [pc, #80]	; (8003854 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a13      	ldr	r2, [pc, #76]	; (8003854 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800380a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380c:	f7fc fe8e 	bl	800052c <HAL_GetTick>
 8003810:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003812:	e009      	b.n	8003828 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003814:	f7fc fe8a 	bl	800052c <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d902      	bls.n	8003828 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	73fb      	strb	r3, [r7, #15]
          break;
 8003826:	e005      	b.n	8003834 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003828:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <RCCEx_PLLSAI2_Config+0x1d8>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0ef      	beq.n	8003814 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003834:	7bfb      	ldrb	r3, [r7, #15]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d106      	bne.n	8003848 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800383a:	4b06      	ldr	r3, [pc, #24]	; (8003854 <RCCEx_PLLSAI2_Config+0x1d8>)
 800383c:	695a      	ldr	r2, [r3, #20]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	4904      	ldr	r1, [pc, #16]	; (8003854 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003844:	4313      	orrs	r3, r2
 8003846:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003848:	7bfb      	ldrb	r3, [r7, #15]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40021000 	.word	0x40021000
 8003858:	07ff800f 	.word	0x07ff800f
 800385c:	ff9f800f 	.word	0xff9f800f
 8003860:	f9ff800f 	.word	0xf9ff800f

08003864 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003864:	b084      	sub	sp, #16
 8003866:	b580      	push	{r7, lr}
 8003868:	b084      	sub	sp, #16
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
 800386e:	f107 001c 	add.w	r0, r7, #28
 8003872:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f001 faf6 	bl	8004e74 <USB_CoreReset>
 8003888:	4603      	mov	r3, r0
 800388a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800388c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800388e:	2b00      	cmp	r3, #0
 8003890:	d106      	bne.n	80038a0 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003896:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	639a      	str	r2, [r3, #56]	; 0x38
 800389e:	e005      	b.n	80038ac <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038b8:	b004      	add	sp, #16
 80038ba:	4770      	bx	lr

080038bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	4613      	mov	r3, r2
 80038c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80038ca:	79fb      	ldrb	r3, [r7, #7]
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d165      	bne.n	800399c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	4a3e      	ldr	r2, [pc, #248]	; (80039cc <USB_SetTurnaroundTime+0x110>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d906      	bls.n	80038e6 <USB_SetTurnaroundTime+0x2a>
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	4a3d      	ldr	r2, [pc, #244]	; (80039d0 <USB_SetTurnaroundTime+0x114>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d202      	bcs.n	80038e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80038e0:	230f      	movs	r3, #15
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	e05c      	b.n	80039a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	4a39      	ldr	r2, [pc, #228]	; (80039d0 <USB_SetTurnaroundTime+0x114>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d306      	bcc.n	80038fc <USB_SetTurnaroundTime+0x40>
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	4a38      	ldr	r2, [pc, #224]	; (80039d4 <USB_SetTurnaroundTime+0x118>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d202      	bcs.n	80038fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80038f6:	230e      	movs	r3, #14
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	e051      	b.n	80039a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	4a35      	ldr	r2, [pc, #212]	; (80039d4 <USB_SetTurnaroundTime+0x118>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d306      	bcc.n	8003912 <USB_SetTurnaroundTime+0x56>
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	4a34      	ldr	r2, [pc, #208]	; (80039d8 <USB_SetTurnaroundTime+0x11c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d202      	bcs.n	8003912 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800390c:	230d      	movs	r3, #13
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	e046      	b.n	80039a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	4a30      	ldr	r2, [pc, #192]	; (80039d8 <USB_SetTurnaroundTime+0x11c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d306      	bcc.n	8003928 <USB_SetTurnaroundTime+0x6c>
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	4a2f      	ldr	r2, [pc, #188]	; (80039dc <USB_SetTurnaroundTime+0x120>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d802      	bhi.n	8003928 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003922:	230c      	movs	r3, #12
 8003924:	617b      	str	r3, [r7, #20]
 8003926:	e03b      	b.n	80039a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4a2c      	ldr	r2, [pc, #176]	; (80039dc <USB_SetTurnaroundTime+0x120>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d906      	bls.n	800393e <USB_SetTurnaroundTime+0x82>
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4a2b      	ldr	r2, [pc, #172]	; (80039e0 <USB_SetTurnaroundTime+0x124>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d802      	bhi.n	800393e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003938:	230b      	movs	r3, #11
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	e030      	b.n	80039a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	4a27      	ldr	r2, [pc, #156]	; (80039e0 <USB_SetTurnaroundTime+0x124>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d906      	bls.n	8003954 <USB_SetTurnaroundTime+0x98>
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	4a26      	ldr	r2, [pc, #152]	; (80039e4 <USB_SetTurnaroundTime+0x128>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d802      	bhi.n	8003954 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800394e:	230a      	movs	r3, #10
 8003950:	617b      	str	r3, [r7, #20]
 8003952:	e025      	b.n	80039a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	4a23      	ldr	r2, [pc, #140]	; (80039e4 <USB_SetTurnaroundTime+0x128>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d906      	bls.n	800396a <USB_SetTurnaroundTime+0xae>
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	4a22      	ldr	r2, [pc, #136]	; (80039e8 <USB_SetTurnaroundTime+0x12c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d202      	bcs.n	800396a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003964:	2309      	movs	r3, #9
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	e01a      	b.n	80039a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	4a1e      	ldr	r2, [pc, #120]	; (80039e8 <USB_SetTurnaroundTime+0x12c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d306      	bcc.n	8003980 <USB_SetTurnaroundTime+0xc4>
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	4a1d      	ldr	r2, [pc, #116]	; (80039ec <USB_SetTurnaroundTime+0x130>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d802      	bhi.n	8003980 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800397a:	2308      	movs	r3, #8
 800397c:	617b      	str	r3, [r7, #20]
 800397e:	e00f      	b.n	80039a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	4a1a      	ldr	r2, [pc, #104]	; (80039ec <USB_SetTurnaroundTime+0x130>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d906      	bls.n	8003996 <USB_SetTurnaroundTime+0xda>
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	4a19      	ldr	r2, [pc, #100]	; (80039f0 <USB_SetTurnaroundTime+0x134>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d202      	bcs.n	8003996 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003990:	2307      	movs	r3, #7
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	e004      	b.n	80039a0 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003996:	2306      	movs	r3, #6
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	e001      	b.n	80039a0 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800399c:	2309      	movs	r3, #9
 800399e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	029b      	lsls	r3, r3, #10
 80039b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80039b8:	431a      	orrs	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	371c      	adds	r7, #28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	00d8acbf 	.word	0x00d8acbf
 80039d0:	00e4e1c0 	.word	0x00e4e1c0
 80039d4:	00f42400 	.word	0x00f42400
 80039d8:	01067380 	.word	0x01067380
 80039dc:	011a499f 	.word	0x011a499f
 80039e0:	01312cff 	.word	0x01312cff
 80039e4:	014ca43f 	.word	0x014ca43f
 80039e8:	016e3600 	.word	0x016e3600
 80039ec:	01a6ab1f 	.word	0x01a6ab1f
 80039f0:	01e84800 	.word	0x01e84800

080039f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f043 0201 	orr.w	r2, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f023 0201 	bic.w	r2, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003a54:	78fb      	ldrb	r3, [r7, #3]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d115      	bne.n	8003a86 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a66:	2001      	movs	r0, #1
 8003a68:	f7fc fd6c 	bl	8000544 <HAL_Delay>
      ms++;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f001 f985 	bl	8004d82 <USB_GetMode>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d01e      	beq.n	8003abc <USB_SetCurrentMode+0x84>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2b31      	cmp	r3, #49	; 0x31
 8003a82:	d9f0      	bls.n	8003a66 <USB_SetCurrentMode+0x2e>
 8003a84:	e01a      	b.n	8003abc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a86:	78fb      	ldrb	r3, [r7, #3]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d115      	bne.n	8003ab8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a98:	2001      	movs	r0, #1
 8003a9a:	f7fc fd53 	bl	8000544 <HAL_Delay>
      ms++;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f001 f96c 	bl	8004d82 <USB_GetMode>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <USB_SetCurrentMode+0x84>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2b31      	cmp	r3, #49	; 0x31
 8003ab4:	d9f0      	bls.n	8003a98 <USB_SetCurrentMode+0x60>
 8003ab6:	e001      	b.n	8003abc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e005      	b.n	8003ac8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2b32      	cmp	r3, #50	; 0x32
 8003ac0:	d101      	bne.n	8003ac6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ad0:	b084      	sub	sp, #16
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b086      	sub	sp, #24
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
 8003ada:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003ade:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003aea:	2300      	movs	r3, #0
 8003aec:	613b      	str	r3, [r7, #16]
 8003aee:	e009      	b.n	8003b04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	3340      	adds	r3, #64	; 0x40
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	2200      	movs	r2, #0
 8003afc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	3301      	adds	r3, #1
 8003b02:	613b      	str	r3, [r7, #16]
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	2b0e      	cmp	r3, #14
 8003b08:	d9f2      	bls.n	8003af0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d11c      	bne.n	8003b4a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b1e:	f043 0302 	orr.w	r3, r3, #2
 8003b22:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b28:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	e005      	b.n	8003b56 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	2300      	movs	r3, #0
 8003b60:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b68:	4619      	mov	r1, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b70:	461a      	mov	r2, r3
 8003b72:	680b      	ldr	r3, [r1, #0]
 8003b74:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b76:	2103      	movs	r1, #3
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f959 	bl	8003e30 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b7e:	2110      	movs	r1, #16
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f8f1 	bl	8003d68 <USB_FlushTxFifo>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f91d 	bl	8003dd0 <USB_FlushRxFifo>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	2300      	movs	r3, #0
 8003baa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	613b      	str	r3, [r7, #16]
 8003bc8:	e043      	b.n	8003c52 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003be0:	d118      	bne.n	8003c14 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10a      	bne.n	8003bfe <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bfa:	6013      	str	r3, [r2, #0]
 8003bfc:	e013      	b.n	8003c26 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	e008      	b.n	8003c26 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c20:	461a      	mov	r2, r3
 8003c22:	2300      	movs	r3, #0
 8003c24:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	015a      	lsls	r2, r3, #5
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c32:	461a      	mov	r2, r3
 8003c34:	2300      	movs	r3, #0
 8003c36:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c44:	461a      	mov	r2, r3
 8003c46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	613b      	str	r3, [r7, #16]
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d3b7      	bcc.n	8003bca <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	e043      	b.n	8003ce8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	015a      	lsls	r2, r3, #5
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c76:	d118      	bne.n	8003caa <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10a      	bne.n	8003c94 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	015a      	lsls	r2, r3, #5
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c90:	6013      	str	r3, [r2, #0]
 8003c92:	e013      	b.n	8003cbc <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ca6:	6013      	str	r3, [r2, #0]
 8003ca8:	e008      	b.n	8003cbc <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	2300      	movs	r3, #0
 8003cba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc8:	461a      	mov	r2, r3
 8003cca:	2300      	movs	r3, #0
 8003ccc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	015a      	lsls	r2, r3, #5
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cda:	461a      	mov	r2, r3
 8003cdc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ce0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	613b      	str	r3, [r7, #16]
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d3b7      	bcc.n	8003c60 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d02:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003d10:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	f043 0210 	orr.w	r2, r3, #16
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699a      	ldr	r2, [r3, #24]
 8003d22:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <USB_DevInit+0x294>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d005      	beq.n	8003d3c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	f043 0208 	orr.w	r2, r3, #8
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d107      	bne.n	8003d52 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d4a:	f043 0304 	orr.w	r3, r3, #4
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d5e:	b004      	add	sp, #16
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	803c3800 	.word	0x803c3800

08003d68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4a13      	ldr	r2, [pc, #76]	; (8003dcc <USB_FlushTxFifo+0x64>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d901      	bls.n	8003d88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e01b      	b.n	8003dc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	daf2      	bge.n	8003d76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	019b      	lsls	r3, r3, #6
 8003d98:	f043 0220 	orr.w	r2, r3, #32
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	3301      	adds	r3, #1
 8003da4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4a08      	ldr	r2, [pc, #32]	; (8003dcc <USB_FlushTxFifo+0x64>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d901      	bls.n	8003db2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e006      	b.n	8003dc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	2b20      	cmp	r3, #32
 8003dbc:	d0f0      	beq.n	8003da0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	00030d40 	.word	0x00030d40

08003dd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	3301      	adds	r3, #1
 8003de0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4a11      	ldr	r2, [pc, #68]	; (8003e2c <USB_FlushRxFifo+0x5c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d901      	bls.n	8003dee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e018      	b.n	8003e20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	daf2      	bge.n	8003ddc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2210      	movs	r2, #16
 8003dfe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	3301      	adds	r3, #1
 8003e04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4a08      	ldr	r2, [pc, #32]	; (8003e2c <USB_FlushRxFifo+0x5c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d901      	bls.n	8003e12 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e006      	b.n	8003e20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f003 0310 	and.w	r3, r3, #16
 8003e1a:	2b10      	cmp	r3, #16
 8003e1c:	d0f0      	beq.n	8003e00 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	00030d40 	.word	0x00030d40

08003e30 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	78fb      	ldrb	r3, [r7, #3]
 8003e4a:	68f9      	ldr	r1, [r7, #12]
 8003e4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e50:	4313      	orrs	r3, r2
 8003e52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b087      	sub	sp, #28
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 0306 	and.w	r3, r3, #6
 8003e7a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d002      	beq.n	8003e88 <USB_GetDevSpeed+0x26>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2b06      	cmp	r3, #6
 8003e86:	d102      	bne.n	8003e8e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003e88:	2302      	movs	r3, #2
 8003e8a:	75fb      	strb	r3, [r7, #23]
 8003e8c:	e001      	b.n	8003e92 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8003e8e:	230f      	movs	r3, #15
 8003e90:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	371c      	adds	r7, #28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	785b      	ldrb	r3, [r3, #1]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d13a      	bne.n	8003f32 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec2:	69da      	ldr	r2, [r3, #28]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	f003 030f 	and.w	r3, r3, #15
 8003ecc:	2101      	movs	r1, #1
 8003ece:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	68f9      	ldr	r1, [r7, #12]
 8003ed6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003eda:	4313      	orrs	r3, r2
 8003edc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	015a      	lsls	r2, r3, #5
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d155      	bne.n	8003fa0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	015a      	lsls	r2, r3, #5
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4413      	add	r3, r2
 8003efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	791b      	ldrb	r3, [r3, #4]
 8003f0e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f10:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	059b      	lsls	r3, r3, #22
 8003f16:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	0151      	lsls	r1, r2, #5
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	440a      	add	r2, r1
 8003f22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f2e:	6013      	str	r3, [r2, #0]
 8003f30:	e036      	b.n	8003fa0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f38:	69da      	ldr	r2, [r3, #28]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	f003 030f 	and.w	r3, r3, #15
 8003f42:	2101      	movs	r1, #1
 8003f44:	fa01 f303 	lsl.w	r3, r1, r3
 8003f48:	041b      	lsls	r3, r3, #16
 8003f4a:	68f9      	ldr	r1, [r7, #12]
 8003f4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f50:	4313      	orrs	r3, r2
 8003f52:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d11a      	bne.n	8003fa0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	015a      	lsls	r2, r3, #5
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	791b      	ldrb	r3, [r3, #4]
 8003f84:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f86:	430b      	orrs	r3, r1
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	0151      	lsls	r1, r2, #5
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	440a      	add	r2, r1
 8003f92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f9e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
	...

08003fb0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	785b      	ldrb	r3, [r3, #1]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d161      	bne.n	8004090 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	015a      	lsls	r2, r3, #5
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fe2:	d11f      	bne.n	8004024 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	0151      	lsls	r1, r2, #5
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	440a      	add	r2, r1
 8003ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ffe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004002:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4413      	add	r3, r2
 800400c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	0151      	lsls	r1, r2, #5
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	440a      	add	r2, r1
 800401a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800401e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004022:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800402a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	f003 030f 	and.w	r3, r3, #15
 8004034:	2101      	movs	r1, #1
 8004036:	fa01 f303 	lsl.w	r3, r1, r3
 800403a:	b29b      	uxth	r3, r3
 800403c:	43db      	mvns	r3, r3
 800403e:	68f9      	ldr	r1, [r7, #12]
 8004040:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004044:	4013      	ands	r3, r2
 8004046:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404e:	69da      	ldr	r2, [r3, #28]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	f003 030f 	and.w	r3, r3, #15
 8004058:	2101      	movs	r1, #1
 800405a:	fa01 f303 	lsl.w	r3, r1, r3
 800405e:	b29b      	uxth	r3, r3
 8004060:	43db      	mvns	r3, r3
 8004062:	68f9      	ldr	r1, [r7, #12]
 8004064:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004068:	4013      	ands	r3, r2
 800406a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4413      	add	r3, r2
 8004074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	0159      	lsls	r1, r3, #5
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	440b      	add	r3, r1
 8004082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004086:	4619      	mov	r1, r3
 8004088:	4b35      	ldr	r3, [pc, #212]	; (8004160 <USB_DeactivateEndpoint+0x1b0>)
 800408a:	4013      	ands	r3, r2
 800408c:	600b      	str	r3, [r1, #0]
 800408e:	e060      	b.n	8004152 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4413      	add	r3, r2
 8004098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040a6:	d11f      	bne.n	80040e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	0151      	lsls	r1, r2, #5
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	440a      	add	r2, r1
 80040be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80040c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	0151      	lsls	r1, r2, #5
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	440a      	add	r2, r1
 80040de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	f003 030f 	and.w	r3, r3, #15
 80040f8:	2101      	movs	r1, #1
 80040fa:	fa01 f303 	lsl.w	r3, r1, r3
 80040fe:	041b      	lsls	r3, r3, #16
 8004100:	43db      	mvns	r3, r3
 8004102:	68f9      	ldr	r1, [r7, #12]
 8004104:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004108:	4013      	ands	r3, r2
 800410a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004112:	69da      	ldr	r2, [r3, #28]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	f003 030f 	and.w	r3, r3, #15
 800411c:	2101      	movs	r1, #1
 800411e:	fa01 f303 	lsl.w	r3, r1, r3
 8004122:	041b      	lsls	r3, r3, #16
 8004124:	43db      	mvns	r3, r3
 8004126:	68f9      	ldr	r1, [r7, #12]
 8004128:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800412c:	4013      	ands	r3, r2
 800412e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4413      	add	r3, r2
 8004138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	0159      	lsls	r1, r3, #5
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	440b      	add	r3, r1
 8004146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800414a:	4619      	mov	r1, r3
 800414c:	4b05      	ldr	r3, [pc, #20]	; (8004164 <USB_DeactivateEndpoint+0x1b4>)
 800414e:	4013      	ands	r3, r2
 8004150:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	ec337800 	.word	0xec337800
 8004164:	eff37800 	.word	0xeff37800

08004168 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	785b      	ldrb	r3, [r3, #1]
 8004180:	2b01      	cmp	r3, #1
 8004182:	f040 810a 	bne.w	800439a <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d132      	bne.n	80041f4 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	4413      	add	r3, r2
 8004196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	0151      	lsls	r1, r2, #5
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	440a      	add	r2, r1
 80041a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	015a      	lsls	r2, r3, #5
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	4413      	add	r3, r2
 80041ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	0151      	lsls	r1, r2, #5
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	440a      	add	r2, r1
 80041c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	015a      	lsls	r2, r3, #5
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	4413      	add	r3, r2
 80041da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	0151      	lsls	r1, r2, #5
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	440a      	add	r2, r1
 80041e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ec:	0cdb      	lsrs	r3, r3, #19
 80041ee:	04db      	lsls	r3, r3, #19
 80041f0:	6113      	str	r3, [r2, #16]
 80041f2:	e074      	b.n	80042de <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	0151      	lsls	r1, r2, #5
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	440a      	add	r2, r1
 800420a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800420e:	0cdb      	lsrs	r3, r3, #19
 8004210:	04db      	lsls	r3, r3, #19
 8004212:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	4413      	add	r3, r2
 800421c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	0151      	lsls	r1, r2, #5
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	440a      	add	r2, r1
 800422a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800422e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004232:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004236:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	4413      	add	r3, r2
 8004240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004244:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	6999      	ldr	r1, [r3, #24]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	440b      	add	r3, r1
 8004250:	1e59      	subs	r1, r3, #1
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	fbb1 f3f3 	udiv	r3, r1, r3
 800425a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800425c:	4b9e      	ldr	r3, [pc, #632]	; (80044d8 <USB_EPStartXfer+0x370>)
 800425e:	400b      	ands	r3, r1
 8004260:	6939      	ldr	r1, [r7, #16]
 8004262:	0148      	lsls	r0, r1, #5
 8004264:	6979      	ldr	r1, [r7, #20]
 8004266:	4401      	add	r1, r0
 8004268:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800426c:	4313      	orrs	r3, r2
 800426e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	4413      	add	r3, r2
 8004278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427c:	691a      	ldr	r2, [r3, #16]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004286:	6939      	ldr	r1, [r7, #16]
 8004288:	0148      	lsls	r0, r1, #5
 800428a:	6979      	ldr	r1, [r7, #20]
 800428c:	4401      	add	r1, r0
 800428e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004292:	4313      	orrs	r3, r2
 8004294:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	791b      	ldrb	r3, [r3, #4]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d11f      	bne.n	80042de <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	015a      	lsls	r2, r3, #5
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	0151      	lsls	r1, r2, #5
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	440a      	add	r2, r1
 80042b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042b8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80042bc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	015a      	lsls	r2, r3, #5
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	4413      	add	r3, r2
 80042c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	0151      	lsls	r1, r2, #5
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	440a      	add	r2, r1
 80042d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042dc:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	0151      	lsls	r1, r2, #5
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	440a      	add	r2, r1
 80042f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042fc:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	791b      	ldrb	r3, [r3, #4]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d015      	beq.n	8004332 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 8106 	beq.w	800451c <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004316:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	f003 030f 	and.w	r3, r3, #15
 8004320:	2101      	movs	r1, #1
 8004322:	fa01 f303 	lsl.w	r3, r1, r3
 8004326:	6979      	ldr	r1, [r7, #20]
 8004328:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800432c:	4313      	orrs	r3, r2
 800432e:	634b      	str	r3, [r1, #52]	; 0x34
 8004330:	e0f4      	b.n	800451c <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433e:	2b00      	cmp	r3, #0
 8004340:	d110      	bne.n	8004364 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	4413      	add	r3, r2
 800434a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	0151      	lsls	r1, r2, #5
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	440a      	add	r2, r1
 8004358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800435c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	e00f      	b.n	8004384 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	4413      	add	r3, r2
 800436c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	0151      	lsls	r1, r2, #5
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	440a      	add	r2, r1
 800437a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800437e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004382:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	6919      	ldr	r1, [r3, #16]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	781a      	ldrb	r2, [r3, #0]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	b29b      	uxth	r3, r3
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 fa94 	bl	80048c0 <USB_WritePacket>
 8004398:	e0c0      	b.n	800451c <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	015a      	lsls	r2, r3, #5
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	0151      	lsls	r1, r2, #5
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	440a      	add	r2, r1
 80043b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043b4:	0cdb      	lsrs	r3, r3, #19
 80043b6:	04db      	lsls	r3, r3, #19
 80043b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	0151      	lsls	r1, r2, #5
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	440a      	add	r2, r1
 80043d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043dc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d123      	bne.n	800442e <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	015a      	lsls	r2, r3, #5
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043fc:	6939      	ldr	r1, [r7, #16]
 80043fe:	0148      	lsls	r0, r1, #5
 8004400:	6979      	ldr	r1, [r7, #20]
 8004402:	4401      	add	r1, r0
 8004404:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004408:	4313      	orrs	r3, r2
 800440a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	4413      	add	r3, r2
 8004414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	0151      	lsls	r1, r2, #5
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	440a      	add	r2, r1
 8004422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004426:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800442a:	6113      	str	r3, [r2, #16]
 800442c:	e037      	b.n	800449e <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	4413      	add	r3, r2
 8004438:	1e5a      	subs	r2, r3, #1
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004442:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	89fa      	ldrh	r2, [r7, #14]
 800444a:	fb03 f202 	mul.w	r2, r3, r2
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	4413      	add	r3, r2
 800445a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445e:	691a      	ldr	r2, [r3, #16]
 8004460:	89fb      	ldrh	r3, [r7, #14]
 8004462:	04d9      	lsls	r1, r3, #19
 8004464:	4b1c      	ldr	r3, [pc, #112]	; (80044d8 <USB_EPStartXfer+0x370>)
 8004466:	400b      	ands	r3, r1
 8004468:	6939      	ldr	r1, [r7, #16]
 800446a:	0148      	lsls	r0, r1, #5
 800446c:	6979      	ldr	r1, [r7, #20]
 800446e:	4401      	add	r1, r0
 8004470:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004474:	4313      	orrs	r3, r2
 8004476:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	4413      	add	r3, r2
 8004480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004484:	691a      	ldr	r2, [r3, #16]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800448e:	6939      	ldr	r1, [r7, #16]
 8004490:	0148      	lsls	r0, r1, #5
 8004492:	6979      	ldr	r1, [r7, #20]
 8004494:	4401      	add	r1, r0
 8004496:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800449a:	4313      	orrs	r3, r2
 800449c:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	791b      	ldrb	r3, [r3, #4]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d12a      	bne.n	80044fc <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d112      	bne.n	80044dc <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	015a      	lsls	r2, r3, #5
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	4413      	add	r3, r2
 80044be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	0151      	lsls	r1, r2, #5
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	440a      	add	r2, r1
 80044cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	e011      	b.n	80044fc <USB_EPStartXfer+0x394>
 80044d8:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	015a      	lsls	r2, r3, #5
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	4413      	add	r3, r2
 80044e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	0151      	lsls	r1, r2, #5
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	440a      	add	r2, r1
 80044f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	4413      	add	r3, r2
 8004504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	0151      	lsls	r1, r2, #5
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	440a      	add	r2, r1
 8004512:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004516:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800451a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop

08004528 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	785b      	ldrb	r3, [r3, #1]
 8004540:	2b01      	cmp	r3, #1
 8004542:	f040 80ab 	bne.w	800469c <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d132      	bne.n	80045b4 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4413      	add	r3, r2
 8004556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	0151      	lsls	r1, r2, #5
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	440a      	add	r2, r1
 8004564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004568:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800456c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004570:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4413      	add	r3, r2
 800457a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	0151      	lsls	r1, r2, #5
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	440a      	add	r2, r1
 8004588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800458c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004590:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	015a      	lsls	r2, r3, #5
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4413      	add	r3, r2
 800459a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	0151      	lsls	r1, r2, #5
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	440a      	add	r2, r1
 80045a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ac:	0cdb      	lsrs	r3, r3, #19
 80045ae:	04db      	lsls	r3, r3, #19
 80045b0:	6113      	str	r3, [r2, #16]
 80045b2:	e04e      	b.n	8004652 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	0151      	lsls	r1, r2, #5
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	440a      	add	r2, r1
 80045ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ce:	0cdb      	lsrs	r3, r3, #19
 80045d0:	04db      	lsls	r3, r3, #19
 80045d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	0151      	lsls	r1, r2, #5
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	440a      	add	r2, r1
 80045ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045f6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	699a      	ldr	r2, [r3, #24]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	429a      	cmp	r2, r3
 8004602:	d903      	bls.n	800460c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	0151      	lsls	r1, r2, #5
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	440a      	add	r2, r1
 8004622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004626:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800462a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4413      	add	r3, r2
 8004634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004638:	691a      	ldr	r2, [r3, #16]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004642:	68b9      	ldr	r1, [r7, #8]
 8004644:	0148      	lsls	r0, r1, #5
 8004646:	68f9      	ldr	r1, [r7, #12]
 8004648:	4401      	add	r1, r0
 800464a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800464e:	4313      	orrs	r3, r2
 8004650:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	4413      	add	r3, r2
 800465a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	0151      	lsls	r1, r2, #5
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	440a      	add	r2, r1
 8004668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800466c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004670:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d071      	beq.n	800475e <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004680:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	f003 030f 	and.w	r3, r3, #15
 800468a:	2101      	movs	r1, #1
 800468c:	fa01 f303 	lsl.w	r3, r1, r3
 8004690:	68f9      	ldr	r1, [r7, #12]
 8004692:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004696:	4313      	orrs	r3, r2
 8004698:	634b      	str	r3, [r1, #52]	; 0x34
 800469a:	e060      	b.n	800475e <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	0151      	lsls	r1, r2, #5
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	440a      	add	r2, r1
 80046b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046b6:	0cdb      	lsrs	r3, r3, #19
 80046b8:	04db      	lsls	r3, r3, #19
 80046ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	0151      	lsls	r1, r2, #5
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	440a      	add	r2, r1
 80046d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046de:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	68da      	ldr	r2, [r3, #12]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	0151      	lsls	r1, r2, #5
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	440a      	add	r2, r1
 800470e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004712:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004716:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004724:	691a      	ldr	r2, [r3, #16]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800472e:	68b9      	ldr	r1, [r7, #8]
 8004730:	0148      	lsls	r0, r1, #5
 8004732:	68f9      	ldr	r1, [r7, #12]
 8004734:	4401      	add	r1, r0
 8004736:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800473a:	4313      	orrs	r3, r2
 800473c:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	0151      	lsls	r1, r2, #5
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	440a      	add	r2, r1
 8004754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004758:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800475c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800476c:	b480      	push	{r7}
 800476e:	b087      	sub	sp, #28
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	785b      	ldrb	r3, [r3, #1]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d14a      	bne.n	8004820 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	4413      	add	r3, r2
 8004794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800479e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047a2:	f040 8086 	bne.w	80048b2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	015a      	lsls	r2, r3, #5
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	4413      	add	r3, r2
 80047b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	7812      	ldrb	r2, [r2, #0]
 80047ba:	0151      	lsls	r1, r2, #5
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	440a      	add	r2, r1
 80047c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047c8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	7812      	ldrb	r2, [r2, #0]
 80047de:	0151      	lsls	r1, r2, #5
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	440a      	add	r2, r1
 80047e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	3301      	adds	r3, #1
 80047f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d902      	bls.n	8004804 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	75fb      	strb	r3, [r7, #23]
          break;
 8004802:	e056      	b.n	80048b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004818:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800481c:	d0e7      	beq.n	80047ee <USB_EPStopXfer+0x82>
 800481e:	e048      	b.n	80048b2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	015a      	lsls	r2, r3, #5
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	4413      	add	r3, r2
 800482a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004834:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004838:	d13b      	bne.n	80048b2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	7812      	ldrb	r2, [r2, #0]
 800484e:	0151      	lsls	r1, r2, #5
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	440a      	add	r2, r1
 8004854:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004858:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800485c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	4413      	add	r3, r2
 8004868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	7812      	ldrb	r2, [r2, #0]
 8004872:	0151      	lsls	r1, r2, #5
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	440a      	add	r2, r1
 8004878:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800487c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004880:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	3301      	adds	r3, #1
 8004886:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f242 7210 	movw	r2, #10000	; 0x2710
 800488e:	4293      	cmp	r3, r2
 8004890:	d902      	bls.n	8004898 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	75fb      	strb	r3, [r7, #23]
          break;
 8004896:	e00c      	b.n	80048b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048b0:	d0e7      	beq.n	8004882 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80048b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	371c      	adds	r7, #28
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b089      	sub	sp, #36	; 0x24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	4611      	mov	r1, r2
 80048cc:	461a      	mov	r2, r3
 80048ce:	460b      	mov	r3, r1
 80048d0:	71fb      	strb	r3, [r7, #7]
 80048d2:	4613      	mov	r3, r2
 80048d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80048de:	88bb      	ldrh	r3, [r7, #4]
 80048e0:	3303      	adds	r3, #3
 80048e2:	089b      	lsrs	r3, r3, #2
 80048e4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80048e6:	2300      	movs	r3, #0
 80048e8:	61bb      	str	r3, [r7, #24]
 80048ea:	e018      	b.n	800491e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80048ec:	79fb      	ldrb	r3, [r7, #7]
 80048ee:	031a      	lsls	r2, r3, #12
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048f8:	461a      	mov	r2, r3
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6013      	str	r3, [r2, #0]
    pSrc++;
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	3301      	adds	r3, #1
 8004904:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	3301      	adds	r3, #1
 800490a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	3301      	adds	r3, #1
 8004910:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	3301      	adds	r3, #1
 8004916:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	3301      	adds	r3, #1
 800491c:	61bb      	str	r3, [r7, #24]
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	429a      	cmp	r2, r3
 8004924:	d3e2      	bcc.n	80048ec <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3724      	adds	r7, #36	; 0x24
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004934:	b480      	push	{r7}
 8004936:	b08b      	sub	sp, #44	; 0x2c
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	4613      	mov	r3, r2
 8004940:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800494a:	88fb      	ldrh	r3, [r7, #6]
 800494c:	089b      	lsrs	r3, r3, #2
 800494e:	b29b      	uxth	r3, r3
 8004950:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004952:	88fb      	ldrh	r3, [r7, #6]
 8004954:	f003 0303 	and.w	r3, r3, #3
 8004958:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800495a:	2300      	movs	r3, #0
 800495c:	623b      	str	r3, [r7, #32]
 800495e:	e014      	b.n	800498a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	601a      	str	r2, [r3, #0]
    pDest++;
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	3301      	adds	r3, #1
 8004970:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	3301      	adds	r3, #1
 8004976:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	3301      	adds	r3, #1
 800497c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	3301      	adds	r3, #1
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	3301      	adds	r3, #1
 8004988:	623b      	str	r3, [r7, #32]
 800498a:	6a3a      	ldr	r2, [r7, #32]
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	429a      	cmp	r2, r3
 8004990:	d3e6      	bcc.n	8004960 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004992:	8bfb      	ldrh	r3, [r7, #30]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d01e      	beq.n	80049d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049a2:	461a      	mov	r2, r3
 80049a4:	f107 0310 	add.w	r3, r7, #16
 80049a8:	6812      	ldr	r2, [r2, #0]
 80049aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	6a3b      	ldr	r3, [r7, #32]
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	fa22 f303 	lsr.w	r3, r2, r3
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	701a      	strb	r2, [r3, #0]
      i++;
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	3301      	adds	r3, #1
 80049c2:	623b      	str	r3, [r7, #32]
      pDest++;
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	3301      	adds	r3, #1
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80049ca:	8bfb      	ldrh	r3, [r7, #30]
 80049cc:	3b01      	subs	r3, #1
 80049ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80049d0:	8bfb      	ldrh	r3, [r7, #30]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1ea      	bne.n	80049ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049d8:	4618      	mov	r0, r3
 80049da:	372c      	adds	r7, #44	; 0x2c
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	785b      	ldrb	r3, [r3, #1]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d12c      	bne.n	8004a5a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	db12      	blt.n	8004a38 <USB_EPSetStall+0x54>
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00f      	beq.n	8004a38 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	0151      	lsls	r1, r2, #5
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	440a      	add	r2, r1
 8004a2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a36:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	0151      	lsls	r1, r2, #5
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	440a      	add	r2, r1
 8004a4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	e02b      	b.n	8004ab2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	db12      	blt.n	8004a92 <USB_EPSetStall+0xae>
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00f      	beq.n	8004a92 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	0151      	lsls	r1, r2, #5
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	440a      	add	r2, r1
 8004a88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a90:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	0151      	lsls	r1, r2, #5
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	440a      	add	r2, r1
 8004aa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ab0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	785b      	ldrb	r3, [r3, #1]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d128      	bne.n	8004b2e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	0151      	lsls	r1, r2, #5
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	440a      	add	r2, r1
 8004af2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004af6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004afa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	791b      	ldrb	r3, [r3, #4]
 8004b00:	2b03      	cmp	r3, #3
 8004b02:	d003      	beq.n	8004b0c <USB_EPClearStall+0x4c>
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	791b      	ldrb	r3, [r3, #4]
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d138      	bne.n	8004b7e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	0151      	lsls	r1, r2, #5
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	440a      	add	r2, r1
 8004b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b2a:	6013      	str	r3, [r2, #0]
 8004b2c:	e027      	b.n	8004b7e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	0151      	lsls	r1, r2, #5
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	440a      	add	r2, r1
 8004b44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	791b      	ldrb	r3, [r3, #4]
 8004b52:	2b03      	cmp	r3, #3
 8004b54:	d003      	beq.n	8004b5e <USB_EPClearStall+0x9e>
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	791b      	ldrb	r3, [r3, #4]
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d10f      	bne.n	8004b7e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	0151      	lsls	r1, r2, #5
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	440a      	add	r2, r1
 8004b74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b7c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	460b      	mov	r3, r1
 8004b96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004baa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004bae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	78fb      	ldrb	r3, [r7, #3]
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004bc0:	68f9      	ldr	r1, [r7, #12]
 8004bc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004bf2:	f023 0303 	bic.w	r3, r3, #3
 8004bf6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c06:	f023 0302 	bic.w	r3, r3, #2
 8004c0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b085      	sub	sp, #20
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c34:	f023 0303 	bic.w	r3, r3, #3
 8004c38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c48:	f043 0302 	orr.w	r3, r3, #2
 8004c4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	4013      	ands	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004c74:	68fb      	ldr	r3, [r7, #12]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b085      	sub	sp, #20
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9e:	69db      	ldr	r3, [r3, #28]
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	0c1b      	lsrs	r3, r3, #16
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b085      	sub	sp, #20
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd2:	69db      	ldr	r3, [r3, #28]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	b29b      	uxth	r3, r3
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b085      	sub	sp, #20
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004cfa:	78fb      	ldrb	r3, [r7, #3]
 8004cfc:	015a      	lsls	r2, r3, #5
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	4413      	add	r3, r2
 8004d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	4013      	ands	r3, r2
 8004d16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d18:	68bb      	ldr	r3, [r7, #8]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b087      	sub	sp, #28
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
 8004d2e:	460b      	mov	r3, r1
 8004d30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d48:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004d4a:	78fb      	ldrb	r3, [r7, #3]
 8004d4c:	f003 030f 	and.w	r3, r3, #15
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	fa22 f303 	lsr.w	r3, r2, r3
 8004d56:	01db      	lsls	r3, r3, #7
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004d60:	78fb      	ldrb	r3, [r7, #3]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	4013      	ands	r3, r2
 8004d72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d74:	68bb      	ldr	r3, [r7, #8]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	371c      	adds	r7, #28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	f003 0301 	and.w	r3, r3, #1
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b085      	sub	sp, #20
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004db8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004dbc:	f023 0307 	bic.w	r3, r3, #7
 8004dc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3714      	adds	r7, #20
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	333c      	adds	r3, #60	; 0x3c
 8004df6:	3304      	adds	r3, #4
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	4a1c      	ldr	r2, [pc, #112]	; (8004e70 <USB_EP0_OutStart+0x8c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d90a      	bls.n	8004e1a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e14:	d101      	bne.n	8004e1a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8004e16:	2300      	movs	r3, #0
 8004e18:	e024      	b.n	8004e64 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e20:	461a      	mov	r2, r3
 8004e22:	2300      	movs	r3, #0
 8004e24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e48:	f043 0318 	orr.w	r3, r3, #24
 8004e4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e5c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004e60:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	4f54300a 	.word	0x4f54300a

08004e74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	3301      	adds	r3, #1
 8004e84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4a13      	ldr	r2, [pc, #76]	; (8004ed8 <USB_CoreReset+0x64>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d901      	bls.n	8004e92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e01b      	b.n	8004eca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	daf2      	bge.n	8004e80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	f043 0201 	orr.w	r2, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	3301      	adds	r3, #1
 8004eae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4a09      	ldr	r2, [pc, #36]	; (8004ed8 <USB_CoreReset+0x64>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d901      	bls.n	8004ebc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e006      	b.n	8004eca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d0f0      	beq.n	8004eaa <USB_CoreReset+0x36>

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	00030d40 	.word	0x00030d40

08004edc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004ee8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004eec:	f002 faea 	bl	80074c4 <USBD_static_malloc>
 8004ef0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d105      	bne.n	8004f04 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004f00:	2302      	movs	r3, #2
 8004f02:	e066      	b.n	8004fd2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	7c1b      	ldrb	r3, [r3, #16]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d119      	bne.n	8004f48 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004f14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f18:	2202      	movs	r2, #2
 8004f1a:	2181      	movs	r1, #129	; 0x81
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f002 f8bd 	bl	800709c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	2101      	movs	r1, #1
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f002 f8b3 	bl	800709c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2210      	movs	r2, #16
 8004f42:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004f46:	e016      	b.n	8004f76 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004f48:	2340      	movs	r3, #64	; 0x40
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	2181      	movs	r1, #129	; 0x81
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f002 f8a4 	bl	800709c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004f5a:	2340      	movs	r3, #64	; 0x40
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	2101      	movs	r1, #1
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f002 f89b 	bl	800709c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2210      	movs	r2, #16
 8004f72:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004f76:	2308      	movs	r3, #8
 8004f78:	2203      	movs	r2, #3
 8004f7a:	2182      	movs	r1, #130	; 0x82
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f002 f88d 	bl	800709c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	7c1b      	ldrb	r3, [r3, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d109      	bne.n	8004fc0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fb6:	2101      	movs	r1, #1
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f002 f9e9 	bl	8007390 <USBD_LL_PrepareReceive>
 8004fbe:	e007      	b.n	8004fd0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fc6:	2340      	movs	r3, #64	; 0x40
 8004fc8:	2101      	movs	r1, #1
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f002 f9e0 	bl	8007390 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b082      	sub	sp, #8
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004fe6:	2181      	movs	r1, #129	; 0x81
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f002 f895 	bl	8007118 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f002 f88e 	bl	8007118 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005004:	2182      	movs	r1, #130	; 0x82
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f002 f886 	bl	8007118 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00e      	beq.n	8005044 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005036:	4618      	mov	r0, r3
 8005038:	f002 fa52 	bl	80074e0 <USBD_static_free>
    pdev->pClassData = NULL;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
	...

08005050 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005060:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005062:	2300      	movs	r3, #0
 8005064:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005074:	2303      	movs	r3, #3
 8005076:	e0af      	b.n	80051d8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005080:	2b00      	cmp	r3, #0
 8005082:	d03f      	beq.n	8005104 <USBD_CDC_Setup+0xb4>
 8005084:	2b20      	cmp	r3, #32
 8005086:	f040 809f 	bne.w	80051c8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	88db      	ldrh	r3, [r3, #6]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d02e      	beq.n	80050f0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	b25b      	sxtb	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	da16      	bge.n	80050ca <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80050a8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	88d2      	ldrh	r2, [r2, #6]
 80050ae:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	88db      	ldrh	r3, [r3, #6]
 80050b4:	2b07      	cmp	r3, #7
 80050b6:	bf28      	it	cs
 80050b8:	2307      	movcs	r3, #7
 80050ba:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	89fa      	ldrh	r2, [r7, #14]
 80050c0:	4619      	mov	r1, r3
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f001 fb43 	bl	800674e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80050c8:	e085      	b.n	80051d6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	785a      	ldrb	r2, [r3, #1]
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	88db      	ldrh	r3, [r3, #6]
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80050e0:	6939      	ldr	r1, [r7, #16]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	88db      	ldrh	r3, [r3, #6]
 80050e6:	461a      	mov	r2, r3
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f001 fb5c 	bl	80067a6 <USBD_CtlPrepareRx>
      break;
 80050ee:	e072      	b.n	80051d6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	7850      	ldrb	r0, [r2, #1]
 80050fc:	2200      	movs	r2, #0
 80050fe:	6839      	ldr	r1, [r7, #0]
 8005100:	4798      	blx	r3
      break;
 8005102:	e068      	b.n	80051d6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	785b      	ldrb	r3, [r3, #1]
 8005108:	2b0b      	cmp	r3, #11
 800510a:	d852      	bhi.n	80051b2 <USBD_CDC_Setup+0x162>
 800510c:	a201      	add	r2, pc, #4	; (adr r2, 8005114 <USBD_CDC_Setup+0xc4>)
 800510e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005112:	bf00      	nop
 8005114:	08005145 	.word	0x08005145
 8005118:	080051c1 	.word	0x080051c1
 800511c:	080051b3 	.word	0x080051b3
 8005120:	080051b3 	.word	0x080051b3
 8005124:	080051b3 	.word	0x080051b3
 8005128:	080051b3 	.word	0x080051b3
 800512c:	080051b3 	.word	0x080051b3
 8005130:	080051b3 	.word	0x080051b3
 8005134:	080051b3 	.word	0x080051b3
 8005138:	080051b3 	.word	0x080051b3
 800513c:	0800516f 	.word	0x0800516f
 8005140:	08005199 	.word	0x08005199
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b03      	cmp	r3, #3
 800514e:	d107      	bne.n	8005160 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005150:	f107 030a 	add.w	r3, r7, #10
 8005154:	2202      	movs	r2, #2
 8005156:	4619      	mov	r1, r3
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f001 faf8 	bl	800674e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800515e:	e032      	b.n	80051c6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005160:	6839      	ldr	r1, [r7, #0]
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f001 fa82 	bl	800666c <USBD_CtlError>
            ret = USBD_FAIL;
 8005168:	2303      	movs	r3, #3
 800516a:	75fb      	strb	r3, [r7, #23]
          break;
 800516c:	e02b      	b.n	80051c6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b03      	cmp	r3, #3
 8005178:	d107      	bne.n	800518a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800517a:	f107 030d 	add.w	r3, r7, #13
 800517e:	2201      	movs	r2, #1
 8005180:	4619      	mov	r1, r3
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f001 fae3 	bl	800674e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005188:	e01d      	b.n	80051c6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800518a:	6839      	ldr	r1, [r7, #0]
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f001 fa6d 	bl	800666c <USBD_CtlError>
            ret = USBD_FAIL;
 8005192:	2303      	movs	r3, #3
 8005194:	75fb      	strb	r3, [r7, #23]
          break;
 8005196:	e016      	b.n	80051c6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b03      	cmp	r3, #3
 80051a2:	d00f      	beq.n	80051c4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80051a4:	6839      	ldr	r1, [r7, #0]
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f001 fa60 	bl	800666c <USBD_CtlError>
            ret = USBD_FAIL;
 80051ac:	2303      	movs	r3, #3
 80051ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80051b0:	e008      	b.n	80051c4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80051b2:	6839      	ldr	r1, [r7, #0]
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f001 fa59 	bl	800666c <USBD_CtlError>
          ret = USBD_FAIL;
 80051ba:	2303      	movs	r3, #3
 80051bc:	75fb      	strb	r3, [r7, #23]
          break;
 80051be:	e002      	b.n	80051c6 <USBD_CDC_Setup+0x176>
          break;
 80051c0:	bf00      	nop
 80051c2:	e008      	b.n	80051d6 <USBD_CDC_Setup+0x186>
          break;
 80051c4:	bf00      	nop
      }
      break;
 80051c6:	e006      	b.n	80051d6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80051c8:	6839      	ldr	r1, [r7, #0]
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f001 fa4e 	bl	800666c <USBD_CtlError>
      ret = USBD_FAIL;
 80051d0:	2303      	movs	r3, #3
 80051d2:	75fb      	strb	r3, [r7, #23]
      break;
 80051d4:	bf00      	nop
  }

  return (uint8_t)ret;
 80051d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	460b      	mov	r3, r1
 80051ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80051f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80051fe:	2303      	movs	r3, #3
 8005200:	e04f      	b.n	80052a2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005208:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800520a:	78fa      	ldrb	r2, [r7, #3]
 800520c:	6879      	ldr	r1, [r7, #4]
 800520e:	4613      	mov	r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4413      	add	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	440b      	add	r3, r1
 8005218:	3318      	adds	r3, #24
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d029      	beq.n	8005274 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005220:	78fa      	ldrb	r2, [r7, #3]
 8005222:	6879      	ldr	r1, [r7, #4]
 8005224:	4613      	mov	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4413      	add	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	440b      	add	r3, r1
 800522e:	3318      	adds	r3, #24
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	78f9      	ldrb	r1, [r7, #3]
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	460b      	mov	r3, r1
 8005238:	00db      	lsls	r3, r3, #3
 800523a:	440b      	add	r3, r1
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4403      	add	r3, r0
 8005240:	3348      	adds	r3, #72	; 0x48
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	fbb2 f1f3 	udiv	r1, r2, r3
 8005248:	fb01 f303 	mul.w	r3, r1, r3
 800524c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800524e:	2b00      	cmp	r3, #0
 8005250:	d110      	bne.n	8005274 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005252:	78fa      	ldrb	r2, [r7, #3]
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	4613      	mov	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4413      	add	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	440b      	add	r3, r1
 8005260:	3318      	adds	r3, #24
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005266:	78f9      	ldrb	r1, [r7, #3]
 8005268:	2300      	movs	r3, #0
 800526a:	2200      	movs	r2, #0
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f002 f857 	bl	8007320 <USBD_LL_Transmit>
 8005272:	e015      	b.n	80052a0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2200      	movs	r2, #0
 8005278:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00b      	beq.n	80052a0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800529c:	78fa      	ldrb	r2, [r7, #3]
 800529e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b084      	sub	sp, #16
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	460b      	mov	r3, r1
 80052b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052bc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e015      	b.n	80052f8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80052cc:	78fb      	ldrb	r3, [r7, #3]
 80052ce:	4619      	mov	r1, r3
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f002 f895 	bl	8007400 <USBD_LL_GetRxDataSize>
 80052d6:	4602      	mov	r2, r0
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80052f2:	4611      	mov	r1, r2
 80052f4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800530e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005316:	2303      	movs	r3, #3
 8005318:	e01b      	b.n	8005352 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d015      	beq.n	8005350 <USBD_CDC_EP0_RxReady+0x50>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800532a:	2bff      	cmp	r3, #255	; 0xff
 800532c:	d010      	beq.n	8005350 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800533c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005344:	b292      	uxth	r2, r2
 8005346:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	22ff      	movs	r2, #255	; 0xff
 800534c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
	...

0800535c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2243      	movs	r2, #67	; 0x43
 8005368:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800536a:	4b03      	ldr	r3, [pc, #12]	; (8005378 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800536c:	4618      	mov	r0, r3
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr
 8005378:	20000094 	.word	0x20000094

0800537c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2243      	movs	r2, #67	; 0x43
 8005388:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800538a:	4b03      	ldr	r3, [pc, #12]	; (8005398 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800538c:	4618      	mov	r0, r3
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	20000050 	.word	0x20000050

0800539c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2243      	movs	r2, #67	; 0x43
 80053a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80053aa:	4b03      	ldr	r3, [pc, #12]	; (80053b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	200000d8 	.word	0x200000d8

080053bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	220a      	movs	r2, #10
 80053c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80053ca:	4b03      	ldr	r3, [pc, #12]	; (80053d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	2000000c 	.word	0x2000000c

080053dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e004      	b.n	80053fa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005406:	b480      	push	{r7}
 8005408:	b087      	sub	sp, #28
 800540a:	af00      	add	r7, sp, #0
 800540c:	60f8      	str	r0, [r7, #12]
 800540e:	60b9      	str	r1, [r7, #8]
 8005410:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005418:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005420:	2303      	movs	r3, #3
 8005422:	e008      	b.n	8005436 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	371c      	adds	r7, #28
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005442:	b480      	push	{r7}
 8005444:	b085      	sub	sp, #20
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
 800544a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005452:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800545a:	2303      	movs	r3, #3
 800545c:	e004      	b.n	8005468 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005482:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005484:	2301      	movs	r3, #1
 8005486:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005492:	2303      	movs	r3, #3
 8005494:	e01a      	b.n	80054cc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800549c:	2b00      	cmp	r3, #0
 800549e:	d114      	bne.n	80054ca <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80054be:	2181      	movs	r1, #129	; 0x81
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f001 ff2d 	bl	8007320 <USBD_LL_Transmit>

    ret = USBD_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80054ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e016      	b.n	8005520 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	7c1b      	ldrb	r3, [r3, #16]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d109      	bne.n	800550e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005500:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005504:	2101      	movs	r1, #1
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f001 ff42 	bl	8007390 <USBD_LL_PrepareReceive>
 800550c:	e007      	b.n	800551e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005514:	2340      	movs	r3, #64	; 0x40
 8005516:	2101      	movs	r1, #1
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f001 ff39 	bl	8007390 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	4613      	mov	r3, r2
 8005534:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800553c:	2303      	movs	r3, #3
 800553e:	e01f      	b.n	8005580 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	79fa      	ldrb	r2, [r7, #7]
 8005572:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f001 fd15 	bl	8006fa4 <USBD_LL_Init>
 800557a:	4603      	mov	r3, r0
 800557c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800557e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005592:	2300      	movs	r3, #0
 8005594:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800559c:	2303      	movs	r3, #3
 800559e:	e016      	b.n	80055ce <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00b      	beq.n	80055cc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055bc:	f107 020e 	add.w	r2, r7, #14
 80055c0:	4610      	mov	r0, r2
 80055c2:	4798      	blx	r3
 80055c4:	4602      	mov	r2, r0
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b082      	sub	sp, #8
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f001 fd2a 	bl	8007038 <USBD_LL_Start>
 80055e4:	4603      	mov	r3, r0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b083      	sub	sp, #12
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	460b      	mov	r3, r1
 800560e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005610:	2303      	movs	r3, #3
 8005612:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800561a:	2b00      	cmp	r3, #0
 800561c:	d009      	beq.n	8005632 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	78fa      	ldrb	r2, [r7, #3]
 8005628:	4611      	mov	r1, r2
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	4798      	blx	r3
 800562e:	4603      	mov	r3, r0
 8005630:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005632:	7bfb      	ldrb	r3, [r7, #15]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	460b      	mov	r3, r1
 8005646:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800564e:	2b00      	cmp	r3, #0
 8005650:	d007      	beq.n	8005662 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	78fa      	ldrb	r2, [r7, #3]
 800565c:	4611      	mov	r1, r2
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	4798      	blx	r3
  }

  return USBD_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800567c:	6839      	ldr	r1, [r7, #0]
 800567e:	4618      	mov	r0, r3
 8005680:	f000 ffba 	bl	80065f8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005692:	461a      	mov	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80056a0:	f003 031f 	and.w	r3, r3, #31
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d01a      	beq.n	80056de <USBD_LL_SetupStage+0x72>
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d822      	bhi.n	80056f2 <USBD_LL_SetupStage+0x86>
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d002      	beq.n	80056b6 <USBD_LL_SetupStage+0x4a>
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d00a      	beq.n	80056ca <USBD_LL_SetupStage+0x5e>
 80056b4:	e01d      	b.n	80056f2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056bc:	4619      	mov	r1, r3
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fa62 	bl	8005b88 <USBD_StdDevReq>
 80056c4:	4603      	mov	r3, r0
 80056c6:	73fb      	strb	r3, [r7, #15]
      break;
 80056c8:	e020      	b.n	800570c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056d0:	4619      	mov	r1, r3
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 fac6 	bl	8005c64 <USBD_StdItfReq>
 80056d8:	4603      	mov	r3, r0
 80056da:	73fb      	strb	r3, [r7, #15]
      break;
 80056dc:	e016      	b.n	800570c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056e4:	4619      	mov	r1, r3
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 fb05 	bl	8005cf6 <USBD_StdEPReq>
 80056ec:	4603      	mov	r3, r0
 80056ee:	73fb      	strb	r3, [r7, #15]
      break;
 80056f0:	e00c      	b.n	800570c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80056f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	4619      	mov	r1, r3
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f001 fd3f 	bl	8007184 <USBD_LL_StallEP>
 8005706:	4603      	mov	r3, r0
 8005708:	73fb      	strb	r3, [r7, #15]
      break;
 800570a:	bf00      	nop
  }

  return ret;
 800570c:	7bfb      	ldrb	r3, [r7, #15]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b086      	sub	sp, #24
 800571a:	af00      	add	r7, sp, #0
 800571c:	60f8      	str	r0, [r7, #12]
 800571e:	460b      	mov	r3, r1
 8005720:	607a      	str	r2, [r7, #4]
 8005722:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005724:	7afb      	ldrb	r3, [r7, #11]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d138      	bne.n	800579c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005730:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005738:	2b03      	cmp	r3, #3
 800573a:	d14a      	bne.n	80057d2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	429a      	cmp	r2, r3
 8005746:	d913      	bls.n	8005770 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	689a      	ldr	r2, [r3, #8]
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	1ad2      	subs	r2, r2, r3
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	68da      	ldr	r2, [r3, #12]
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	4293      	cmp	r3, r2
 8005760:	bf28      	it	cs
 8005762:	4613      	movcs	r3, r2
 8005764:	461a      	mov	r2, r3
 8005766:	6879      	ldr	r1, [r7, #4]
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f001 f839 	bl	80067e0 <USBD_CtlContinueRx>
 800576e:	e030      	b.n	80057d2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b03      	cmp	r3, #3
 800577a:	d10b      	bne.n	8005794 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d005      	beq.n	8005794 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f001 f834 	bl	8006802 <USBD_CtlSendStatus>
 800579a:	e01a      	b.n	80057d2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d114      	bne.n	80057d2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00e      	beq.n	80057d2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	7afa      	ldrb	r2, [r7, #11]
 80057be:	4611      	mov	r1, r2
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	4798      	blx	r3
 80057c4:	4603      	mov	r3, r0
 80057c6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80057c8:	7dfb      	ldrb	r3, [r7, #23]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d001      	beq.n	80057d2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80057ce:	7dfb      	ldrb	r3, [r7, #23]
 80057d0:	e000      	b.n	80057d4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3718      	adds	r7, #24
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	460b      	mov	r3, r1
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80057ea:	7afb      	ldrb	r3, [r7, #11]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d16b      	bne.n	80058c8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	3314      	adds	r3, #20
 80057f4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d156      	bne.n	80058ae <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	429a      	cmp	r2, r3
 800580a:	d914      	bls.n	8005836 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	1ad2      	subs	r2, r2, r3
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	461a      	mov	r2, r3
 8005820:	6879      	ldr	r1, [r7, #4]
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 ffae 	bl	8006784 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005828:	2300      	movs	r3, #0
 800582a:	2200      	movs	r2, #0
 800582c:	2100      	movs	r1, #0
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f001 fdae 	bl	8007390 <USBD_LL_PrepareReceive>
 8005834:	e03b      	b.n	80058ae <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	68da      	ldr	r2, [r3, #12]
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	429a      	cmp	r2, r3
 8005840:	d11c      	bne.n	800587c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800584a:	429a      	cmp	r2, r3
 800584c:	d316      	bcc.n	800587c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005858:	429a      	cmp	r2, r3
 800585a:	d20f      	bcs.n	800587c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800585c:	2200      	movs	r2, #0
 800585e:	2100      	movs	r1, #0
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 ff8f 	bl	8006784 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800586e:	2300      	movs	r3, #0
 8005870:	2200      	movs	r2, #0
 8005872:	2100      	movs	r1, #0
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f001 fd8b 	bl	8007390 <USBD_LL_PrepareReceive>
 800587a:	e018      	b.n	80058ae <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b03      	cmp	r3, #3
 8005886:	d10b      	bne.n	80058a0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d005      	beq.n	80058a0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80058a0:	2180      	movs	r1, #128	; 0x80
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f001 fc6e 	bl	8007184 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 ffbd 	bl	8006828 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d122      	bne.n	80058fe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f7ff fe98 	bl	80055ee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80058c6:	e01a      	b.n	80058fe <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b03      	cmp	r3, #3
 80058d2:	d114      	bne.n	80058fe <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00e      	beq.n	80058fe <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058e6:	695b      	ldr	r3, [r3, #20]
 80058e8:	7afa      	ldrb	r2, [r7, #11]
 80058ea:	4611      	mov	r1, r2
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	4798      	blx	r3
 80058f0:	4603      	mov	r3, r0
 80058f2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80058f4:	7dfb      	ldrb	r3, [r7, #23]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80058fa:	7dfb      	ldrb	r3, [r7, #23]
 80058fc:	e000      	b.n	8005900 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3718      	adds	r7, #24
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005938:	2303      	movs	r3, #3
 800593a:	e02f      	b.n	800599c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00f      	beq.n	8005966 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d009      	beq.n	8005966 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	6852      	ldr	r2, [r2, #4]
 800595e:	b2d2      	uxtb	r2, r2
 8005960:	4611      	mov	r1, r2
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005966:	2340      	movs	r3, #64	; 0x40
 8005968:	2200      	movs	r2, #0
 800596a:	2100      	movs	r1, #0
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f001 fb95 	bl	800709c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2240      	movs	r2, #64	; 0x40
 800597e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005982:	2340      	movs	r3, #64	; 0x40
 8005984:	2200      	movs	r2, #0
 8005986:	2180      	movs	r1, #128	; 0x80
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f001 fb87 	bl	800709c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2240      	movs	r2, #64	; 0x40
 8005998:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	460b      	mov	r3, r1
 80059ae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	78fa      	ldrb	r2, [r7, #3]
 80059b4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2204      	movs	r2, #4
 80059de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d106      	bne.n	8005a12 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e012      	b.n	8005a5c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b03      	cmp	r3, #3
 8005a40:	d10b      	bne.n	8005a5a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a48:	69db      	ldr	r3, [r3, #28]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d005      	beq.n	8005a5a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3708      	adds	r7, #8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e014      	b.n	8005aa8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	d10d      	bne.n	8005aa6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d007      	beq.n	8005aa6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	78fa      	ldrb	r2, [r7, #3]
 8005aa0:	4611      	mov	r1, r2
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e014      	b.n	8005af4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b03      	cmp	r3, #3
 8005ad4:	d10d      	bne.n	8005af2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d007      	beq.n	8005af2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aea:	78fa      	ldrb	r2, [r7, #3]
 8005aec:	4611      	mov	r1, r2
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3708      	adds	r7, #8
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b082      	sub	sp, #8
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d009      	beq.n	8005b40 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	6852      	ldr	r2, [r2, #4]
 8005b38:	b2d2      	uxtb	r2, r2
 8005b3a:	4611      	mov	r1, r2
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	4798      	blx	r3
  }

  return USBD_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b087      	sub	sp, #28
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005b68:	8a3b      	ldrh	r3, [r7, #16]
 8005b6a:	021b      	lsls	r3, r3, #8
 8005b6c:	b21a      	sxth	r2, r3
 8005b6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	b21b      	sxth	r3, r3
 8005b76:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005b78:	89fb      	ldrh	r3, [r7, #14]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	371c      	adds	r7, #28
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
	...

08005b88 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b9e:	2b40      	cmp	r3, #64	; 0x40
 8005ba0:	d005      	beq.n	8005bae <USBD_StdDevReq+0x26>
 8005ba2:	2b40      	cmp	r3, #64	; 0x40
 8005ba4:	d853      	bhi.n	8005c4e <USBD_StdDevReq+0xc6>
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00b      	beq.n	8005bc2 <USBD_StdDevReq+0x3a>
 8005baa:	2b20      	cmp	r3, #32
 8005bac:	d14f      	bne.n	8005c4e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	6839      	ldr	r1, [r7, #0]
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	4798      	blx	r3
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8005bc0:	e04a      	b.n	8005c58 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	785b      	ldrb	r3, [r3, #1]
 8005bc6:	2b09      	cmp	r3, #9
 8005bc8:	d83b      	bhi.n	8005c42 <USBD_StdDevReq+0xba>
 8005bca:	a201      	add	r2, pc, #4	; (adr r2, 8005bd0 <USBD_StdDevReq+0x48>)
 8005bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd0:	08005c25 	.word	0x08005c25
 8005bd4:	08005c39 	.word	0x08005c39
 8005bd8:	08005c43 	.word	0x08005c43
 8005bdc:	08005c2f 	.word	0x08005c2f
 8005be0:	08005c43 	.word	0x08005c43
 8005be4:	08005c03 	.word	0x08005c03
 8005be8:	08005bf9 	.word	0x08005bf9
 8005bec:	08005c43 	.word	0x08005c43
 8005bf0:	08005c1b 	.word	0x08005c1b
 8005bf4:	08005c0d 	.word	0x08005c0d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005bf8:	6839      	ldr	r1, [r7, #0]
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f9de 	bl	8005fbc <USBD_GetDescriptor>
          break;
 8005c00:	e024      	b.n	8005c4c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005c02:	6839      	ldr	r1, [r7, #0]
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 fb6d 	bl	80062e4 <USBD_SetAddress>
          break;
 8005c0a:	e01f      	b.n	8005c4c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005c0c:	6839      	ldr	r1, [r7, #0]
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fbac 	bl	800636c <USBD_SetConfig>
 8005c14:	4603      	mov	r3, r0
 8005c16:	73fb      	strb	r3, [r7, #15]
          break;
 8005c18:	e018      	b.n	8005c4c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005c1a:	6839      	ldr	r1, [r7, #0]
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 fc4b 	bl	80064b8 <USBD_GetConfig>
          break;
 8005c22:	e013      	b.n	8005c4c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005c24:	6839      	ldr	r1, [r7, #0]
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 fc7c 	bl	8006524 <USBD_GetStatus>
          break;
 8005c2c:	e00e      	b.n	8005c4c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005c2e:	6839      	ldr	r1, [r7, #0]
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fcab 	bl	800658c <USBD_SetFeature>
          break;
 8005c36:	e009      	b.n	8005c4c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005c38:	6839      	ldr	r1, [r7, #0]
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 fcba 	bl	80065b4 <USBD_ClrFeature>
          break;
 8005c40:	e004      	b.n	8005c4c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005c42:	6839      	ldr	r1, [r7, #0]
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 fd11 	bl	800666c <USBD_CtlError>
          break;
 8005c4a:	bf00      	nop
      }
      break;
 8005c4c:	e004      	b.n	8005c58 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005c4e:	6839      	ldr	r1, [r7, #0]
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 fd0b 	bl	800666c <USBD_CtlError>
      break;
 8005c56:	bf00      	nop
  }

  return ret;
 8005c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop

08005c64 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c7a:	2b40      	cmp	r3, #64	; 0x40
 8005c7c:	d005      	beq.n	8005c8a <USBD_StdItfReq+0x26>
 8005c7e:	2b40      	cmp	r3, #64	; 0x40
 8005c80:	d82f      	bhi.n	8005ce2 <USBD_StdItfReq+0x7e>
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <USBD_StdItfReq+0x26>
 8005c86:	2b20      	cmp	r3, #32
 8005c88:	d12b      	bne.n	8005ce2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	3b01      	subs	r3, #1
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d81d      	bhi.n	8005cd4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	889b      	ldrh	r3, [r3, #4]
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d813      	bhi.n	8005cca <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	6839      	ldr	r1, [r7, #0]
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	4798      	blx	r3
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	88db      	ldrh	r3, [r3, #6]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d110      	bne.n	8005cde <USBD_StdItfReq+0x7a>
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10d      	bne.n	8005cde <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fd9d 	bl	8006802 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005cc8:	e009      	b.n	8005cde <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005cca:	6839      	ldr	r1, [r7, #0]
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fccd 	bl	800666c <USBD_CtlError>
          break;
 8005cd2:	e004      	b.n	8005cde <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005cd4:	6839      	ldr	r1, [r7, #0]
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fcc8 	bl	800666c <USBD_CtlError>
          break;
 8005cdc:	e000      	b.n	8005ce0 <USBD_StdItfReq+0x7c>
          break;
 8005cde:	bf00      	nop
      }
      break;
 8005ce0:	e004      	b.n	8005cec <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005ce2:	6839      	ldr	r1, [r7, #0]
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fcc1 	bl	800666c <USBD_CtlError>
      break;
 8005cea:	bf00      	nop
  }

  return ret;
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b084      	sub	sp, #16
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	889b      	ldrh	r3, [r3, #4]
 8005d08:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d12:	2b40      	cmp	r3, #64	; 0x40
 8005d14:	d007      	beq.n	8005d26 <USBD_StdEPReq+0x30>
 8005d16:	2b40      	cmp	r3, #64	; 0x40
 8005d18:	f200 8145 	bhi.w	8005fa6 <USBD_StdEPReq+0x2b0>
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00c      	beq.n	8005d3a <USBD_StdEPReq+0x44>
 8005d20:	2b20      	cmp	r3, #32
 8005d22:	f040 8140 	bne.w	8005fa6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	6839      	ldr	r1, [r7, #0]
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	4798      	blx	r3
 8005d34:	4603      	mov	r3, r0
 8005d36:	73fb      	strb	r3, [r7, #15]
      break;
 8005d38:	e13a      	b.n	8005fb0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	785b      	ldrb	r3, [r3, #1]
 8005d3e:	2b03      	cmp	r3, #3
 8005d40:	d007      	beq.n	8005d52 <USBD_StdEPReq+0x5c>
 8005d42:	2b03      	cmp	r3, #3
 8005d44:	f300 8129 	bgt.w	8005f9a <USBD_StdEPReq+0x2a4>
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d07f      	beq.n	8005e4c <USBD_StdEPReq+0x156>
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d03c      	beq.n	8005dca <USBD_StdEPReq+0xd4>
 8005d50:	e123      	b.n	8005f9a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d002      	beq.n	8005d64 <USBD_StdEPReq+0x6e>
 8005d5e:	2b03      	cmp	r3, #3
 8005d60:	d016      	beq.n	8005d90 <USBD_StdEPReq+0x9a>
 8005d62:	e02c      	b.n	8005dbe <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d64:	7bbb      	ldrb	r3, [r7, #14]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00d      	beq.n	8005d86 <USBD_StdEPReq+0x90>
 8005d6a:	7bbb      	ldrb	r3, [r7, #14]
 8005d6c:	2b80      	cmp	r3, #128	; 0x80
 8005d6e:	d00a      	beq.n	8005d86 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005d70:	7bbb      	ldrb	r3, [r7, #14]
 8005d72:	4619      	mov	r1, r3
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f001 fa05 	bl	8007184 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d7a:	2180      	movs	r1, #128	; 0x80
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f001 fa01 	bl	8007184 <USBD_LL_StallEP>
 8005d82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005d84:	e020      	b.n	8005dc8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005d86:	6839      	ldr	r1, [r7, #0]
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 fc6f 	bl	800666c <USBD_CtlError>
              break;
 8005d8e:	e01b      	b.n	8005dc8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	885b      	ldrh	r3, [r3, #2]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10e      	bne.n	8005db6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005d98:	7bbb      	ldrb	r3, [r7, #14]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00b      	beq.n	8005db6 <USBD_StdEPReq+0xc0>
 8005d9e:	7bbb      	ldrb	r3, [r7, #14]
 8005da0:	2b80      	cmp	r3, #128	; 0x80
 8005da2:	d008      	beq.n	8005db6 <USBD_StdEPReq+0xc0>
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	88db      	ldrh	r3, [r3, #6]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d104      	bne.n	8005db6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005dac:	7bbb      	ldrb	r3, [r7, #14]
 8005dae:	4619      	mov	r1, r3
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f001 f9e7 	bl	8007184 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fd23 	bl	8006802 <USBD_CtlSendStatus>

              break;
 8005dbc:	e004      	b.n	8005dc8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005dbe:	6839      	ldr	r1, [r7, #0]
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 fc53 	bl	800666c <USBD_CtlError>
              break;
 8005dc6:	bf00      	nop
          }
          break;
 8005dc8:	e0ec      	b.n	8005fa4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d002      	beq.n	8005ddc <USBD_StdEPReq+0xe6>
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	d016      	beq.n	8005e08 <USBD_StdEPReq+0x112>
 8005dda:	e030      	b.n	8005e3e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ddc:	7bbb      	ldrb	r3, [r7, #14]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00d      	beq.n	8005dfe <USBD_StdEPReq+0x108>
 8005de2:	7bbb      	ldrb	r3, [r7, #14]
 8005de4:	2b80      	cmp	r3, #128	; 0x80
 8005de6:	d00a      	beq.n	8005dfe <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005de8:	7bbb      	ldrb	r3, [r7, #14]
 8005dea:	4619      	mov	r1, r3
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f001 f9c9 	bl	8007184 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005df2:	2180      	movs	r1, #128	; 0x80
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f001 f9c5 	bl	8007184 <USBD_LL_StallEP>
 8005dfa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005dfc:	e025      	b.n	8005e4a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005dfe:	6839      	ldr	r1, [r7, #0]
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 fc33 	bl	800666c <USBD_CtlError>
              break;
 8005e06:	e020      	b.n	8005e4a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	885b      	ldrh	r3, [r3, #2]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d11b      	bne.n	8005e48 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005e10:	7bbb      	ldrb	r3, [r7, #14]
 8005e12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d004      	beq.n	8005e24 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005e1a:	7bbb      	ldrb	r3, [r7, #14]
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f001 f9e6 	bl	80071f0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fcec 	bl	8006802 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	6839      	ldr	r1, [r7, #0]
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	4798      	blx	r3
 8005e38:	4603      	mov	r3, r0
 8005e3a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005e3c:	e004      	b.n	8005e48 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005e3e:	6839      	ldr	r1, [r7, #0]
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 fc13 	bl	800666c <USBD_CtlError>
              break;
 8005e46:	e000      	b.n	8005e4a <USBD_StdEPReq+0x154>
              break;
 8005e48:	bf00      	nop
          }
          break;
 8005e4a:	e0ab      	b.n	8005fa4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d002      	beq.n	8005e5e <USBD_StdEPReq+0x168>
 8005e58:	2b03      	cmp	r3, #3
 8005e5a:	d032      	beq.n	8005ec2 <USBD_StdEPReq+0x1cc>
 8005e5c:	e097      	b.n	8005f8e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e5e:	7bbb      	ldrb	r3, [r7, #14]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d007      	beq.n	8005e74 <USBD_StdEPReq+0x17e>
 8005e64:	7bbb      	ldrb	r3, [r7, #14]
 8005e66:	2b80      	cmp	r3, #128	; 0x80
 8005e68:	d004      	beq.n	8005e74 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005e6a:	6839      	ldr	r1, [r7, #0]
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fbfd 	bl	800666c <USBD_CtlError>
                break;
 8005e72:	e091      	b.n	8005f98 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	da0b      	bge.n	8005e94 <USBD_StdEPReq+0x19e>
 8005e7c:	7bbb      	ldrb	r3, [r7, #14]
 8005e7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e82:	4613      	mov	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	3310      	adds	r3, #16
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	4413      	add	r3, r2
 8005e90:	3304      	adds	r3, #4
 8005e92:	e00b      	b.n	8005eac <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005e94:	7bbb      	ldrb	r3, [r7, #14]
 8005e96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4413      	add	r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	3304      	adds	r3, #4
 8005eac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	4619      	mov	r1, r3
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fc47 	bl	800674e <USBD_CtlSendData>
              break;
 8005ec0:	e06a      	b.n	8005f98 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005ec2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	da11      	bge.n	8005eee <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005eca:	7bbb      	ldrb	r3, [r7, #14]
 8005ecc:	f003 020f 	and.w	r2, r3, #15
 8005ed0:	6879      	ldr	r1, [r7, #4]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	440b      	add	r3, r1
 8005edc:	3324      	adds	r3, #36	; 0x24
 8005ede:	881b      	ldrh	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d117      	bne.n	8005f14 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005ee4:	6839      	ldr	r1, [r7, #0]
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 fbc0 	bl	800666c <USBD_CtlError>
                  break;
 8005eec:	e054      	b.n	8005f98 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005eee:	7bbb      	ldrb	r3, [r7, #14]
 8005ef0:	f003 020f 	and.w	r2, r3, #15
 8005ef4:	6879      	ldr	r1, [r7, #4]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	440b      	add	r3, r1
 8005f00:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005f04:	881b      	ldrh	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d104      	bne.n	8005f14 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005f0a:	6839      	ldr	r1, [r7, #0]
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fbad 	bl	800666c <USBD_CtlError>
                  break;
 8005f12:	e041      	b.n	8005f98 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	da0b      	bge.n	8005f34 <USBD_StdEPReq+0x23e>
 8005f1c:	7bbb      	ldrb	r3, [r7, #14]
 8005f1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f22:	4613      	mov	r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	3310      	adds	r3, #16
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	4413      	add	r3, r2
 8005f30:	3304      	adds	r3, #4
 8005f32:	e00b      	b.n	8005f4c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005f34:	7bbb      	ldrb	r3, [r7, #14]
 8005f36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	4413      	add	r3, r2
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005f4e:	7bbb      	ldrb	r3, [r7, #14]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d002      	beq.n	8005f5a <USBD_StdEPReq+0x264>
 8005f54:	7bbb      	ldrb	r3, [r7, #14]
 8005f56:	2b80      	cmp	r3, #128	; 0x80
 8005f58:	d103      	bne.n	8005f62 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	e00e      	b.n	8005f80 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005f62:	7bbb      	ldrb	r3, [r7, #14]
 8005f64:	4619      	mov	r1, r3
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f001 f978 	bl	800725c <USBD_LL_IsStallEP>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	2201      	movs	r2, #1
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	e002      	b.n	8005f80 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2202      	movs	r2, #2
 8005f84:	4619      	mov	r1, r3
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fbe1 	bl	800674e <USBD_CtlSendData>
              break;
 8005f8c:	e004      	b.n	8005f98 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005f8e:	6839      	ldr	r1, [r7, #0]
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fb6b 	bl	800666c <USBD_CtlError>
              break;
 8005f96:	bf00      	nop
          }
          break;
 8005f98:	e004      	b.n	8005fa4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005f9a:	6839      	ldr	r1, [r7, #0]
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 fb65 	bl	800666c <USBD_CtlError>
          break;
 8005fa2:	bf00      	nop
      }
      break;
 8005fa4:	e004      	b.n	8005fb0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005fa6:	6839      	ldr	r1, [r7, #0]
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 fb5f 	bl	800666c <USBD_CtlError>
      break;
 8005fae:	bf00      	nop
  }

  return ret;
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
	...

08005fbc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	885b      	ldrh	r3, [r3, #2]
 8005fd6:	0a1b      	lsrs	r3, r3, #8
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	2b0e      	cmp	r3, #14
 8005fde:	f200 8152 	bhi.w	8006286 <USBD_GetDescriptor+0x2ca>
 8005fe2:	a201      	add	r2, pc, #4	; (adr r2, 8005fe8 <USBD_GetDescriptor+0x2c>)
 8005fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe8:	08006059 	.word	0x08006059
 8005fec:	08006071 	.word	0x08006071
 8005ff0:	080060b1 	.word	0x080060b1
 8005ff4:	08006287 	.word	0x08006287
 8005ff8:	08006287 	.word	0x08006287
 8005ffc:	08006227 	.word	0x08006227
 8006000:	08006253 	.word	0x08006253
 8006004:	08006287 	.word	0x08006287
 8006008:	08006287 	.word	0x08006287
 800600c:	08006287 	.word	0x08006287
 8006010:	08006287 	.word	0x08006287
 8006014:	08006287 	.word	0x08006287
 8006018:	08006287 	.word	0x08006287
 800601c:	08006287 	.word	0x08006287
 8006020:	08006025 	.word	0x08006025
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00b      	beq.n	8006048 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006036:	69db      	ldr	r3, [r3, #28]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	7c12      	ldrb	r2, [r2, #16]
 800603c:	f107 0108 	add.w	r1, r7, #8
 8006040:	4610      	mov	r0, r2
 8006042:	4798      	blx	r3
 8006044:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006046:	e126      	b.n	8006296 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006048:	6839      	ldr	r1, [r7, #0]
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fb0e 	bl	800666c <USBD_CtlError>
        err++;
 8006050:	7afb      	ldrb	r3, [r7, #11]
 8006052:	3301      	adds	r3, #1
 8006054:	72fb      	strb	r3, [r7, #11]
      break;
 8006056:	e11e      	b.n	8006296 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	7c12      	ldrb	r2, [r2, #16]
 8006064:	f107 0108 	add.w	r1, r7, #8
 8006068:	4610      	mov	r0, r2
 800606a:	4798      	blx	r3
 800606c:	60f8      	str	r0, [r7, #12]
      break;
 800606e:	e112      	b.n	8006296 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	7c1b      	ldrb	r3, [r3, #16]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10d      	bne.n	8006094 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800607e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006080:	f107 0208 	add.w	r2, r7, #8
 8006084:	4610      	mov	r0, r2
 8006086:	4798      	blx	r3
 8006088:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	3301      	adds	r3, #1
 800608e:	2202      	movs	r2, #2
 8006090:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006092:	e100      	b.n	8006296 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800609a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609c:	f107 0208 	add.w	r2, r7, #8
 80060a0:	4610      	mov	r0, r2
 80060a2:	4798      	blx	r3
 80060a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	3301      	adds	r3, #1
 80060aa:	2202      	movs	r2, #2
 80060ac:	701a      	strb	r2, [r3, #0]
      break;
 80060ae:	e0f2      	b.n	8006296 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	885b      	ldrh	r3, [r3, #2]
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b05      	cmp	r3, #5
 80060b8:	f200 80ac 	bhi.w	8006214 <USBD_GetDescriptor+0x258>
 80060bc:	a201      	add	r2, pc, #4	; (adr r2, 80060c4 <USBD_GetDescriptor+0x108>)
 80060be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c2:	bf00      	nop
 80060c4:	080060dd 	.word	0x080060dd
 80060c8:	08006111 	.word	0x08006111
 80060cc:	08006145 	.word	0x08006145
 80060d0:	08006179 	.word	0x08006179
 80060d4:	080061ad 	.word	0x080061ad
 80060d8:	080061e1 	.word	0x080061e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00b      	beq.n	8006100 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	7c12      	ldrb	r2, [r2, #16]
 80060f4:	f107 0108 	add.w	r1, r7, #8
 80060f8:	4610      	mov	r0, r2
 80060fa:	4798      	blx	r3
 80060fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80060fe:	e091      	b.n	8006224 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006100:	6839      	ldr	r1, [r7, #0]
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 fab2 	bl	800666c <USBD_CtlError>
            err++;
 8006108:	7afb      	ldrb	r3, [r7, #11]
 800610a:	3301      	adds	r3, #1
 800610c:	72fb      	strb	r3, [r7, #11]
          break;
 800610e:	e089      	b.n	8006224 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00b      	beq.n	8006134 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	7c12      	ldrb	r2, [r2, #16]
 8006128:	f107 0108 	add.w	r1, r7, #8
 800612c:	4610      	mov	r0, r2
 800612e:	4798      	blx	r3
 8006130:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006132:	e077      	b.n	8006224 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006134:	6839      	ldr	r1, [r7, #0]
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 fa98 	bl	800666c <USBD_CtlError>
            err++;
 800613c:	7afb      	ldrb	r3, [r7, #11]
 800613e:	3301      	adds	r3, #1
 8006140:	72fb      	strb	r3, [r7, #11]
          break;
 8006142:	e06f      	b.n	8006224 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00b      	beq.n	8006168 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	7c12      	ldrb	r2, [r2, #16]
 800615c:	f107 0108 	add.w	r1, r7, #8
 8006160:	4610      	mov	r0, r2
 8006162:	4798      	blx	r3
 8006164:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006166:	e05d      	b.n	8006224 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006168:	6839      	ldr	r1, [r7, #0]
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fa7e 	bl	800666c <USBD_CtlError>
            err++;
 8006170:	7afb      	ldrb	r3, [r7, #11]
 8006172:	3301      	adds	r3, #1
 8006174:	72fb      	strb	r3, [r7, #11]
          break;
 8006176:	e055      	b.n	8006224 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00b      	beq.n	800619c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	7c12      	ldrb	r2, [r2, #16]
 8006190:	f107 0108 	add.w	r1, r7, #8
 8006194:	4610      	mov	r0, r2
 8006196:	4798      	blx	r3
 8006198:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800619a:	e043      	b.n	8006224 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800619c:	6839      	ldr	r1, [r7, #0]
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fa64 	bl	800666c <USBD_CtlError>
            err++;
 80061a4:	7afb      	ldrb	r3, [r7, #11]
 80061a6:	3301      	adds	r3, #1
 80061a8:	72fb      	strb	r3, [r7, #11]
          break;
 80061aa:	e03b      	b.n	8006224 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061b2:	695b      	ldr	r3, [r3, #20]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00b      	beq.n	80061d0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	7c12      	ldrb	r2, [r2, #16]
 80061c4:	f107 0108 	add.w	r1, r7, #8
 80061c8:	4610      	mov	r0, r2
 80061ca:	4798      	blx	r3
 80061cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061ce:	e029      	b.n	8006224 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80061d0:	6839      	ldr	r1, [r7, #0]
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fa4a 	bl	800666c <USBD_CtlError>
            err++;
 80061d8:	7afb      	ldrb	r3, [r7, #11]
 80061da:	3301      	adds	r3, #1
 80061dc:	72fb      	strb	r3, [r7, #11]
          break;
 80061de:	e021      	b.n	8006224 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00b      	beq.n	8006204 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	7c12      	ldrb	r2, [r2, #16]
 80061f8:	f107 0108 	add.w	r1, r7, #8
 80061fc:	4610      	mov	r0, r2
 80061fe:	4798      	blx	r3
 8006200:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006202:	e00f      	b.n	8006224 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006204:	6839      	ldr	r1, [r7, #0]
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 fa30 	bl	800666c <USBD_CtlError>
            err++;
 800620c:	7afb      	ldrb	r3, [r7, #11]
 800620e:	3301      	adds	r3, #1
 8006210:	72fb      	strb	r3, [r7, #11]
          break;
 8006212:	e007      	b.n	8006224 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006214:	6839      	ldr	r1, [r7, #0]
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fa28 	bl	800666c <USBD_CtlError>
          err++;
 800621c:	7afb      	ldrb	r3, [r7, #11]
 800621e:	3301      	adds	r3, #1
 8006220:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006222:	bf00      	nop
      }
      break;
 8006224:	e037      	b.n	8006296 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	7c1b      	ldrb	r3, [r3, #16]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d109      	bne.n	8006242 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006236:	f107 0208 	add.w	r2, r7, #8
 800623a:	4610      	mov	r0, r2
 800623c:	4798      	blx	r3
 800623e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006240:	e029      	b.n	8006296 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006242:	6839      	ldr	r1, [r7, #0]
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fa11 	bl	800666c <USBD_CtlError>
        err++;
 800624a:	7afb      	ldrb	r3, [r7, #11]
 800624c:	3301      	adds	r3, #1
 800624e:	72fb      	strb	r3, [r7, #11]
      break;
 8006250:	e021      	b.n	8006296 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	7c1b      	ldrb	r3, [r3, #16]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10d      	bne.n	8006276 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006262:	f107 0208 	add.w	r2, r7, #8
 8006266:	4610      	mov	r0, r2
 8006268:	4798      	blx	r3
 800626a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	3301      	adds	r3, #1
 8006270:	2207      	movs	r2, #7
 8006272:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006274:	e00f      	b.n	8006296 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006276:	6839      	ldr	r1, [r7, #0]
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 f9f7 	bl	800666c <USBD_CtlError>
        err++;
 800627e:	7afb      	ldrb	r3, [r7, #11]
 8006280:	3301      	adds	r3, #1
 8006282:	72fb      	strb	r3, [r7, #11]
      break;
 8006284:	e007      	b.n	8006296 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006286:	6839      	ldr	r1, [r7, #0]
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 f9ef 	bl	800666c <USBD_CtlError>
      err++;
 800628e:	7afb      	ldrb	r3, [r7, #11]
 8006290:	3301      	adds	r3, #1
 8006292:	72fb      	strb	r3, [r7, #11]
      break;
 8006294:	bf00      	nop
  }

  if (err != 0U)
 8006296:	7afb      	ldrb	r3, [r7, #11]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d11e      	bne.n	80062da <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	88db      	ldrh	r3, [r3, #6]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d016      	beq.n	80062d2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80062a4:	893b      	ldrh	r3, [r7, #8]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00e      	beq.n	80062c8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	88da      	ldrh	r2, [r3, #6]
 80062ae:	893b      	ldrh	r3, [r7, #8]
 80062b0:	4293      	cmp	r3, r2
 80062b2:	bf28      	it	cs
 80062b4:	4613      	movcs	r3, r2
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80062ba:	893b      	ldrh	r3, [r7, #8]
 80062bc:	461a      	mov	r2, r3
 80062be:	68f9      	ldr	r1, [r7, #12]
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fa44 	bl	800674e <USBD_CtlSendData>
 80062c6:	e009      	b.n	80062dc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80062c8:	6839      	ldr	r1, [r7, #0]
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f9ce 	bl	800666c <USBD_CtlError>
 80062d0:	e004      	b.n	80062dc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 fa95 	bl	8006802 <USBD_CtlSendStatus>
 80062d8:	e000      	b.n	80062dc <USBD_GetDescriptor+0x320>
    return;
 80062da:	bf00      	nop
  }
}
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop

080062e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	889b      	ldrh	r3, [r3, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d131      	bne.n	800635a <USBD_SetAddress+0x76>
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	88db      	ldrh	r3, [r3, #6]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d12d      	bne.n	800635a <USBD_SetAddress+0x76>
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	885b      	ldrh	r3, [r3, #2]
 8006302:	2b7f      	cmp	r3, #127	; 0x7f
 8006304:	d829      	bhi.n	800635a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	885b      	ldrh	r3, [r3, #2]
 800630a:	b2db      	uxtb	r3, r3
 800630c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006310:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b03      	cmp	r3, #3
 800631c:	d104      	bne.n	8006328 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800631e:	6839      	ldr	r1, [r7, #0]
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 f9a3 	bl	800666c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006326:	e01d      	b.n	8006364 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	7bfa      	ldrb	r2, [r7, #15]
 800632c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006330:	7bfb      	ldrb	r3, [r7, #15]
 8006332:	4619      	mov	r1, r3
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 ffbd 	bl	80072b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fa61 	bl	8006802 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006340:	7bfb      	ldrb	r3, [r7, #15]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d004      	beq.n	8006350 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2202      	movs	r2, #2
 800634a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800634e:	e009      	b.n	8006364 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006358:	e004      	b.n	8006364 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800635a:	6839      	ldr	r1, [r7, #0]
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 f985 	bl	800666c <USBD_CtlError>
  }
}
 8006362:	bf00      	nop
 8006364:	bf00      	nop
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006376:	2300      	movs	r3, #0
 8006378:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	885b      	ldrh	r3, [r3, #2]
 800637e:	b2da      	uxtb	r2, r3
 8006380:	4b4c      	ldr	r3, [pc, #304]	; (80064b4 <USBD_SetConfig+0x148>)
 8006382:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006384:	4b4b      	ldr	r3, [pc, #300]	; (80064b4 <USBD_SetConfig+0x148>)
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d905      	bls.n	8006398 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800638c:	6839      	ldr	r1, [r7, #0]
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f96c 	bl	800666c <USBD_CtlError>
    return USBD_FAIL;
 8006394:	2303      	movs	r3, #3
 8006396:	e088      	b.n	80064aa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d002      	beq.n	80063aa <USBD_SetConfig+0x3e>
 80063a4:	2b03      	cmp	r3, #3
 80063a6:	d025      	beq.n	80063f4 <USBD_SetConfig+0x88>
 80063a8:	e071      	b.n	800648e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80063aa:	4b42      	ldr	r3, [pc, #264]	; (80064b4 <USBD_SetConfig+0x148>)
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d01c      	beq.n	80063ec <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80063b2:	4b40      	ldr	r3, [pc, #256]	; (80064b4 <USBD_SetConfig+0x148>)
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	461a      	mov	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80063bc:	4b3d      	ldr	r3, [pc, #244]	; (80064b4 <USBD_SetConfig+0x148>)
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	4619      	mov	r1, r3
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7ff f91e 	bl	8005604 <USBD_SetClassConfig>
 80063c8:	4603      	mov	r3, r0
 80063ca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d004      	beq.n	80063dc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80063d2:	6839      	ldr	r1, [r7, #0]
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 f949 	bl	800666c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80063da:	e065      	b.n	80064a8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fa10 	bl	8006802 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2203      	movs	r2, #3
 80063e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80063ea:	e05d      	b.n	80064a8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 fa08 	bl	8006802 <USBD_CtlSendStatus>
      break;
 80063f2:	e059      	b.n	80064a8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80063f4:	4b2f      	ldr	r3, [pc, #188]	; (80064b4 <USBD_SetConfig+0x148>)
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d112      	bne.n	8006422 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006404:	4b2b      	ldr	r3, [pc, #172]	; (80064b4 <USBD_SetConfig+0x148>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	461a      	mov	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800640e:	4b29      	ldr	r3, [pc, #164]	; (80064b4 <USBD_SetConfig+0x148>)
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	4619      	mov	r1, r3
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7ff f911 	bl	800563c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 f9f1 	bl	8006802 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006420:	e042      	b.n	80064a8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006422:	4b24      	ldr	r3, [pc, #144]	; (80064b4 <USBD_SetConfig+0x148>)
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	461a      	mov	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	429a      	cmp	r2, r3
 800642e:	d02a      	beq.n	8006486 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	b2db      	uxtb	r3, r3
 8006436:	4619      	mov	r1, r3
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f7ff f8ff 	bl	800563c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800643e:	4b1d      	ldr	r3, [pc, #116]	; (80064b4 <USBD_SetConfig+0x148>)
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	461a      	mov	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006448:	4b1a      	ldr	r3, [pc, #104]	; (80064b4 <USBD_SetConfig+0x148>)
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	4619      	mov	r1, r3
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7ff f8d8 	bl	8005604 <USBD_SetClassConfig>
 8006454:	4603      	mov	r3, r0
 8006456:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006458:	7bfb      	ldrb	r3, [r7, #15]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00f      	beq.n	800647e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800645e:	6839      	ldr	r1, [r7, #0]
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f903 	bl	800666c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	b2db      	uxtb	r3, r3
 800646c:	4619      	mov	r1, r3
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7ff f8e4 	bl	800563c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2202      	movs	r2, #2
 8006478:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800647c:	e014      	b.n	80064a8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f9bf 	bl	8006802 <USBD_CtlSendStatus>
      break;
 8006484:	e010      	b.n	80064a8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f9bb 	bl	8006802 <USBD_CtlSendStatus>
      break;
 800648c:	e00c      	b.n	80064a8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800648e:	6839      	ldr	r1, [r7, #0]
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f8eb 	bl	800666c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006496:	4b07      	ldr	r3, [pc, #28]	; (80064b4 <USBD_SetConfig+0x148>)
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	4619      	mov	r1, r3
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f7ff f8cd 	bl	800563c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80064a2:	2303      	movs	r3, #3
 80064a4:	73fb      	strb	r3, [r7, #15]
      break;
 80064a6:	bf00      	nop
  }

  return ret;
 80064a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	200001b0 	.word	0x200001b0

080064b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	88db      	ldrh	r3, [r3, #6]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d004      	beq.n	80064d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80064ca:	6839      	ldr	r1, [r7, #0]
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 f8cd 	bl	800666c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80064d2:	e023      	b.n	800651c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b02      	cmp	r3, #2
 80064de:	dc02      	bgt.n	80064e6 <USBD_GetConfig+0x2e>
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	dc03      	bgt.n	80064ec <USBD_GetConfig+0x34>
 80064e4:	e015      	b.n	8006512 <USBD_GetConfig+0x5a>
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	d00b      	beq.n	8006502 <USBD_GetConfig+0x4a>
 80064ea:	e012      	b.n	8006512 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	3308      	adds	r3, #8
 80064f6:	2201      	movs	r2, #1
 80064f8:	4619      	mov	r1, r3
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f927 	bl	800674e <USBD_CtlSendData>
        break;
 8006500:	e00c      	b.n	800651c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	3304      	adds	r3, #4
 8006506:	2201      	movs	r2, #1
 8006508:	4619      	mov	r1, r3
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f91f 	bl	800674e <USBD_CtlSendData>
        break;
 8006510:	e004      	b.n	800651c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006512:	6839      	ldr	r1, [r7, #0]
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f8a9 	bl	800666c <USBD_CtlError>
        break;
 800651a:	bf00      	nop
}
 800651c:	bf00      	nop
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006534:	b2db      	uxtb	r3, r3
 8006536:	3b01      	subs	r3, #1
 8006538:	2b02      	cmp	r3, #2
 800653a:	d81e      	bhi.n	800657a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	88db      	ldrh	r3, [r3, #6]
 8006540:	2b02      	cmp	r3, #2
 8006542:	d004      	beq.n	800654e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f890 	bl	800666c <USBD_CtlError>
        break;
 800654c:	e01a      	b.n	8006584 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800655a:	2b00      	cmp	r3, #0
 800655c:	d005      	beq.n	800656a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	f043 0202 	orr.w	r2, r3, #2
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	330c      	adds	r3, #12
 800656e:	2202      	movs	r2, #2
 8006570:	4619      	mov	r1, r3
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f8eb 	bl	800674e <USBD_CtlSendData>
      break;
 8006578:	e004      	b.n	8006584 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800657a:	6839      	ldr	r1, [r7, #0]
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 f875 	bl	800666c <USBD_CtlError>
      break;
 8006582:	bf00      	nop
  }
}
 8006584:	bf00      	nop
 8006586:	3708      	adds	r7, #8
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	885b      	ldrh	r3, [r3, #2]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d106      	bne.n	80065ac <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f92b 	bl	8006802 <USBD_CtlSendStatus>
  }
}
 80065ac:	bf00      	nop
 80065ae:	3708      	adds	r7, #8
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	3b01      	subs	r3, #1
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d80b      	bhi.n	80065e4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	885b      	ldrh	r3, [r3, #2]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d10c      	bne.n	80065ee <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f910 	bl	8006802 <USBD_CtlSendStatus>
      }
      break;
 80065e2:	e004      	b.n	80065ee <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80065e4:	6839      	ldr	r1, [r7, #0]
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f840 	bl	800666c <USBD_CtlError>
      break;
 80065ec:	e000      	b.n	80065f0 <USBD_ClrFeature+0x3c>
      break;
 80065ee:	bf00      	nop
  }
}
 80065f0:	bf00      	nop
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	781a      	ldrb	r2, [r3, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	3301      	adds	r3, #1
 8006612:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	781a      	ldrb	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	3301      	adds	r3, #1
 8006620:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f7ff fa91 	bl	8005b4a <SWAPBYTE>
 8006628:	4603      	mov	r3, r0
 800662a:	461a      	mov	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	3301      	adds	r3, #1
 8006634:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	3301      	adds	r3, #1
 800663a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f7ff fa84 	bl	8005b4a <SWAPBYTE>
 8006642:	4603      	mov	r3, r0
 8006644:	461a      	mov	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	3301      	adds	r3, #1
 800664e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	3301      	adds	r3, #1
 8006654:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f7ff fa77 	bl	8005b4a <SWAPBYTE>
 800665c:	4603      	mov	r3, r0
 800665e:	461a      	mov	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	80da      	strh	r2, [r3, #6]
}
 8006664:	bf00      	nop
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006676:	2180      	movs	r1, #128	; 0x80
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 fd83 	bl	8007184 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800667e:	2100      	movs	r1, #0
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fd7f 	bl	8007184 <USBD_LL_StallEP>
}
 8006686:	bf00      	nop
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b086      	sub	sp, #24
 8006692:	af00      	add	r7, sp, #0
 8006694:	60f8      	str	r0, [r7, #12]
 8006696:	60b9      	str	r1, [r7, #8]
 8006698:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800669a:	2300      	movs	r3, #0
 800669c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d036      	beq.n	8006712 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80066a8:	6938      	ldr	r0, [r7, #16]
 80066aa:	f000 f836 	bl	800671a <USBD_GetLen>
 80066ae:	4603      	mov	r3, r0
 80066b0:	3301      	adds	r3, #1
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	005b      	lsls	r3, r3, #1
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80066bc:	7dfb      	ldrb	r3, [r7, #23]
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	4413      	add	r3, r2
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	7812      	ldrb	r2, [r2, #0]
 80066c6:	701a      	strb	r2, [r3, #0]
  idx++;
 80066c8:	7dfb      	ldrb	r3, [r7, #23]
 80066ca:	3301      	adds	r3, #1
 80066cc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80066ce:	7dfb      	ldrb	r3, [r7, #23]
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	4413      	add	r3, r2
 80066d4:	2203      	movs	r2, #3
 80066d6:	701a      	strb	r2, [r3, #0]
  idx++;
 80066d8:	7dfb      	ldrb	r3, [r7, #23]
 80066da:	3301      	adds	r3, #1
 80066dc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80066de:	e013      	b.n	8006708 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80066e0:	7dfb      	ldrb	r3, [r7, #23]
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	4413      	add	r3, r2
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	7812      	ldrb	r2, [r2, #0]
 80066ea:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	3301      	adds	r3, #1
 80066f0:	613b      	str	r3, [r7, #16]
    idx++;
 80066f2:	7dfb      	ldrb	r3, [r7, #23]
 80066f4:	3301      	adds	r3, #1
 80066f6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	4413      	add	r3, r2
 80066fe:	2200      	movs	r2, #0
 8006700:	701a      	strb	r2, [r3, #0]
    idx++;
 8006702:	7dfb      	ldrb	r3, [r7, #23]
 8006704:	3301      	adds	r3, #1
 8006706:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1e7      	bne.n	80066e0 <USBD_GetString+0x52>
 8006710:	e000      	b.n	8006714 <USBD_GetString+0x86>
    return;
 8006712:	bf00      	nop
  }
}
 8006714:	3718      	adds	r7, #24
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800671a:	b480      	push	{r7}
 800671c:	b085      	sub	sp, #20
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006722:	2300      	movs	r3, #0
 8006724:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800672a:	e005      	b.n	8006738 <USBD_GetLen+0x1e>
  {
    len++;
 800672c:	7bfb      	ldrb	r3, [r7, #15]
 800672e:	3301      	adds	r3, #1
 8006730:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	3301      	adds	r3, #1
 8006736:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1f5      	bne.n	800672c <USBD_GetLen+0x12>
  }

  return len;
 8006740:	7bfb      	ldrb	r3, [r7, #15]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b084      	sub	sp, #16
 8006752:	af00      	add	r7, sp, #0
 8006754:	60f8      	str	r0, [r7, #12]
 8006756:	60b9      	str	r1, [r7, #8]
 8006758:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2202      	movs	r2, #2
 800675e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68ba      	ldr	r2, [r7, #8]
 8006772:	2100      	movs	r1, #0
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f000 fdd3 	bl	8007320 <USBD_LL_Transmit>

  return USBD_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	2100      	movs	r1, #0
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f000 fdc2 	bl	8007320 <USBD_LL_Transmit>

  return USBD_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b084      	sub	sp, #16
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	60f8      	str	r0, [r7, #12]
 80067ae:	60b9      	str	r1, [r7, #8]
 80067b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2203      	movs	r2, #3
 80067b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	2100      	movs	r1, #0
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f000 fddd 	bl	8007390 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	2100      	movs	r1, #0
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f000 fdcc 	bl	8007390 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b082      	sub	sp, #8
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2204      	movs	r2, #4
 800680e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006812:	2300      	movs	r3, #0
 8006814:	2200      	movs	r2, #0
 8006816:	2100      	movs	r1, #0
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 fd81 	bl	8007320 <USBD_LL_Transmit>

  return USBD_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2205      	movs	r2, #5
 8006834:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006838:	2300      	movs	r3, #0
 800683a:	2200      	movs	r2, #0
 800683c:	2100      	movs	r1, #0
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fda6 	bl	8007390 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3708      	adds	r7, #8
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
	...

08006850 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006854:	2200      	movs	r2, #0
 8006856:	4912      	ldr	r1, [pc, #72]	; (80068a0 <MX_USB_DEVICE_Init+0x50>)
 8006858:	4812      	ldr	r0, [pc, #72]	; (80068a4 <MX_USB_DEVICE_Init+0x54>)
 800685a:	f7fe fe65 	bl	8005528 <USBD_Init>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d001      	beq.n	8006868 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006864:	f7f9 fd60 	bl	8000328 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006868:	490f      	ldr	r1, [pc, #60]	; (80068a8 <MX_USB_DEVICE_Init+0x58>)
 800686a:	480e      	ldr	r0, [pc, #56]	; (80068a4 <MX_USB_DEVICE_Init+0x54>)
 800686c:	f7fe fe8c 	bl	8005588 <USBD_RegisterClass>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006876:	f7f9 fd57 	bl	8000328 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800687a:	490c      	ldr	r1, [pc, #48]	; (80068ac <MX_USB_DEVICE_Init+0x5c>)
 800687c:	4809      	ldr	r0, [pc, #36]	; (80068a4 <MX_USB_DEVICE_Init+0x54>)
 800687e:	f7fe fdad 	bl	80053dc <USBD_CDC_RegisterInterface>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d001      	beq.n	800688c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006888:	f7f9 fd4e 	bl	8000328 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800688c:	4805      	ldr	r0, [pc, #20]	; (80068a4 <MX_USB_DEVICE_Init+0x54>)
 800688e:	f7fe fea2 	bl	80055d6 <USBD_Start>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d001      	beq.n	800689c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006898:	f7f9 fd46 	bl	8000328 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800689c:	bf00      	nop
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	20000130 	.word	0x20000130
 80068a4:	200001b4 	.word	0x200001b4
 80068a8:	20000018 	.word	0x20000018
 80068ac:	2000011c 	.word	0x2000011c

080068b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80068b4:	2200      	movs	r2, #0
 80068b6:	4905      	ldr	r1, [pc, #20]	; (80068cc <CDC_Init_FS+0x1c>)
 80068b8:	4805      	ldr	r0, [pc, #20]	; (80068d0 <CDC_Init_FS+0x20>)
 80068ba:	f7fe fda4 	bl	8005406 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80068be:	4905      	ldr	r1, [pc, #20]	; (80068d4 <CDC_Init_FS+0x24>)
 80068c0:	4803      	ldr	r0, [pc, #12]	; (80068d0 <CDC_Init_FS+0x20>)
 80068c2:	f7fe fdbe 	bl	8005442 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80068c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	20000c84 	.word	0x20000c84
 80068d0:	200001b4 	.word	0x200001b4
 80068d4:	20000484 	.word	0x20000484

080068d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80068d8:	b480      	push	{r7}
 80068da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80068dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80068de:	4618      	mov	r0, r3
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	4603      	mov	r3, r0
 80068f0:	6039      	str	r1, [r7, #0]
 80068f2:	71fb      	strb	r3, [r7, #7]
 80068f4:	4613      	mov	r3, r2
 80068f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80068f8:	79fb      	ldrb	r3, [r7, #7]
 80068fa:	2b23      	cmp	r3, #35	; 0x23
 80068fc:	d84a      	bhi.n	8006994 <CDC_Control_FS+0xac>
 80068fe:	a201      	add	r2, pc, #4	; (adr r2, 8006904 <CDC_Control_FS+0x1c>)
 8006900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006904:	08006995 	.word	0x08006995
 8006908:	08006995 	.word	0x08006995
 800690c:	08006995 	.word	0x08006995
 8006910:	08006995 	.word	0x08006995
 8006914:	08006995 	.word	0x08006995
 8006918:	08006995 	.word	0x08006995
 800691c:	08006995 	.word	0x08006995
 8006920:	08006995 	.word	0x08006995
 8006924:	08006995 	.word	0x08006995
 8006928:	08006995 	.word	0x08006995
 800692c:	08006995 	.word	0x08006995
 8006930:	08006995 	.word	0x08006995
 8006934:	08006995 	.word	0x08006995
 8006938:	08006995 	.word	0x08006995
 800693c:	08006995 	.word	0x08006995
 8006940:	08006995 	.word	0x08006995
 8006944:	08006995 	.word	0x08006995
 8006948:	08006995 	.word	0x08006995
 800694c:	08006995 	.word	0x08006995
 8006950:	08006995 	.word	0x08006995
 8006954:	08006995 	.word	0x08006995
 8006958:	08006995 	.word	0x08006995
 800695c:	08006995 	.word	0x08006995
 8006960:	08006995 	.word	0x08006995
 8006964:	08006995 	.word	0x08006995
 8006968:	08006995 	.word	0x08006995
 800696c:	08006995 	.word	0x08006995
 8006970:	08006995 	.word	0x08006995
 8006974:	08006995 	.word	0x08006995
 8006978:	08006995 	.word	0x08006995
 800697c:	08006995 	.word	0x08006995
 8006980:	08006995 	.word	0x08006995
 8006984:	08006995 	.word	0x08006995
 8006988:	08006995 	.word	0x08006995
 800698c:	08006995 	.word	0x08006995
 8006990:	08006995 	.word	0x08006995
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006994:	bf00      	nop
  }

  return (USBD_OK);
 8006996:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006998:	4618      	mov	r0, r3
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80069ae:	6879      	ldr	r1, [r7, #4]
 80069b0:	480b      	ldr	r0, [pc, #44]	; (80069e0 <CDC_Receive_FS+0x3c>)
 80069b2:	f7fe fd46 	bl	8005442 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80069b6:	480a      	ldr	r0, [pc, #40]	; (80069e0 <CDC_Receive_FS+0x3c>)
 80069b8:	f7fe fd8c 	bl	80054d4 <USBD_CDC_ReceivePacket>
  USB_CDC_RxHandler(UserRxBufferFS, *Len);
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4619      	mov	r1, r3
 80069c2:	4808      	ldr	r0, [pc, #32]	; (80069e4 <CDC_Receive_FS+0x40>)
 80069c4:	f7f9 fc9c 	bl	8000300 <USB_CDC_RxHandler>
  memset(UserRxBufferFS, '\0', *Len);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	461a      	mov	r2, r3
 80069ce:	2100      	movs	r1, #0
 80069d0:	4804      	ldr	r0, [pc, #16]	; (80069e4 <CDC_Receive_FS+0x40>)
 80069d2:	f000 fdb9 	bl	8007548 <memset>
  return (USBD_OK);
 80069d6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	200001b4 	.word	0x200001b4
 80069e4:	20000484 	.word	0x20000484

080069e8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80069f8:	4b0d      	ldr	r3, [pc, #52]	; (8006a30 <CDC_Transmit_FS+0x48>)
 80069fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069fe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e00b      	b.n	8006a26 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006a0e:	887b      	ldrh	r3, [r7, #2]
 8006a10:	461a      	mov	r2, r3
 8006a12:	6879      	ldr	r1, [r7, #4]
 8006a14:	4806      	ldr	r0, [pc, #24]	; (8006a30 <CDC_Transmit_FS+0x48>)
 8006a16:	f7fe fcf6 	bl	8005406 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006a1a:	4805      	ldr	r0, [pc, #20]	; (8006a30 <CDC_Transmit_FS+0x48>)
 8006a1c:	f7fe fd2a 	bl	8005474 <USBD_CDC_TransmitPacket>
 8006a20:	4603      	mov	r3, r0
 8006a22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	200001b4 	.word	0x200001b4

08006a34 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b087      	sub	sp, #28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006a42:	2300      	movs	r3, #0
 8006a44:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006a46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	371c      	adds	r7, #28
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
	...

08006a58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	4603      	mov	r3, r0
 8006a60:	6039      	str	r1, [r7, #0]
 8006a62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	2212      	movs	r2, #18
 8006a68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006a6a:	4b03      	ldr	r3, [pc, #12]	; (8006a78 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr
 8006a78:	20000150 	.word	0x20000150

08006a7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	4603      	mov	r3, r0
 8006a84:	6039      	str	r1, [r7, #0]
 8006a86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	2204      	movs	r2, #4
 8006a8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006a8e:	4b03      	ldr	r3, [pc, #12]	; (8006a9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	20000170 	.word	0x20000170

08006aa0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	6039      	str	r1, [r7, #0]
 8006aaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006aac:	79fb      	ldrb	r3, [r7, #7]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d105      	bne.n	8006abe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	4907      	ldr	r1, [pc, #28]	; (8006ad4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006ab6:	4808      	ldr	r0, [pc, #32]	; (8006ad8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006ab8:	f7ff fde9 	bl	800668e <USBD_GetString>
 8006abc:	e004      	b.n	8006ac8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006abe:	683a      	ldr	r2, [r7, #0]
 8006ac0:	4904      	ldr	r1, [pc, #16]	; (8006ad4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006ac2:	4805      	ldr	r0, [pc, #20]	; (8006ad8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006ac4:	f7ff fde3 	bl	800668e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ac8:	4b02      	ldr	r3, [pc, #8]	; (8006ad4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	20001484 	.word	0x20001484
 8006ad8:	0800757c 	.word	0x0800757c

08006adc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	6039      	str	r1, [r7, #0]
 8006ae6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006ae8:	683a      	ldr	r2, [r7, #0]
 8006aea:	4904      	ldr	r1, [pc, #16]	; (8006afc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006aec:	4804      	ldr	r0, [pc, #16]	; (8006b00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006aee:	f7ff fdce 	bl	800668e <USBD_GetString>
  return USBD_StrDesc;
 8006af2:	4b02      	ldr	r3, [pc, #8]	; (8006afc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3708      	adds	r7, #8
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	20001484 	.word	0x20001484
 8006b00:	08007594 	.word	0x08007594

08006b04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	6039      	str	r1, [r7, #0]
 8006b0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	221a      	movs	r2, #26
 8006b14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006b16:	f000 f855 	bl	8006bc4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006b1a:	4b02      	ldr	r3, [pc, #8]	; (8006b24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	20000174 	.word	0x20000174

08006b28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	4603      	mov	r3, r0
 8006b30:	6039      	str	r1, [r7, #0]
 8006b32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006b34:	79fb      	ldrb	r3, [r7, #7]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d105      	bne.n	8006b46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b3a:	683a      	ldr	r2, [r7, #0]
 8006b3c:	4907      	ldr	r1, [pc, #28]	; (8006b5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006b3e:	4808      	ldr	r0, [pc, #32]	; (8006b60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006b40:	f7ff fda5 	bl	800668e <USBD_GetString>
 8006b44:	e004      	b.n	8006b50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	4904      	ldr	r1, [pc, #16]	; (8006b5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006b4a:	4805      	ldr	r0, [pc, #20]	; (8006b60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006b4c:	f7ff fd9f 	bl	800668e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b50:	4b02      	ldr	r3, [pc, #8]	; (8006b5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3708      	adds	r7, #8
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	20001484 	.word	0x20001484
 8006b60:	0800759c 	.word	0x0800759c

08006b64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	6039      	str	r1, [r7, #0]
 8006b6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006b70:	79fb      	ldrb	r3, [r7, #7]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d105      	bne.n	8006b82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	4907      	ldr	r1, [pc, #28]	; (8006b98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006b7a:	4808      	ldr	r0, [pc, #32]	; (8006b9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006b7c:	f7ff fd87 	bl	800668e <USBD_GetString>
 8006b80:	e004      	b.n	8006b8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006b82:	683a      	ldr	r2, [r7, #0]
 8006b84:	4904      	ldr	r1, [pc, #16]	; (8006b98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006b86:	4805      	ldr	r0, [pc, #20]	; (8006b9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006b88:	f7ff fd81 	bl	800668e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b8c:	4b02      	ldr	r3, [pc, #8]	; (8006b98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	20001484 	.word	0x20001484
 8006b9c:	080075a8 	.word	0x080075a8

08006ba0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	6039      	str	r1, [r7, #0]
 8006baa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	220c      	movs	r2, #12
 8006bb0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8006bb2:	4b03      	ldr	r3, [pc, #12]	; (8006bc0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	20000164 	.word	0x20000164

08006bc4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006bca:	4b0f      	ldr	r3, [pc, #60]	; (8006c08 <Get_SerialNum+0x44>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006bd0:	4b0e      	ldr	r3, [pc, #56]	; (8006c0c <Get_SerialNum+0x48>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006bd6:	4b0e      	ldr	r3, [pc, #56]	; (8006c10 <Get_SerialNum+0x4c>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4413      	add	r3, r2
 8006be2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d009      	beq.n	8006bfe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006bea:	2208      	movs	r2, #8
 8006bec:	4909      	ldr	r1, [pc, #36]	; (8006c14 <Get_SerialNum+0x50>)
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f000 f814 	bl	8006c1c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006bf4:	2204      	movs	r2, #4
 8006bf6:	4908      	ldr	r1, [pc, #32]	; (8006c18 <Get_SerialNum+0x54>)
 8006bf8:	68b8      	ldr	r0, [r7, #8]
 8006bfa:	f000 f80f 	bl	8006c1c <IntToUnicode>
  }
}
 8006bfe:	bf00      	nop
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	1fff7590 	.word	0x1fff7590
 8006c0c:	1fff7594 	.word	0x1fff7594
 8006c10:	1fff7598 	.word	0x1fff7598
 8006c14:	20000176 	.word	0x20000176
 8006c18:	20000186 	.word	0x20000186

08006c1c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	4613      	mov	r3, r2
 8006c28:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006c2e:	2300      	movs	r3, #0
 8006c30:	75fb      	strb	r3, [r7, #23]
 8006c32:	e027      	b.n	8006c84 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	0f1b      	lsrs	r3, r3, #28
 8006c38:	2b09      	cmp	r3, #9
 8006c3a:	d80b      	bhi.n	8006c54 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	0f1b      	lsrs	r3, r3, #28
 8006c40:	b2da      	uxtb	r2, r3
 8006c42:	7dfb      	ldrb	r3, [r7, #23]
 8006c44:	005b      	lsls	r3, r3, #1
 8006c46:	4619      	mov	r1, r3
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	440b      	add	r3, r1
 8006c4c:	3230      	adds	r2, #48	; 0x30
 8006c4e:	b2d2      	uxtb	r2, r2
 8006c50:	701a      	strb	r2, [r3, #0]
 8006c52:	e00a      	b.n	8006c6a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	0f1b      	lsrs	r3, r3, #28
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	7dfb      	ldrb	r3, [r7, #23]
 8006c5c:	005b      	lsls	r3, r3, #1
 8006c5e:	4619      	mov	r1, r3
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	440b      	add	r3, r1
 8006c64:	3237      	adds	r2, #55	; 0x37
 8006c66:	b2d2      	uxtb	r2, r2
 8006c68:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	011b      	lsls	r3, r3, #4
 8006c6e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006c70:	7dfb      	ldrb	r3, [r7, #23]
 8006c72:	005b      	lsls	r3, r3, #1
 8006c74:	3301      	adds	r3, #1
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	4413      	add	r3, r2
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006c7e:	7dfb      	ldrb	r3, [r7, #23]
 8006c80:	3301      	adds	r3, #1
 8006c82:	75fb      	strb	r3, [r7, #23]
 8006c84:	7dfa      	ldrb	r2, [r7, #23]
 8006c86:	79fb      	ldrb	r3, [r7, #7]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d3d3      	bcc.n	8006c34 <IntToUnicode+0x18>
  }
}
 8006c8c:	bf00      	nop
 8006c8e:	bf00      	nop
 8006c90:	371c      	adds	r7, #28
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
	...

08006c9c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b0b2      	sub	sp, #200	; 0xc8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ca4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006ca8:	2200      	movs	r2, #0
 8006caa:	601a      	str	r2, [r3, #0]
 8006cac:	605a      	str	r2, [r3, #4]
 8006cae:	609a      	str	r2, [r3, #8]
 8006cb0:	60da      	str	r2, [r3, #12]
 8006cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006cb4:	f107 0318 	add.w	r3, r7, #24
 8006cb8:	229c      	movs	r2, #156	; 0x9c
 8006cba:	2100      	movs	r1, #0
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 fc43 	bl	8007548 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cca:	d163      	bne.n	8006d94 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8006ccc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006cd0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006cd8:	f107 0318 	add.w	r3, r7, #24
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7fc f839 	bl	8002d54 <HAL_RCCEx_PeriphCLKConfig>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d001      	beq.n	8006cec <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8006ce8:	f7f9 fb1e 	bl	8000328 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cec:	4b2b      	ldr	r3, [pc, #172]	; (8006d9c <HAL_PCD_MspInit+0x100>)
 8006cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cf0:	4a2a      	ldr	r2, [pc, #168]	; (8006d9c <HAL_PCD_MspInit+0x100>)
 8006cf2:	f043 0301 	orr.w	r3, r3, #1
 8006cf6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006cf8:	4b28      	ldr	r3, [pc, #160]	; (8006d9c <HAL_PCD_MspInit+0x100>)
 8006cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cfc:	f003 0301 	and.w	r3, r3, #1
 8006d00:	617b      	str	r3, [r7, #20]
 8006d02:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006d04:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006d08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d12:	2300      	movs	r3, #0
 8006d14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006d1e:	230a      	movs	r3, #10
 8006d20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d24:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006d28:	4619      	mov	r1, r3
 8006d2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d2e:	f7f9 fd3f 	bl	80007b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006d32:	4b1a      	ldr	r3, [pc, #104]	; (8006d9c <HAL_PCD_MspInit+0x100>)
 8006d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d36:	4a19      	ldr	r2, [pc, #100]	; (8006d9c <HAL_PCD_MspInit+0x100>)
 8006d38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d3e:	4b17      	ldr	r3, [pc, #92]	; (8006d9c <HAL_PCD_MspInit+0x100>)
 8006d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d46:	613b      	str	r3, [r7, #16]
 8006d48:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d4a:	4b14      	ldr	r3, [pc, #80]	; (8006d9c <HAL_PCD_MspInit+0x100>)
 8006d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d114      	bne.n	8006d80 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d56:	4b11      	ldr	r3, [pc, #68]	; (8006d9c <HAL_PCD_MspInit+0x100>)
 8006d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d5a:	4a10      	ldr	r2, [pc, #64]	; (8006d9c <HAL_PCD_MspInit+0x100>)
 8006d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d60:	6593      	str	r3, [r2, #88]	; 0x58
 8006d62:	4b0e      	ldr	r3, [pc, #56]	; (8006d9c <HAL_PCD_MspInit+0x100>)
 8006d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d6a:	60fb      	str	r3, [r7, #12]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8006d6e:	f7fb f935 	bl	8001fdc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d72:	4b0a      	ldr	r3, [pc, #40]	; (8006d9c <HAL_PCD_MspInit+0x100>)
 8006d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d76:	4a09      	ldr	r2, [pc, #36]	; (8006d9c <HAL_PCD_MspInit+0x100>)
 8006d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d7c:	6593      	str	r3, [r2, #88]	; 0x58
 8006d7e:	e001      	b.n	8006d84 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8006d80:	f7fb f92c 	bl	8001fdc <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006d84:	2200      	movs	r2, #0
 8006d86:	2100      	movs	r1, #0
 8006d88:	2043      	movs	r0, #67	; 0x43
 8006d8a:	f7f9 fcda 	bl	8000742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006d8e:	2043      	movs	r0, #67	; 0x43
 8006d90:	f7f9 fcf3 	bl	800077a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006d94:	bf00      	nop
 8006d96:	37c8      	adds	r7, #200	; 0xc8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	40021000 	.word	0x40021000

08006da0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006db4:	4619      	mov	r1, r3
 8006db6:	4610      	mov	r0, r2
 8006db8:	f7fe fc58 	bl	800566c <USBD_LL_SetupStage>
}
 8006dbc:	bf00      	nop
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	460b      	mov	r3, r1
 8006dce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006dd6:	78fa      	ldrb	r2, [r7, #3]
 8006dd8:	6879      	ldr	r1, [r7, #4]
 8006dda:	4613      	mov	r3, r2
 8006ddc:	00db      	lsls	r3, r3, #3
 8006dde:	4413      	add	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	440b      	add	r3, r1
 8006de4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	78fb      	ldrb	r3, [r7, #3]
 8006dec:	4619      	mov	r1, r3
 8006dee:	f7fe fc92 	bl	8005716 <USBD_LL_DataOutStage>
}
 8006df2:	bf00      	nop
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b082      	sub	sp, #8
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
 8006e02:	460b      	mov	r3, r1
 8006e04:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006e0c:	78fa      	ldrb	r2, [r7, #3]
 8006e0e:	6879      	ldr	r1, [r7, #4]
 8006e10:	4613      	mov	r3, r2
 8006e12:	00db      	lsls	r3, r3, #3
 8006e14:	4413      	add	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	440b      	add	r3, r1
 8006e1a:	334c      	adds	r3, #76	; 0x4c
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	78fb      	ldrb	r3, [r7, #3]
 8006e20:	4619      	mov	r1, r3
 8006e22:	f7fe fcdb 	bl	80057dc <USBD_LL_DataInStage>
}
 8006e26:	bf00      	nop
 8006e28:	3708      	adds	r7, #8
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b082      	sub	sp, #8
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7fe fdef 	bl	8005a20 <USBD_LL_SOF>
}
 8006e42:	bf00      	nop
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b084      	sub	sp, #16
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006e52:	2301      	movs	r3, #1
 8006e54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d001      	beq.n	8006e62 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006e5e:	f7f9 fa63 	bl	8000328 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e68:	7bfa      	ldrb	r2, [r7, #15]
 8006e6a:	4611      	mov	r1, r2
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7fe fd99 	bl	80059a4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f7fe fd45 	bl	8005908 <USBD_LL_Reset>
}
 8006e7e:	bf00      	nop
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
	...

08006e88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	6812      	ldr	r2, [r2, #0]
 8006e9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ea2:	f043 0301 	orr.w	r3, r3, #1
 8006ea6:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7fe fd88 	bl	80059c4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d005      	beq.n	8006ec8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006ebc:	4b04      	ldr	r3, [pc, #16]	; (8006ed0 <HAL_PCD_SuspendCallback+0x48>)
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	4a03      	ldr	r2, [pc, #12]	; (8006ed0 <HAL_PCD_SuspendCallback+0x48>)
 8006ec2:	f043 0306 	orr.w	r3, r3, #6
 8006ec6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006ec8:	bf00      	nop
 8006eca:	3708      	adds	r7, #8
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	e000ed00 	.word	0xe000ed00

08006ed4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	6812      	ldr	r2, [r2, #0]
 8006eea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006eee:	f023 0301 	bic.w	r3, r3, #1
 8006ef2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a1b      	ldr	r3, [r3, #32]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d007      	beq.n	8006f0c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006efc:	4b08      	ldr	r3, [pc, #32]	; (8006f20 <HAL_PCD_ResumeCallback+0x4c>)
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	4a07      	ldr	r2, [pc, #28]	; (8006f20 <HAL_PCD_ResumeCallback+0x4c>)
 8006f02:	f023 0306 	bic.w	r3, r3, #6
 8006f06:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8006f08:	f000 faf4 	bl	80074f4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7fe fd6c 	bl	80059f0 <USBD_LL_Resume>
}
 8006f18:	bf00      	nop
 8006f1a:	3708      	adds	r7, #8
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	e000ed00 	.word	0xe000ed00

08006f24 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f36:	78fa      	ldrb	r2, [r7, #3]
 8006f38:	4611      	mov	r1, r2
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fe fdb8 	bl	8005ab0 <USBD_LL_IsoOUTIncomplete>
}
 8006f40:	bf00      	nop
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	460b      	mov	r3, r1
 8006f52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f5a:	78fa      	ldrb	r2, [r7, #3]
 8006f5c:	4611      	mov	r1, r2
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7fe fd80 	bl	8005a64 <USBD_LL_IsoINIncomplete>
}
 8006f64:	bf00      	nop
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fe fdbe 	bl	8005afc <USBD_LL_DevConnected>
}
 8006f80:	bf00      	nop
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7fe fdbb 	bl	8005b12 <USBD_LL_DevDisconnected>
}
 8006f9c:	bf00      	nop
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d139      	bne.n	8007028 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006fb4:	4a1f      	ldr	r2, [pc, #124]	; (8007034 <USBD_LL_Init+0x90>)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a1d      	ldr	r2, [pc, #116]	; (8007034 <USBD_LL_Init+0x90>)
 8006fc0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006fc4:	4b1b      	ldr	r3, [pc, #108]	; (8007034 <USBD_LL_Init+0x90>)
 8006fc6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006fca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8006fcc:	4b19      	ldr	r3, [pc, #100]	; (8007034 <USBD_LL_Init+0x90>)
 8006fce:	2206      	movs	r2, #6
 8006fd0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006fd2:	4b18      	ldr	r3, [pc, #96]	; (8007034 <USBD_LL_Init+0x90>)
 8006fd4:	2202      	movs	r2, #2
 8006fd6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006fd8:	4b16      	ldr	r3, [pc, #88]	; (8007034 <USBD_LL_Init+0x90>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006fde:	4b15      	ldr	r3, [pc, #84]	; (8007034 <USBD_LL_Init+0x90>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006fe4:	4b13      	ldr	r3, [pc, #76]	; (8007034 <USBD_LL_Init+0x90>)
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8006fea:	4b12      	ldr	r3, [pc, #72]	; (8007034 <USBD_LL_Init+0x90>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006ff0:	4b10      	ldr	r3, [pc, #64]	; (8007034 <USBD_LL_Init+0x90>)
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006ff6:	4b0f      	ldr	r3, [pc, #60]	; (8007034 <USBD_LL_Init+0x90>)
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006ffc:	480d      	ldr	r0, [pc, #52]	; (8007034 <USBD_LL_Init+0x90>)
 8006ffe:	f7f9 fd69 	bl	8000ad4 <HAL_PCD_Init>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8007008:	f7f9 f98e 	bl	8000328 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800700c:	2180      	movs	r1, #128	; 0x80
 800700e:	4809      	ldr	r0, [pc, #36]	; (8007034 <USBD_LL_Init+0x90>)
 8007010:	f7fa feeb 	bl	8001dea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007014:	2240      	movs	r2, #64	; 0x40
 8007016:	2100      	movs	r1, #0
 8007018:	4806      	ldr	r0, [pc, #24]	; (8007034 <USBD_LL_Init+0x90>)
 800701a:	f7fa fe9f 	bl	8001d5c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800701e:	2280      	movs	r2, #128	; 0x80
 8007020:	2101      	movs	r1, #1
 8007022:	4804      	ldr	r0, [pc, #16]	; (8007034 <USBD_LL_Init+0x90>)
 8007024:	f7fa fe9a 	bl	8001d5c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	20001684 	.word	0x20001684

08007038 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007040:	2300      	movs	r3, #0
 8007042:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007044:	2300      	movs	r3, #0
 8007046:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800704e:	4618      	mov	r0, r3
 8007050:	f7f9 fe64 	bl	8000d1c <HAL_PCD_Start>
 8007054:	4603      	mov	r3, r0
 8007056:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007058:	7bbb      	ldrb	r3, [r7, #14]
 800705a:	2b03      	cmp	r3, #3
 800705c:	d816      	bhi.n	800708c <USBD_LL_Start+0x54>
 800705e:	a201      	add	r2, pc, #4	; (adr r2, 8007064 <USBD_LL_Start+0x2c>)
 8007060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007064:	08007075 	.word	0x08007075
 8007068:	0800707b 	.word	0x0800707b
 800706c:	08007081 	.word	0x08007081
 8007070:	08007087 	.word	0x08007087
    case HAL_OK :
      usb_status = USBD_OK;
 8007074:	2300      	movs	r3, #0
 8007076:	73fb      	strb	r3, [r7, #15]
    break;
 8007078:	e00b      	b.n	8007092 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800707a:	2303      	movs	r3, #3
 800707c:	73fb      	strb	r3, [r7, #15]
    break;
 800707e:	e008      	b.n	8007092 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007080:	2301      	movs	r3, #1
 8007082:	73fb      	strb	r3, [r7, #15]
    break;
 8007084:	e005      	b.n	8007092 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007086:	2303      	movs	r3, #3
 8007088:	73fb      	strb	r3, [r7, #15]
    break;
 800708a:	e002      	b.n	8007092 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800708c:	2303      	movs	r3, #3
 800708e:	73fb      	strb	r3, [r7, #15]
    break;
 8007090:	bf00      	nop
  }
  return usb_status;
 8007092:	7bfb      	ldrb	r3, [r7, #15]
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	4608      	mov	r0, r1
 80070a6:	4611      	mov	r1, r2
 80070a8:	461a      	mov	r2, r3
 80070aa:	4603      	mov	r3, r0
 80070ac:	70fb      	strb	r3, [r7, #3]
 80070ae:	460b      	mov	r3, r1
 80070b0:	70bb      	strb	r3, [r7, #2]
 80070b2:	4613      	mov	r3, r2
 80070b4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070b6:	2300      	movs	r3, #0
 80070b8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070ba:	2300      	movs	r3, #0
 80070bc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80070c4:	78bb      	ldrb	r3, [r7, #2]
 80070c6:	883a      	ldrh	r2, [r7, #0]
 80070c8:	78f9      	ldrb	r1, [r7, #3]
 80070ca:	f7fa fb0e 	bl	80016ea <HAL_PCD_EP_Open>
 80070ce:	4603      	mov	r3, r0
 80070d0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80070d2:	7bbb      	ldrb	r3, [r7, #14]
 80070d4:	2b03      	cmp	r3, #3
 80070d6:	d817      	bhi.n	8007108 <USBD_LL_OpenEP+0x6c>
 80070d8:	a201      	add	r2, pc, #4	; (adr r2, 80070e0 <USBD_LL_OpenEP+0x44>)
 80070da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070de:	bf00      	nop
 80070e0:	080070f1 	.word	0x080070f1
 80070e4:	080070f7 	.word	0x080070f7
 80070e8:	080070fd 	.word	0x080070fd
 80070ec:	08007103 	.word	0x08007103
    case HAL_OK :
      usb_status = USBD_OK;
 80070f0:	2300      	movs	r3, #0
 80070f2:	73fb      	strb	r3, [r7, #15]
    break;
 80070f4:	e00b      	b.n	800710e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80070f6:	2303      	movs	r3, #3
 80070f8:	73fb      	strb	r3, [r7, #15]
    break;
 80070fa:	e008      	b.n	800710e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80070fc:	2301      	movs	r3, #1
 80070fe:	73fb      	strb	r3, [r7, #15]
    break;
 8007100:	e005      	b.n	800710e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007102:	2303      	movs	r3, #3
 8007104:	73fb      	strb	r3, [r7, #15]
    break;
 8007106:	e002      	b.n	800710e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8007108:	2303      	movs	r3, #3
 800710a:	73fb      	strb	r3, [r7, #15]
    break;
 800710c:	bf00      	nop
  }
  return usb_status;
 800710e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007110:	4618      	mov	r0, r3
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	460b      	mov	r3, r1
 8007122:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007124:	2300      	movs	r3, #0
 8007126:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007128:	2300      	movs	r3, #0
 800712a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007132:	78fa      	ldrb	r2, [r7, #3]
 8007134:	4611      	mov	r1, r2
 8007136:	4618      	mov	r0, r3
 8007138:	f7fa fb3f 	bl	80017ba <HAL_PCD_EP_Close>
 800713c:	4603      	mov	r3, r0
 800713e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007140:	7bbb      	ldrb	r3, [r7, #14]
 8007142:	2b03      	cmp	r3, #3
 8007144:	d816      	bhi.n	8007174 <USBD_LL_CloseEP+0x5c>
 8007146:	a201      	add	r2, pc, #4	; (adr r2, 800714c <USBD_LL_CloseEP+0x34>)
 8007148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714c:	0800715d 	.word	0x0800715d
 8007150:	08007163 	.word	0x08007163
 8007154:	08007169 	.word	0x08007169
 8007158:	0800716f 	.word	0x0800716f
    case HAL_OK :
      usb_status = USBD_OK;
 800715c:	2300      	movs	r3, #0
 800715e:	73fb      	strb	r3, [r7, #15]
    break;
 8007160:	e00b      	b.n	800717a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007162:	2303      	movs	r3, #3
 8007164:	73fb      	strb	r3, [r7, #15]
    break;
 8007166:	e008      	b.n	800717a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007168:	2301      	movs	r3, #1
 800716a:	73fb      	strb	r3, [r7, #15]
    break;
 800716c:	e005      	b.n	800717a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800716e:	2303      	movs	r3, #3
 8007170:	73fb      	strb	r3, [r7, #15]
    break;
 8007172:	e002      	b.n	800717a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007174:	2303      	movs	r3, #3
 8007176:	73fb      	strb	r3, [r7, #15]
    break;
 8007178:	bf00      	nop
  }
  return usb_status;
 800717a:	7bfb      	ldrb	r3, [r7, #15]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	460b      	mov	r3, r1
 800718e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007190:	2300      	movs	r3, #0
 8007192:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007194:	2300      	movs	r3, #0
 8007196:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800719e:	78fa      	ldrb	r2, [r7, #3]
 80071a0:	4611      	mov	r1, r2
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7fa fbe6 	bl	8001974 <HAL_PCD_EP_SetStall>
 80071a8:	4603      	mov	r3, r0
 80071aa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80071ac:	7bbb      	ldrb	r3, [r7, #14]
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d816      	bhi.n	80071e0 <USBD_LL_StallEP+0x5c>
 80071b2:	a201      	add	r2, pc, #4	; (adr r2, 80071b8 <USBD_LL_StallEP+0x34>)
 80071b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b8:	080071c9 	.word	0x080071c9
 80071bc:	080071cf 	.word	0x080071cf
 80071c0:	080071d5 	.word	0x080071d5
 80071c4:	080071db 	.word	0x080071db
    case HAL_OK :
      usb_status = USBD_OK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	73fb      	strb	r3, [r7, #15]
    break;
 80071cc:	e00b      	b.n	80071e6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80071ce:	2303      	movs	r3, #3
 80071d0:	73fb      	strb	r3, [r7, #15]
    break;
 80071d2:	e008      	b.n	80071e6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80071d4:	2301      	movs	r3, #1
 80071d6:	73fb      	strb	r3, [r7, #15]
    break;
 80071d8:	e005      	b.n	80071e6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80071da:	2303      	movs	r3, #3
 80071dc:	73fb      	strb	r3, [r7, #15]
    break;
 80071de:	e002      	b.n	80071e6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80071e0:	2303      	movs	r3, #3
 80071e2:	73fb      	strb	r3, [r7, #15]
    break;
 80071e4:	bf00      	nop
  }
  return usb_status;
 80071e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	460b      	mov	r3, r1
 80071fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071fc:	2300      	movs	r3, #0
 80071fe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007200:	2300      	movs	r3, #0
 8007202:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800720a:	78fa      	ldrb	r2, [r7, #3]
 800720c:	4611      	mov	r1, r2
 800720e:	4618      	mov	r0, r3
 8007210:	f7fa fc12 	bl	8001a38 <HAL_PCD_EP_ClrStall>
 8007214:	4603      	mov	r3, r0
 8007216:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007218:	7bbb      	ldrb	r3, [r7, #14]
 800721a:	2b03      	cmp	r3, #3
 800721c:	d816      	bhi.n	800724c <USBD_LL_ClearStallEP+0x5c>
 800721e:	a201      	add	r2, pc, #4	; (adr r2, 8007224 <USBD_LL_ClearStallEP+0x34>)
 8007220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007224:	08007235 	.word	0x08007235
 8007228:	0800723b 	.word	0x0800723b
 800722c:	08007241 	.word	0x08007241
 8007230:	08007247 	.word	0x08007247
    case HAL_OK :
      usb_status = USBD_OK;
 8007234:	2300      	movs	r3, #0
 8007236:	73fb      	strb	r3, [r7, #15]
    break;
 8007238:	e00b      	b.n	8007252 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800723a:	2303      	movs	r3, #3
 800723c:	73fb      	strb	r3, [r7, #15]
    break;
 800723e:	e008      	b.n	8007252 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007240:	2301      	movs	r3, #1
 8007242:	73fb      	strb	r3, [r7, #15]
    break;
 8007244:	e005      	b.n	8007252 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007246:	2303      	movs	r3, #3
 8007248:	73fb      	strb	r3, [r7, #15]
    break;
 800724a:	e002      	b.n	8007252 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800724c:	2303      	movs	r3, #3
 800724e:	73fb      	strb	r3, [r7, #15]
    break;
 8007250:	bf00      	nop
  }
  return usb_status;
 8007252:	7bfb      	ldrb	r3, [r7, #15]
}
 8007254:	4618      	mov	r0, r3
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800725c:	b480      	push	{r7}
 800725e:	b085      	sub	sp, #20
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	460b      	mov	r3, r1
 8007266:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800726e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007270:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007274:	2b00      	cmp	r3, #0
 8007276:	da0b      	bge.n	8007290 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007278:	78fb      	ldrb	r3, [r7, #3]
 800727a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800727e:	68f9      	ldr	r1, [r7, #12]
 8007280:	4613      	mov	r3, r2
 8007282:	00db      	lsls	r3, r3, #3
 8007284:	4413      	add	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	440b      	add	r3, r1
 800728a:	333e      	adds	r3, #62	; 0x3e
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	e00b      	b.n	80072a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007290:	78fb      	ldrb	r3, [r7, #3]
 8007292:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007296:	68f9      	ldr	r1, [r7, #12]
 8007298:	4613      	mov	r3, r2
 800729a:	00db      	lsls	r3, r3, #3
 800729c:	4413      	add	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	440b      	add	r3, r1
 80072a2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80072a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3714      	adds	r7, #20
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	460b      	mov	r3, r1
 80072be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072c0:	2300      	movs	r3, #0
 80072c2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072c4:	2300      	movs	r3, #0
 80072c6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80072ce:	78fa      	ldrb	r2, [r7, #3]
 80072d0:	4611      	mov	r1, r2
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7fa f9e4 	bl	80016a0 <HAL_PCD_SetAddress>
 80072d8:	4603      	mov	r3, r0
 80072da:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80072dc:	7bbb      	ldrb	r3, [r7, #14]
 80072de:	2b03      	cmp	r3, #3
 80072e0:	d816      	bhi.n	8007310 <USBD_LL_SetUSBAddress+0x5c>
 80072e2:	a201      	add	r2, pc, #4	; (adr r2, 80072e8 <USBD_LL_SetUSBAddress+0x34>)
 80072e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e8:	080072f9 	.word	0x080072f9
 80072ec:	080072ff 	.word	0x080072ff
 80072f0:	08007305 	.word	0x08007305
 80072f4:	0800730b 	.word	0x0800730b
    case HAL_OK :
      usb_status = USBD_OK;
 80072f8:	2300      	movs	r3, #0
 80072fa:	73fb      	strb	r3, [r7, #15]
    break;
 80072fc:	e00b      	b.n	8007316 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80072fe:	2303      	movs	r3, #3
 8007300:	73fb      	strb	r3, [r7, #15]
    break;
 8007302:	e008      	b.n	8007316 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007304:	2301      	movs	r3, #1
 8007306:	73fb      	strb	r3, [r7, #15]
    break;
 8007308:	e005      	b.n	8007316 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800730a:	2303      	movs	r3, #3
 800730c:	73fb      	strb	r3, [r7, #15]
    break;
 800730e:	e002      	b.n	8007316 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8007310:	2303      	movs	r3, #3
 8007312:	73fb      	strb	r3, [r7, #15]
    break;
 8007314:	bf00      	nop
  }
  return usb_status;
 8007316:	7bfb      	ldrb	r3, [r7, #15]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	607a      	str	r2, [r7, #4]
 800732a:	603b      	str	r3, [r7, #0]
 800732c:	460b      	mov	r3, r1
 800732e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007330:	2300      	movs	r3, #0
 8007332:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007334:	2300      	movs	r3, #0
 8007336:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800733e:	7af9      	ldrb	r1, [r7, #11]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	f7fa fad9 	bl	80018fa <HAL_PCD_EP_Transmit>
 8007348:	4603      	mov	r3, r0
 800734a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800734c:	7dbb      	ldrb	r3, [r7, #22]
 800734e:	2b03      	cmp	r3, #3
 8007350:	d816      	bhi.n	8007380 <USBD_LL_Transmit+0x60>
 8007352:	a201      	add	r2, pc, #4	; (adr r2, 8007358 <USBD_LL_Transmit+0x38>)
 8007354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007358:	08007369 	.word	0x08007369
 800735c:	0800736f 	.word	0x0800736f
 8007360:	08007375 	.word	0x08007375
 8007364:	0800737b 	.word	0x0800737b
    case HAL_OK :
      usb_status = USBD_OK;
 8007368:	2300      	movs	r3, #0
 800736a:	75fb      	strb	r3, [r7, #23]
    break;
 800736c:	e00b      	b.n	8007386 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800736e:	2303      	movs	r3, #3
 8007370:	75fb      	strb	r3, [r7, #23]
    break;
 8007372:	e008      	b.n	8007386 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007374:	2301      	movs	r3, #1
 8007376:	75fb      	strb	r3, [r7, #23]
    break;
 8007378:	e005      	b.n	8007386 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800737a:	2303      	movs	r3, #3
 800737c:	75fb      	strb	r3, [r7, #23]
    break;
 800737e:	e002      	b.n	8007386 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8007380:	2303      	movs	r3, #3
 8007382:	75fb      	strb	r3, [r7, #23]
    break;
 8007384:	bf00      	nop
  }
  return usb_status;
 8007386:	7dfb      	ldrb	r3, [r7, #23]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3718      	adds	r7, #24
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b086      	sub	sp, #24
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	607a      	str	r2, [r7, #4]
 800739a:	603b      	str	r3, [r7, #0]
 800739c:	460b      	mov	r3, r1
 800739e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073a0:	2300      	movs	r3, #0
 80073a2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073a4:	2300      	movs	r3, #0
 80073a6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80073ae:	7af9      	ldrb	r1, [r7, #11]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	f7fa fa4b 	bl	800184e <HAL_PCD_EP_Receive>
 80073b8:	4603      	mov	r3, r0
 80073ba:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80073bc:	7dbb      	ldrb	r3, [r7, #22]
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d816      	bhi.n	80073f0 <USBD_LL_PrepareReceive+0x60>
 80073c2:	a201      	add	r2, pc, #4	; (adr r2, 80073c8 <USBD_LL_PrepareReceive+0x38>)
 80073c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c8:	080073d9 	.word	0x080073d9
 80073cc:	080073df 	.word	0x080073df
 80073d0:	080073e5 	.word	0x080073e5
 80073d4:	080073eb 	.word	0x080073eb
    case HAL_OK :
      usb_status = USBD_OK;
 80073d8:	2300      	movs	r3, #0
 80073da:	75fb      	strb	r3, [r7, #23]
    break;
 80073dc:	e00b      	b.n	80073f6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80073de:	2303      	movs	r3, #3
 80073e0:	75fb      	strb	r3, [r7, #23]
    break;
 80073e2:	e008      	b.n	80073f6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80073e4:	2301      	movs	r3, #1
 80073e6:	75fb      	strb	r3, [r7, #23]
    break;
 80073e8:	e005      	b.n	80073f6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80073ea:	2303      	movs	r3, #3
 80073ec:	75fb      	strb	r3, [r7, #23]
    break;
 80073ee:	e002      	b.n	80073f6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80073f0:	2303      	movs	r3, #3
 80073f2:	75fb      	strb	r3, [r7, #23]
    break;
 80073f4:	bf00      	nop
  }
  return usb_status;
 80073f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3718      	adds	r7, #24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	460b      	mov	r3, r1
 800740a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007412:	78fa      	ldrb	r2, [r7, #3]
 8007414:	4611      	mov	r1, r2
 8007416:	4618      	mov	r0, r3
 8007418:	f7fa fa57 	bl	80018ca <HAL_PCD_EP_GetRxCount>
 800741c:	4603      	mov	r3, r0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3708      	adds	r7, #8
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
	...

08007428 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	460b      	mov	r3, r1
 8007432:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007434:	78fb      	ldrb	r3, [r7, #3]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <HAL_PCDEx_LPM_Callback+0x18>
 800743a:	2b01      	cmp	r3, #1
 800743c:	d01f      	beq.n	800747e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800743e:	e03b      	b.n	80074b8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a1b      	ldr	r3, [r3, #32]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d007      	beq.n	8007458 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007448:	f000 f854 	bl	80074f4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800744c:	4b1c      	ldr	r3, [pc, #112]	; (80074c0 <HAL_PCDEx_LPM_Callback+0x98>)
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	4a1b      	ldr	r2, [pc, #108]	; (80074c0 <HAL_PCDEx_LPM_Callback+0x98>)
 8007452:	f023 0306 	bic.w	r3, r3, #6
 8007456:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	6812      	ldr	r2, [r2, #0]
 8007466:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800746a:	f023 0301 	bic.w	r3, r3, #1
 800746e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007476:	4618      	mov	r0, r3
 8007478:	f7fe faba 	bl	80059f0 <USBD_LL_Resume>
    break;
 800747c:	e01c      	b.n	80074b8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	6812      	ldr	r2, [r2, #0]
 800748c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007490:	f043 0301 	orr.w	r3, r3, #1
 8007494:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800749c:	4618      	mov	r0, r3
 800749e:	f7fe fa91 	bl	80059c4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d005      	beq.n	80074b6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80074aa:	4b05      	ldr	r3, [pc, #20]	; (80074c0 <HAL_PCDEx_LPM_Callback+0x98>)
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	4a04      	ldr	r2, [pc, #16]	; (80074c0 <HAL_PCDEx_LPM_Callback+0x98>)
 80074b0:	f043 0306 	orr.w	r3, r3, #6
 80074b4:	6113      	str	r3, [r2, #16]
    break;
 80074b6:	bf00      	nop
}
 80074b8:	bf00      	nop
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	e000ed00 	.word	0xe000ed00

080074c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80074cc:	4b03      	ldr	r3, [pc, #12]	; (80074dc <USBD_static_malloc+0x18>)
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	20001b90 	.word	0x20001b90

080074e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]

}
 80074e8:	bf00      	nop
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80074f8:	f7f8 fe8b 	bl	8000212 <SystemClock_Config>
}
 80074fc:	bf00      	nop
 80074fe:	bd80      	pop	{r7, pc}

08007500 <__libc_init_array>:
 8007500:	b570      	push	{r4, r5, r6, lr}
 8007502:	4d0d      	ldr	r5, [pc, #52]	; (8007538 <__libc_init_array+0x38>)
 8007504:	4c0d      	ldr	r4, [pc, #52]	; (800753c <__libc_init_array+0x3c>)
 8007506:	1b64      	subs	r4, r4, r5
 8007508:	10a4      	asrs	r4, r4, #2
 800750a:	2600      	movs	r6, #0
 800750c:	42a6      	cmp	r6, r4
 800750e:	d109      	bne.n	8007524 <__libc_init_array+0x24>
 8007510:	4d0b      	ldr	r5, [pc, #44]	; (8007540 <__libc_init_array+0x40>)
 8007512:	4c0c      	ldr	r4, [pc, #48]	; (8007544 <__libc_init_array+0x44>)
 8007514:	f000 f820 	bl	8007558 <_init>
 8007518:	1b64      	subs	r4, r4, r5
 800751a:	10a4      	asrs	r4, r4, #2
 800751c:	2600      	movs	r6, #0
 800751e:	42a6      	cmp	r6, r4
 8007520:	d105      	bne.n	800752e <__libc_init_array+0x2e>
 8007522:	bd70      	pop	{r4, r5, r6, pc}
 8007524:	f855 3b04 	ldr.w	r3, [r5], #4
 8007528:	4798      	blx	r3
 800752a:	3601      	adds	r6, #1
 800752c:	e7ee      	b.n	800750c <__libc_init_array+0xc>
 800752e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007532:	4798      	blx	r3
 8007534:	3601      	adds	r6, #1
 8007536:	e7f2      	b.n	800751e <__libc_init_array+0x1e>
 8007538:	080075f8 	.word	0x080075f8
 800753c:	080075f8 	.word	0x080075f8
 8007540:	080075f8 	.word	0x080075f8
 8007544:	080075fc 	.word	0x080075fc

08007548 <memset>:
 8007548:	4402      	add	r2, r0
 800754a:	4603      	mov	r3, r0
 800754c:	4293      	cmp	r3, r2
 800754e:	d100      	bne.n	8007552 <memset+0xa>
 8007550:	4770      	bx	lr
 8007552:	f803 1b01 	strb.w	r1, [r3], #1
 8007556:	e7f9      	b.n	800754c <memset+0x4>

08007558 <_init>:
 8007558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755a:	bf00      	nop
 800755c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800755e:	bc08      	pop	{r3}
 8007560:	469e      	mov	lr, r3
 8007562:	4770      	bx	lr

08007564 <_fini>:
 8007564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007566:	bf00      	nop
 8007568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800756a:	bc08      	pop	{r3}
 800756c:	469e      	mov	lr, r3
 800756e:	4770      	bx	lr
