
usb_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073bc  080081bc  080081bc  000081bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800f578  0800f578  0000f578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f600  0800f600  00010190  2**0
                  CONTENTS
  4 .ARM          00000000  0800f600  0800f600  00010190  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f600  0800f600  00010190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f600  0800f600  0000f600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f604  0800f604  0000f604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800f608  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c20  20000190  0800f798  00010190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001db0  0800f798  00011db0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001041b  00000000  00000000  000101c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e48  00000000  00000000  000205db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  00023428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  00024240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031fe1  00000000  00000000  00024f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011778  00000000  00000000  00056ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011c91d  00000000  00000000  00068659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00184f76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037e8  00000000  00000000  00184fc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081bc <__do_global_dtors_aux>:
 80081bc:	b510      	push	{r4, lr}
 80081be:	4c05      	ldr	r4, [pc, #20]	; (80081d4 <__do_global_dtors_aux+0x18>)
 80081c0:	7823      	ldrb	r3, [r4, #0]
 80081c2:	b933      	cbnz	r3, 80081d2 <__do_global_dtors_aux+0x16>
 80081c4:	4b04      	ldr	r3, [pc, #16]	; (80081d8 <__do_global_dtors_aux+0x1c>)
 80081c6:	b113      	cbz	r3, 80081ce <__do_global_dtors_aux+0x12>
 80081c8:	4804      	ldr	r0, [pc, #16]	; (80081dc <__do_global_dtors_aux+0x20>)
 80081ca:	f3af 8000 	nop.w
 80081ce:	2301      	movs	r3, #1
 80081d0:	7023      	strb	r3, [r4, #0]
 80081d2:	bd10      	pop	{r4, pc}
 80081d4:	20000190 	.word	0x20000190
 80081d8:	00000000 	.word	0x00000000
 80081dc:	0800f560 	.word	0x0800f560

080081e0 <frame_dummy>:
 80081e0:	b508      	push	{r3, lr}
 80081e2:	4b03      	ldr	r3, [pc, #12]	; (80081f0 <frame_dummy+0x10>)
 80081e4:	b11b      	cbz	r3, 80081ee <frame_dummy+0xe>
 80081e6:	4903      	ldr	r1, [pc, #12]	; (80081f4 <frame_dummy+0x14>)
 80081e8:	4803      	ldr	r0, [pc, #12]	; (80081f8 <frame_dummy+0x18>)
 80081ea:	f3af 8000 	nop.w
 80081ee:	bd08      	pop	{r3, pc}
 80081f0:	00000000 	.word	0x00000000
 80081f4:	20000194 	.word	0x20000194
 80081f8:	0800f560 	.word	0x0800f560

080081fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008200:	f000 f92f 	bl	8008462 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008204:	f000 f805 	bl	8008212 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008208:	f000 f856 	bl	80082b8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800820c:	f006 fb24 	bl	800e858 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008210:	e7fe      	b.n	8008210 <main+0x14>

08008212 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b096      	sub	sp, #88	; 0x58
 8008216:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008218:	f107 0314 	add.w	r3, r7, #20
 800821c:	2244      	movs	r2, #68	; 0x44
 800821e:	2100      	movs	r1, #0
 8008220:	4618      	mov	r0, r3
 8008222:	f007 f995 	bl	800f550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008226:	463b      	mov	r3, r7
 8008228:	2200      	movs	r2, #0
 800822a:	601a      	str	r2, [r3, #0]
 800822c:	605a      	str	r2, [r3, #4]
 800822e:	609a      	str	r2, [r3, #8]
 8008230:	60da      	str	r2, [r3, #12]
 8008232:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8008234:	2000      	movs	r0, #0
 8008236:	f001 fe31 	bl	8009e9c <HAL_PWREx_ControlVoltageScaling>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d001      	beq.n	8008244 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8008240:	f000 f872 	bl	8008328 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8008244:	2321      	movs	r3, #33	; 0x21
 8008246:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008248:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800824c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800824e:	2301      	movs	r3, #1
 8008250:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008252:	2302      	movs	r3, #2
 8008254:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008256:	2303      	movs	r3, #3
 8008258:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800825a:	2301      	movs	r3, #1
 800825c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 800825e:	231e      	movs	r3, #30
 8008260:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008262:	2302      	movs	r3, #2
 8008264:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008266:	2302      	movs	r3, #2
 8008268:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800826a:	2302      	movs	r3, #2
 800826c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800826e:	f107 0314 	add.w	r3, r7, #20
 8008272:	4618      	mov	r0, r3
 8008274:	f001 fec6 	bl	800a004 <HAL_RCC_OscConfig>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d001      	beq.n	8008282 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800827e:	f000 f853 	bl	8008328 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008282:	230f      	movs	r3, #15
 8008284:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008286:	2303      	movs	r3, #3
 8008288:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800828a:	2300      	movs	r3, #0
 800828c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800828e:	2300      	movs	r3, #0
 8008290:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008292:	2300      	movs	r3, #0
 8008294:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008296:	463b      	mov	r3, r7
 8008298:	2105      	movs	r1, #5
 800829a:	4618      	mov	r0, r3
 800829c:	f002 facc 	bl	800a838 <HAL_RCC_ClockConfig>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d001      	beq.n	80082aa <SystemClock_Config+0x98>
  {
    Error_Handler();
 80082a6:	f000 f83f 	bl	8008328 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80082aa:	f003 f8e7 	bl	800b47c <HAL_RCCEx_EnableMSIPLLMode>
}
 80082ae:	bf00      	nop
 80082b0:	3758      	adds	r7, #88	; 0x58
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
	...

080082b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80082be:	4b0f      	ldr	r3, [pc, #60]	; (80082fc <MX_GPIO_Init+0x44>)
 80082c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082c2:	4a0e      	ldr	r2, [pc, #56]	; (80082fc <MX_GPIO_Init+0x44>)
 80082c4:	f043 0301 	orr.w	r3, r3, #1
 80082c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80082ca:	4b0c      	ldr	r3, [pc, #48]	; (80082fc <MX_GPIO_Init+0x44>)
 80082cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	607b      	str	r3, [r7, #4]
 80082d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80082d6:	4b09      	ldr	r3, [pc, #36]	; (80082fc <MX_GPIO_Init+0x44>)
 80082d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082da:	4a08      	ldr	r2, [pc, #32]	; (80082fc <MX_GPIO_Init+0x44>)
 80082dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80082e2:	4b06      	ldr	r3, [pc, #24]	; (80082fc <MX_GPIO_Init+0x44>)
 80082e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ea:	603b      	str	r3, [r7, #0]
 80082ec:	683b      	ldr	r3, [r7, #0]

}
 80082ee:	bf00      	nop
 80082f0:	370c      	adds	r7, #12
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	40021000 	.word	0x40021000

08008300 <USB_CDC_RxHandler>:

/* USER CODE BEGIN 4 */

void USB_CDC_RxHandler(uint8_t* USB_Buf, uint32_t Len)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
	USB_Buf[0]=USB_Buf[0];
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	781a      	ldrb	r2, [r3, #0]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	701a      	strb	r2, [r3, #0]
	CDC_Transmit_FS((uint8_t*)"I am app", sizeof("I am app") - 1);
 8008312:	2108      	movs	r1, #8
 8008314:	4803      	ldr	r0, [pc, #12]	; (8008324 <USB_CDC_RxHandler+0x24>)
 8008316:	f006 fb6b 	bl	800e9f0 <CDC_Transmit_FS>
}
 800831a:	bf00      	nop
 800831c:	3708      	adds	r7, #8
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	0800f578 	.word	0x0800f578

08008328 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008328:	b480      	push	{r7}
 800832a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800832c:	b672      	cpsid	i
}
 800832e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008330:	e7fe      	b.n	8008330 <Error_Handler+0x8>
	...

08008334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800833a:	4b0f      	ldr	r3, [pc, #60]	; (8008378 <HAL_MspInit+0x44>)
 800833c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800833e:	4a0e      	ldr	r2, [pc, #56]	; (8008378 <HAL_MspInit+0x44>)
 8008340:	f043 0301 	orr.w	r3, r3, #1
 8008344:	6613      	str	r3, [r2, #96]	; 0x60
 8008346:	4b0c      	ldr	r3, [pc, #48]	; (8008378 <HAL_MspInit+0x44>)
 8008348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800834a:	f003 0301 	and.w	r3, r3, #1
 800834e:	607b      	str	r3, [r7, #4]
 8008350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008352:	4b09      	ldr	r3, [pc, #36]	; (8008378 <HAL_MspInit+0x44>)
 8008354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008356:	4a08      	ldr	r2, [pc, #32]	; (8008378 <HAL_MspInit+0x44>)
 8008358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800835c:	6593      	str	r3, [r2, #88]	; 0x58
 800835e:	4b06      	ldr	r3, [pc, #24]	; (8008378 <HAL_MspInit+0x44>)
 8008360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008366:	603b      	str	r3, [r7, #0]
 8008368:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800836a:	bf00      	nop
 800836c:	370c      	adds	r7, #12
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr
 8008376:	bf00      	nop
 8008378:	40021000 	.word	0x40021000

0800837c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800837c:	b480      	push	{r7}
 800837e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008380:	e7fe      	b.n	8008380 <NMI_Handler+0x4>

08008382 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008382:	b480      	push	{r7}
 8008384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008386:	e7fe      	b.n	8008386 <HardFault_Handler+0x4>

08008388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008388:	b480      	push	{r7}
 800838a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800838c:	e7fe      	b.n	800838c <MemManage_Handler+0x4>

0800838e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800838e:	b480      	push	{r7}
 8008390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008392:	e7fe      	b.n	8008392 <BusFault_Handler+0x4>

08008394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008394:	b480      	push	{r7}
 8008396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008398:	e7fe      	b.n	8008398 <UsageFault_Handler+0x4>

0800839a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800839a:	b480      	push	{r7}
 800839c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800839e:	bf00      	nop
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80083a8:	b480      	push	{r7}
 80083aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80083ac:	bf00      	nop
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr

080083b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80083b6:	b480      	push	{r7}
 80083b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80083ba:	bf00      	nop
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80083c8:	f000 f8a0 	bl	800850c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80083cc:	bf00      	nop
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80083d4:	4802      	ldr	r0, [pc, #8]	; (80083e0 <OTG_FS_IRQHandler+0x10>)
 80083d6:	f000 fcd4 	bl	8008d82 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80083da:	bf00      	nop
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	20001684 	.word	0x20001684

080083e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80083e4:	b480      	push	{r7}
 80083e6:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 80083e8:	4b07      	ldr	r3, [pc, #28]	; (8008408 <SystemInit+0x24>)
 80083ea:	4a08      	ldr	r2, [pc, #32]	; (800840c <SystemInit+0x28>)
 80083ec:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80083ee:	4b06      	ldr	r3, [pc, #24]	; (8008408 <SystemInit+0x24>)
 80083f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083f4:	4a04      	ldr	r2, [pc, #16]	; (8008408 <SystemInit+0x24>)
 80083f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80083fa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80083fe:	bf00      	nop
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr
 8008408:	e000ed00 	.word	0xe000ed00
 800840c:	08008000 	.word	0x08008000

08008410 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8008410:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008448 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008414:	f7ff ffe6 	bl	80083e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008418:	480c      	ldr	r0, [pc, #48]	; (800844c <LoopForever+0x6>)
  ldr r1, =_edata
 800841a:	490d      	ldr	r1, [pc, #52]	; (8008450 <LoopForever+0xa>)
  ldr r2, =_sidata
 800841c:	4a0d      	ldr	r2, [pc, #52]	; (8008454 <LoopForever+0xe>)
  movs r3, #0
 800841e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008420:	e002      	b.n	8008428 <LoopCopyDataInit>

08008422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008426:	3304      	adds	r3, #4

08008428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800842a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800842c:	d3f9      	bcc.n	8008422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800842e:	4a0a      	ldr	r2, [pc, #40]	; (8008458 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008430:	4c0a      	ldr	r4, [pc, #40]	; (800845c <LoopForever+0x16>)
  movs r3, #0
 8008432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008434:	e001      	b.n	800843a <LoopFillZerobss>

08008436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008438:	3204      	adds	r2, #4

0800843a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800843a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800843c:	d3fb      	bcc.n	8008436 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800843e:	f007 f863 	bl	800f508 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008442:	f7ff fedb 	bl	80081fc <main>

08008446 <LoopForever>:

LoopForever:
    b LoopForever
 8008446:	e7fe      	b.n	8008446 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8008448:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800844c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008450:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8008454:	0800f608 	.word	0x0800f608
  ldr r2, =_sbss
 8008458:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 800845c:	20001db0 	.word	0x20001db0

08008460 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008460:	e7fe      	b.n	8008460 <ADC1_IRQHandler>

08008462 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008462:	b580      	push	{r7, lr}
 8008464:	b082      	sub	sp, #8
 8008466:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008468:	2300      	movs	r3, #0
 800846a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800846c:	2003      	movs	r0, #3
 800846e:	f000 f961 	bl	8008734 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008472:	200f      	movs	r0, #15
 8008474:	f000 f80e 	bl	8008494 <HAL_InitTick>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d002      	beq.n	8008484 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	71fb      	strb	r3, [r7, #7]
 8008482:	e001      	b.n	8008488 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008484:	f7ff ff56 	bl	8008334 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008488:	79fb      	ldrb	r3, [r7, #7]
}
 800848a:	4618      	mov	r0, r3
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
	...

08008494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800849c:	2300      	movs	r3, #0
 800849e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80084a0:	4b17      	ldr	r3, [pc, #92]	; (8008500 <HAL_InitTick+0x6c>)
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d023      	beq.n	80084f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80084a8:	4b16      	ldr	r3, [pc, #88]	; (8008504 <HAL_InitTick+0x70>)
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	4b14      	ldr	r3, [pc, #80]	; (8008500 <HAL_InitTick+0x6c>)
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	4619      	mov	r1, r3
 80084b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80084b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80084ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 f96d 	bl	800879e <HAL_SYSTICK_Config>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d10f      	bne.n	80084ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2b0f      	cmp	r3, #15
 80084ce:	d809      	bhi.n	80084e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80084d0:	2200      	movs	r2, #0
 80084d2:	6879      	ldr	r1, [r7, #4]
 80084d4:	f04f 30ff 	mov.w	r0, #4294967295
 80084d8:	f000 f937 	bl	800874a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80084dc:	4a0a      	ldr	r2, [pc, #40]	; (8008508 <HAL_InitTick+0x74>)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6013      	str	r3, [r2, #0]
 80084e2:	e007      	b.n	80084f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	73fb      	strb	r3, [r7, #15]
 80084e8:	e004      	b.n	80084f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	73fb      	strb	r3, [r7, #15]
 80084ee:	e001      	b.n	80084f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80084f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	20000008 	.word	0x20000008
 8008504:	20000000 	.word	0x20000000
 8008508:	20000004 	.word	0x20000004

0800850c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800850c:	b480      	push	{r7}
 800850e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008510:	4b06      	ldr	r3, [pc, #24]	; (800852c <HAL_IncTick+0x20>)
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	461a      	mov	r2, r3
 8008516:	4b06      	ldr	r3, [pc, #24]	; (8008530 <HAL_IncTick+0x24>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4413      	add	r3, r2
 800851c:	4a04      	ldr	r2, [pc, #16]	; (8008530 <HAL_IncTick+0x24>)
 800851e:	6013      	str	r3, [r2, #0]
}
 8008520:	bf00      	nop
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	20000008 	.word	0x20000008
 8008530:	200001ac 	.word	0x200001ac

08008534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008534:	b480      	push	{r7}
 8008536:	af00      	add	r7, sp, #0
  return uwTick;
 8008538:	4b03      	ldr	r3, [pc, #12]	; (8008548 <HAL_GetTick+0x14>)
 800853a:	681b      	ldr	r3, [r3, #0]
}
 800853c:	4618      	mov	r0, r3
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop
 8008548:	200001ac 	.word	0x200001ac

0800854c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008554:	f7ff ffee 	bl	8008534 <HAL_GetTick>
 8008558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008564:	d005      	beq.n	8008572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8008566:	4b0a      	ldr	r3, [pc, #40]	; (8008590 <HAL_Delay+0x44>)
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	461a      	mov	r2, r3
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	4413      	add	r3, r2
 8008570:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008572:	bf00      	nop
 8008574:	f7ff ffde 	bl	8008534 <HAL_GetTick>
 8008578:	4602      	mov	r2, r0
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	429a      	cmp	r2, r3
 8008582:	d8f7      	bhi.n	8008574 <HAL_Delay+0x28>
  {
  }
}
 8008584:	bf00      	nop
 8008586:	bf00      	nop
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	20000008 	.word	0x20000008

08008594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008594:	b480      	push	{r7}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f003 0307 	and.w	r3, r3, #7
 80085a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80085a4:	4b0c      	ldr	r3, [pc, #48]	; (80085d8 <__NVIC_SetPriorityGrouping+0x44>)
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80085b0:	4013      	ands	r3, r2
 80085b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80085bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80085c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80085c6:	4a04      	ldr	r2, [pc, #16]	; (80085d8 <__NVIC_SetPriorityGrouping+0x44>)
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	60d3      	str	r3, [r2, #12]
}
 80085cc:	bf00      	nop
 80085ce:	3714      	adds	r7, #20
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr
 80085d8:	e000ed00 	.word	0xe000ed00

080085dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80085dc:	b480      	push	{r7}
 80085de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80085e0:	4b04      	ldr	r3, [pc, #16]	; (80085f4 <__NVIC_GetPriorityGrouping+0x18>)
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	0a1b      	lsrs	r3, r3, #8
 80085e6:	f003 0307 	and.w	r3, r3, #7
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr
 80085f4:	e000ed00 	.word	0xe000ed00

080085f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	4603      	mov	r3, r0
 8008600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008606:	2b00      	cmp	r3, #0
 8008608:	db0b      	blt.n	8008622 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800860a:	79fb      	ldrb	r3, [r7, #7]
 800860c:	f003 021f 	and.w	r2, r3, #31
 8008610:	4907      	ldr	r1, [pc, #28]	; (8008630 <__NVIC_EnableIRQ+0x38>)
 8008612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008616:	095b      	lsrs	r3, r3, #5
 8008618:	2001      	movs	r0, #1
 800861a:	fa00 f202 	lsl.w	r2, r0, r2
 800861e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008622:	bf00      	nop
 8008624:	370c      	adds	r7, #12
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop
 8008630:	e000e100 	.word	0xe000e100

08008634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	4603      	mov	r3, r0
 800863c:	6039      	str	r1, [r7, #0]
 800863e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008644:	2b00      	cmp	r3, #0
 8008646:	db0a      	blt.n	800865e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	b2da      	uxtb	r2, r3
 800864c:	490c      	ldr	r1, [pc, #48]	; (8008680 <__NVIC_SetPriority+0x4c>)
 800864e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008652:	0112      	lsls	r2, r2, #4
 8008654:	b2d2      	uxtb	r2, r2
 8008656:	440b      	add	r3, r1
 8008658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800865c:	e00a      	b.n	8008674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	b2da      	uxtb	r2, r3
 8008662:	4908      	ldr	r1, [pc, #32]	; (8008684 <__NVIC_SetPriority+0x50>)
 8008664:	79fb      	ldrb	r3, [r7, #7]
 8008666:	f003 030f 	and.w	r3, r3, #15
 800866a:	3b04      	subs	r3, #4
 800866c:	0112      	lsls	r2, r2, #4
 800866e:	b2d2      	uxtb	r2, r2
 8008670:	440b      	add	r3, r1
 8008672:	761a      	strb	r2, [r3, #24]
}
 8008674:	bf00      	nop
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr
 8008680:	e000e100 	.word	0xe000e100
 8008684:	e000ed00 	.word	0xe000ed00

08008688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008688:	b480      	push	{r7}
 800868a:	b089      	sub	sp, #36	; 0x24
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f003 0307 	and.w	r3, r3, #7
 800869a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	f1c3 0307 	rsb	r3, r3, #7
 80086a2:	2b04      	cmp	r3, #4
 80086a4:	bf28      	it	cs
 80086a6:	2304      	movcs	r3, #4
 80086a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	3304      	adds	r3, #4
 80086ae:	2b06      	cmp	r3, #6
 80086b0:	d902      	bls.n	80086b8 <NVIC_EncodePriority+0x30>
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	3b03      	subs	r3, #3
 80086b6:	e000      	b.n	80086ba <NVIC_EncodePriority+0x32>
 80086b8:	2300      	movs	r3, #0
 80086ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086bc:	f04f 32ff 	mov.w	r2, #4294967295
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	fa02 f303 	lsl.w	r3, r2, r3
 80086c6:	43da      	mvns	r2, r3
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	401a      	ands	r2, r3
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80086d0:	f04f 31ff 	mov.w	r1, #4294967295
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	fa01 f303 	lsl.w	r3, r1, r3
 80086da:	43d9      	mvns	r1, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086e0:	4313      	orrs	r3, r2
         );
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3724      	adds	r7, #36	; 0x24
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr
	...

080086f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	3b01      	subs	r3, #1
 80086fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008700:	d301      	bcc.n	8008706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008702:	2301      	movs	r3, #1
 8008704:	e00f      	b.n	8008726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008706:	4a0a      	ldr	r2, [pc, #40]	; (8008730 <SysTick_Config+0x40>)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	3b01      	subs	r3, #1
 800870c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800870e:	210f      	movs	r1, #15
 8008710:	f04f 30ff 	mov.w	r0, #4294967295
 8008714:	f7ff ff8e 	bl	8008634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008718:	4b05      	ldr	r3, [pc, #20]	; (8008730 <SysTick_Config+0x40>)
 800871a:	2200      	movs	r2, #0
 800871c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800871e:	4b04      	ldr	r3, [pc, #16]	; (8008730 <SysTick_Config+0x40>)
 8008720:	2207      	movs	r2, #7
 8008722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	e000e010 	.word	0xe000e010

08008734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f7ff ff29 	bl	8008594 <__NVIC_SetPriorityGrouping>
}
 8008742:	bf00      	nop
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b086      	sub	sp, #24
 800874e:	af00      	add	r7, sp, #0
 8008750:	4603      	mov	r3, r0
 8008752:	60b9      	str	r1, [r7, #8]
 8008754:	607a      	str	r2, [r7, #4]
 8008756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008758:	2300      	movs	r3, #0
 800875a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800875c:	f7ff ff3e 	bl	80085dc <__NVIC_GetPriorityGrouping>
 8008760:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	68b9      	ldr	r1, [r7, #8]
 8008766:	6978      	ldr	r0, [r7, #20]
 8008768:	f7ff ff8e 	bl	8008688 <NVIC_EncodePriority>
 800876c:	4602      	mov	r2, r0
 800876e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008772:	4611      	mov	r1, r2
 8008774:	4618      	mov	r0, r3
 8008776:	f7ff ff5d 	bl	8008634 <__NVIC_SetPriority>
}
 800877a:	bf00      	nop
 800877c:	3718      	adds	r7, #24
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008782:	b580      	push	{r7, lr}
 8008784:	b082      	sub	sp, #8
 8008786:	af00      	add	r7, sp, #0
 8008788:	4603      	mov	r3, r0
 800878a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800878c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008790:	4618      	mov	r0, r3
 8008792:	f7ff ff31 	bl	80085f8 <__NVIC_EnableIRQ>
}
 8008796:	bf00      	nop
 8008798:	3708      	adds	r7, #8
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b082      	sub	sp, #8
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f7ff ffa2 	bl	80086f0 <SysTick_Config>
 80087ac:	4603      	mov	r3, r0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3708      	adds	r7, #8
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
	...

080087b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b087      	sub	sp, #28
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80087c2:	2300      	movs	r3, #0
 80087c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80087c6:	e166      	b.n	8008a96 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	2101      	movs	r1, #1
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	fa01 f303 	lsl.w	r3, r1, r3
 80087d4:	4013      	ands	r3, r2
 80087d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f000 8158 	beq.w	8008a90 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	f003 0303 	and.w	r3, r3, #3
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d005      	beq.n	80087f8 <HAL_GPIO_Init+0x40>
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	f003 0303 	and.w	r3, r3, #3
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	d130      	bne.n	800885a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	005b      	lsls	r3, r3, #1
 8008802:	2203      	movs	r2, #3
 8008804:	fa02 f303 	lsl.w	r3, r2, r3
 8008808:	43db      	mvns	r3, r3
 800880a:	693a      	ldr	r2, [r7, #16]
 800880c:	4013      	ands	r3, r2
 800880e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	68da      	ldr	r2, [r3, #12]
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	005b      	lsls	r3, r3, #1
 8008818:	fa02 f303 	lsl.w	r3, r2, r3
 800881c:	693a      	ldr	r2, [r7, #16]
 800881e:	4313      	orrs	r3, r2
 8008820:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	693a      	ldr	r2, [r7, #16]
 8008826:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800882e:	2201      	movs	r2, #1
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	fa02 f303 	lsl.w	r3, r2, r3
 8008836:	43db      	mvns	r3, r3
 8008838:	693a      	ldr	r2, [r7, #16]
 800883a:	4013      	ands	r3, r2
 800883c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	091b      	lsrs	r3, r3, #4
 8008844:	f003 0201 	and.w	r2, r3, #1
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	fa02 f303 	lsl.w	r3, r2, r3
 800884e:	693a      	ldr	r2, [r7, #16]
 8008850:	4313      	orrs	r3, r2
 8008852:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	f003 0303 	and.w	r3, r3, #3
 8008862:	2b03      	cmp	r3, #3
 8008864:	d017      	beq.n	8008896 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	005b      	lsls	r3, r3, #1
 8008870:	2203      	movs	r2, #3
 8008872:	fa02 f303 	lsl.w	r3, r2, r3
 8008876:	43db      	mvns	r3, r3
 8008878:	693a      	ldr	r2, [r7, #16]
 800887a:	4013      	ands	r3, r2
 800887c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	689a      	ldr	r2, [r3, #8]
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	005b      	lsls	r3, r3, #1
 8008886:	fa02 f303 	lsl.w	r3, r2, r3
 800888a:	693a      	ldr	r2, [r7, #16]
 800888c:	4313      	orrs	r3, r2
 800888e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	693a      	ldr	r2, [r7, #16]
 8008894:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	f003 0303 	and.w	r3, r3, #3
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d123      	bne.n	80088ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	08da      	lsrs	r2, r3, #3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	3208      	adds	r2, #8
 80088aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	f003 0307 	and.w	r3, r3, #7
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	220f      	movs	r2, #15
 80088ba:	fa02 f303 	lsl.w	r3, r2, r3
 80088be:	43db      	mvns	r3, r3
 80088c0:	693a      	ldr	r2, [r7, #16]
 80088c2:	4013      	ands	r3, r2
 80088c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	691a      	ldr	r2, [r3, #16]
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	f003 0307 	and.w	r3, r3, #7
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	fa02 f303 	lsl.w	r3, r2, r3
 80088d6:	693a      	ldr	r2, [r7, #16]
 80088d8:	4313      	orrs	r3, r2
 80088da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	08da      	lsrs	r2, r3, #3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	3208      	adds	r2, #8
 80088e4:	6939      	ldr	r1, [r7, #16]
 80088e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	005b      	lsls	r3, r3, #1
 80088f4:	2203      	movs	r2, #3
 80088f6:	fa02 f303 	lsl.w	r3, r2, r3
 80088fa:	43db      	mvns	r3, r3
 80088fc:	693a      	ldr	r2, [r7, #16]
 80088fe:	4013      	ands	r3, r2
 8008900:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	f003 0203 	and.w	r2, r3, #3
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	005b      	lsls	r3, r3, #1
 800890e:	fa02 f303 	lsl.w	r3, r2, r3
 8008912:	693a      	ldr	r2, [r7, #16]
 8008914:	4313      	orrs	r3, r2
 8008916:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	693a      	ldr	r2, [r7, #16]
 800891c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008926:	2b00      	cmp	r3, #0
 8008928:	f000 80b2 	beq.w	8008a90 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800892c:	4b61      	ldr	r3, [pc, #388]	; (8008ab4 <HAL_GPIO_Init+0x2fc>)
 800892e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008930:	4a60      	ldr	r2, [pc, #384]	; (8008ab4 <HAL_GPIO_Init+0x2fc>)
 8008932:	f043 0301 	orr.w	r3, r3, #1
 8008936:	6613      	str	r3, [r2, #96]	; 0x60
 8008938:	4b5e      	ldr	r3, [pc, #376]	; (8008ab4 <HAL_GPIO_Init+0x2fc>)
 800893a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800893c:	f003 0301 	and.w	r3, r3, #1
 8008940:	60bb      	str	r3, [r7, #8]
 8008942:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008944:	4a5c      	ldr	r2, [pc, #368]	; (8008ab8 <HAL_GPIO_Init+0x300>)
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	089b      	lsrs	r3, r3, #2
 800894a:	3302      	adds	r3, #2
 800894c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008950:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	f003 0303 	and.w	r3, r3, #3
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	220f      	movs	r2, #15
 800895c:	fa02 f303 	lsl.w	r3, r2, r3
 8008960:	43db      	mvns	r3, r3
 8008962:	693a      	ldr	r2, [r7, #16]
 8008964:	4013      	ands	r3, r2
 8008966:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800896e:	d02b      	beq.n	80089c8 <HAL_GPIO_Init+0x210>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a52      	ldr	r2, [pc, #328]	; (8008abc <HAL_GPIO_Init+0x304>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d025      	beq.n	80089c4 <HAL_GPIO_Init+0x20c>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a51      	ldr	r2, [pc, #324]	; (8008ac0 <HAL_GPIO_Init+0x308>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d01f      	beq.n	80089c0 <HAL_GPIO_Init+0x208>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a50      	ldr	r2, [pc, #320]	; (8008ac4 <HAL_GPIO_Init+0x30c>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d019      	beq.n	80089bc <HAL_GPIO_Init+0x204>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a4f      	ldr	r2, [pc, #316]	; (8008ac8 <HAL_GPIO_Init+0x310>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d013      	beq.n	80089b8 <HAL_GPIO_Init+0x200>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4a4e      	ldr	r2, [pc, #312]	; (8008acc <HAL_GPIO_Init+0x314>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d00d      	beq.n	80089b4 <HAL_GPIO_Init+0x1fc>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4a4d      	ldr	r2, [pc, #308]	; (8008ad0 <HAL_GPIO_Init+0x318>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d007      	beq.n	80089b0 <HAL_GPIO_Init+0x1f8>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4a4c      	ldr	r2, [pc, #304]	; (8008ad4 <HAL_GPIO_Init+0x31c>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d101      	bne.n	80089ac <HAL_GPIO_Init+0x1f4>
 80089a8:	2307      	movs	r3, #7
 80089aa:	e00e      	b.n	80089ca <HAL_GPIO_Init+0x212>
 80089ac:	2308      	movs	r3, #8
 80089ae:	e00c      	b.n	80089ca <HAL_GPIO_Init+0x212>
 80089b0:	2306      	movs	r3, #6
 80089b2:	e00a      	b.n	80089ca <HAL_GPIO_Init+0x212>
 80089b4:	2305      	movs	r3, #5
 80089b6:	e008      	b.n	80089ca <HAL_GPIO_Init+0x212>
 80089b8:	2304      	movs	r3, #4
 80089ba:	e006      	b.n	80089ca <HAL_GPIO_Init+0x212>
 80089bc:	2303      	movs	r3, #3
 80089be:	e004      	b.n	80089ca <HAL_GPIO_Init+0x212>
 80089c0:	2302      	movs	r3, #2
 80089c2:	e002      	b.n	80089ca <HAL_GPIO_Init+0x212>
 80089c4:	2301      	movs	r3, #1
 80089c6:	e000      	b.n	80089ca <HAL_GPIO_Init+0x212>
 80089c8:	2300      	movs	r3, #0
 80089ca:	697a      	ldr	r2, [r7, #20]
 80089cc:	f002 0203 	and.w	r2, r2, #3
 80089d0:	0092      	lsls	r2, r2, #2
 80089d2:	4093      	lsls	r3, r2
 80089d4:	693a      	ldr	r2, [r7, #16]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80089da:	4937      	ldr	r1, [pc, #220]	; (8008ab8 <HAL_GPIO_Init+0x300>)
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	089b      	lsrs	r3, r3, #2
 80089e0:	3302      	adds	r3, #2
 80089e2:	693a      	ldr	r2, [r7, #16]
 80089e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80089e8:	4b3b      	ldr	r3, [pc, #236]	; (8008ad8 <HAL_GPIO_Init+0x320>)
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	43db      	mvns	r3, r3
 80089f2:	693a      	ldr	r2, [r7, #16]
 80089f4:	4013      	ands	r3, r2
 80089f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d003      	beq.n	8008a0c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8008a04:	693a      	ldr	r2, [r7, #16]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008a0c:	4a32      	ldr	r2, [pc, #200]	; (8008ad8 <HAL_GPIO_Init+0x320>)
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008a12:	4b31      	ldr	r3, [pc, #196]	; (8008ad8 <HAL_GPIO_Init+0x320>)
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	43db      	mvns	r3, r3
 8008a1c:	693a      	ldr	r2, [r7, #16]
 8008a1e:	4013      	ands	r3, r2
 8008a20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d003      	beq.n	8008a36 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8008a2e:	693a      	ldr	r2, [r7, #16]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008a36:	4a28      	ldr	r2, [pc, #160]	; (8008ad8 <HAL_GPIO_Init+0x320>)
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008a3c:	4b26      	ldr	r3, [pc, #152]	; (8008ad8 <HAL_GPIO_Init+0x320>)
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	43db      	mvns	r3, r3
 8008a46:	693a      	ldr	r2, [r7, #16]
 8008a48:	4013      	ands	r3, r2
 8008a4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d003      	beq.n	8008a60 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8008a58:	693a      	ldr	r2, [r7, #16]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008a60:	4a1d      	ldr	r2, [pc, #116]	; (8008ad8 <HAL_GPIO_Init+0x320>)
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8008a66:	4b1c      	ldr	r3, [pc, #112]	; (8008ad8 <HAL_GPIO_Init+0x320>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	43db      	mvns	r3, r3
 8008a70:	693a      	ldr	r2, [r7, #16]
 8008a72:	4013      	ands	r3, r2
 8008a74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d003      	beq.n	8008a8a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8008a82:	693a      	ldr	r2, [r7, #16]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008a8a:	4a13      	ldr	r2, [pc, #76]	; (8008ad8 <HAL_GPIO_Init+0x320>)
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	3301      	adds	r3, #1
 8008a94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f47f ae91 	bne.w	80087c8 <HAL_GPIO_Init+0x10>
  }
}
 8008aa6:	bf00      	nop
 8008aa8:	bf00      	nop
 8008aaa:	371c      	adds	r7, #28
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr
 8008ab4:	40021000 	.word	0x40021000
 8008ab8:	40010000 	.word	0x40010000
 8008abc:	48000400 	.word	0x48000400
 8008ac0:	48000800 	.word	0x48000800
 8008ac4:	48000c00 	.word	0x48000c00
 8008ac8:	48001000 	.word	0x48001000
 8008acc:	48001400 	.word	0x48001400
 8008ad0:	48001800 	.word	0x48001800
 8008ad4:	48001c00 	.word	0x48001c00
 8008ad8:	40010400 	.word	0x40010400

08008adc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ade:	b08f      	sub	sp, #60	; 0x3c
 8008ae0:	af0a      	add	r7, sp, #40	; 0x28
 8008ae2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d101      	bne.n	8008aee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e116      	b.n	8008d1c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d106      	bne.n	8008b0e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f006 f8cb 	bl	800eca4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2203      	movs	r2, #3
 8008b12:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d102      	bne.n	8008b28 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f002 ff76 	bl	800ba1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	603b      	str	r3, [r7, #0]
 8008b38:	687e      	ldr	r6, [r7, #4]
 8008b3a:	466d      	mov	r5, sp
 8008b3c:	f106 0410 	add.w	r4, r6, #16
 8008b40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008b42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008b44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008b46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008b48:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008b4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8008b50:	1d33      	adds	r3, r6, #4
 8008b52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b54:	6838      	ldr	r0, [r7, #0]
 8008b56:	f002 fe89 	bl	800b86c <USB_CoreInit>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d005      	beq.n	8008b6c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2202      	movs	r2, #2
 8008b64:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e0d7      	b.n	8008d1c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2100      	movs	r1, #0
 8008b72:	4618      	mov	r0, r3
 8008b74:	f002 ff64 	bl	800ba40 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b78:	2300      	movs	r3, #0
 8008b7a:	73fb      	strb	r3, [r7, #15]
 8008b7c:	e04a      	b.n	8008c14 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008b7e:	7bfa      	ldrb	r2, [r7, #15]
 8008b80:	6879      	ldr	r1, [r7, #4]
 8008b82:	4613      	mov	r3, r2
 8008b84:	00db      	lsls	r3, r3, #3
 8008b86:	4413      	add	r3, r2
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	440b      	add	r3, r1
 8008b8c:	333d      	adds	r3, #61	; 0x3d
 8008b8e:	2201      	movs	r2, #1
 8008b90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008b92:	7bfa      	ldrb	r2, [r7, #15]
 8008b94:	6879      	ldr	r1, [r7, #4]
 8008b96:	4613      	mov	r3, r2
 8008b98:	00db      	lsls	r3, r3, #3
 8008b9a:	4413      	add	r3, r2
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	440b      	add	r3, r1
 8008ba0:	333c      	adds	r3, #60	; 0x3c
 8008ba2:	7bfa      	ldrb	r2, [r7, #15]
 8008ba4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008ba6:	7bfa      	ldrb	r2, [r7, #15]
 8008ba8:	7bfb      	ldrb	r3, [r7, #15]
 8008baa:	b298      	uxth	r0, r3
 8008bac:	6879      	ldr	r1, [r7, #4]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	00db      	lsls	r3, r3, #3
 8008bb2:	4413      	add	r3, r2
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	440b      	add	r3, r1
 8008bb8:	3344      	adds	r3, #68	; 0x44
 8008bba:	4602      	mov	r2, r0
 8008bbc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008bbe:	7bfa      	ldrb	r2, [r7, #15]
 8008bc0:	6879      	ldr	r1, [r7, #4]
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	00db      	lsls	r3, r3, #3
 8008bc6:	4413      	add	r3, r2
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	440b      	add	r3, r1
 8008bcc:	3340      	adds	r3, #64	; 0x40
 8008bce:	2200      	movs	r2, #0
 8008bd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008bd2:	7bfa      	ldrb	r2, [r7, #15]
 8008bd4:	6879      	ldr	r1, [r7, #4]
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	00db      	lsls	r3, r3, #3
 8008bda:	4413      	add	r3, r2
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	440b      	add	r3, r1
 8008be0:	3348      	adds	r3, #72	; 0x48
 8008be2:	2200      	movs	r2, #0
 8008be4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008be6:	7bfa      	ldrb	r2, [r7, #15]
 8008be8:	6879      	ldr	r1, [r7, #4]
 8008bea:	4613      	mov	r3, r2
 8008bec:	00db      	lsls	r3, r3, #3
 8008bee:	4413      	add	r3, r2
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	440b      	add	r3, r1
 8008bf4:	334c      	adds	r3, #76	; 0x4c
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008bfa:	7bfa      	ldrb	r2, [r7, #15]
 8008bfc:	6879      	ldr	r1, [r7, #4]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	00db      	lsls	r3, r3, #3
 8008c02:	4413      	add	r3, r2
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	440b      	add	r3, r1
 8008c08:	3354      	adds	r3, #84	; 0x54
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c0e:	7bfb      	ldrb	r3, [r7, #15]
 8008c10:	3301      	adds	r3, #1
 8008c12:	73fb      	strb	r3, [r7, #15]
 8008c14:	7bfa      	ldrb	r2, [r7, #15]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d3af      	bcc.n	8008b7e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c1e:	2300      	movs	r3, #0
 8008c20:	73fb      	strb	r3, [r7, #15]
 8008c22:	e044      	b.n	8008cae <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008c24:	7bfa      	ldrb	r2, [r7, #15]
 8008c26:	6879      	ldr	r1, [r7, #4]
 8008c28:	4613      	mov	r3, r2
 8008c2a:	00db      	lsls	r3, r3, #3
 8008c2c:	4413      	add	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	440b      	add	r3, r1
 8008c32:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008c36:	2200      	movs	r2, #0
 8008c38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008c3a:	7bfa      	ldrb	r2, [r7, #15]
 8008c3c:	6879      	ldr	r1, [r7, #4]
 8008c3e:	4613      	mov	r3, r2
 8008c40:	00db      	lsls	r3, r3, #3
 8008c42:	4413      	add	r3, r2
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	440b      	add	r3, r1
 8008c48:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008c4c:	7bfa      	ldrb	r2, [r7, #15]
 8008c4e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008c50:	7bfa      	ldrb	r2, [r7, #15]
 8008c52:	6879      	ldr	r1, [r7, #4]
 8008c54:	4613      	mov	r3, r2
 8008c56:	00db      	lsls	r3, r3, #3
 8008c58:	4413      	add	r3, r2
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	440b      	add	r3, r1
 8008c5e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008c62:	2200      	movs	r2, #0
 8008c64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008c66:	7bfa      	ldrb	r2, [r7, #15]
 8008c68:	6879      	ldr	r1, [r7, #4]
 8008c6a:	4613      	mov	r3, r2
 8008c6c:	00db      	lsls	r3, r3, #3
 8008c6e:	4413      	add	r3, r2
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	440b      	add	r3, r1
 8008c74:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008c78:	2200      	movs	r2, #0
 8008c7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008c7c:	7bfa      	ldrb	r2, [r7, #15]
 8008c7e:	6879      	ldr	r1, [r7, #4]
 8008c80:	4613      	mov	r3, r2
 8008c82:	00db      	lsls	r3, r3, #3
 8008c84:	4413      	add	r3, r2
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	440b      	add	r3, r1
 8008c8a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008c8e:	2200      	movs	r2, #0
 8008c90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008c92:	7bfa      	ldrb	r2, [r7, #15]
 8008c94:	6879      	ldr	r1, [r7, #4]
 8008c96:	4613      	mov	r3, r2
 8008c98:	00db      	lsls	r3, r3, #3
 8008c9a:	4413      	add	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	440b      	add	r3, r1
 8008ca0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ca8:	7bfb      	ldrb	r3, [r7, #15]
 8008caa:	3301      	adds	r3, #1
 8008cac:	73fb      	strb	r3, [r7, #15]
 8008cae:	7bfa      	ldrb	r2, [r7, #15]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d3b5      	bcc.n	8008c24 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	603b      	str	r3, [r7, #0]
 8008cbe:	687e      	ldr	r6, [r7, #4]
 8008cc0:	466d      	mov	r5, sp
 8008cc2:	f106 0410 	add.w	r4, r6, #16
 8008cc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008cc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008cca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008ccc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008cce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008cd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8008cd6:	1d33      	adds	r3, r6, #4
 8008cd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008cda:	6838      	ldr	r0, [r7, #0]
 8008cdc:	f002 fefc 	bl	800bad8 <USB_DevInit>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d005      	beq.n	8008cf2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2202      	movs	r2, #2
 8008cea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e014      	b.n	8008d1c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d102      	bne.n	8008d10 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f001 f882 	bl	8009e14 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4618      	mov	r0, r3
 8008d16:	f003 ff84 	bl	800cc22 <USB_DevDisconnect>

  return HAL_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3714      	adds	r7, #20
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d24 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d101      	bne.n	8008d40 <HAL_PCD_Start+0x1c>
 8008d3c:	2302      	movs	r3, #2
 8008d3e:	e01c      	b.n	8008d7a <HAL_PCD_Start+0x56>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d105      	bne.n	8008d5c <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d54:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4618      	mov	r0, r3
 8008d62:	f002 fe4b 	bl	800b9fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f003 ff38 	bl	800cbe0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008d82:	b590      	push	{r4, r7, lr}
 8008d84:	b08d      	sub	sp, #52	; 0x34
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d90:	6a3b      	ldr	r3, [r7, #32]
 8008d92:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f003 fff6 	bl	800cd8a <USB_GetMode>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f040 847e 	bne.w	80096a2 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4618      	mov	r0, r3
 8008dac:	f003 ff5a 	bl	800cc64 <USB_ReadInterrupts>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	f000 8474 	beq.w	80096a0 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	0a1b      	lsrs	r3, r3, #8
 8008dc2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f003 ff47 	bl	800cc64 <USB_ReadInterrupts>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	f003 0302 	and.w	r3, r3, #2
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	d107      	bne.n	8008df0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	695a      	ldr	r2, [r3, #20]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f002 0202 	and.w	r2, r2, #2
 8008dee:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4618      	mov	r0, r3
 8008df6:	f003 ff35 	bl	800cc64 <USB_ReadInterrupts>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	f003 0310 	and.w	r3, r3, #16
 8008e00:	2b10      	cmp	r3, #16
 8008e02:	d161      	bne.n	8008ec8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	699a      	ldr	r2, [r3, #24]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f022 0210 	bic.w	r2, r2, #16
 8008e12:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008e14:	6a3b      	ldr	r3, [r7, #32]
 8008e16:	6a1b      	ldr	r3, [r3, #32]
 8008e18:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	f003 020f 	and.w	r2, r3, #15
 8008e20:	4613      	mov	r3, r2
 8008e22:	00db      	lsls	r3, r3, #3
 8008e24:	4413      	add	r3, r2
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	4413      	add	r3, r2
 8008e30:	3304      	adds	r3, #4
 8008e32:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	0c5b      	lsrs	r3, r3, #17
 8008e38:	f003 030f 	and.w	r3, r3, #15
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d124      	bne.n	8008e8a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008e40:	69ba      	ldr	r2, [r7, #24]
 8008e42:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008e46:	4013      	ands	r3, r2
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d035      	beq.n	8008eb8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	091b      	lsrs	r3, r3, #4
 8008e54:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008e56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	6a38      	ldr	r0, [r7, #32]
 8008e60:	f003 fd6c 	bl	800c93c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	691a      	ldr	r2, [r3, #16]
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	091b      	lsrs	r3, r3, #4
 8008e6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008e70:	441a      	add	r2, r3
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	6a1a      	ldr	r2, [r3, #32]
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	091b      	lsrs	r3, r3, #4
 8008e7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008e82:	441a      	add	r2, r3
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	621a      	str	r2, [r3, #32]
 8008e88:	e016      	b.n	8008eb8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	0c5b      	lsrs	r3, r3, #17
 8008e8e:	f003 030f 	and.w	r3, r3, #15
 8008e92:	2b06      	cmp	r3, #6
 8008e94:	d110      	bne.n	8008eb8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008e9c:	2208      	movs	r2, #8
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	6a38      	ldr	r0, [r7, #32]
 8008ea2:	f003 fd4b 	bl	800c93c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	6a1a      	ldr	r2, [r3, #32]
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	091b      	lsrs	r3, r3, #4
 8008eae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008eb2:	441a      	add	r2, r3
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	699a      	ldr	r2, [r3, #24]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f042 0210 	orr.w	r2, r2, #16
 8008ec6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f003 fec9 	bl	800cc64 <USB_ReadInterrupts>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ed8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008edc:	f040 80a7 	bne.w	800902e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f003 fece 	bl	800cc8a <USB_ReadDevAllOutEpInterrupt>
 8008eee:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008ef0:	e099      	b.n	8009026 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef4:	f003 0301 	and.w	r3, r3, #1
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	f000 808e 	beq.w	800901a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f04:	b2d2      	uxtb	r2, r2
 8008f06:	4611      	mov	r1, r2
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f003 fef2 	bl	800ccf2 <USB_ReadDevOutEPInterrupt>
 8008f0e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	f003 0301 	and.w	r3, r3, #1
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00c      	beq.n	8008f34 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1c:	015a      	lsls	r2, r3, #5
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	4413      	add	r3, r2
 8008f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f26:	461a      	mov	r2, r3
 8008f28:	2301      	movs	r3, #1
 8008f2a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008f2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 fe96 	bl	8009c60 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	f003 0308 	and.w	r3, r3, #8
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00c      	beq.n	8008f58 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f40:	015a      	lsls	r2, r3, #5
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	4413      	add	r3, r2
 8008f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	2308      	movs	r3, #8
 8008f4e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008f50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 fed2 	bl	8009cfc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	f003 0310 	and.w	r3, r3, #16
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d008      	beq.n	8008f74 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f64:	015a      	lsls	r2, r3, #5
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	4413      	add	r3, r2
 8008f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f6e:	461a      	mov	r2, r3
 8008f70:	2310      	movs	r3, #16
 8008f72:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	f003 0302 	and.w	r3, r3, #2
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d030      	beq.n	8008fe0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008f7e:	6a3b      	ldr	r3, [r7, #32]
 8008f80:	695b      	ldr	r3, [r3, #20]
 8008f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f86:	2b80      	cmp	r3, #128	; 0x80
 8008f88:	d109      	bne.n	8008f9e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008f8a:	69fb      	ldr	r3, [r7, #28]
 8008f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	69fa      	ldr	r2, [r7, #28]
 8008f94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008f9c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	00db      	lsls	r3, r3, #3
 8008fa4:	4413      	add	r3, r2
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	4413      	add	r3, r2
 8008fb0:	3304      	adds	r3, #4
 8008fb2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	78db      	ldrb	r3, [r3, #3]
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d108      	bne.n	8008fce <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f005 ffaf 	bl	800ef2c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd0:	015a      	lsls	r2, r3, #5
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fda:	461a      	mov	r2, r3
 8008fdc:	2302      	movs	r3, #2
 8008fde:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	f003 0320 	and.w	r3, r3, #32
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d008      	beq.n	8008ffc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fec:	015a      	lsls	r2, r3, #5
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	2320      	movs	r3, #32
 8008ffa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009002:	2b00      	cmp	r3, #0
 8009004:	d009      	beq.n	800901a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009008:	015a      	lsls	r2, r3, #5
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	4413      	add	r3, r2
 800900e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009012:	461a      	mov	r2, r3
 8009014:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009018:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800901a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901c:	3301      	adds	r3, #1
 800901e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009022:	085b      	lsrs	r3, r3, #1
 8009024:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009028:	2b00      	cmp	r3, #0
 800902a:	f47f af62 	bne.w	8008ef2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4618      	mov	r0, r3
 8009034:	f003 fe16 	bl	800cc64 <USB_ReadInterrupts>
 8009038:	4603      	mov	r3, r0
 800903a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800903e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009042:	f040 80a4 	bne.w	800918e <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4618      	mov	r0, r3
 800904c:	f003 fe37 	bl	800ccbe <USB_ReadDevAllInEpInterrupt>
 8009050:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009052:	2300      	movs	r3, #0
 8009054:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009056:	e096      	b.n	8009186 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905a:	f003 0301 	and.w	r3, r3, #1
 800905e:	2b00      	cmp	r3, #0
 8009060:	f000 808b 	beq.w	800917a <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800906a:	b2d2      	uxtb	r2, r2
 800906c:	4611      	mov	r1, r2
 800906e:	4618      	mov	r0, r3
 8009070:	f003 fe5d 	bl	800cd2e <USB_ReadDevInEPInterrupt>
 8009074:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	f003 0301 	and.w	r3, r3, #1
 800907c:	2b00      	cmp	r3, #0
 800907e:	d020      	beq.n	80090c2 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009082:	f003 030f 	and.w	r3, r3, #15
 8009086:	2201      	movs	r2, #1
 8009088:	fa02 f303 	lsl.w	r3, r2, r3
 800908c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	43db      	mvns	r3, r3
 800909a:	69f9      	ldr	r1, [r7, #28]
 800909c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090a0:	4013      	ands	r3, r2
 80090a2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80090a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a6:	015a      	lsls	r2, r3, #5
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	4413      	add	r3, r2
 80090ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090b0:	461a      	mov	r2, r3
 80090b2:	2301      	movs	r3, #1
 80090b4:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80090b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	4619      	mov	r1, r3
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f005 fea0 	bl	800ee02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	f003 0308 	and.w	r3, r3, #8
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d008      	beq.n	80090de <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80090cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ce:	015a      	lsls	r2, r3, #5
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	4413      	add	r3, r2
 80090d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090d8:	461a      	mov	r2, r3
 80090da:	2308      	movs	r3, #8
 80090dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	f003 0310 	and.w	r3, r3, #16
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d008      	beq.n	80090fa <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80090e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ea:	015a      	lsls	r2, r3, #5
 80090ec:	69fb      	ldr	r3, [r7, #28]
 80090ee:	4413      	add	r3, r2
 80090f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090f4:	461a      	mov	r2, r3
 80090f6:	2310      	movs	r3, #16
 80090f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009100:	2b00      	cmp	r3, #0
 8009102:	d008      	beq.n	8009116 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009106:	015a      	lsls	r2, r3, #5
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	4413      	add	r3, r2
 800910c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009110:	461a      	mov	r2, r3
 8009112:	2340      	movs	r3, #64	; 0x40
 8009114:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	f003 0302 	and.w	r3, r3, #2
 800911c:	2b00      	cmp	r3, #0
 800911e:	d023      	beq.n	8009168 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009120:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009122:	6a38      	ldr	r0, [r7, #32]
 8009124:	f002 fe24 	bl	800bd70 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8009128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800912a:	4613      	mov	r3, r2
 800912c:	00db      	lsls	r3, r3, #3
 800912e:	4413      	add	r3, r2
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	3338      	adds	r3, #56	; 0x38
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	4413      	add	r3, r2
 8009138:	3304      	adds	r3, #4
 800913a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	78db      	ldrb	r3, [r3, #3]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d108      	bne.n	8009156 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	2200      	movs	r2, #0
 8009148:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800914a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914c:	b2db      	uxtb	r3, r3
 800914e:	4619      	mov	r1, r3
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f005 fefd 	bl	800ef50 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009158:	015a      	lsls	r2, r3, #5
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	4413      	add	r3, r2
 800915e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009162:	461a      	mov	r2, r3
 8009164:	2302      	movs	r3, #2
 8009166:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800916e:	2b00      	cmp	r3, #0
 8009170:	d003      	beq.n	800917a <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009172:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 fcea 	bl	8009b4e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800917a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917c:	3301      	adds	r3, #1
 800917e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009182:	085b      	lsrs	r3, r3, #1
 8009184:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009188:	2b00      	cmp	r3, #0
 800918a:	f47f af65 	bne.w	8009058 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4618      	mov	r0, r3
 8009194:	f003 fd66 	bl	800cc64 <USB_ReadInterrupts>
 8009198:	4603      	mov	r3, r0
 800919a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800919e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091a2:	d122      	bne.n	80091ea <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	69fa      	ldr	r2, [r7, #28]
 80091ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091b2:	f023 0301 	bic.w	r3, r3, #1
 80091b6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d108      	bne.n	80091d4 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80091ca:	2100      	movs	r1, #0
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f006 f92f 	bl	800f430 <HAL_PCDEx_LPM_Callback>
 80091d2:	e002      	b.n	80091da <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f005 fe81 	bl	800eedc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	695a      	ldr	r2, [r3, #20]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80091e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4618      	mov	r0, r3
 80091f0:	f003 fd38 	bl	800cc64 <USB_ReadInterrupts>
 80091f4:	4603      	mov	r3, r0
 80091f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091fe:	d112      	bne.n	8009226 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	f003 0301 	and.w	r3, r3, #1
 800920c:	2b01      	cmp	r3, #1
 800920e:	d102      	bne.n	8009216 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f005 fe3d 	bl	800ee90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	695a      	ldr	r2, [r3, #20]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009224:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4618      	mov	r0, r3
 800922c:	f003 fd1a 	bl	800cc64 <USB_ReadInterrupts>
 8009230:	4603      	mov	r3, r0
 8009232:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800923a:	d121      	bne.n	8009280 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	695a      	ldr	r2, [r3, #20]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800924a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009252:	2b00      	cmp	r3, #0
 8009254:	d111      	bne.n	800927a <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2201      	movs	r2, #1
 800925a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009264:	089b      	lsrs	r3, r3, #2
 8009266:	f003 020f 	and.w	r2, r3, #15
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009270:	2101      	movs	r1, #1
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f006 f8dc 	bl	800f430 <HAL_PCDEx_LPM_Callback>
 8009278:	e002      	b.n	8009280 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f005 fe08 	bl	800ee90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4618      	mov	r0, r3
 8009286:	f003 fced 	bl	800cc64 <USB_ReadInterrupts>
 800928a:	4603      	mov	r3, r0
 800928c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009294:	f040 80b5 	bne.w	8009402 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	69fa      	ldr	r2, [r7, #28]
 80092a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092a6:	f023 0301 	bic.w	r3, r3, #1
 80092aa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2110      	movs	r1, #16
 80092b2:	4618      	mov	r0, r3
 80092b4:	f002 fd5c 	bl	800bd70 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80092b8:	2300      	movs	r3, #0
 80092ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092bc:	e046      	b.n	800934c <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80092be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c0:	015a      	lsls	r2, r3, #5
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	4413      	add	r3, r2
 80092c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ca:	461a      	mov	r2, r3
 80092cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80092d0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80092d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d4:	015a      	lsls	r2, r3, #5
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	4413      	add	r3, r2
 80092da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092e2:	0151      	lsls	r1, r2, #5
 80092e4:	69fa      	ldr	r2, [r7, #28]
 80092e6:	440a      	add	r2, r1
 80092e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80092f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80092f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f4:	015a      	lsls	r2, r3, #5
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	4413      	add	r3, r2
 80092fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092fe:	461a      	mov	r2, r3
 8009300:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009304:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009308:	015a      	lsls	r2, r3, #5
 800930a:	69fb      	ldr	r3, [r7, #28]
 800930c:	4413      	add	r3, r2
 800930e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009316:	0151      	lsls	r1, r2, #5
 8009318:	69fa      	ldr	r2, [r7, #28]
 800931a:	440a      	add	r2, r1
 800931c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009320:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009324:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009328:	015a      	lsls	r2, r3, #5
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	4413      	add	r3, r2
 800932e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009336:	0151      	lsls	r1, r2, #5
 8009338:	69fa      	ldr	r2, [r7, #28]
 800933a:	440a      	add	r2, r1
 800933c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009340:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009344:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009348:	3301      	adds	r3, #1
 800934a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009352:	429a      	cmp	r2, r3
 8009354:	d3b3      	bcc.n	80092be <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800935c:	69db      	ldr	r3, [r3, #28]
 800935e:	69fa      	ldr	r2, [r7, #28]
 8009360:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009364:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009368:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800936e:	2b00      	cmp	r3, #0
 8009370:	d016      	beq.n	80093a0 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009372:	69fb      	ldr	r3, [r7, #28]
 8009374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800937c:	69fa      	ldr	r2, [r7, #28]
 800937e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009382:	f043 030b 	orr.w	r3, r3, #11
 8009386:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800938a:	69fb      	ldr	r3, [r7, #28]
 800938c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009392:	69fa      	ldr	r2, [r7, #28]
 8009394:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009398:	f043 030b 	orr.w	r3, r3, #11
 800939c:	6453      	str	r3, [r2, #68]	; 0x44
 800939e:	e015      	b.n	80093cc <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80093a0:	69fb      	ldr	r3, [r7, #28]
 80093a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093a6:	695b      	ldr	r3, [r3, #20]
 80093a8:	69fa      	ldr	r2, [r7, #28]
 80093aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80093b2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80093b6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093be:	691b      	ldr	r3, [r3, #16]
 80093c0:	69fa      	ldr	r2, [r7, #28]
 80093c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093c6:	f043 030b 	orr.w	r3, r3, #11
 80093ca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	69fa      	ldr	r2, [r7, #28]
 80093d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80093de:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80093ea:	4619      	mov	r1, r3
 80093ec:	4610      	mov	r0, r2
 80093ee:	f003 fcfd 	bl	800cdec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	695a      	ldr	r2, [r3, #20]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009400:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4618      	mov	r0, r3
 8009408:	f003 fc2c 	bl	800cc64 <USB_ReadInterrupts>
 800940c:	4603      	mov	r3, r0
 800940e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009416:	d124      	bne.n	8009462 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4618      	mov	r0, r3
 800941e:	f003 fcc2 	bl	800cda6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4618      	mov	r0, r3
 8009428:	f002 fd1f 	bl	800be6a <USB_GetDevSpeed>
 800942c:	4603      	mov	r3, r0
 800942e:	461a      	mov	r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681c      	ldr	r4, [r3, #0]
 8009438:	f001 fbc4 	bl	800abc4 <HAL_RCC_GetHCLKFreq>
 800943c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009442:	b2db      	uxtb	r3, r3
 8009444:	461a      	mov	r2, r3
 8009446:	4620      	mov	r0, r4
 8009448:	f002 fa3c 	bl	800b8c4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f005 fd00 	bl	800ee52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	695a      	ldr	r2, [r3, #20]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009460:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4618      	mov	r0, r3
 8009468:	f003 fbfc 	bl	800cc64 <USB_ReadInterrupts>
 800946c:	4603      	mov	r3, r0
 800946e:	f003 0308 	and.w	r3, r3, #8
 8009472:	2b08      	cmp	r3, #8
 8009474:	d10a      	bne.n	800948c <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f005 fcdd 	bl	800ee36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	695a      	ldr	r2, [r3, #20]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f002 0208 	and.w	r2, r2, #8
 800948a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4618      	mov	r0, r3
 8009492:	f003 fbe7 	bl	800cc64 <USB_ReadInterrupts>
 8009496:	4603      	mov	r3, r0
 8009498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800949c:	2b80      	cmp	r3, #128	; 0x80
 800949e:	d122      	bne.n	80094e6 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80094a0:	6a3b      	ldr	r3, [r7, #32]
 80094a2:	699b      	ldr	r3, [r3, #24]
 80094a4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80094a8:	6a3b      	ldr	r3, [r7, #32]
 80094aa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80094ac:	2301      	movs	r3, #1
 80094ae:	627b      	str	r3, [r7, #36]	; 0x24
 80094b0:	e014      	b.n	80094dc <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80094b2:	6879      	ldr	r1, [r7, #4]
 80094b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094b6:	4613      	mov	r3, r2
 80094b8:	00db      	lsls	r3, r3, #3
 80094ba:	4413      	add	r3, r2
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	440b      	add	r3, r1
 80094c0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d105      	bne.n	80094d6 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80094ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	4619      	mov	r1, r3
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 fb0b 	bl	8009aec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80094d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d8:	3301      	adds	r3, #1
 80094da:	627b      	str	r3, [r7, #36]	; 0x24
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d3e5      	bcc.n	80094b2 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4618      	mov	r0, r3
 80094ec:	f003 fbba 	bl	800cc64 <USB_ReadInterrupts>
 80094f0:	4603      	mov	r3, r0
 80094f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094fa:	d13b      	bne.n	8009574 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80094fc:	2301      	movs	r3, #1
 80094fe:	627b      	str	r3, [r7, #36]	; 0x24
 8009500:	e02b      	b.n	800955a <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009504:	015a      	lsls	r2, r3, #5
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	4413      	add	r3, r2
 800950a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009512:	6879      	ldr	r1, [r7, #4]
 8009514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009516:	4613      	mov	r3, r2
 8009518:	00db      	lsls	r3, r3, #3
 800951a:	4413      	add	r3, r2
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	440b      	add	r3, r1
 8009520:	3340      	adds	r3, #64	; 0x40
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	2b01      	cmp	r3, #1
 8009526:	d115      	bne.n	8009554 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009528:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800952a:	2b00      	cmp	r3, #0
 800952c:	da12      	bge.n	8009554 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800952e:	6879      	ldr	r1, [r7, #4]
 8009530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009532:	4613      	mov	r3, r2
 8009534:	00db      	lsls	r3, r3, #3
 8009536:	4413      	add	r3, r2
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	440b      	add	r3, r1
 800953c:	333f      	adds	r3, #63	; 0x3f
 800953e:	2201      	movs	r2, #1
 8009540:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009544:	b2db      	uxtb	r3, r3
 8009546:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800954a:	b2db      	uxtb	r3, r3
 800954c:	4619      	mov	r1, r3
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 facc 	bl	8009aec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009556:	3301      	adds	r3, #1
 8009558:	627b      	str	r3, [r7, #36]	; 0x24
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009560:	429a      	cmp	r2, r3
 8009562:	d3ce      	bcc.n	8009502 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	695a      	ldr	r2, [r3, #20]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009572:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4618      	mov	r0, r3
 800957a:	f003 fb73 	bl	800cc64 <USB_ReadInterrupts>
 800957e:	4603      	mov	r3, r0
 8009580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009584:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009588:	d155      	bne.n	8009636 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800958a:	2301      	movs	r3, #1
 800958c:	627b      	str	r3, [r7, #36]	; 0x24
 800958e:	e045      	b.n	800961c <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009592:	015a      	lsls	r2, r3, #5
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	4413      	add	r3, r2
 8009598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80095a0:	6879      	ldr	r1, [r7, #4]
 80095a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095a4:	4613      	mov	r3, r2
 80095a6:	00db      	lsls	r3, r3, #3
 80095a8:	4413      	add	r3, r2
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	440b      	add	r3, r1
 80095ae:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d12e      	bne.n	8009616 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80095b8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	da2b      	bge.n	8009616 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80095be:	69bb      	ldr	r3, [r7, #24]
 80095c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80095ca:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d121      	bne.n	8009616 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80095d2:	6879      	ldr	r1, [r7, #4]
 80095d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095d6:	4613      	mov	r3, r2
 80095d8:	00db      	lsls	r3, r3, #3
 80095da:	4413      	add	r3, r2
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	440b      	add	r3, r1
 80095e0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80095e4:	2201      	movs	r2, #1
 80095e6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80095e8:	6a3b      	ldr	r3, [r7, #32]
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80095f0:	6a3b      	ldr	r3, [r7, #32]
 80095f2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80095f4:	6a3b      	ldr	r3, [r7, #32]
 80095f6:	695b      	ldr	r3, [r3, #20]
 80095f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d10a      	bne.n	8009616 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	69fa      	ldr	r2, [r7, #28]
 800960a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800960e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009612:	6053      	str	r3, [r2, #4]
            break;
 8009614:	e007      	b.n	8009626 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009618:	3301      	adds	r3, #1
 800961a:	627b      	str	r3, [r7, #36]	; 0x24
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009622:	429a      	cmp	r2, r3
 8009624:	d3b4      	bcc.n	8009590 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	695a      	ldr	r2, [r3, #20]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009634:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4618      	mov	r0, r3
 800963c:	f003 fb12 	bl	800cc64 <USB_ReadInterrupts>
 8009640:	4603      	mov	r3, r0
 8009642:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800964a:	d10a      	bne.n	8009662 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f005 fc91 	bl	800ef74 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	695a      	ldr	r2, [r3, #20]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009660:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4618      	mov	r0, r3
 8009668:	f003 fafc 	bl	800cc64 <USB_ReadInterrupts>
 800966c:	4603      	mov	r3, r0
 800966e:	f003 0304 	and.w	r3, r3, #4
 8009672:	2b04      	cmp	r3, #4
 8009674:	d115      	bne.n	80096a2 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	f003 0304 	and.w	r3, r3, #4
 8009684:	2b00      	cmp	r3, #0
 8009686:	d002      	beq.n	800968e <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f005 fc81 	bl	800ef90 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	6859      	ldr	r1, [r3, #4]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	69ba      	ldr	r2, [r7, #24]
 800969a:	430a      	orrs	r2, r1
 800969c:	605a      	str	r2, [r3, #4]
 800969e:	e000      	b.n	80096a2 <HAL_PCD_IRQHandler+0x920>
      return;
 80096a0:	bf00      	nop
    }
  }
}
 80096a2:	3734      	adds	r7, #52	; 0x34
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd90      	pop	{r4, r7, pc}

080096a8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	460b      	mov	r3, r1
 80096b2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d101      	bne.n	80096c2 <HAL_PCD_SetAddress+0x1a>
 80096be:	2302      	movs	r3, #2
 80096c0:	e013      	b.n	80096ea <HAL_PCD_SetAddress+0x42>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2201      	movs	r2, #1
 80096c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	78fa      	ldrb	r2, [r7, #3]
 80096ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	78fa      	ldrb	r2, [r7, #3]
 80096d8:	4611      	mov	r1, r2
 80096da:	4618      	mov	r0, r3
 80096dc:	f003 fa5a 	bl	800cb94 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3708      	adds	r7, #8
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b084      	sub	sp, #16
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
 80096fa:	4608      	mov	r0, r1
 80096fc:	4611      	mov	r1, r2
 80096fe:	461a      	mov	r2, r3
 8009700:	4603      	mov	r3, r0
 8009702:	70fb      	strb	r3, [r7, #3]
 8009704:	460b      	mov	r3, r1
 8009706:	803b      	strh	r3, [r7, #0]
 8009708:	4613      	mov	r3, r2
 800970a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800970c:	2300      	movs	r3, #0
 800970e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009710:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009714:	2b00      	cmp	r3, #0
 8009716:	da0f      	bge.n	8009738 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009718:	78fb      	ldrb	r3, [r7, #3]
 800971a:	f003 020f 	and.w	r2, r3, #15
 800971e:	4613      	mov	r3, r2
 8009720:	00db      	lsls	r3, r3, #3
 8009722:	4413      	add	r3, r2
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	3338      	adds	r3, #56	; 0x38
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	4413      	add	r3, r2
 800972c:	3304      	adds	r3, #4
 800972e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2201      	movs	r2, #1
 8009734:	705a      	strb	r2, [r3, #1]
 8009736:	e00f      	b.n	8009758 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009738:	78fb      	ldrb	r3, [r7, #3]
 800973a:	f003 020f 	and.w	r2, r3, #15
 800973e:	4613      	mov	r3, r2
 8009740:	00db      	lsls	r3, r3, #3
 8009742:	4413      	add	r3, r2
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	4413      	add	r3, r2
 800974e:	3304      	adds	r3, #4
 8009750:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2200      	movs	r2, #0
 8009756:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009758:	78fb      	ldrb	r3, [r7, #3]
 800975a:	f003 030f 	and.w	r3, r3, #15
 800975e:	b2da      	uxtb	r2, r3
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009764:	883a      	ldrh	r2, [r7, #0]
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	78ba      	ldrb	r2, [r7, #2]
 800976e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	785b      	ldrb	r3, [r3, #1]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d004      	beq.n	8009782 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	b29a      	uxth	r2, r3
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009782:	78bb      	ldrb	r3, [r7, #2]
 8009784:	2b02      	cmp	r3, #2
 8009786:	d102      	bne.n	800978e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2200      	movs	r2, #0
 800978c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009794:	2b01      	cmp	r3, #1
 8009796:	d101      	bne.n	800979c <HAL_PCD_EP_Open+0xaa>
 8009798:	2302      	movs	r3, #2
 800979a:	e00e      	b.n	80097ba <HAL_PCD_EP_Open+0xc8>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68f9      	ldr	r1, [r7, #12]
 80097aa:	4618      	mov	r0, r3
 80097ac:	f002 fb7c 	bl	800bea8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80097b8:	7afb      	ldrb	r3, [r7, #11]
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b084      	sub	sp, #16
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
 80097ca:	460b      	mov	r3, r1
 80097cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80097ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	da0f      	bge.n	80097f6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80097d6:	78fb      	ldrb	r3, [r7, #3]
 80097d8:	f003 020f 	and.w	r2, r3, #15
 80097dc:	4613      	mov	r3, r2
 80097de:	00db      	lsls	r3, r3, #3
 80097e0:	4413      	add	r3, r2
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	3338      	adds	r3, #56	; 0x38
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	4413      	add	r3, r2
 80097ea:	3304      	adds	r3, #4
 80097ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2201      	movs	r2, #1
 80097f2:	705a      	strb	r2, [r3, #1]
 80097f4:	e00f      	b.n	8009816 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80097f6:	78fb      	ldrb	r3, [r7, #3]
 80097f8:	f003 020f 	and.w	r2, r3, #15
 80097fc:	4613      	mov	r3, r2
 80097fe:	00db      	lsls	r3, r3, #3
 8009800:	4413      	add	r3, r2
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	4413      	add	r3, r2
 800980c:	3304      	adds	r3, #4
 800980e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2200      	movs	r2, #0
 8009814:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009816:	78fb      	ldrb	r3, [r7, #3]
 8009818:	f003 030f 	and.w	r3, r3, #15
 800981c:	b2da      	uxtb	r2, r3
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009828:	2b01      	cmp	r3, #1
 800982a:	d101      	bne.n	8009830 <HAL_PCD_EP_Close+0x6e>
 800982c:	2302      	movs	r3, #2
 800982e:	e00e      	b.n	800984e <HAL_PCD_EP_Close+0x8c>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	68f9      	ldr	r1, [r7, #12]
 800983e:	4618      	mov	r0, r3
 8009840:	f002 fbba 	bl	800bfb8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b086      	sub	sp, #24
 800985a:	af00      	add	r7, sp, #0
 800985c:	60f8      	str	r0, [r7, #12]
 800985e:	607a      	str	r2, [r7, #4]
 8009860:	603b      	str	r3, [r7, #0]
 8009862:	460b      	mov	r3, r1
 8009864:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009866:	7afb      	ldrb	r3, [r7, #11]
 8009868:	f003 020f 	and.w	r2, r3, #15
 800986c:	4613      	mov	r3, r2
 800986e:	00db      	lsls	r3, r3, #3
 8009870:	4413      	add	r3, r2
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	4413      	add	r3, r2
 800987c:	3304      	adds	r3, #4
 800987e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	683a      	ldr	r2, [r7, #0]
 800988a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	2200      	movs	r2, #0
 8009890:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	2200      	movs	r2, #0
 8009896:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009898:	7afb      	ldrb	r3, [r7, #11]
 800989a:	f003 030f 	and.w	r3, r3, #15
 800989e:	b2da      	uxtb	r2, r3
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80098a4:	7afb      	ldrb	r3, [r7, #11]
 80098a6:	f003 030f 	and.w	r3, r3, #15
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d106      	bne.n	80098bc <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	6979      	ldr	r1, [r7, #20]
 80098b4:	4618      	mov	r0, r3
 80098b6:	f002 fe3b 	bl	800c530 <USB_EP0StartXfer>
 80098ba:	e005      	b.n	80098c8 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	6979      	ldr	r1, [r7, #20]
 80098c2:	4618      	mov	r0, r3
 80098c4:	f002 fc54 	bl	800c170 <USB_EPStartXfer>
  }

  return HAL_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3718      	adds	r7, #24
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80098d2:	b480      	push	{r7}
 80098d4:	b083      	sub	sp, #12
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
 80098da:	460b      	mov	r3, r1
 80098dc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80098de:	78fb      	ldrb	r3, [r7, #3]
 80098e0:	f003 020f 	and.w	r2, r3, #15
 80098e4:	6879      	ldr	r1, [r7, #4]
 80098e6:	4613      	mov	r3, r2
 80098e8:	00db      	lsls	r3, r3, #3
 80098ea:	4413      	add	r3, r2
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	440b      	add	r3, r1
 80098f0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80098f4:	681b      	ldr	r3, [r3, #0]
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	370c      	adds	r7, #12
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr

08009902 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b086      	sub	sp, #24
 8009906:	af00      	add	r7, sp, #0
 8009908:	60f8      	str	r0, [r7, #12]
 800990a:	607a      	str	r2, [r7, #4]
 800990c:	603b      	str	r3, [r7, #0]
 800990e:	460b      	mov	r3, r1
 8009910:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009912:	7afb      	ldrb	r3, [r7, #11]
 8009914:	f003 020f 	and.w	r2, r3, #15
 8009918:	4613      	mov	r3, r2
 800991a:	00db      	lsls	r3, r3, #3
 800991c:	4413      	add	r3, r2
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	3338      	adds	r3, #56	; 0x38
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	4413      	add	r3, r2
 8009926:	3304      	adds	r3, #4
 8009928:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	683a      	ldr	r2, [r7, #0]
 8009934:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	2200      	movs	r2, #0
 800993a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	2201      	movs	r2, #1
 8009940:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009942:	7afb      	ldrb	r3, [r7, #11]
 8009944:	f003 030f 	and.w	r3, r3, #15
 8009948:	b2da      	uxtb	r2, r3
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800994e:	7afb      	ldrb	r3, [r7, #11]
 8009950:	f003 030f 	and.w	r3, r3, #15
 8009954:	2b00      	cmp	r3, #0
 8009956:	d106      	bne.n	8009966 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	6979      	ldr	r1, [r7, #20]
 800995e:	4618      	mov	r0, r3
 8009960:	f002 fde6 	bl	800c530 <USB_EP0StartXfer>
 8009964:	e005      	b.n	8009972 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	6979      	ldr	r1, [r7, #20]
 800996c:	4618      	mov	r0, r3
 800996e:	f002 fbff 	bl	800c170 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009972:	2300      	movs	r3, #0
}
 8009974:	4618      	mov	r0, r3
 8009976:	3718      	adds	r7, #24
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	460b      	mov	r3, r1
 8009986:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009988:	78fb      	ldrb	r3, [r7, #3]
 800998a:	f003 020f 	and.w	r2, r3, #15
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	429a      	cmp	r2, r3
 8009994:	d901      	bls.n	800999a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	e04e      	b.n	8009a38 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800999a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	da0f      	bge.n	80099c2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80099a2:	78fb      	ldrb	r3, [r7, #3]
 80099a4:	f003 020f 	and.w	r2, r3, #15
 80099a8:	4613      	mov	r3, r2
 80099aa:	00db      	lsls	r3, r3, #3
 80099ac:	4413      	add	r3, r2
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	3338      	adds	r3, #56	; 0x38
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	4413      	add	r3, r2
 80099b6:	3304      	adds	r3, #4
 80099b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2201      	movs	r2, #1
 80099be:	705a      	strb	r2, [r3, #1]
 80099c0:	e00d      	b.n	80099de <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80099c2:	78fa      	ldrb	r2, [r7, #3]
 80099c4:	4613      	mov	r3, r2
 80099c6:	00db      	lsls	r3, r3, #3
 80099c8:	4413      	add	r3, r2
 80099ca:	009b      	lsls	r3, r3, #2
 80099cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	4413      	add	r3, r2
 80099d4:	3304      	adds	r3, #4
 80099d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2200      	movs	r2, #0
 80099dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2201      	movs	r2, #1
 80099e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80099e4:	78fb      	ldrb	r3, [r7, #3]
 80099e6:	f003 030f 	and.w	r3, r3, #15
 80099ea:	b2da      	uxtb	r2, r3
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d101      	bne.n	80099fe <HAL_PCD_EP_SetStall+0x82>
 80099fa:	2302      	movs	r3, #2
 80099fc:	e01c      	b.n	8009a38 <HAL_PCD_EP_SetStall+0xbc>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2201      	movs	r2, #1
 8009a02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	68f9      	ldr	r1, [r7, #12]
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f002 ffed 	bl	800c9ec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009a12:	78fb      	ldrb	r3, [r7, #3]
 8009a14:	f003 030f 	and.w	r3, r3, #15
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d108      	bne.n	8009a2e <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009a26:	4619      	mov	r1, r3
 8009a28:	4610      	mov	r0, r2
 8009a2a:	f003 f9df 	bl	800cdec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2200      	movs	r2, #0
 8009a32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009a36:	2300      	movs	r3, #0
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3710      	adds	r7, #16
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	460b      	mov	r3, r1
 8009a4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009a4c:	78fb      	ldrb	r3, [r7, #3]
 8009a4e:	f003 020f 	and.w	r2, r3, #15
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d901      	bls.n	8009a5e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e042      	b.n	8009ae4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009a5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	da0f      	bge.n	8009a86 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009a66:	78fb      	ldrb	r3, [r7, #3]
 8009a68:	f003 020f 	and.w	r2, r3, #15
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	00db      	lsls	r3, r3, #3
 8009a70:	4413      	add	r3, r2
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	3338      	adds	r3, #56	; 0x38
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	4413      	add	r3, r2
 8009a7a:	3304      	adds	r3, #4
 8009a7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2201      	movs	r2, #1
 8009a82:	705a      	strb	r2, [r3, #1]
 8009a84:	e00f      	b.n	8009aa6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009a86:	78fb      	ldrb	r3, [r7, #3]
 8009a88:	f003 020f 	and.w	r2, r3, #15
 8009a8c:	4613      	mov	r3, r2
 8009a8e:	00db      	lsls	r3, r3, #3
 8009a90:	4413      	add	r3, r2
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	4413      	add	r3, r2
 8009a9c:	3304      	adds	r3, #4
 8009a9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009aac:	78fb      	ldrb	r3, [r7, #3]
 8009aae:	f003 030f 	and.w	r3, r3, #15
 8009ab2:	b2da      	uxtb	r2, r3
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009abe:	2b01      	cmp	r3, #1
 8009ac0:	d101      	bne.n	8009ac6 <HAL_PCD_EP_ClrStall+0x86>
 8009ac2:	2302      	movs	r3, #2
 8009ac4:	e00e      	b.n	8009ae4 <HAL_PCD_EP_ClrStall+0xa4>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	68f9      	ldr	r1, [r7, #12]
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f002 fff7 	bl	800cac8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	460b      	mov	r3, r1
 8009af6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009af8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	da0c      	bge.n	8009b1a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009b00:	78fb      	ldrb	r3, [r7, #3]
 8009b02:	f003 020f 	and.w	r2, r3, #15
 8009b06:	4613      	mov	r3, r2
 8009b08:	00db      	lsls	r3, r3, #3
 8009b0a:	4413      	add	r3, r2
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	3338      	adds	r3, #56	; 0x38
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	4413      	add	r3, r2
 8009b14:	3304      	adds	r3, #4
 8009b16:	60fb      	str	r3, [r7, #12]
 8009b18:	e00c      	b.n	8009b34 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009b1a:	78fb      	ldrb	r3, [r7, #3]
 8009b1c:	f003 020f 	and.w	r2, r3, #15
 8009b20:	4613      	mov	r3, r2
 8009b22:	00db      	lsls	r3, r3, #3
 8009b24:	4413      	add	r3, r2
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	4413      	add	r3, r2
 8009b30:	3304      	adds	r3, #4
 8009b32:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	68f9      	ldr	r1, [r7, #12]
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f002 fe1a 	bl	800c774 <USB_EPStopXfer>
 8009b40:	4603      	mov	r3, r0
 8009b42:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009b44:	7afb      	ldrb	r3, [r7, #11]
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3710      	adds	r7, #16
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b088      	sub	sp, #32
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
 8009b56:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009b62:	683a      	ldr	r2, [r7, #0]
 8009b64:	4613      	mov	r3, r2
 8009b66:	00db      	lsls	r3, r3, #3
 8009b68:	4413      	add	r3, r2
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	3338      	adds	r3, #56	; 0x38
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	4413      	add	r3, r2
 8009b72:	3304      	adds	r3, #4
 8009b74:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6a1a      	ldr	r2, [r3, #32]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	699b      	ldr	r3, [r3, #24]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d901      	bls.n	8009b86 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	e067      	b.n	8009c56 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	699a      	ldr	r2, [r3, #24]
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6a1b      	ldr	r3, [r3, #32]
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	69fa      	ldr	r2, [r7, #28]
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d902      	bls.n	8009ba2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	3303      	adds	r3, #3
 8009ba6:	089b      	lsrs	r3, r3, #2
 8009ba8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009baa:	e026      	b.n	8009bfa <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	699a      	ldr	r2, [r3, #24]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	6a1b      	ldr	r3, [r3, #32]
 8009bb4:	1ad3      	subs	r3, r2, r3
 8009bb6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	68db      	ldr	r3, [r3, #12]
 8009bbc:	69fa      	ldr	r2, [r7, #28]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d902      	bls.n	8009bc8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	3303      	adds	r3, #3
 8009bcc:	089b      	lsrs	r3, r3, #2
 8009bce:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	6919      	ldr	r1, [r3, #16]
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	b2da      	uxtb	r2, r3
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	6978      	ldr	r0, [r7, #20]
 8009bde:	f002 fe73 	bl	800c8c8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	691a      	ldr	r2, [r3, #16]
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	441a      	add	r2, r3
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6a1a      	ldr	r2, [r3, #32]
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	441a      	add	r2, r3
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	015a      	lsls	r2, r3, #5
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	4413      	add	r3, r2
 8009c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c06:	699b      	ldr	r3, [r3, #24]
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	69ba      	ldr	r2, [r7, #24]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d809      	bhi.n	8009c24 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6a1a      	ldr	r2, [r3, #32]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d203      	bcs.n	8009c24 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	699b      	ldr	r3, [r3, #24]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d1c3      	bne.n	8009bac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	699a      	ldr	r2, [r3, #24]
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6a1b      	ldr	r3, [r3, #32]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d811      	bhi.n	8009c54 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	f003 030f 	and.w	r3, r3, #15
 8009c36:	2201      	movs	r2, #1
 8009c38:	fa02 f303 	lsl.w	r3, r2, r3
 8009c3c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	43db      	mvns	r3, r3
 8009c4a:	6939      	ldr	r1, [r7, #16]
 8009c4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c50:	4013      	ands	r3, r2
 8009c52:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009c54:	2300      	movs	r3, #0
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3720      	adds	r7, #32
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
	...

08009c60 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b086      	sub	sp, #24
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	333c      	adds	r3, #60	; 0x3c
 8009c78:	3304      	adds	r3, #4
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	015a      	lsls	r2, r3, #5
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	4413      	add	r3, r2
 8009c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	4a19      	ldr	r2, [pc, #100]	; (8009cf8 <PCD_EP_OutXfrComplete_int+0x98>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d124      	bne.n	8009ce0 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d00a      	beq.n	8009cb6 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	015a      	lsls	r2, r3, #5
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cac:	461a      	mov	r2, r3
 8009cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cb2:	6093      	str	r3, [r2, #8]
 8009cb4:	e01a      	b.n	8009cec <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	f003 0320 	and.w	r3, r3, #32
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d008      	beq.n	8009cd2 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	015a      	lsls	r2, r3, #5
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ccc:	461a      	mov	r2, r3
 8009cce:	2320      	movs	r3, #32
 8009cd0:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f005 f877 	bl	800edcc <HAL_PCD_DataOutStageCallback>
 8009cde:	e005      	b.n	8009cec <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f005 f870 	bl	800edcc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8009cec:	2300      	movs	r3, #0
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3718      	adds	r7, #24
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	4f54310a 	.word	0x4f54310a

08009cfc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b086      	sub	sp, #24
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	333c      	adds	r3, #60	; 0x3c
 8009d14:	3304      	adds	r3, #4
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	015a      	lsls	r2, r3, #5
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	4413      	add	r3, r2
 8009d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	4a0c      	ldr	r2, [pc, #48]	; (8009d60 <PCD_EP_OutSetupPacket_int+0x64>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d90e      	bls.n	8009d50 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d009      	beq.n	8009d50 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	015a      	lsls	r2, r3, #5
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	4413      	add	r3, r2
 8009d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d48:	461a      	mov	r2, r3
 8009d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d4e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f005 f829 	bl	800eda8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8009d56:	2300      	movs	r3, #0
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3718      	adds	r7, #24
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	4f54300a 	.word	0x4f54300a

08009d64 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	70fb      	strb	r3, [r7, #3]
 8009d70:	4613      	mov	r3, r2
 8009d72:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009d7c:	78fb      	ldrb	r3, [r7, #3]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d107      	bne.n	8009d92 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009d82:	883b      	ldrh	r3, [r7, #0]
 8009d84:	0419      	lsls	r1, r3, #16
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	68ba      	ldr	r2, [r7, #8]
 8009d8c:	430a      	orrs	r2, r1
 8009d8e:	629a      	str	r2, [r3, #40]	; 0x28
 8009d90:	e028      	b.n	8009de4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d98:	0c1b      	lsrs	r3, r3, #16
 8009d9a:	68ba      	ldr	r2, [r7, #8]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009da0:	2300      	movs	r3, #0
 8009da2:	73fb      	strb	r3, [r7, #15]
 8009da4:	e00d      	b.n	8009dc2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	7bfb      	ldrb	r3, [r7, #15]
 8009dac:	3340      	adds	r3, #64	; 0x40
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	4413      	add	r3, r2
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	0c1b      	lsrs	r3, r3, #16
 8009db6:	68ba      	ldr	r2, [r7, #8]
 8009db8:	4413      	add	r3, r2
 8009dba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009dbc:	7bfb      	ldrb	r3, [r7, #15]
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	73fb      	strb	r3, [r7, #15]
 8009dc2:	7bfa      	ldrb	r2, [r7, #15]
 8009dc4:	78fb      	ldrb	r3, [r7, #3]
 8009dc6:	3b01      	subs	r3, #1
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d3ec      	bcc.n	8009da6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009dcc:	883b      	ldrh	r3, [r7, #0]
 8009dce:	0418      	lsls	r0, r3, #16
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6819      	ldr	r1, [r3, #0]
 8009dd4:	78fb      	ldrb	r3, [r7, #3]
 8009dd6:	3b01      	subs	r3, #1
 8009dd8:	68ba      	ldr	r2, [r7, #8]
 8009dda:	4302      	orrs	r2, r0
 8009ddc:	3340      	adds	r3, #64	; 0x40
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	440b      	add	r3, r1
 8009de2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3714      	adds	r7, #20
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr

08009df2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009df2:	b480      	push	{r7}
 8009df4:	b083      	sub	sp, #12
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	887a      	ldrh	r2, [r7, #2]
 8009e04:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	370c      	adds	r7, #12
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2201      	movs	r2, #1
 8009e26:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	699b      	ldr	r3, [r3, #24]
 8009e36:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e46:	f043 0303 	orr.w	r3, r3, #3
 8009e4a:	68fa      	ldr	r2, [r7, #12]
 8009e4c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009e4e:	2300      	movs	r3, #0
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3714      	adds	r7, #20
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr

08009e5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009e60:	4b0d      	ldr	r3, [pc, #52]	; (8009e98 <HAL_PWREx_GetVoltageRange+0x3c>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e6c:	d102      	bne.n	8009e74 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8009e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e72:	e00b      	b.n	8009e8c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8009e74:	4b08      	ldr	r3, [pc, #32]	; (8009e98 <HAL_PWREx_GetVoltageRange+0x3c>)
 8009e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e82:	d102      	bne.n	8009e8a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8009e84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e88:	e000      	b.n	8009e8c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8009e8a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr
 8009e96:	bf00      	nop
 8009e98:	40007000 	.word	0x40007000

08009e9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b085      	sub	sp, #20
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d141      	bne.n	8009f2e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009eaa:	4b4b      	ldr	r3, [pc, #300]	; (8009fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009eb6:	d131      	bne.n	8009f1c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009eb8:	4b47      	ldr	r3, [pc, #284]	; (8009fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ebe:	4a46      	ldr	r2, [pc, #280]	; (8009fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ec4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009ec8:	4b43      	ldr	r3, [pc, #268]	; (8009fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009ed0:	4a41      	ldr	r2, [pc, #260]	; (8009fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009ed6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009ed8:	4b40      	ldr	r3, [pc, #256]	; (8009fdc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2232      	movs	r2, #50	; 0x32
 8009ede:	fb02 f303 	mul.w	r3, r2, r3
 8009ee2:	4a3f      	ldr	r2, [pc, #252]	; (8009fe0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8009ee8:	0c9b      	lsrs	r3, r3, #18
 8009eea:	3301      	adds	r3, #1
 8009eec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009eee:	e002      	b.n	8009ef6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	3b01      	subs	r3, #1
 8009ef4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009ef6:	4b38      	ldr	r3, [pc, #224]	; (8009fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ef8:	695b      	ldr	r3, [r3, #20]
 8009efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f02:	d102      	bne.n	8009f0a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d1f2      	bne.n	8009ef0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009f0a:	4b33      	ldr	r3, [pc, #204]	; (8009fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f0c:	695b      	ldr	r3, [r3, #20]
 8009f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f16:	d158      	bne.n	8009fca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009f18:	2303      	movs	r3, #3
 8009f1a:	e057      	b.n	8009fcc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009f1c:	4b2e      	ldr	r3, [pc, #184]	; (8009fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f22:	4a2d      	ldr	r2, [pc, #180]	; (8009fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009f2c:	e04d      	b.n	8009fca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f34:	d141      	bne.n	8009fba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009f36:	4b28      	ldr	r3, [pc, #160]	; (8009fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f42:	d131      	bne.n	8009fa8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009f44:	4b24      	ldr	r3, [pc, #144]	; (8009fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f4a:	4a23      	ldr	r2, [pc, #140]	; (8009fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009f54:	4b20      	ldr	r3, [pc, #128]	; (8009fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009f5c:	4a1e      	ldr	r2, [pc, #120]	; (8009fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009f62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009f64:	4b1d      	ldr	r3, [pc, #116]	; (8009fdc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	2232      	movs	r2, #50	; 0x32
 8009f6a:	fb02 f303 	mul.w	r3, r2, r3
 8009f6e:	4a1c      	ldr	r2, [pc, #112]	; (8009fe0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009f70:	fba2 2303 	umull	r2, r3, r2, r3
 8009f74:	0c9b      	lsrs	r3, r3, #18
 8009f76:	3301      	adds	r3, #1
 8009f78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009f7a:	e002      	b.n	8009f82 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	3b01      	subs	r3, #1
 8009f80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009f82:	4b15      	ldr	r3, [pc, #84]	; (8009fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f84:	695b      	ldr	r3, [r3, #20]
 8009f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f8e:	d102      	bne.n	8009f96 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d1f2      	bne.n	8009f7c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009f96:	4b10      	ldr	r3, [pc, #64]	; (8009fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f98:	695b      	ldr	r3, [r3, #20]
 8009f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fa2:	d112      	bne.n	8009fca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009fa4:	2303      	movs	r3, #3
 8009fa6:	e011      	b.n	8009fcc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009fa8:	4b0b      	ldr	r3, [pc, #44]	; (8009fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fae:	4a0a      	ldr	r2, [pc, #40]	; (8009fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009fb8:	e007      	b.n	8009fca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009fba:	4b07      	ldr	r3, [pc, #28]	; (8009fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009fc2:	4a05      	ldr	r2, [pc, #20]	; (8009fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009fc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009fc8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3714      	adds	r7, #20
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr
 8009fd8:	40007000 	.word	0x40007000
 8009fdc:	20000000 	.word	0x20000000
 8009fe0:	431bde83 	.word	0x431bde83

08009fe4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8009fe8:	4b05      	ldr	r3, [pc, #20]	; (800a000 <HAL_PWREx_EnableVddUSB+0x1c>)
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	4a04      	ldr	r2, [pc, #16]	; (800a000 <HAL_PWREx_EnableVddUSB+0x1c>)
 8009fee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009ff2:	6053      	str	r3, [r2, #4]
}
 8009ff4:	bf00      	nop
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop
 800a000:	40007000 	.word	0x40007000

0800a004 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b088      	sub	sp, #32
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d102      	bne.n	800a018 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	f000 bc08 	b.w	800a828 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a018:	4b96      	ldr	r3, [pc, #600]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	f003 030c 	and.w	r3, r3, #12
 800a020:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a022:	4b94      	ldr	r3, [pc, #592]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	f003 0303 	and.w	r3, r3, #3
 800a02a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f003 0310 	and.w	r3, r3, #16
 800a034:	2b00      	cmp	r3, #0
 800a036:	f000 80e4 	beq.w	800a202 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d007      	beq.n	800a050 <HAL_RCC_OscConfig+0x4c>
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	2b0c      	cmp	r3, #12
 800a044:	f040 808b 	bne.w	800a15e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	f040 8087 	bne.w	800a15e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a050:	4b88      	ldr	r3, [pc, #544]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f003 0302 	and.w	r3, r3, #2
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d005      	beq.n	800a068 <HAL_RCC_OscConfig+0x64>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	699b      	ldr	r3, [r3, #24]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d101      	bne.n	800a068 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800a064:	2301      	movs	r3, #1
 800a066:	e3df      	b.n	800a828 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6a1a      	ldr	r2, [r3, #32]
 800a06c:	4b81      	ldr	r3, [pc, #516]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f003 0308 	and.w	r3, r3, #8
 800a074:	2b00      	cmp	r3, #0
 800a076:	d004      	beq.n	800a082 <HAL_RCC_OscConfig+0x7e>
 800a078:	4b7e      	ldr	r3, [pc, #504]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a080:	e005      	b.n	800a08e <HAL_RCC_OscConfig+0x8a>
 800a082:	4b7c      	ldr	r3, [pc, #496]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a088:	091b      	lsrs	r3, r3, #4
 800a08a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a08e:	4293      	cmp	r3, r2
 800a090:	d223      	bcs.n	800a0da <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a1b      	ldr	r3, [r3, #32]
 800a096:	4618      	mov	r0, r3
 800a098:	f000 fda0 	bl	800abdc <RCC_SetFlashLatencyFromMSIRange>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d001      	beq.n	800a0a6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e3c0      	b.n	800a828 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a0a6:	4b73      	ldr	r3, [pc, #460]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a72      	ldr	r2, [pc, #456]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a0ac:	f043 0308 	orr.w	r3, r3, #8
 800a0b0:	6013      	str	r3, [r2, #0]
 800a0b2:	4b70      	ldr	r3, [pc, #448]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	496d      	ldr	r1, [pc, #436]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a0c4:	4b6b      	ldr	r3, [pc, #428]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	69db      	ldr	r3, [r3, #28]
 800a0d0:	021b      	lsls	r3, r3, #8
 800a0d2:	4968      	ldr	r1, [pc, #416]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	604b      	str	r3, [r1, #4]
 800a0d8:	e025      	b.n	800a126 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a0da:	4b66      	ldr	r3, [pc, #408]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a65      	ldr	r2, [pc, #404]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a0e0:	f043 0308 	orr.w	r3, r3, #8
 800a0e4:	6013      	str	r3, [r2, #0]
 800a0e6:	4b63      	ldr	r3, [pc, #396]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6a1b      	ldr	r3, [r3, #32]
 800a0f2:	4960      	ldr	r1, [pc, #384]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a0f8:	4b5e      	ldr	r3, [pc, #376]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	69db      	ldr	r3, [r3, #28]
 800a104:	021b      	lsls	r3, r3, #8
 800a106:	495b      	ldr	r1, [pc, #364]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a108:	4313      	orrs	r3, r2
 800a10a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d109      	bne.n	800a126 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6a1b      	ldr	r3, [r3, #32]
 800a116:	4618      	mov	r0, r3
 800a118:	f000 fd60 	bl	800abdc <RCC_SetFlashLatencyFromMSIRange>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d001      	beq.n	800a126 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800a122:	2301      	movs	r3, #1
 800a124:	e380      	b.n	800a828 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a126:	f000 fcc1 	bl	800aaac <HAL_RCC_GetSysClockFreq>
 800a12a:	4602      	mov	r2, r0
 800a12c:	4b51      	ldr	r3, [pc, #324]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	091b      	lsrs	r3, r3, #4
 800a132:	f003 030f 	and.w	r3, r3, #15
 800a136:	4950      	ldr	r1, [pc, #320]	; (800a278 <HAL_RCC_OscConfig+0x274>)
 800a138:	5ccb      	ldrb	r3, [r1, r3]
 800a13a:	f003 031f 	and.w	r3, r3, #31
 800a13e:	fa22 f303 	lsr.w	r3, r2, r3
 800a142:	4a4e      	ldr	r2, [pc, #312]	; (800a27c <HAL_RCC_OscConfig+0x278>)
 800a144:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a146:	4b4e      	ldr	r3, [pc, #312]	; (800a280 <HAL_RCC_OscConfig+0x27c>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7fe f9a2 	bl	8008494 <HAL_InitTick>
 800a150:	4603      	mov	r3, r0
 800a152:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800a154:	7bfb      	ldrb	r3, [r7, #15]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d052      	beq.n	800a200 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800a15a:	7bfb      	ldrb	r3, [r7, #15]
 800a15c:	e364      	b.n	800a828 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	699b      	ldr	r3, [r3, #24]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d032      	beq.n	800a1cc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a166:	4b43      	ldr	r3, [pc, #268]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a42      	ldr	r2, [pc, #264]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a16c:	f043 0301 	orr.w	r3, r3, #1
 800a170:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a172:	f7fe f9df 	bl	8008534 <HAL_GetTick>
 800a176:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a178:	e008      	b.n	800a18c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a17a:	f7fe f9db 	bl	8008534 <HAL_GetTick>
 800a17e:	4602      	mov	r2, r0
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	1ad3      	subs	r3, r2, r3
 800a184:	2b02      	cmp	r3, #2
 800a186:	d901      	bls.n	800a18c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800a188:	2303      	movs	r3, #3
 800a18a:	e34d      	b.n	800a828 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a18c:	4b39      	ldr	r3, [pc, #228]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f003 0302 	and.w	r3, r3, #2
 800a194:	2b00      	cmp	r3, #0
 800a196:	d0f0      	beq.n	800a17a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a198:	4b36      	ldr	r3, [pc, #216]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a35      	ldr	r2, [pc, #212]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a19e:	f043 0308 	orr.w	r3, r3, #8
 800a1a2:	6013      	str	r3, [r2, #0]
 800a1a4:	4b33      	ldr	r3, [pc, #204]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6a1b      	ldr	r3, [r3, #32]
 800a1b0:	4930      	ldr	r1, [pc, #192]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a1b6:	4b2f      	ldr	r3, [pc, #188]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	69db      	ldr	r3, [r3, #28]
 800a1c2:	021b      	lsls	r3, r3, #8
 800a1c4:	492b      	ldr	r1, [pc, #172]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	604b      	str	r3, [r1, #4]
 800a1ca:	e01a      	b.n	800a202 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a1cc:	4b29      	ldr	r3, [pc, #164]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a28      	ldr	r2, [pc, #160]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a1d2:	f023 0301 	bic.w	r3, r3, #1
 800a1d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a1d8:	f7fe f9ac 	bl	8008534 <HAL_GetTick>
 800a1dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a1de:	e008      	b.n	800a1f2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a1e0:	f7fe f9a8 	bl	8008534 <HAL_GetTick>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	1ad3      	subs	r3, r2, r3
 800a1ea:	2b02      	cmp	r3, #2
 800a1ec:	d901      	bls.n	800a1f2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	e31a      	b.n	800a828 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a1f2:	4b20      	ldr	r3, [pc, #128]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f003 0302 	and.w	r3, r3, #2
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d1f0      	bne.n	800a1e0 <HAL_RCC_OscConfig+0x1dc>
 800a1fe:	e000      	b.n	800a202 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a200:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f003 0301 	and.w	r3, r3, #1
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d073      	beq.n	800a2f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	2b08      	cmp	r3, #8
 800a212:	d005      	beq.n	800a220 <HAL_RCC_OscConfig+0x21c>
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	2b0c      	cmp	r3, #12
 800a218:	d10e      	bne.n	800a238 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	2b03      	cmp	r3, #3
 800a21e:	d10b      	bne.n	800a238 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a220:	4b14      	ldr	r3, [pc, #80]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d063      	beq.n	800a2f4 <HAL_RCC_OscConfig+0x2f0>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d15f      	bne.n	800a2f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800a234:	2301      	movs	r3, #1
 800a236:	e2f7      	b.n	800a828 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a240:	d106      	bne.n	800a250 <HAL_RCC_OscConfig+0x24c>
 800a242:	4b0c      	ldr	r3, [pc, #48]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a0b      	ldr	r2, [pc, #44]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a24c:	6013      	str	r3, [r2, #0]
 800a24e:	e025      	b.n	800a29c <HAL_RCC_OscConfig+0x298>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a258:	d114      	bne.n	800a284 <HAL_RCC_OscConfig+0x280>
 800a25a:	4b06      	ldr	r3, [pc, #24]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a05      	ldr	r2, [pc, #20]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a264:	6013      	str	r3, [r2, #0]
 800a266:	4b03      	ldr	r3, [pc, #12]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a02      	ldr	r2, [pc, #8]	; (800a274 <HAL_RCC_OscConfig+0x270>)
 800a26c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a270:	6013      	str	r3, [r2, #0]
 800a272:	e013      	b.n	800a29c <HAL_RCC_OscConfig+0x298>
 800a274:	40021000 	.word	0x40021000
 800a278:	0800f5c0 	.word	0x0800f5c0
 800a27c:	20000000 	.word	0x20000000
 800a280:	20000004 	.word	0x20000004
 800a284:	4ba0      	ldr	r3, [pc, #640]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a9f      	ldr	r2, [pc, #636]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a28a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a28e:	6013      	str	r3, [r2, #0]
 800a290:	4b9d      	ldr	r3, [pc, #628]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a9c      	ldr	r2, [pc, #624]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a29a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d013      	beq.n	800a2cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2a4:	f7fe f946 	bl	8008534 <HAL_GetTick>
 800a2a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a2aa:	e008      	b.n	800a2be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a2ac:	f7fe f942 	bl	8008534 <HAL_GetTick>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	1ad3      	subs	r3, r2, r3
 800a2b6:	2b64      	cmp	r3, #100	; 0x64
 800a2b8:	d901      	bls.n	800a2be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	e2b4      	b.n	800a828 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a2be:	4b92      	ldr	r3, [pc, #584]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d0f0      	beq.n	800a2ac <HAL_RCC_OscConfig+0x2a8>
 800a2ca:	e014      	b.n	800a2f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2cc:	f7fe f932 	bl	8008534 <HAL_GetTick>
 800a2d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a2d2:	e008      	b.n	800a2e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a2d4:	f7fe f92e 	bl	8008534 <HAL_GetTick>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	1ad3      	subs	r3, r2, r3
 800a2de:	2b64      	cmp	r3, #100	; 0x64
 800a2e0:	d901      	bls.n	800a2e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a2e2:	2303      	movs	r3, #3
 800a2e4:	e2a0      	b.n	800a828 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a2e6:	4b88      	ldr	r3, [pc, #544]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d1f0      	bne.n	800a2d4 <HAL_RCC_OscConfig+0x2d0>
 800a2f2:	e000      	b.n	800a2f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a2f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f003 0302 	and.w	r3, r3, #2
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d060      	beq.n	800a3c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	2b04      	cmp	r3, #4
 800a306:	d005      	beq.n	800a314 <HAL_RCC_OscConfig+0x310>
 800a308:	69bb      	ldr	r3, [r7, #24]
 800a30a:	2b0c      	cmp	r3, #12
 800a30c:	d119      	bne.n	800a342 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	2b02      	cmp	r3, #2
 800a312:	d116      	bne.n	800a342 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a314:	4b7c      	ldr	r3, [pc, #496]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d005      	beq.n	800a32c <HAL_RCC_OscConfig+0x328>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	68db      	ldr	r3, [r3, #12]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d101      	bne.n	800a32c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800a328:	2301      	movs	r3, #1
 800a32a:	e27d      	b.n	800a828 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a32c:	4b76      	ldr	r3, [pc, #472]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	691b      	ldr	r3, [r3, #16]
 800a338:	061b      	lsls	r3, r3, #24
 800a33a:	4973      	ldr	r1, [pc, #460]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a33c:	4313      	orrs	r3, r2
 800a33e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a340:	e040      	b.n	800a3c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d023      	beq.n	800a392 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a34a:	4b6f      	ldr	r3, [pc, #444]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a6e      	ldr	r2, [pc, #440]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a356:	f7fe f8ed 	bl	8008534 <HAL_GetTick>
 800a35a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a35c:	e008      	b.n	800a370 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a35e:	f7fe f8e9 	bl	8008534 <HAL_GetTick>
 800a362:	4602      	mov	r2, r0
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	1ad3      	subs	r3, r2, r3
 800a368:	2b02      	cmp	r3, #2
 800a36a:	d901      	bls.n	800a370 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800a36c:	2303      	movs	r3, #3
 800a36e:	e25b      	b.n	800a828 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a370:	4b65      	ldr	r3, [pc, #404]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d0f0      	beq.n	800a35e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a37c:	4b62      	ldr	r3, [pc, #392]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	691b      	ldr	r3, [r3, #16]
 800a388:	061b      	lsls	r3, r3, #24
 800a38a:	495f      	ldr	r1, [pc, #380]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a38c:	4313      	orrs	r3, r2
 800a38e:	604b      	str	r3, [r1, #4]
 800a390:	e018      	b.n	800a3c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a392:	4b5d      	ldr	r3, [pc, #372]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a5c      	ldr	r2, [pc, #368]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a39c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a39e:	f7fe f8c9 	bl	8008534 <HAL_GetTick>
 800a3a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a3a4:	e008      	b.n	800a3b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a3a6:	f7fe f8c5 	bl	8008534 <HAL_GetTick>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	1ad3      	subs	r3, r2, r3
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d901      	bls.n	800a3b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800a3b4:	2303      	movs	r3, #3
 800a3b6:	e237      	b.n	800a828 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a3b8:	4b53      	ldr	r3, [pc, #332]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d1f0      	bne.n	800a3a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f003 0308 	and.w	r3, r3, #8
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d03c      	beq.n	800a44a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	695b      	ldr	r3, [r3, #20]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d01c      	beq.n	800a412 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a3d8:	4b4b      	ldr	r3, [pc, #300]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a3da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3de:	4a4a      	ldr	r2, [pc, #296]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a3e0:	f043 0301 	orr.w	r3, r3, #1
 800a3e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3e8:	f7fe f8a4 	bl	8008534 <HAL_GetTick>
 800a3ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a3ee:	e008      	b.n	800a402 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3f0:	f7fe f8a0 	bl	8008534 <HAL_GetTick>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	1ad3      	subs	r3, r2, r3
 800a3fa:	2b02      	cmp	r3, #2
 800a3fc:	d901      	bls.n	800a402 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a3fe:	2303      	movs	r3, #3
 800a400:	e212      	b.n	800a828 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a402:	4b41      	ldr	r3, [pc, #260]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a404:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a408:	f003 0302 	and.w	r3, r3, #2
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d0ef      	beq.n	800a3f0 <HAL_RCC_OscConfig+0x3ec>
 800a410:	e01b      	b.n	800a44a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a412:	4b3d      	ldr	r3, [pc, #244]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a414:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a418:	4a3b      	ldr	r2, [pc, #236]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a41a:	f023 0301 	bic.w	r3, r3, #1
 800a41e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a422:	f7fe f887 	bl	8008534 <HAL_GetTick>
 800a426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a428:	e008      	b.n	800a43c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a42a:	f7fe f883 	bl	8008534 <HAL_GetTick>
 800a42e:	4602      	mov	r2, r0
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	2b02      	cmp	r3, #2
 800a436:	d901      	bls.n	800a43c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800a438:	2303      	movs	r3, #3
 800a43a:	e1f5      	b.n	800a828 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a43c:	4b32      	ldr	r3, [pc, #200]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a43e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a442:	f003 0302 	and.w	r3, r3, #2
 800a446:	2b00      	cmp	r3, #0
 800a448:	d1ef      	bne.n	800a42a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f003 0304 	and.w	r3, r3, #4
 800a452:	2b00      	cmp	r3, #0
 800a454:	f000 80a6 	beq.w	800a5a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a458:	2300      	movs	r3, #0
 800a45a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a45c:	4b2a      	ldr	r3, [pc, #168]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a45e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a464:	2b00      	cmp	r3, #0
 800a466:	d10d      	bne.n	800a484 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a468:	4b27      	ldr	r3, [pc, #156]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a46a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a46c:	4a26      	ldr	r2, [pc, #152]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a46e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a472:	6593      	str	r3, [r2, #88]	; 0x58
 800a474:	4b24      	ldr	r3, [pc, #144]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a47c:	60bb      	str	r3, [r7, #8]
 800a47e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a480:	2301      	movs	r3, #1
 800a482:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a484:	4b21      	ldr	r3, [pc, #132]	; (800a50c <HAL_RCC_OscConfig+0x508>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d118      	bne.n	800a4c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a490:	4b1e      	ldr	r3, [pc, #120]	; (800a50c <HAL_RCC_OscConfig+0x508>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a1d      	ldr	r2, [pc, #116]	; (800a50c <HAL_RCC_OscConfig+0x508>)
 800a496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a49a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a49c:	f7fe f84a 	bl	8008534 <HAL_GetTick>
 800a4a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a4a2:	e008      	b.n	800a4b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a4a4:	f7fe f846 	bl	8008534 <HAL_GetTick>
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	1ad3      	subs	r3, r2, r3
 800a4ae:	2b02      	cmp	r3, #2
 800a4b0:	d901      	bls.n	800a4b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800a4b2:	2303      	movs	r3, #3
 800a4b4:	e1b8      	b.n	800a828 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a4b6:	4b15      	ldr	r3, [pc, #84]	; (800a50c <HAL_RCC_OscConfig+0x508>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d0f0      	beq.n	800a4a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d108      	bne.n	800a4dc <HAL_RCC_OscConfig+0x4d8>
 800a4ca:	4b0f      	ldr	r3, [pc, #60]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a4cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4d0:	4a0d      	ldr	r2, [pc, #52]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a4d2:	f043 0301 	orr.w	r3, r3, #1
 800a4d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a4da:	e029      	b.n	800a530 <HAL_RCC_OscConfig+0x52c>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	689b      	ldr	r3, [r3, #8]
 800a4e0:	2b05      	cmp	r3, #5
 800a4e2:	d115      	bne.n	800a510 <HAL_RCC_OscConfig+0x50c>
 800a4e4:	4b08      	ldr	r3, [pc, #32]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a4e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4ea:	4a07      	ldr	r2, [pc, #28]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a4ec:	f043 0304 	orr.w	r3, r3, #4
 800a4f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a4f4:	4b04      	ldr	r3, [pc, #16]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a4f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4fa:	4a03      	ldr	r2, [pc, #12]	; (800a508 <HAL_RCC_OscConfig+0x504>)
 800a4fc:	f043 0301 	orr.w	r3, r3, #1
 800a500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a504:	e014      	b.n	800a530 <HAL_RCC_OscConfig+0x52c>
 800a506:	bf00      	nop
 800a508:	40021000 	.word	0x40021000
 800a50c:	40007000 	.word	0x40007000
 800a510:	4b9d      	ldr	r3, [pc, #628]	; (800a788 <HAL_RCC_OscConfig+0x784>)
 800a512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a516:	4a9c      	ldr	r2, [pc, #624]	; (800a788 <HAL_RCC_OscConfig+0x784>)
 800a518:	f023 0301 	bic.w	r3, r3, #1
 800a51c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a520:	4b99      	ldr	r3, [pc, #612]	; (800a788 <HAL_RCC_OscConfig+0x784>)
 800a522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a526:	4a98      	ldr	r2, [pc, #608]	; (800a788 <HAL_RCC_OscConfig+0x784>)
 800a528:	f023 0304 	bic.w	r3, r3, #4
 800a52c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	689b      	ldr	r3, [r3, #8]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d016      	beq.n	800a566 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a538:	f7fd fffc 	bl	8008534 <HAL_GetTick>
 800a53c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a53e:	e00a      	b.n	800a556 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a540:	f7fd fff8 	bl	8008534 <HAL_GetTick>
 800a544:	4602      	mov	r2, r0
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	1ad3      	subs	r3, r2, r3
 800a54a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a54e:	4293      	cmp	r3, r2
 800a550:	d901      	bls.n	800a556 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800a552:	2303      	movs	r3, #3
 800a554:	e168      	b.n	800a828 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a556:	4b8c      	ldr	r3, [pc, #560]	; (800a788 <HAL_RCC_OscConfig+0x784>)
 800a558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a55c:	f003 0302 	and.w	r3, r3, #2
 800a560:	2b00      	cmp	r3, #0
 800a562:	d0ed      	beq.n	800a540 <HAL_RCC_OscConfig+0x53c>
 800a564:	e015      	b.n	800a592 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a566:	f7fd ffe5 	bl	8008534 <HAL_GetTick>
 800a56a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a56c:	e00a      	b.n	800a584 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a56e:	f7fd ffe1 	bl	8008534 <HAL_GetTick>
 800a572:	4602      	mov	r2, r0
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	1ad3      	subs	r3, r2, r3
 800a578:	f241 3288 	movw	r2, #5000	; 0x1388
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d901      	bls.n	800a584 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800a580:	2303      	movs	r3, #3
 800a582:	e151      	b.n	800a828 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a584:	4b80      	ldr	r3, [pc, #512]	; (800a788 <HAL_RCC_OscConfig+0x784>)
 800a586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a58a:	f003 0302 	and.w	r3, r3, #2
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d1ed      	bne.n	800a56e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a592:	7ffb      	ldrb	r3, [r7, #31]
 800a594:	2b01      	cmp	r3, #1
 800a596:	d105      	bne.n	800a5a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a598:	4b7b      	ldr	r3, [pc, #492]	; (800a788 <HAL_RCC_OscConfig+0x784>)
 800a59a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a59c:	4a7a      	ldr	r2, [pc, #488]	; (800a788 <HAL_RCC_OscConfig+0x784>)
 800a59e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a5a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f003 0320 	and.w	r3, r3, #32
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d03c      	beq.n	800a62a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d01c      	beq.n	800a5f2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a5b8:	4b73      	ldr	r3, [pc, #460]	; (800a788 <HAL_RCC_OscConfig+0x784>)
 800a5ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a5be:	4a72      	ldr	r2, [pc, #456]	; (800a788 <HAL_RCC_OscConfig+0x784>)
 800a5c0:	f043 0301 	orr.w	r3, r3, #1
 800a5c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5c8:	f7fd ffb4 	bl	8008534 <HAL_GetTick>
 800a5cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a5ce:	e008      	b.n	800a5e2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a5d0:	f7fd ffb0 	bl	8008534 <HAL_GetTick>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	1ad3      	subs	r3, r2, r3
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	d901      	bls.n	800a5e2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	e122      	b.n	800a828 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a5e2:	4b69      	ldr	r3, [pc, #420]	; (800a788 <HAL_RCC_OscConfig+0x784>)
 800a5e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a5e8:	f003 0302 	and.w	r3, r3, #2
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d0ef      	beq.n	800a5d0 <HAL_RCC_OscConfig+0x5cc>
 800a5f0:	e01b      	b.n	800a62a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a5f2:	4b65      	ldr	r3, [pc, #404]	; (800a788 <HAL_RCC_OscConfig+0x784>)
 800a5f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a5f8:	4a63      	ldr	r2, [pc, #396]	; (800a788 <HAL_RCC_OscConfig+0x784>)
 800a5fa:	f023 0301 	bic.w	r3, r3, #1
 800a5fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a602:	f7fd ff97 	bl	8008534 <HAL_GetTick>
 800a606:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a608:	e008      	b.n	800a61c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a60a:	f7fd ff93 	bl	8008534 <HAL_GetTick>
 800a60e:	4602      	mov	r2, r0
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	1ad3      	subs	r3, r2, r3
 800a614:	2b02      	cmp	r3, #2
 800a616:	d901      	bls.n	800a61c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800a618:	2303      	movs	r3, #3
 800a61a:	e105      	b.n	800a828 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a61c:	4b5a      	ldr	r3, [pc, #360]	; (800a788 <HAL_RCC_OscConfig+0x784>)
 800a61e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a622:	f003 0302 	and.w	r3, r3, #2
 800a626:	2b00      	cmp	r3, #0
 800a628:	d1ef      	bne.n	800a60a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a62e:	2b00      	cmp	r3, #0
 800a630:	f000 80f9 	beq.w	800a826 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a638:	2b02      	cmp	r3, #2
 800a63a:	f040 80cf 	bne.w	800a7dc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a63e:	4b52      	ldr	r3, [pc, #328]	; (800a788 <HAL_RCC_OscConfig+0x784>)
 800a640:	68db      	ldr	r3, [r3, #12]
 800a642:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	f003 0203 	and.w	r2, r3, #3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64e:	429a      	cmp	r2, r3
 800a650:	d12c      	bne.n	800a6ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a65c:	3b01      	subs	r3, #1
 800a65e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a660:	429a      	cmp	r2, r3
 800a662:	d123      	bne.n	800a6ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a66e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a670:	429a      	cmp	r2, r3
 800a672:	d11b      	bne.n	800a6ac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a67e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a680:	429a      	cmp	r2, r3
 800a682:	d113      	bne.n	800a6ac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a68e:	085b      	lsrs	r3, r3, #1
 800a690:	3b01      	subs	r3, #1
 800a692:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a694:	429a      	cmp	r2, r3
 800a696:	d109      	bne.n	800a6ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a2:	085b      	lsrs	r3, r3, #1
 800a6a4:	3b01      	subs	r3, #1
 800a6a6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d071      	beq.n	800a790 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a6ac:	69bb      	ldr	r3, [r7, #24]
 800a6ae:	2b0c      	cmp	r3, #12
 800a6b0:	d068      	beq.n	800a784 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a6b2:	4b35      	ldr	r3, [pc, #212]	; (800a788 <HAL_RCC_OscConfig+0x784>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d105      	bne.n	800a6ca <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800a6be:	4b32      	ldr	r3, [pc, #200]	; (800a788 <HAL_RCC_OscConfig+0x784>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d001      	beq.n	800a6ce <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	e0ac      	b.n	800a828 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a6ce:	4b2e      	ldr	r3, [pc, #184]	; (800a788 <HAL_RCC_OscConfig+0x784>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a2d      	ldr	r2, [pc, #180]	; (800a788 <HAL_RCC_OscConfig+0x784>)
 800a6d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a6d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a6da:	f7fd ff2b 	bl	8008534 <HAL_GetTick>
 800a6de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a6e0:	e008      	b.n	800a6f4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6e2:	f7fd ff27 	bl	8008534 <HAL_GetTick>
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	1ad3      	subs	r3, r2, r3
 800a6ec:	2b02      	cmp	r3, #2
 800a6ee:	d901      	bls.n	800a6f4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800a6f0:	2303      	movs	r3, #3
 800a6f2:	e099      	b.n	800a828 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a6f4:	4b24      	ldr	r3, [pc, #144]	; (800a788 <HAL_RCC_OscConfig+0x784>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d1f0      	bne.n	800a6e2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a700:	4b21      	ldr	r3, [pc, #132]	; (800a788 <HAL_RCC_OscConfig+0x784>)
 800a702:	68da      	ldr	r2, [r3, #12]
 800a704:	4b21      	ldr	r3, [pc, #132]	; (800a78c <HAL_RCC_OscConfig+0x788>)
 800a706:	4013      	ands	r3, r2
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a710:	3a01      	subs	r2, #1
 800a712:	0112      	lsls	r2, r2, #4
 800a714:	4311      	orrs	r1, r2
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a71a:	0212      	lsls	r2, r2, #8
 800a71c:	4311      	orrs	r1, r2
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a722:	0852      	lsrs	r2, r2, #1
 800a724:	3a01      	subs	r2, #1
 800a726:	0552      	lsls	r2, r2, #21
 800a728:	4311      	orrs	r1, r2
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a72e:	0852      	lsrs	r2, r2, #1
 800a730:	3a01      	subs	r2, #1
 800a732:	0652      	lsls	r2, r2, #25
 800a734:	4311      	orrs	r1, r2
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a73a:	06d2      	lsls	r2, r2, #27
 800a73c:	430a      	orrs	r2, r1
 800a73e:	4912      	ldr	r1, [pc, #72]	; (800a788 <HAL_RCC_OscConfig+0x784>)
 800a740:	4313      	orrs	r3, r2
 800a742:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a744:	4b10      	ldr	r3, [pc, #64]	; (800a788 <HAL_RCC_OscConfig+0x784>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a0f      	ldr	r2, [pc, #60]	; (800a788 <HAL_RCC_OscConfig+0x784>)
 800a74a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a74e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a750:	4b0d      	ldr	r3, [pc, #52]	; (800a788 <HAL_RCC_OscConfig+0x784>)
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	4a0c      	ldr	r2, [pc, #48]	; (800a788 <HAL_RCC_OscConfig+0x784>)
 800a756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a75a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a75c:	f7fd feea 	bl	8008534 <HAL_GetTick>
 800a760:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a762:	e008      	b.n	800a776 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a764:	f7fd fee6 	bl	8008534 <HAL_GetTick>
 800a768:	4602      	mov	r2, r0
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	1ad3      	subs	r3, r2, r3
 800a76e:	2b02      	cmp	r3, #2
 800a770:	d901      	bls.n	800a776 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800a772:	2303      	movs	r3, #3
 800a774:	e058      	b.n	800a828 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a776:	4b04      	ldr	r3, [pc, #16]	; (800a788 <HAL_RCC_OscConfig+0x784>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d0f0      	beq.n	800a764 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a782:	e050      	b.n	800a826 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	e04f      	b.n	800a828 <HAL_RCC_OscConfig+0x824>
 800a788:	40021000 	.word	0x40021000
 800a78c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a790:	4b27      	ldr	r3, [pc, #156]	; (800a830 <HAL_RCC_OscConfig+0x82c>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d144      	bne.n	800a826 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a79c:	4b24      	ldr	r3, [pc, #144]	; (800a830 <HAL_RCC_OscConfig+0x82c>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a23      	ldr	r2, [pc, #140]	; (800a830 <HAL_RCC_OscConfig+0x82c>)
 800a7a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a7a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a7a8:	4b21      	ldr	r3, [pc, #132]	; (800a830 <HAL_RCC_OscConfig+0x82c>)
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	4a20      	ldr	r2, [pc, #128]	; (800a830 <HAL_RCC_OscConfig+0x82c>)
 800a7ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a7b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a7b4:	f7fd febe 	bl	8008534 <HAL_GetTick>
 800a7b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a7ba:	e008      	b.n	800a7ce <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7bc:	f7fd feba 	bl	8008534 <HAL_GetTick>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	1ad3      	subs	r3, r2, r3
 800a7c6:	2b02      	cmp	r3, #2
 800a7c8:	d901      	bls.n	800a7ce <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	e02c      	b.n	800a828 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a7ce:	4b18      	ldr	r3, [pc, #96]	; (800a830 <HAL_RCC_OscConfig+0x82c>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d0f0      	beq.n	800a7bc <HAL_RCC_OscConfig+0x7b8>
 800a7da:	e024      	b.n	800a826 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a7dc:	69bb      	ldr	r3, [r7, #24]
 800a7de:	2b0c      	cmp	r3, #12
 800a7e0:	d01f      	beq.n	800a822 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a7e2:	4b13      	ldr	r3, [pc, #76]	; (800a830 <HAL_RCC_OscConfig+0x82c>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4a12      	ldr	r2, [pc, #72]	; (800a830 <HAL_RCC_OscConfig+0x82c>)
 800a7e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a7ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7ee:	f7fd fea1 	bl	8008534 <HAL_GetTick>
 800a7f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a7f4:	e008      	b.n	800a808 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7f6:	f7fd fe9d 	bl	8008534 <HAL_GetTick>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	1ad3      	subs	r3, r2, r3
 800a800:	2b02      	cmp	r3, #2
 800a802:	d901      	bls.n	800a808 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800a804:	2303      	movs	r3, #3
 800a806:	e00f      	b.n	800a828 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a808:	4b09      	ldr	r3, [pc, #36]	; (800a830 <HAL_RCC_OscConfig+0x82c>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a810:	2b00      	cmp	r3, #0
 800a812:	d1f0      	bne.n	800a7f6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800a814:	4b06      	ldr	r3, [pc, #24]	; (800a830 <HAL_RCC_OscConfig+0x82c>)
 800a816:	68da      	ldr	r2, [r3, #12]
 800a818:	4905      	ldr	r1, [pc, #20]	; (800a830 <HAL_RCC_OscConfig+0x82c>)
 800a81a:	4b06      	ldr	r3, [pc, #24]	; (800a834 <HAL_RCC_OscConfig+0x830>)
 800a81c:	4013      	ands	r3, r2
 800a81e:	60cb      	str	r3, [r1, #12]
 800a820:	e001      	b.n	800a826 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a822:	2301      	movs	r3, #1
 800a824:	e000      	b.n	800a828 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800a826:	2300      	movs	r3, #0
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3720      	adds	r7, #32
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	40021000 	.word	0x40021000
 800a834:	feeefffc 	.word	0xfeeefffc

0800a838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b086      	sub	sp, #24
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a842:	2300      	movs	r3, #0
 800a844:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d101      	bne.n	800a850 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	e11d      	b.n	800aa8c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a850:	4b90      	ldr	r3, [pc, #576]	; (800aa94 <HAL_RCC_ClockConfig+0x25c>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f003 030f 	and.w	r3, r3, #15
 800a858:	683a      	ldr	r2, [r7, #0]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d910      	bls.n	800a880 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a85e:	4b8d      	ldr	r3, [pc, #564]	; (800aa94 <HAL_RCC_ClockConfig+0x25c>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f023 020f 	bic.w	r2, r3, #15
 800a866:	498b      	ldr	r1, [pc, #556]	; (800aa94 <HAL_RCC_ClockConfig+0x25c>)
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	4313      	orrs	r3, r2
 800a86c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a86e:	4b89      	ldr	r3, [pc, #548]	; (800aa94 <HAL_RCC_ClockConfig+0x25c>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f003 030f 	and.w	r3, r3, #15
 800a876:	683a      	ldr	r2, [r7, #0]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d001      	beq.n	800a880 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a87c:	2301      	movs	r3, #1
 800a87e:	e105      	b.n	800aa8c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f003 0302 	and.w	r3, r3, #2
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d010      	beq.n	800a8ae <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	689a      	ldr	r2, [r3, #8]
 800a890:	4b81      	ldr	r3, [pc, #516]	; (800aa98 <HAL_RCC_ClockConfig+0x260>)
 800a892:	689b      	ldr	r3, [r3, #8]
 800a894:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a898:	429a      	cmp	r2, r3
 800a89a:	d908      	bls.n	800a8ae <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a89c:	4b7e      	ldr	r3, [pc, #504]	; (800aa98 <HAL_RCC_ClockConfig+0x260>)
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	689b      	ldr	r3, [r3, #8]
 800a8a8:	497b      	ldr	r1, [pc, #492]	; (800aa98 <HAL_RCC_ClockConfig+0x260>)
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f003 0301 	and.w	r3, r3, #1
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d079      	beq.n	800a9ae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	2b03      	cmp	r3, #3
 800a8c0:	d11e      	bne.n	800a900 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a8c2:	4b75      	ldr	r3, [pc, #468]	; (800aa98 <HAL_RCC_ClockConfig+0x260>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d101      	bne.n	800a8d2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	e0dc      	b.n	800aa8c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800a8d2:	f000 f9dd 	bl	800ac90 <RCC_GetSysClockFreqFromPLLSource>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	4a70      	ldr	r2, [pc, #448]	; (800aa9c <HAL_RCC_ClockConfig+0x264>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d946      	bls.n	800a96c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a8de:	4b6e      	ldr	r3, [pc, #440]	; (800aa98 <HAL_RCC_ClockConfig+0x260>)
 800a8e0:	689b      	ldr	r3, [r3, #8]
 800a8e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d140      	bne.n	800a96c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a8ea:	4b6b      	ldr	r3, [pc, #428]	; (800aa98 <HAL_RCC_ClockConfig+0x260>)
 800a8ec:	689b      	ldr	r3, [r3, #8]
 800a8ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a8f2:	4a69      	ldr	r2, [pc, #420]	; (800aa98 <HAL_RCC_ClockConfig+0x260>)
 800a8f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8f8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a8fa:	2380      	movs	r3, #128	; 0x80
 800a8fc:	617b      	str	r3, [r7, #20]
 800a8fe:	e035      	b.n	800a96c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	2b02      	cmp	r3, #2
 800a906:	d107      	bne.n	800a918 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a908:	4b63      	ldr	r3, [pc, #396]	; (800aa98 <HAL_RCC_ClockConfig+0x260>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a910:	2b00      	cmp	r3, #0
 800a912:	d115      	bne.n	800a940 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800a914:	2301      	movs	r3, #1
 800a916:	e0b9      	b.n	800aa8c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d107      	bne.n	800a930 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a920:	4b5d      	ldr	r3, [pc, #372]	; (800aa98 <HAL_RCC_ClockConfig+0x260>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f003 0302 	and.w	r3, r3, #2
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d109      	bne.n	800a940 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800a92c:	2301      	movs	r3, #1
 800a92e:	e0ad      	b.n	800aa8c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a930:	4b59      	ldr	r3, [pc, #356]	; (800aa98 <HAL_RCC_ClockConfig+0x260>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d101      	bne.n	800a940 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800a93c:	2301      	movs	r3, #1
 800a93e:	e0a5      	b.n	800aa8c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800a940:	f000 f8b4 	bl	800aaac <HAL_RCC_GetSysClockFreq>
 800a944:	4603      	mov	r3, r0
 800a946:	4a55      	ldr	r2, [pc, #340]	; (800aa9c <HAL_RCC_ClockConfig+0x264>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d90f      	bls.n	800a96c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a94c:	4b52      	ldr	r3, [pc, #328]	; (800aa98 <HAL_RCC_ClockConfig+0x260>)
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d109      	bne.n	800a96c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a958:	4b4f      	ldr	r3, [pc, #316]	; (800aa98 <HAL_RCC_ClockConfig+0x260>)
 800a95a:	689b      	ldr	r3, [r3, #8]
 800a95c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a960:	4a4d      	ldr	r2, [pc, #308]	; (800aa98 <HAL_RCC_ClockConfig+0x260>)
 800a962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a966:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a968:	2380      	movs	r3, #128	; 0x80
 800a96a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a96c:	4b4a      	ldr	r3, [pc, #296]	; (800aa98 <HAL_RCC_ClockConfig+0x260>)
 800a96e:	689b      	ldr	r3, [r3, #8]
 800a970:	f023 0203 	bic.w	r2, r3, #3
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	4947      	ldr	r1, [pc, #284]	; (800aa98 <HAL_RCC_ClockConfig+0x260>)
 800a97a:	4313      	orrs	r3, r2
 800a97c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a97e:	f7fd fdd9 	bl	8008534 <HAL_GetTick>
 800a982:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a984:	e00a      	b.n	800a99c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a986:	f7fd fdd5 	bl	8008534 <HAL_GetTick>
 800a98a:	4602      	mov	r2, r0
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	1ad3      	subs	r3, r2, r3
 800a990:	f241 3288 	movw	r2, #5000	; 0x1388
 800a994:	4293      	cmp	r3, r2
 800a996:	d901      	bls.n	800a99c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800a998:	2303      	movs	r3, #3
 800a99a:	e077      	b.n	800aa8c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a99c:	4b3e      	ldr	r3, [pc, #248]	; (800aa98 <HAL_RCC_ClockConfig+0x260>)
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	f003 020c 	and.w	r2, r3, #12
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	009b      	lsls	r3, r3, #2
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d1eb      	bne.n	800a986 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	2b80      	cmp	r3, #128	; 0x80
 800a9b2:	d105      	bne.n	800a9c0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a9b4:	4b38      	ldr	r3, [pc, #224]	; (800aa98 <HAL_RCC_ClockConfig+0x260>)
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	4a37      	ldr	r2, [pc, #220]	; (800aa98 <HAL_RCC_ClockConfig+0x260>)
 800a9ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a9be:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f003 0302 	and.w	r3, r3, #2
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d010      	beq.n	800a9ee <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	689a      	ldr	r2, [r3, #8]
 800a9d0:	4b31      	ldr	r3, [pc, #196]	; (800aa98 <HAL_RCC_ClockConfig+0x260>)
 800a9d2:	689b      	ldr	r3, [r3, #8]
 800a9d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d208      	bcs.n	800a9ee <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a9dc:	4b2e      	ldr	r3, [pc, #184]	; (800aa98 <HAL_RCC_ClockConfig+0x260>)
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	689b      	ldr	r3, [r3, #8]
 800a9e8:	492b      	ldr	r1, [pc, #172]	; (800aa98 <HAL_RCC_ClockConfig+0x260>)
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a9ee:	4b29      	ldr	r3, [pc, #164]	; (800aa94 <HAL_RCC_ClockConfig+0x25c>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f003 030f 	and.w	r3, r3, #15
 800a9f6:	683a      	ldr	r2, [r7, #0]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d210      	bcs.n	800aa1e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9fc:	4b25      	ldr	r3, [pc, #148]	; (800aa94 <HAL_RCC_ClockConfig+0x25c>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f023 020f 	bic.w	r2, r3, #15
 800aa04:	4923      	ldr	r1, [pc, #140]	; (800aa94 <HAL_RCC_ClockConfig+0x25c>)
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa0c:	4b21      	ldr	r3, [pc, #132]	; (800aa94 <HAL_RCC_ClockConfig+0x25c>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f003 030f 	and.w	r3, r3, #15
 800aa14:	683a      	ldr	r2, [r7, #0]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d001      	beq.n	800aa1e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	e036      	b.n	800aa8c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f003 0304 	and.w	r3, r3, #4
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d008      	beq.n	800aa3c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aa2a:	4b1b      	ldr	r3, [pc, #108]	; (800aa98 <HAL_RCC_ClockConfig+0x260>)
 800aa2c:	689b      	ldr	r3, [r3, #8]
 800aa2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	4918      	ldr	r1, [pc, #96]	; (800aa98 <HAL_RCC_ClockConfig+0x260>)
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f003 0308 	and.w	r3, r3, #8
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d009      	beq.n	800aa5c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800aa48:	4b13      	ldr	r3, [pc, #76]	; (800aa98 <HAL_RCC_ClockConfig+0x260>)
 800aa4a:	689b      	ldr	r3, [r3, #8]
 800aa4c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	691b      	ldr	r3, [r3, #16]
 800aa54:	00db      	lsls	r3, r3, #3
 800aa56:	4910      	ldr	r1, [pc, #64]	; (800aa98 <HAL_RCC_ClockConfig+0x260>)
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800aa5c:	f000 f826 	bl	800aaac <HAL_RCC_GetSysClockFreq>
 800aa60:	4602      	mov	r2, r0
 800aa62:	4b0d      	ldr	r3, [pc, #52]	; (800aa98 <HAL_RCC_ClockConfig+0x260>)
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	091b      	lsrs	r3, r3, #4
 800aa68:	f003 030f 	and.w	r3, r3, #15
 800aa6c:	490c      	ldr	r1, [pc, #48]	; (800aaa0 <HAL_RCC_ClockConfig+0x268>)
 800aa6e:	5ccb      	ldrb	r3, [r1, r3]
 800aa70:	f003 031f 	and.w	r3, r3, #31
 800aa74:	fa22 f303 	lsr.w	r3, r2, r3
 800aa78:	4a0a      	ldr	r2, [pc, #40]	; (800aaa4 <HAL_RCC_ClockConfig+0x26c>)
 800aa7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800aa7c:	4b0a      	ldr	r3, [pc, #40]	; (800aaa8 <HAL_RCC_ClockConfig+0x270>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4618      	mov	r0, r3
 800aa82:	f7fd fd07 	bl	8008494 <HAL_InitTick>
 800aa86:	4603      	mov	r3, r0
 800aa88:	73fb      	strb	r3, [r7, #15]

  return status;
 800aa8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3718      	adds	r7, #24
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	40022000 	.word	0x40022000
 800aa98:	40021000 	.word	0x40021000
 800aa9c:	04c4b400 	.word	0x04c4b400
 800aaa0:	0800f5c0 	.word	0x0800f5c0
 800aaa4:	20000000 	.word	0x20000000
 800aaa8:	20000004 	.word	0x20000004

0800aaac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b089      	sub	sp, #36	; 0x24
 800aab0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800aab2:	2300      	movs	r3, #0
 800aab4:	61fb      	str	r3, [r7, #28]
 800aab6:	2300      	movs	r3, #0
 800aab8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aaba:	4b3e      	ldr	r3, [pc, #248]	; (800abb4 <HAL_RCC_GetSysClockFreq+0x108>)
 800aabc:	689b      	ldr	r3, [r3, #8]
 800aabe:	f003 030c 	and.w	r3, r3, #12
 800aac2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aac4:	4b3b      	ldr	r3, [pc, #236]	; (800abb4 <HAL_RCC_GetSysClockFreq+0x108>)
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	f003 0303 	and.w	r3, r3, #3
 800aacc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d005      	beq.n	800aae0 <HAL_RCC_GetSysClockFreq+0x34>
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	2b0c      	cmp	r3, #12
 800aad8:	d121      	bne.n	800ab1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d11e      	bne.n	800ab1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800aae0:	4b34      	ldr	r3, [pc, #208]	; (800abb4 <HAL_RCC_GetSysClockFreq+0x108>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f003 0308 	and.w	r3, r3, #8
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d107      	bne.n	800aafc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800aaec:	4b31      	ldr	r3, [pc, #196]	; (800abb4 <HAL_RCC_GetSysClockFreq+0x108>)
 800aaee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aaf2:	0a1b      	lsrs	r3, r3, #8
 800aaf4:	f003 030f 	and.w	r3, r3, #15
 800aaf8:	61fb      	str	r3, [r7, #28]
 800aafa:	e005      	b.n	800ab08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800aafc:	4b2d      	ldr	r3, [pc, #180]	; (800abb4 <HAL_RCC_GetSysClockFreq+0x108>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	091b      	lsrs	r3, r3, #4
 800ab02:	f003 030f 	and.w	r3, r3, #15
 800ab06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800ab08:	4a2b      	ldr	r2, [pc, #172]	; (800abb8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800ab0a:	69fb      	ldr	r3, [r7, #28]
 800ab0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d10d      	bne.n	800ab34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ab1c:	e00a      	b.n	800ab34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	2b04      	cmp	r3, #4
 800ab22:	d102      	bne.n	800ab2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ab24:	4b25      	ldr	r3, [pc, #148]	; (800abbc <HAL_RCC_GetSysClockFreq+0x110>)
 800ab26:	61bb      	str	r3, [r7, #24]
 800ab28:	e004      	b.n	800ab34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	2b08      	cmp	r3, #8
 800ab2e:	d101      	bne.n	800ab34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ab30:	4b23      	ldr	r3, [pc, #140]	; (800abc0 <HAL_RCC_GetSysClockFreq+0x114>)
 800ab32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	2b0c      	cmp	r3, #12
 800ab38:	d134      	bne.n	800aba4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ab3a:	4b1e      	ldr	r3, [pc, #120]	; (800abb4 <HAL_RCC_GetSysClockFreq+0x108>)
 800ab3c:	68db      	ldr	r3, [r3, #12]
 800ab3e:	f003 0303 	and.w	r3, r3, #3
 800ab42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	2b02      	cmp	r3, #2
 800ab48:	d003      	beq.n	800ab52 <HAL_RCC_GetSysClockFreq+0xa6>
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	2b03      	cmp	r3, #3
 800ab4e:	d003      	beq.n	800ab58 <HAL_RCC_GetSysClockFreq+0xac>
 800ab50:	e005      	b.n	800ab5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800ab52:	4b1a      	ldr	r3, [pc, #104]	; (800abbc <HAL_RCC_GetSysClockFreq+0x110>)
 800ab54:	617b      	str	r3, [r7, #20]
      break;
 800ab56:	e005      	b.n	800ab64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800ab58:	4b19      	ldr	r3, [pc, #100]	; (800abc0 <HAL_RCC_GetSysClockFreq+0x114>)
 800ab5a:	617b      	str	r3, [r7, #20]
      break;
 800ab5c:	e002      	b.n	800ab64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	617b      	str	r3, [r7, #20]
      break;
 800ab62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ab64:	4b13      	ldr	r3, [pc, #76]	; (800abb4 <HAL_RCC_GetSysClockFreq+0x108>)
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	091b      	lsrs	r3, r3, #4
 800ab6a:	f003 030f 	and.w	r3, r3, #15
 800ab6e:	3301      	adds	r3, #1
 800ab70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800ab72:	4b10      	ldr	r3, [pc, #64]	; (800abb4 <HAL_RCC_GetSysClockFreq+0x108>)
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	0a1b      	lsrs	r3, r3, #8
 800ab78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab7c:	697a      	ldr	r2, [r7, #20]
 800ab7e:	fb03 f202 	mul.w	r2, r3, r2
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ab8a:	4b0a      	ldr	r3, [pc, #40]	; (800abb4 <HAL_RCC_GetSysClockFreq+0x108>)
 800ab8c:	68db      	ldr	r3, [r3, #12]
 800ab8e:	0e5b      	lsrs	r3, r3, #25
 800ab90:	f003 0303 	and.w	r3, r3, #3
 800ab94:	3301      	adds	r3, #1
 800ab96:	005b      	lsls	r3, r3, #1
 800ab98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800ab9a:	697a      	ldr	r2, [r7, #20]
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aba2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800aba4:	69bb      	ldr	r3, [r7, #24]
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3724      	adds	r7, #36	; 0x24
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr
 800abb2:	bf00      	nop
 800abb4:	40021000 	.word	0x40021000
 800abb8:	0800f5d0 	.word	0x0800f5d0
 800abbc:	00f42400 	.word	0x00f42400
 800abc0:	007a1200 	.word	0x007a1200

0800abc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800abc4:	b480      	push	{r7}
 800abc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800abc8:	4b03      	ldr	r3, [pc, #12]	; (800abd8 <HAL_RCC_GetHCLKFreq+0x14>)
 800abca:	681b      	ldr	r3, [r3, #0]
}
 800abcc:	4618      	mov	r0, r3
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr
 800abd6:	bf00      	nop
 800abd8:	20000000 	.word	0x20000000

0800abdc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b086      	sub	sp, #24
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800abe4:	2300      	movs	r3, #0
 800abe6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800abe8:	4b27      	ldr	r3, [pc, #156]	; (800ac88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800abea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d003      	beq.n	800abfc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800abf4:	f7ff f932 	bl	8009e5c <HAL_PWREx_GetVoltageRange>
 800abf8:	6178      	str	r0, [r7, #20]
 800abfa:	e014      	b.n	800ac26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800abfc:	4b22      	ldr	r3, [pc, #136]	; (800ac88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800abfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac00:	4a21      	ldr	r2, [pc, #132]	; (800ac88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800ac02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac06:	6593      	str	r3, [r2, #88]	; 0x58
 800ac08:	4b1f      	ldr	r3, [pc, #124]	; (800ac88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800ac0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac10:	60fb      	str	r3, [r7, #12]
 800ac12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800ac14:	f7ff f922 	bl	8009e5c <HAL_PWREx_GetVoltageRange>
 800ac18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800ac1a:	4b1b      	ldr	r3, [pc, #108]	; (800ac88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800ac1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac1e:	4a1a      	ldr	r2, [pc, #104]	; (800ac88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800ac20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac2c:	d10b      	bne.n	800ac46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2b80      	cmp	r3, #128	; 0x80
 800ac32:	d913      	bls.n	800ac5c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2ba0      	cmp	r3, #160	; 0xa0
 800ac38:	d902      	bls.n	800ac40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ac3a:	2302      	movs	r3, #2
 800ac3c:	613b      	str	r3, [r7, #16]
 800ac3e:	e00d      	b.n	800ac5c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ac40:	2301      	movs	r3, #1
 800ac42:	613b      	str	r3, [r7, #16]
 800ac44:	e00a      	b.n	800ac5c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2b7f      	cmp	r3, #127	; 0x7f
 800ac4a:	d902      	bls.n	800ac52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800ac4c:	2302      	movs	r3, #2
 800ac4e:	613b      	str	r3, [r7, #16]
 800ac50:	e004      	b.n	800ac5c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2b70      	cmp	r3, #112	; 0x70
 800ac56:	d101      	bne.n	800ac5c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ac58:	2301      	movs	r3, #1
 800ac5a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800ac5c:	4b0b      	ldr	r3, [pc, #44]	; (800ac8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f023 020f 	bic.w	r2, r3, #15
 800ac64:	4909      	ldr	r1, [pc, #36]	; (800ac8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800ac6c:	4b07      	ldr	r3, [pc, #28]	; (800ac8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f003 030f 	and.w	r3, r3, #15
 800ac74:	693a      	ldr	r2, [r7, #16]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d001      	beq.n	800ac7e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	e000      	b.n	800ac80 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800ac7e:	2300      	movs	r3, #0
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3718      	adds	r7, #24
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	40021000 	.word	0x40021000
 800ac8c:	40022000 	.word	0x40022000

0800ac90 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b087      	sub	sp, #28
 800ac94:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ac96:	4b2d      	ldr	r3, [pc, #180]	; (800ad4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800ac98:	68db      	ldr	r3, [r3, #12]
 800ac9a:	f003 0303 	and.w	r3, r3, #3
 800ac9e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2b03      	cmp	r3, #3
 800aca4:	d00b      	beq.n	800acbe <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2b03      	cmp	r3, #3
 800acaa:	d825      	bhi.n	800acf8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d008      	beq.n	800acc4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2b02      	cmp	r3, #2
 800acb6:	d11f      	bne.n	800acf8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800acb8:	4b25      	ldr	r3, [pc, #148]	; (800ad50 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800acba:	613b      	str	r3, [r7, #16]
    break;
 800acbc:	e01f      	b.n	800acfe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800acbe:	4b25      	ldr	r3, [pc, #148]	; (800ad54 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800acc0:	613b      	str	r3, [r7, #16]
    break;
 800acc2:	e01c      	b.n	800acfe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800acc4:	4b21      	ldr	r3, [pc, #132]	; (800ad4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f003 0308 	and.w	r3, r3, #8
 800accc:	2b00      	cmp	r3, #0
 800acce:	d107      	bne.n	800ace0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800acd0:	4b1e      	ldr	r3, [pc, #120]	; (800ad4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800acd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800acd6:	0a1b      	lsrs	r3, r3, #8
 800acd8:	f003 030f 	and.w	r3, r3, #15
 800acdc:	617b      	str	r3, [r7, #20]
 800acde:	e005      	b.n	800acec <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800ace0:	4b1a      	ldr	r3, [pc, #104]	; (800ad4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	091b      	lsrs	r3, r3, #4
 800ace6:	f003 030f 	and.w	r3, r3, #15
 800acea:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800acec:	4a1a      	ldr	r2, [pc, #104]	; (800ad58 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acf4:	613b      	str	r3, [r7, #16]
    break;
 800acf6:	e002      	b.n	800acfe <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800acf8:	2300      	movs	r3, #0
 800acfa:	613b      	str	r3, [r7, #16]
    break;
 800acfc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800acfe:	4b13      	ldr	r3, [pc, #76]	; (800ad4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	091b      	lsrs	r3, r3, #4
 800ad04:	f003 030f 	and.w	r3, r3, #15
 800ad08:	3301      	adds	r3, #1
 800ad0a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800ad0c:	4b0f      	ldr	r3, [pc, #60]	; (800ad4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800ad0e:	68db      	ldr	r3, [r3, #12]
 800ad10:	0a1b      	lsrs	r3, r3, #8
 800ad12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad16:	693a      	ldr	r2, [r7, #16]
 800ad18:	fb03 f202 	mul.w	r2, r3, r2
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad22:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ad24:	4b09      	ldr	r3, [pc, #36]	; (800ad4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	0e5b      	lsrs	r3, r3, #25
 800ad2a:	f003 0303 	and.w	r3, r3, #3
 800ad2e:	3301      	adds	r3, #1
 800ad30:	005b      	lsls	r3, r3, #1
 800ad32:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800ad34:	693a      	ldr	r2, [r7, #16]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad3c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800ad3e:	683b      	ldr	r3, [r7, #0]
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	371c      	adds	r7, #28
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr
 800ad4c:	40021000 	.word	0x40021000
 800ad50:	00f42400 	.word	0x00f42400
 800ad54:	007a1200 	.word	0x007a1200
 800ad58:	0800f5d0 	.word	0x0800f5d0

0800ad5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b086      	sub	sp, #24
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ad64:	2300      	movs	r3, #0
 800ad66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ad68:	2300      	movs	r3, #0
 800ad6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d040      	beq.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad7c:	2b80      	cmp	r3, #128	; 0x80
 800ad7e:	d02a      	beq.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ad80:	2b80      	cmp	r3, #128	; 0x80
 800ad82:	d825      	bhi.n	800add0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800ad84:	2b60      	cmp	r3, #96	; 0x60
 800ad86:	d026      	beq.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ad88:	2b60      	cmp	r3, #96	; 0x60
 800ad8a:	d821      	bhi.n	800add0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800ad8c:	2b40      	cmp	r3, #64	; 0x40
 800ad8e:	d006      	beq.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x42>
 800ad90:	2b40      	cmp	r3, #64	; 0x40
 800ad92:	d81d      	bhi.n	800add0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d009      	beq.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x50>
 800ad98:	2b20      	cmp	r3, #32
 800ad9a:	d010      	beq.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0x62>
 800ad9c:	e018      	b.n	800add0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800ad9e:	4b89      	ldr	r3, [pc, #548]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ada0:	68db      	ldr	r3, [r3, #12]
 800ada2:	4a88      	ldr	r2, [pc, #544]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ada4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ada8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800adaa:	e015      	b.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	3304      	adds	r3, #4
 800adb0:	2100      	movs	r1, #0
 800adb2:	4618      	mov	r0, r3
 800adb4:	f000 fb72 	bl	800b49c <RCCEx_PLLSAI1_Config>
 800adb8:	4603      	mov	r3, r0
 800adba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800adbc:	e00c      	b.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	3320      	adds	r3, #32
 800adc2:	2100      	movs	r1, #0
 800adc4:	4618      	mov	r0, r3
 800adc6:	f000 fc5d 	bl	800b684 <RCCEx_PLLSAI2_Config>
 800adca:	4603      	mov	r3, r0
 800adcc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800adce:	e003      	b.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800add0:	2301      	movs	r3, #1
 800add2:	74fb      	strb	r3, [r7, #19]
      break;
 800add4:	e000      	b.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800add6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800add8:	7cfb      	ldrb	r3, [r7, #19]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d10b      	bne.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800adde:	4b79      	ldr	r3, [pc, #484]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ade0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ade4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adec:	4975      	ldr	r1, [pc, #468]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800adee:	4313      	orrs	r3, r2
 800adf0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800adf4:	e001      	b.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adf6:	7cfb      	ldrb	r3, [r7, #19]
 800adf8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d047      	beq.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae0e:	d030      	beq.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800ae10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae14:	d82a      	bhi.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800ae16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae1a:	d02a      	beq.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800ae1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae20:	d824      	bhi.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800ae22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae26:	d008      	beq.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0xde>
 800ae28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae2c:	d81e      	bhi.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d00a      	beq.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800ae32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae36:	d010      	beq.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800ae38:	e018      	b.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800ae3a:	4b62      	ldr	r3, [pc, #392]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ae3c:	68db      	ldr	r3, [r3, #12]
 800ae3e:	4a61      	ldr	r2, [pc, #388]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ae40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae44:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ae46:	e015      	b.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	3304      	adds	r3, #4
 800ae4c:	2100      	movs	r1, #0
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f000 fb24 	bl	800b49c <RCCEx_PLLSAI1_Config>
 800ae54:	4603      	mov	r3, r0
 800ae56:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ae58:	e00c      	b.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	3320      	adds	r3, #32
 800ae5e:	2100      	movs	r1, #0
 800ae60:	4618      	mov	r0, r3
 800ae62:	f000 fc0f 	bl	800b684 <RCCEx_PLLSAI2_Config>
 800ae66:	4603      	mov	r3, r0
 800ae68:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ae6a:	e003      	b.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	74fb      	strb	r3, [r7, #19]
      break;
 800ae70:	e000      	b.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800ae72:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae74:	7cfb      	ldrb	r3, [r7, #19]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d10b      	bne.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ae7a:	4b52      	ldr	r3, [pc, #328]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ae7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ae80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae88:	494e      	ldr	r1, [pc, #312]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800ae90:	e001      	b.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae92:	7cfb      	ldrb	r3, [r7, #19]
 800ae94:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	f000 809f 	beq.w	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aea4:	2300      	movs	r3, #0
 800aea6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800aea8:	4b46      	ldr	r3, [pc, #280]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aeaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aeac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d101      	bne.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	e000      	b.n	800aeba <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800aeb8:	2300      	movs	r3, #0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d00d      	beq.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aebe:	4b41      	ldr	r3, [pc, #260]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aec2:	4a40      	ldr	r2, [pc, #256]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aec8:	6593      	str	r3, [r2, #88]	; 0x58
 800aeca:	4b3e      	ldr	r3, [pc, #248]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aed2:	60bb      	str	r3, [r7, #8]
 800aed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aed6:	2301      	movs	r3, #1
 800aed8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aeda:	4b3b      	ldr	r3, [pc, #236]	; (800afc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	4a3a      	ldr	r2, [pc, #232]	; (800afc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800aee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aee4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aee6:	f7fd fb25 	bl	8008534 <HAL_GetTick>
 800aeea:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800aeec:	e009      	b.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aeee:	f7fd fb21 	bl	8008534 <HAL_GetTick>
 800aef2:	4602      	mov	r2, r0
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	1ad3      	subs	r3, r2, r3
 800aef8:	2b02      	cmp	r3, #2
 800aefa:	d902      	bls.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800aefc:	2303      	movs	r3, #3
 800aefe:	74fb      	strb	r3, [r7, #19]
        break;
 800af00:	e005      	b.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800af02:	4b31      	ldr	r3, [pc, #196]	; (800afc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d0ef      	beq.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800af0e:	7cfb      	ldrb	r3, [r7, #19]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d15b      	bne.n	800afcc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800af14:	4b2b      	ldr	r3, [pc, #172]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800af16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af1e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d01f      	beq.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800af2c:	697a      	ldr	r2, [r7, #20]
 800af2e:	429a      	cmp	r2, r3
 800af30:	d019      	beq.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800af32:	4b24      	ldr	r3, [pc, #144]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800af34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af3c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800af3e:	4b21      	ldr	r3, [pc, #132]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800af40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af44:	4a1f      	ldr	r2, [pc, #124]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800af46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800af4e:	4b1d      	ldr	r3, [pc, #116]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800af50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af54:	4a1b      	ldr	r2, [pc, #108]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800af56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800af5e:	4a19      	ldr	r2, [pc, #100]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	f003 0301 	and.w	r3, r3, #1
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d016      	beq.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af70:	f7fd fae0 	bl	8008534 <HAL_GetTick>
 800af74:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800af76:	e00b      	b.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af78:	f7fd fadc 	bl	8008534 <HAL_GetTick>
 800af7c:	4602      	mov	r2, r0
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	1ad3      	subs	r3, r2, r3
 800af82:	f241 3288 	movw	r2, #5000	; 0x1388
 800af86:	4293      	cmp	r3, r2
 800af88:	d902      	bls.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800af8a:	2303      	movs	r3, #3
 800af8c:	74fb      	strb	r3, [r7, #19]
            break;
 800af8e:	e006      	b.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800af90:	4b0c      	ldr	r3, [pc, #48]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800af92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af96:	f003 0302 	and.w	r3, r3, #2
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d0ec      	beq.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800af9e:	7cfb      	ldrb	r3, [r7, #19]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d10c      	bne.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800afa4:	4b07      	ldr	r3, [pc, #28]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800afa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afaa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800afb4:	4903      	ldr	r1, [pc, #12]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800afb6:	4313      	orrs	r3, r2
 800afb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800afbc:	e008      	b.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800afbe:	7cfb      	ldrb	r3, [r7, #19]
 800afc0:	74bb      	strb	r3, [r7, #18]
 800afc2:	e005      	b.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800afc4:	40021000 	.word	0x40021000
 800afc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afcc:	7cfb      	ldrb	r3, [r7, #19]
 800afce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800afd0:	7c7b      	ldrb	r3, [r7, #17]
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d105      	bne.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800afd6:	4ba0      	ldr	r3, [pc, #640]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800afd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afda:	4a9f      	ldr	r2, [pc, #636]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800afdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800afe0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f003 0301 	and.w	r3, r3, #1
 800afea:	2b00      	cmp	r3, #0
 800afec:	d00a      	beq.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800afee:	4b9a      	ldr	r3, [pc, #616]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aff4:	f023 0203 	bic.w	r2, r3, #3
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800affc:	4996      	ldr	r1, [pc, #600]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800affe:	4313      	orrs	r3, r2
 800b000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f003 0302 	and.w	r3, r3, #2
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d00a      	beq.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b010:	4b91      	ldr	r3, [pc, #580]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b016:	f023 020c 	bic.w	r2, r3, #12
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b01e:	498e      	ldr	r1, [pc, #568]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b020:	4313      	orrs	r3, r2
 800b022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f003 0304 	and.w	r3, r3, #4
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d00a      	beq.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b032:	4b89      	ldr	r3, [pc, #548]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b038:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b040:	4985      	ldr	r1, [pc, #532]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b042:	4313      	orrs	r3, r2
 800b044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f003 0308 	and.w	r3, r3, #8
 800b050:	2b00      	cmp	r3, #0
 800b052:	d00a      	beq.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b054:	4b80      	ldr	r3, [pc, #512]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b05a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b062:	497d      	ldr	r1, [pc, #500]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b064:	4313      	orrs	r3, r2
 800b066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f003 0310 	and.w	r3, r3, #16
 800b072:	2b00      	cmp	r3, #0
 800b074:	d00a      	beq.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b076:	4b78      	ldr	r3, [pc, #480]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b07c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b084:	4974      	ldr	r1, [pc, #464]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b086:	4313      	orrs	r3, r2
 800b088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f003 0320 	and.w	r3, r3, #32
 800b094:	2b00      	cmp	r3, #0
 800b096:	d00a      	beq.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b098:	4b6f      	ldr	r3, [pc, #444]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b09a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b09e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0a6:	496c      	ldr	r1, [pc, #432]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d00a      	beq.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b0ba:	4b67      	ldr	r3, [pc, #412]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b0bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0c8:	4963      	ldr	r1, [pc, #396]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d00a      	beq.n	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b0dc:	4b5e      	ldr	r3, [pc, #376]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b0de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0ea:	495b      	ldr	r1, [pc, #364]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d00a      	beq.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b0fe:	4b56      	ldr	r3, [pc, #344]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b104:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b10c:	4952      	ldr	r1, [pc, #328]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b10e:	4313      	orrs	r3, r2
 800b110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d00a      	beq.n	800b136 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b120:	4b4d      	ldr	r3, [pc, #308]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b126:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b12e:	494a      	ldr	r1, [pc, #296]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b130:	4313      	orrs	r3, r2
 800b132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d00a      	beq.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b142:	4b45      	ldr	r3, [pc, #276]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b148:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b150:	4941      	ldr	r1, [pc, #260]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b152:	4313      	orrs	r3, r2
 800b154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b160:	2b00      	cmp	r3, #0
 800b162:	d00a      	beq.n	800b17a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b164:	4b3c      	ldr	r3, [pc, #240]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b166:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b16a:	f023 0203 	bic.w	r2, r3, #3
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b172:	4939      	ldr	r1, [pc, #228]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b174:	4313      	orrs	r3, r2
 800b176:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b182:	2b00      	cmp	r3, #0
 800b184:	d028      	beq.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b186:	4b34      	ldr	r3, [pc, #208]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b18c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b194:	4930      	ldr	r1, [pc, #192]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b196:	4313      	orrs	r3, r2
 800b198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1a4:	d106      	bne.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b1a6:	4b2c      	ldr	r3, [pc, #176]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	4a2b      	ldr	r2, [pc, #172]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b1ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b1b0:	60d3      	str	r3, [r2, #12]
 800b1b2:	e011      	b.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b1bc:	d10c      	bne.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	3304      	adds	r3, #4
 800b1c2:	2101      	movs	r1, #1
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f000 f969 	bl	800b49c <RCCEx_PLLSAI1_Config>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b1ce:	7cfb      	ldrb	r3, [r7, #19]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d001      	beq.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800b1d4:	7cfb      	ldrb	r3, [r7, #19]
 800b1d6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d04d      	beq.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b1ec:	d108      	bne.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800b1ee:	4b1a      	ldr	r3, [pc, #104]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b1f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b1f4:	4a18      	ldr	r2, [pc, #96]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b1f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b1fa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800b1fe:	e012      	b.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800b200:	4b15      	ldr	r3, [pc, #84]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b202:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b206:	4a14      	ldr	r2, [pc, #80]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b208:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b20c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800b210:	4b11      	ldr	r3, [pc, #68]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b216:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b21e:	490e      	ldr	r1, [pc, #56]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b220:	4313      	orrs	r3, r2
 800b222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b22a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b22e:	d106      	bne.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b230:	4b09      	ldr	r3, [pc, #36]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	4a08      	ldr	r2, [pc, #32]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b236:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b23a:	60d3      	str	r3, [r2, #12]
 800b23c:	e020      	b.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b242:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b246:	d109      	bne.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b248:	4b03      	ldr	r3, [pc, #12]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	4a02      	ldr	r2, [pc, #8]	; (800b258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b24e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b252:	60d3      	str	r3, [r2, #12]
 800b254:	e014      	b.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800b256:	bf00      	nop
 800b258:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b260:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b264:	d10c      	bne.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	3304      	adds	r3, #4
 800b26a:	2101      	movs	r1, #1
 800b26c:	4618      	mov	r0, r3
 800b26e:	f000 f915 	bl	800b49c <RCCEx_PLLSAI1_Config>
 800b272:	4603      	mov	r3, r0
 800b274:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b276:	7cfb      	ldrb	r3, [r7, #19]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d001      	beq.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800b27c:	7cfb      	ldrb	r3, [r7, #19]
 800b27e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d028      	beq.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b28c:	4b7a      	ldr	r3, [pc, #488]	; (800b478 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b28e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b292:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b29a:	4977      	ldr	r1, [pc, #476]	; (800b478 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b29c:	4313      	orrs	r3, r2
 800b29e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2aa:	d106      	bne.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b2ac:	4b72      	ldr	r3, [pc, #456]	; (800b478 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	4a71      	ldr	r2, [pc, #452]	; (800b478 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b2b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b2b6:	60d3      	str	r3, [r2, #12]
 800b2b8:	e011      	b.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b2c2:	d10c      	bne.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	3304      	adds	r3, #4
 800b2c8:	2101      	movs	r1, #1
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f000 f8e6 	bl	800b49c <RCCEx_PLLSAI1_Config>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b2d4:	7cfb      	ldrb	r3, [r7, #19]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d001      	beq.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800b2da:	7cfb      	ldrb	r3, [r7, #19]
 800b2dc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d01e      	beq.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b2ea:	4b63      	ldr	r3, [pc, #396]	; (800b478 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b2ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2fa:	495f      	ldr	r1, [pc, #380]	; (800b478 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b308:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b30c:	d10c      	bne.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	3304      	adds	r3, #4
 800b312:	2102      	movs	r1, #2
 800b314:	4618      	mov	r0, r3
 800b316:	f000 f8c1 	bl	800b49c <RCCEx_PLLSAI1_Config>
 800b31a:	4603      	mov	r3, r0
 800b31c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b31e:	7cfb      	ldrb	r3, [r7, #19]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d001      	beq.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800b324:	7cfb      	ldrb	r3, [r7, #19]
 800b326:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b330:	2b00      	cmp	r3, #0
 800b332:	d00b      	beq.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b334:	4b50      	ldr	r3, [pc, #320]	; (800b478 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b336:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b33a:	f023 0204 	bic.w	r2, r3, #4
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b344:	494c      	ldr	r1, [pc, #304]	; (800b478 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b346:	4313      	orrs	r3, r2
 800b348:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b354:	2b00      	cmp	r3, #0
 800b356:	d00b      	beq.n	800b370 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800b358:	4b47      	ldr	r3, [pc, #284]	; (800b478 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b35a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b35e:	f023 0218 	bic.w	r2, r3, #24
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b368:	4943      	ldr	r1, [pc, #268]	; (800b478 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b36a:	4313      	orrs	r3, r2
 800b36c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d035      	beq.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b37c:	4b3e      	ldr	r3, [pc, #248]	; (800b478 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a3d      	ldr	r2, [pc, #244]	; (800b478 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b386:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b388:	f7fd f8d4 	bl	8008534 <HAL_GetTick>
 800b38c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b38e:	e009      	b.n	800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b390:	f7fd f8d0 	bl	8008534 <HAL_GetTick>
 800b394:	4602      	mov	r2, r0
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	1ad3      	subs	r3, r2, r3
 800b39a:	2b02      	cmp	r3, #2
 800b39c:	d902      	bls.n	800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800b39e:	2303      	movs	r3, #3
 800b3a0:	74fb      	strb	r3, [r7, #19]
        break;
 800b3a2:	e005      	b.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b3a4:	4b34      	ldr	r3, [pc, #208]	; (800b478 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d1ef      	bne.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800b3b0:	7cfb      	ldrb	r3, [r7, #19]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d113      	bne.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800b3b6:	4b30      	ldr	r3, [pc, #192]	; (800b478 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b3b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b3bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3c6:	492c      	ldr	r1, [pc, #176]	; (800b478 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	3320      	adds	r3, #32
 800b3d2:	2102      	movs	r1, #2
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f000 f955 	bl	800b684 <RCCEx_PLLSAI2_Config>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800b3de:	7cfb      	ldrb	r3, [r7, #19]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d001      	beq.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800b3e4:	7cfb      	ldrb	r3, [r7, #19]
 800b3e6:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d01e      	beq.n	800b432 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800b3f4:	4b20      	ldr	r3, [pc, #128]	; (800b478 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b3f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b3fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b404:	491c      	ldr	r1, [pc, #112]	; (800b478 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b406:	4313      	orrs	r3, r2
 800b408:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b416:	d10c      	bne.n	800b432 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	3320      	adds	r3, #32
 800b41c:	2101      	movs	r1, #1
 800b41e:	4618      	mov	r0, r3
 800b420:	f000 f930 	bl	800b684 <RCCEx_PLLSAI2_Config>
 800b424:	4603      	mov	r3, r0
 800b426:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b428:	7cfb      	ldrb	r3, [r7, #19]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d001      	beq.n	800b432 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800b42e:	7cfb      	ldrb	r3, [r7, #19]
 800b430:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d017      	beq.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b43e:	4b0e      	ldr	r3, [pc, #56]	; (800b478 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b440:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b444:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b44e:	490a      	ldr	r1, [pc, #40]	; (800b478 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b450:	4313      	orrs	r3, r2
 800b452:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b45c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b460:	d105      	bne.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b462:	4b05      	ldr	r3, [pc, #20]	; (800b478 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b464:	68db      	ldr	r3, [r3, #12]
 800b466:	4a04      	ldr	r2, [pc, #16]	; (800b478 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b468:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b46c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b46e:	7cbb      	ldrb	r3, [r7, #18]
}
 800b470:	4618      	mov	r0, r3
 800b472:	3718      	adds	r7, #24
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}
 800b478:	40021000 	.word	0x40021000

0800b47c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800b47c:	b480      	push	{r7}
 800b47e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800b480:	4b05      	ldr	r3, [pc, #20]	; (800b498 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4a04      	ldr	r2, [pc, #16]	; (800b498 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800b486:	f043 0304 	orr.w	r3, r3, #4
 800b48a:	6013      	str	r3, [r2, #0]
}
 800b48c:	bf00      	nop
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr
 800b496:	bf00      	nop
 800b498:	40021000 	.word	0x40021000

0800b49c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b4aa:	4b72      	ldr	r3, [pc, #456]	; (800b674 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b4ac:	68db      	ldr	r3, [r3, #12]
 800b4ae:	f003 0303 	and.w	r3, r3, #3
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d00e      	beq.n	800b4d4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b4b6:	4b6f      	ldr	r3, [pc, #444]	; (800b674 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b4b8:	68db      	ldr	r3, [r3, #12]
 800b4ba:	f003 0203 	and.w	r2, r3, #3
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d103      	bne.n	800b4ce <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
       ||
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d142      	bne.n	800b554 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	73fb      	strb	r3, [r7, #15]
 800b4d2:	e03f      	b.n	800b554 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	2b03      	cmp	r3, #3
 800b4da:	d018      	beq.n	800b50e <RCCEx_PLLSAI1_Config+0x72>
 800b4dc:	2b03      	cmp	r3, #3
 800b4de:	d825      	bhi.n	800b52c <RCCEx_PLLSAI1_Config+0x90>
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d002      	beq.n	800b4ea <RCCEx_PLLSAI1_Config+0x4e>
 800b4e4:	2b02      	cmp	r3, #2
 800b4e6:	d009      	beq.n	800b4fc <RCCEx_PLLSAI1_Config+0x60>
 800b4e8:	e020      	b.n	800b52c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b4ea:	4b62      	ldr	r3, [pc, #392]	; (800b674 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f003 0302 	and.w	r3, r3, #2
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d11d      	bne.n	800b532 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b4fa:	e01a      	b.n	800b532 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b4fc:	4b5d      	ldr	r3, [pc, #372]	; (800b674 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b504:	2b00      	cmp	r3, #0
 800b506:	d116      	bne.n	800b536 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800b508:	2301      	movs	r3, #1
 800b50a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b50c:	e013      	b.n	800b536 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b50e:	4b59      	ldr	r3, [pc, #356]	; (800b674 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b516:	2b00      	cmp	r3, #0
 800b518:	d10f      	bne.n	800b53a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b51a:	4b56      	ldr	r3, [pc, #344]	; (800b674 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b522:	2b00      	cmp	r3, #0
 800b524:	d109      	bne.n	800b53a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800b526:	2301      	movs	r3, #1
 800b528:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b52a:	e006      	b.n	800b53a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b52c:	2301      	movs	r3, #1
 800b52e:	73fb      	strb	r3, [r7, #15]
      break;
 800b530:	e004      	b.n	800b53c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b532:	bf00      	nop
 800b534:	e002      	b.n	800b53c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b536:	bf00      	nop
 800b538:	e000      	b.n	800b53c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b53a:	bf00      	nop
    }

    if(status == HAL_OK)
 800b53c:	7bfb      	ldrb	r3, [r7, #15]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d108      	bne.n	800b554 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800b542:	4b4c      	ldr	r3, [pc, #304]	; (800b674 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b544:	68db      	ldr	r3, [r3, #12]
 800b546:	f023 0203 	bic.w	r2, r3, #3
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4949      	ldr	r1, [pc, #292]	; (800b674 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b550:	4313      	orrs	r3, r2
 800b552:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b554:	7bfb      	ldrb	r3, [r7, #15]
 800b556:	2b00      	cmp	r3, #0
 800b558:	f040 8086 	bne.w	800b668 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b55c:	4b45      	ldr	r3, [pc, #276]	; (800b674 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a44      	ldr	r2, [pc, #272]	; (800b674 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b562:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b566:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b568:	f7fc ffe4 	bl	8008534 <HAL_GetTick>
 800b56c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b56e:	e009      	b.n	800b584 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b570:	f7fc ffe0 	bl	8008534 <HAL_GetTick>
 800b574:	4602      	mov	r2, r0
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	1ad3      	subs	r3, r2, r3
 800b57a:	2b02      	cmp	r3, #2
 800b57c:	d902      	bls.n	800b584 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b57e:	2303      	movs	r3, #3
 800b580:	73fb      	strb	r3, [r7, #15]
        break;
 800b582:	e005      	b.n	800b590 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b584:	4b3b      	ldr	r3, [pc, #236]	; (800b674 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d1ef      	bne.n	800b570 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b590:	7bfb      	ldrb	r3, [r7, #15]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d168      	bne.n	800b668 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d113      	bne.n	800b5c4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b59c:	4b35      	ldr	r3, [pc, #212]	; (800b674 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b59e:	691a      	ldr	r2, [r3, #16]
 800b5a0:	4b35      	ldr	r3, [pc, #212]	; (800b678 <RCCEx_PLLSAI1_Config+0x1dc>)
 800b5a2:	4013      	ands	r3, r2
 800b5a4:	687a      	ldr	r2, [r7, #4]
 800b5a6:	6892      	ldr	r2, [r2, #8]
 800b5a8:	0211      	lsls	r1, r2, #8
 800b5aa:	687a      	ldr	r2, [r7, #4]
 800b5ac:	68d2      	ldr	r2, [r2, #12]
 800b5ae:	06d2      	lsls	r2, r2, #27
 800b5b0:	4311      	orrs	r1, r2
 800b5b2:	687a      	ldr	r2, [r7, #4]
 800b5b4:	6852      	ldr	r2, [r2, #4]
 800b5b6:	3a01      	subs	r2, #1
 800b5b8:	0112      	lsls	r2, r2, #4
 800b5ba:	430a      	orrs	r2, r1
 800b5bc:	492d      	ldr	r1, [pc, #180]	; (800b674 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	610b      	str	r3, [r1, #16]
 800b5c2:	e02d      	b.n	800b620 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	d115      	bne.n	800b5f6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b5ca:	4b2a      	ldr	r3, [pc, #168]	; (800b674 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b5cc:	691a      	ldr	r2, [r3, #16]
 800b5ce:	4b2b      	ldr	r3, [pc, #172]	; (800b67c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b5d0:	4013      	ands	r3, r2
 800b5d2:	687a      	ldr	r2, [r7, #4]
 800b5d4:	6892      	ldr	r2, [r2, #8]
 800b5d6:	0211      	lsls	r1, r2, #8
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	6912      	ldr	r2, [r2, #16]
 800b5dc:	0852      	lsrs	r2, r2, #1
 800b5de:	3a01      	subs	r2, #1
 800b5e0:	0552      	lsls	r2, r2, #21
 800b5e2:	4311      	orrs	r1, r2
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	6852      	ldr	r2, [r2, #4]
 800b5e8:	3a01      	subs	r2, #1
 800b5ea:	0112      	lsls	r2, r2, #4
 800b5ec:	430a      	orrs	r2, r1
 800b5ee:	4921      	ldr	r1, [pc, #132]	; (800b674 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	610b      	str	r3, [r1, #16]
 800b5f4:	e014      	b.n	800b620 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b5f6:	4b1f      	ldr	r3, [pc, #124]	; (800b674 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b5f8:	691a      	ldr	r2, [r3, #16]
 800b5fa:	4b21      	ldr	r3, [pc, #132]	; (800b680 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b5fc:	4013      	ands	r3, r2
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	6892      	ldr	r2, [r2, #8]
 800b602:	0211      	lsls	r1, r2, #8
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	6952      	ldr	r2, [r2, #20]
 800b608:	0852      	lsrs	r2, r2, #1
 800b60a:	3a01      	subs	r2, #1
 800b60c:	0652      	lsls	r2, r2, #25
 800b60e:	4311      	orrs	r1, r2
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	6852      	ldr	r2, [r2, #4]
 800b614:	3a01      	subs	r2, #1
 800b616:	0112      	lsls	r2, r2, #4
 800b618:	430a      	orrs	r2, r1
 800b61a:	4916      	ldr	r1, [pc, #88]	; (800b674 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b61c:	4313      	orrs	r3, r2
 800b61e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b620:	4b14      	ldr	r3, [pc, #80]	; (800b674 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	4a13      	ldr	r2, [pc, #76]	; (800b674 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b626:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b62a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b62c:	f7fc ff82 	bl	8008534 <HAL_GetTick>
 800b630:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b632:	e009      	b.n	800b648 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b634:	f7fc ff7e 	bl	8008534 <HAL_GetTick>
 800b638:	4602      	mov	r2, r0
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	1ad3      	subs	r3, r2, r3
 800b63e:	2b02      	cmp	r3, #2
 800b640:	d902      	bls.n	800b648 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b642:	2303      	movs	r3, #3
 800b644:	73fb      	strb	r3, [r7, #15]
          break;
 800b646:	e005      	b.n	800b654 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b648:	4b0a      	ldr	r3, [pc, #40]	; (800b674 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b650:	2b00      	cmp	r3, #0
 800b652:	d0ef      	beq.n	800b634 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b654:	7bfb      	ldrb	r3, [r7, #15]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d106      	bne.n	800b668 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b65a:	4b06      	ldr	r3, [pc, #24]	; (800b674 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b65c:	691a      	ldr	r2, [r3, #16]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	699b      	ldr	r3, [r3, #24]
 800b662:	4904      	ldr	r1, [pc, #16]	; (800b674 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b664:	4313      	orrs	r3, r2
 800b666:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b668:	7bfb      	ldrb	r3, [r7, #15]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3710      	adds	r7, #16
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop
 800b674:	40021000 	.word	0x40021000
 800b678:	07ff800f 	.word	0x07ff800f
 800b67c:	ff9f800f 	.word	0xff9f800f
 800b680:	f9ff800f 	.word	0xf9ff800f

0800b684 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b68e:	2300      	movs	r3, #0
 800b690:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b692:	4b72      	ldr	r3, [pc, #456]	; (800b85c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b694:	68db      	ldr	r3, [r3, #12]
 800b696:	f003 0303 	and.w	r3, r3, #3
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d00e      	beq.n	800b6bc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800b69e:	4b6f      	ldr	r3, [pc, #444]	; (800b85c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b6a0:	68db      	ldr	r3, [r3, #12]
 800b6a2:	f003 0203 	and.w	r2, r3, #3
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d103      	bne.n	800b6b6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
       ||
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d142      	bne.n	800b73c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	73fb      	strb	r3, [r7, #15]
 800b6ba:	e03f      	b.n	800b73c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	2b03      	cmp	r3, #3
 800b6c2:	d018      	beq.n	800b6f6 <RCCEx_PLLSAI2_Config+0x72>
 800b6c4:	2b03      	cmp	r3, #3
 800b6c6:	d825      	bhi.n	800b714 <RCCEx_PLLSAI2_Config+0x90>
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d002      	beq.n	800b6d2 <RCCEx_PLLSAI2_Config+0x4e>
 800b6cc:	2b02      	cmp	r3, #2
 800b6ce:	d009      	beq.n	800b6e4 <RCCEx_PLLSAI2_Config+0x60>
 800b6d0:	e020      	b.n	800b714 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b6d2:	4b62      	ldr	r3, [pc, #392]	; (800b85c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f003 0302 	and.w	r3, r3, #2
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d11d      	bne.n	800b71a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b6e2:	e01a      	b.n	800b71a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b6e4:	4b5d      	ldr	r3, [pc, #372]	; (800b85c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d116      	bne.n	800b71e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b6f4:	e013      	b.n	800b71e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b6f6:	4b59      	ldr	r3, [pc, #356]	; (800b85c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d10f      	bne.n	800b722 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b702:	4b56      	ldr	r3, [pc, #344]	; (800b85c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d109      	bne.n	800b722 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800b70e:	2301      	movs	r3, #1
 800b710:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b712:	e006      	b.n	800b722 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b714:	2301      	movs	r3, #1
 800b716:	73fb      	strb	r3, [r7, #15]
      break;
 800b718:	e004      	b.n	800b724 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b71a:	bf00      	nop
 800b71c:	e002      	b.n	800b724 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b71e:	bf00      	nop
 800b720:	e000      	b.n	800b724 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b722:	bf00      	nop
    }

    if(status == HAL_OK)
 800b724:	7bfb      	ldrb	r3, [r7, #15]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d108      	bne.n	800b73c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800b72a:	4b4c      	ldr	r3, [pc, #304]	; (800b85c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b72c:	68db      	ldr	r3, [r3, #12]
 800b72e:	f023 0203 	bic.w	r2, r3, #3
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	4949      	ldr	r1, [pc, #292]	; (800b85c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b738:	4313      	orrs	r3, r2
 800b73a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b73c:	7bfb      	ldrb	r3, [r7, #15]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	f040 8086 	bne.w	800b850 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b744:	4b45      	ldr	r3, [pc, #276]	; (800b85c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	4a44      	ldr	r2, [pc, #272]	; (800b85c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b74a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b74e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b750:	f7fc fef0 	bl	8008534 <HAL_GetTick>
 800b754:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b756:	e009      	b.n	800b76c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b758:	f7fc feec 	bl	8008534 <HAL_GetTick>
 800b75c:	4602      	mov	r2, r0
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	1ad3      	subs	r3, r2, r3
 800b762:	2b02      	cmp	r3, #2
 800b764:	d902      	bls.n	800b76c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b766:	2303      	movs	r3, #3
 800b768:	73fb      	strb	r3, [r7, #15]
        break;
 800b76a:	e005      	b.n	800b778 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b76c:	4b3b      	ldr	r3, [pc, #236]	; (800b85c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b774:	2b00      	cmp	r3, #0
 800b776:	d1ef      	bne.n	800b758 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b778:	7bfb      	ldrb	r3, [r7, #15]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d168      	bne.n	800b850 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d113      	bne.n	800b7ac <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b784:	4b35      	ldr	r3, [pc, #212]	; (800b85c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b786:	695a      	ldr	r2, [r3, #20]
 800b788:	4b35      	ldr	r3, [pc, #212]	; (800b860 <RCCEx_PLLSAI2_Config+0x1dc>)
 800b78a:	4013      	ands	r3, r2
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	6892      	ldr	r2, [r2, #8]
 800b790:	0211      	lsls	r1, r2, #8
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	68d2      	ldr	r2, [r2, #12]
 800b796:	06d2      	lsls	r2, r2, #27
 800b798:	4311      	orrs	r1, r2
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	6852      	ldr	r2, [r2, #4]
 800b79e:	3a01      	subs	r2, #1
 800b7a0:	0112      	lsls	r2, r2, #4
 800b7a2:	430a      	orrs	r2, r1
 800b7a4:	492d      	ldr	r1, [pc, #180]	; (800b85c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	614b      	str	r3, [r1, #20]
 800b7aa:	e02d      	b.n	800b808 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	d115      	bne.n	800b7de <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b7b2:	4b2a      	ldr	r3, [pc, #168]	; (800b85c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b7b4:	695a      	ldr	r2, [r3, #20]
 800b7b6:	4b2b      	ldr	r3, [pc, #172]	; (800b864 <RCCEx_PLLSAI2_Config+0x1e0>)
 800b7b8:	4013      	ands	r3, r2
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	6892      	ldr	r2, [r2, #8]
 800b7be:	0211      	lsls	r1, r2, #8
 800b7c0:	687a      	ldr	r2, [r7, #4]
 800b7c2:	6912      	ldr	r2, [r2, #16]
 800b7c4:	0852      	lsrs	r2, r2, #1
 800b7c6:	3a01      	subs	r2, #1
 800b7c8:	0552      	lsls	r2, r2, #21
 800b7ca:	4311      	orrs	r1, r2
 800b7cc:	687a      	ldr	r2, [r7, #4]
 800b7ce:	6852      	ldr	r2, [r2, #4]
 800b7d0:	3a01      	subs	r2, #1
 800b7d2:	0112      	lsls	r2, r2, #4
 800b7d4:	430a      	orrs	r2, r1
 800b7d6:	4921      	ldr	r1, [pc, #132]	; (800b85c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	614b      	str	r3, [r1, #20]
 800b7dc:	e014      	b.n	800b808 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b7de:	4b1f      	ldr	r3, [pc, #124]	; (800b85c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b7e0:	695a      	ldr	r2, [r3, #20]
 800b7e2:	4b21      	ldr	r3, [pc, #132]	; (800b868 <RCCEx_PLLSAI2_Config+0x1e4>)
 800b7e4:	4013      	ands	r3, r2
 800b7e6:	687a      	ldr	r2, [r7, #4]
 800b7e8:	6892      	ldr	r2, [r2, #8]
 800b7ea:	0211      	lsls	r1, r2, #8
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	6952      	ldr	r2, [r2, #20]
 800b7f0:	0852      	lsrs	r2, r2, #1
 800b7f2:	3a01      	subs	r2, #1
 800b7f4:	0652      	lsls	r2, r2, #25
 800b7f6:	4311      	orrs	r1, r2
 800b7f8:	687a      	ldr	r2, [r7, #4]
 800b7fa:	6852      	ldr	r2, [r2, #4]
 800b7fc:	3a01      	subs	r2, #1
 800b7fe:	0112      	lsls	r2, r2, #4
 800b800:	430a      	orrs	r2, r1
 800b802:	4916      	ldr	r1, [pc, #88]	; (800b85c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b804:	4313      	orrs	r3, r2
 800b806:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b808:	4b14      	ldr	r3, [pc, #80]	; (800b85c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4a13      	ldr	r2, [pc, #76]	; (800b85c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b80e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b812:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b814:	f7fc fe8e 	bl	8008534 <HAL_GetTick>
 800b818:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b81a:	e009      	b.n	800b830 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b81c:	f7fc fe8a 	bl	8008534 <HAL_GetTick>
 800b820:	4602      	mov	r2, r0
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	1ad3      	subs	r3, r2, r3
 800b826:	2b02      	cmp	r3, #2
 800b828:	d902      	bls.n	800b830 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b82a:	2303      	movs	r3, #3
 800b82c:	73fb      	strb	r3, [r7, #15]
          break;
 800b82e:	e005      	b.n	800b83c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b830:	4b0a      	ldr	r3, [pc, #40]	; (800b85c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d0ef      	beq.n	800b81c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b83c:	7bfb      	ldrb	r3, [r7, #15]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d106      	bne.n	800b850 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b842:	4b06      	ldr	r3, [pc, #24]	; (800b85c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b844:	695a      	ldr	r2, [r3, #20]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	699b      	ldr	r3, [r3, #24]
 800b84a:	4904      	ldr	r1, [pc, #16]	; (800b85c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b84c:	4313      	orrs	r3, r2
 800b84e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800b850:	7bfb      	ldrb	r3, [r7, #15]
}
 800b852:	4618      	mov	r0, r3
 800b854:	3710      	adds	r7, #16
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}
 800b85a:	bf00      	nop
 800b85c:	40021000 	.word	0x40021000
 800b860:	07ff800f 	.word	0x07ff800f
 800b864:	ff9f800f 	.word	0xff9f800f
 800b868:	f9ff800f 	.word	0xf9ff800f

0800b86c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b86c:	b084      	sub	sp, #16
 800b86e:	b580      	push	{r7, lr}
 800b870:	b084      	sub	sp, #16
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
 800b876:	f107 001c 	add.w	r0, r7, #28
 800b87a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	68db      	ldr	r3, [r3, #12]
 800b882:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f001 faf6 	bl	800ce7c <USB_CoreReset>
 800b890:	4603      	mov	r3, r0
 800b892:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800b894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b896:	2b00      	cmp	r3, #0
 800b898:	d106      	bne.n	800b8a8 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b89e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	639a      	str	r2, [r3, #56]	; 0x38
 800b8a6:	e005      	b.n	800b8b4 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800b8b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3710      	adds	r7, #16
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b8c0:	b004      	add	sp, #16
 800b8c2:	4770      	bx	lr

0800b8c4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b087      	sub	sp, #28
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	60f8      	str	r0, [r7, #12]
 800b8cc:	60b9      	str	r1, [r7, #8]
 800b8ce:	4613      	mov	r3, r2
 800b8d0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b8d2:	79fb      	ldrb	r3, [r7, #7]
 800b8d4:	2b02      	cmp	r3, #2
 800b8d6:	d165      	bne.n	800b9a4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	4a3e      	ldr	r2, [pc, #248]	; (800b9d4 <USB_SetTurnaroundTime+0x110>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d906      	bls.n	800b8ee <USB_SetTurnaroundTime+0x2a>
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	4a3d      	ldr	r2, [pc, #244]	; (800b9d8 <USB_SetTurnaroundTime+0x114>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d202      	bcs.n	800b8ee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b8e8:	230f      	movs	r3, #15
 800b8ea:	617b      	str	r3, [r7, #20]
 800b8ec:	e05c      	b.n	800b9a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	4a39      	ldr	r2, [pc, #228]	; (800b9d8 <USB_SetTurnaroundTime+0x114>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d306      	bcc.n	800b904 <USB_SetTurnaroundTime+0x40>
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	4a38      	ldr	r2, [pc, #224]	; (800b9dc <USB_SetTurnaroundTime+0x118>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d202      	bcs.n	800b904 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b8fe:	230e      	movs	r3, #14
 800b900:	617b      	str	r3, [r7, #20]
 800b902:	e051      	b.n	800b9a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	4a35      	ldr	r2, [pc, #212]	; (800b9dc <USB_SetTurnaroundTime+0x118>)
 800b908:	4293      	cmp	r3, r2
 800b90a:	d306      	bcc.n	800b91a <USB_SetTurnaroundTime+0x56>
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	4a34      	ldr	r2, [pc, #208]	; (800b9e0 <USB_SetTurnaroundTime+0x11c>)
 800b910:	4293      	cmp	r3, r2
 800b912:	d202      	bcs.n	800b91a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b914:	230d      	movs	r3, #13
 800b916:	617b      	str	r3, [r7, #20]
 800b918:	e046      	b.n	800b9a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	4a30      	ldr	r2, [pc, #192]	; (800b9e0 <USB_SetTurnaroundTime+0x11c>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d306      	bcc.n	800b930 <USB_SetTurnaroundTime+0x6c>
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	4a2f      	ldr	r2, [pc, #188]	; (800b9e4 <USB_SetTurnaroundTime+0x120>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d802      	bhi.n	800b930 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b92a:	230c      	movs	r3, #12
 800b92c:	617b      	str	r3, [r7, #20]
 800b92e:	e03b      	b.n	800b9a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	4a2c      	ldr	r2, [pc, #176]	; (800b9e4 <USB_SetTurnaroundTime+0x120>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d906      	bls.n	800b946 <USB_SetTurnaroundTime+0x82>
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	4a2b      	ldr	r2, [pc, #172]	; (800b9e8 <USB_SetTurnaroundTime+0x124>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d802      	bhi.n	800b946 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b940:	230b      	movs	r3, #11
 800b942:	617b      	str	r3, [r7, #20]
 800b944:	e030      	b.n	800b9a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	4a27      	ldr	r2, [pc, #156]	; (800b9e8 <USB_SetTurnaroundTime+0x124>)
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d906      	bls.n	800b95c <USB_SetTurnaroundTime+0x98>
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	4a26      	ldr	r2, [pc, #152]	; (800b9ec <USB_SetTurnaroundTime+0x128>)
 800b952:	4293      	cmp	r3, r2
 800b954:	d802      	bhi.n	800b95c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b956:	230a      	movs	r3, #10
 800b958:	617b      	str	r3, [r7, #20]
 800b95a:	e025      	b.n	800b9a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	4a23      	ldr	r2, [pc, #140]	; (800b9ec <USB_SetTurnaroundTime+0x128>)
 800b960:	4293      	cmp	r3, r2
 800b962:	d906      	bls.n	800b972 <USB_SetTurnaroundTime+0xae>
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	4a22      	ldr	r2, [pc, #136]	; (800b9f0 <USB_SetTurnaroundTime+0x12c>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d202      	bcs.n	800b972 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b96c:	2309      	movs	r3, #9
 800b96e:	617b      	str	r3, [r7, #20]
 800b970:	e01a      	b.n	800b9a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	4a1e      	ldr	r2, [pc, #120]	; (800b9f0 <USB_SetTurnaroundTime+0x12c>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d306      	bcc.n	800b988 <USB_SetTurnaroundTime+0xc4>
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	4a1d      	ldr	r2, [pc, #116]	; (800b9f4 <USB_SetTurnaroundTime+0x130>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d802      	bhi.n	800b988 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b982:	2308      	movs	r3, #8
 800b984:	617b      	str	r3, [r7, #20]
 800b986:	e00f      	b.n	800b9a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	4a1a      	ldr	r2, [pc, #104]	; (800b9f4 <USB_SetTurnaroundTime+0x130>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d906      	bls.n	800b99e <USB_SetTurnaroundTime+0xda>
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	4a19      	ldr	r2, [pc, #100]	; (800b9f8 <USB_SetTurnaroundTime+0x134>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d202      	bcs.n	800b99e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b998:	2307      	movs	r3, #7
 800b99a:	617b      	str	r3, [r7, #20]
 800b99c:	e004      	b.n	800b9a8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b99e:	2306      	movs	r3, #6
 800b9a0:	617b      	str	r3, [r7, #20]
 800b9a2:	e001      	b.n	800b9a8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b9a4:	2309      	movs	r3, #9
 800b9a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	68db      	ldr	r3, [r3, #12]
 800b9ac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	68da      	ldr	r2, [r3, #12]
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	029b      	lsls	r3, r3, #10
 800b9bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b9c0:	431a      	orrs	r2, r3
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	371c      	adds	r7, #28
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr
 800b9d4:	00d8acbf 	.word	0x00d8acbf
 800b9d8:	00e4e1c0 	.word	0x00e4e1c0
 800b9dc:	00f42400 	.word	0x00f42400
 800b9e0:	01067380 	.word	0x01067380
 800b9e4:	011a499f 	.word	0x011a499f
 800b9e8:	01312cff 	.word	0x01312cff
 800b9ec:	014ca43f 	.word	0x014ca43f
 800b9f0:	016e3600 	.word	0x016e3600
 800b9f4:	01a6ab1f 	.word	0x01a6ab1f
 800b9f8:	01e84800 	.word	0x01e84800

0800b9fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b083      	sub	sp, #12
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	689b      	ldr	r3, [r3, #8]
 800ba08:	f043 0201 	orr.w	r2, r3, #1
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	370c      	adds	r7, #12
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr

0800ba1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba1e:	b480      	push	{r7}
 800ba20:	b083      	sub	sp, #12
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	689b      	ldr	r3, [r3, #8]
 800ba2a:	f023 0201 	bic.w	r2, r3, #1
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ba32:	2300      	movs	r3, #0
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	370c      	adds	r7, #12
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr

0800ba40 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
 800ba48:	460b      	mov	r3, r1
 800ba4a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	68db      	ldr	r3, [r3, #12]
 800ba54:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ba5c:	78fb      	ldrb	r3, [r7, #3]
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d115      	bne.n	800ba8e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	68db      	ldr	r3, [r3, #12]
 800ba66:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ba6e:	2001      	movs	r0, #1
 800ba70:	f7fc fd6c 	bl	800854c <HAL_Delay>
      ms++;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	3301      	adds	r3, #1
 800ba78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f001 f985 	bl	800cd8a <USB_GetMode>
 800ba80:	4603      	mov	r3, r0
 800ba82:	2b01      	cmp	r3, #1
 800ba84:	d01e      	beq.n	800bac4 <USB_SetCurrentMode+0x84>
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2b31      	cmp	r3, #49	; 0x31
 800ba8a:	d9f0      	bls.n	800ba6e <USB_SetCurrentMode+0x2e>
 800ba8c:	e01a      	b.n	800bac4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ba8e:	78fb      	ldrb	r3, [r7, #3]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d115      	bne.n	800bac0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800baa0:	2001      	movs	r0, #1
 800baa2:	f7fc fd53 	bl	800854c <HAL_Delay>
      ms++;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	3301      	adds	r3, #1
 800baaa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f001 f96c 	bl	800cd8a <USB_GetMode>
 800bab2:	4603      	mov	r3, r0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d005      	beq.n	800bac4 <USB_SetCurrentMode+0x84>
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2b31      	cmp	r3, #49	; 0x31
 800babc:	d9f0      	bls.n	800baa0 <USB_SetCurrentMode+0x60>
 800babe:	e001      	b.n	800bac4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bac0:	2301      	movs	r3, #1
 800bac2:	e005      	b.n	800bad0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2b32      	cmp	r3, #50	; 0x32
 800bac8:	d101      	bne.n	800bace <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800baca:	2301      	movs	r3, #1
 800bacc:	e000      	b.n	800bad0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bace:	2300      	movs	r3, #0
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3710      	adds	r7, #16
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bad8:	b084      	sub	sp, #16
 800bada:	b580      	push	{r7, lr}
 800badc:	b086      	sub	sp, #24
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
 800bae2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bae6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800baea:	2300      	movs	r3, #0
 800baec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800baf2:	2300      	movs	r3, #0
 800baf4:	613b      	str	r3, [r7, #16]
 800baf6:	e009      	b.n	800bb0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	3340      	adds	r3, #64	; 0x40
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	4413      	add	r3, r2
 800bb02:	2200      	movs	r2, #0
 800bb04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	3301      	adds	r3, #1
 800bb0a:	613b      	str	r3, [r7, #16]
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	2b0e      	cmp	r3, #14
 800bb10:	d9f2      	bls.n	800baf8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bb12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d11c      	bne.n	800bb52 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	68fa      	ldr	r2, [r7, #12]
 800bb22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb26:	f043 0302 	orr.w	r3, r3, #2
 800bb2a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb30:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	601a      	str	r2, [r3, #0]
 800bb50:	e005      	b.n	800bb5e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bb64:	461a      	mov	r2, r3
 800bb66:	2300      	movs	r3, #0
 800bb68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb70:	4619      	mov	r1, r3
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb78:	461a      	mov	r2, r3
 800bb7a:	680b      	ldr	r3, [r1, #0]
 800bb7c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bb7e:	2103      	movs	r1, #3
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f000 f959 	bl	800be38 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bb86:	2110      	movs	r1, #16
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f000 f8f1 	bl	800bd70 <USB_FlushTxFifo>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d001      	beq.n	800bb98 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800bb94:	2301      	movs	r3, #1
 800bb96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f000 f91d 	bl	800bdd8 <USB_FlushRxFifo>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d001      	beq.n	800bba8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800bba4:	2301      	movs	r3, #1
 800bba6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbae:	461a      	mov	r2, r3
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbba:	461a      	mov	r2, r3
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	2300      	movs	r3, #0
 800bbca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bbcc:	2300      	movs	r3, #0
 800bbce:	613b      	str	r3, [r7, #16]
 800bbd0:	e043      	b.n	800bc5a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	015a      	lsls	r2, r3, #5
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	4413      	add	r3, r2
 800bbda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bbe4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bbe8:	d118      	bne.n	800bc1c <USB_DevInit+0x144>
    {
      if (i == 0U)
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d10a      	bne.n	800bc06 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	015a      	lsls	r2, r3, #5
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	4413      	add	r3, r2
 800bbf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bc02:	6013      	str	r3, [r2, #0]
 800bc04:	e013      	b.n	800bc2e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	015a      	lsls	r2, r3, #5
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	4413      	add	r3, r2
 800bc0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc12:	461a      	mov	r2, r3
 800bc14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bc18:	6013      	str	r3, [r2, #0]
 800bc1a:	e008      	b.n	800bc2e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	015a      	lsls	r2, r3, #5
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	4413      	add	r3, r2
 800bc24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc28:	461a      	mov	r2, r3
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	015a      	lsls	r2, r3, #5
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	4413      	add	r3, r2
 800bc36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	015a      	lsls	r2, r3, #5
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	4413      	add	r3, r2
 800bc48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bc52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	3301      	adds	r3, #1
 800bc58:	613b      	str	r3, [r7, #16]
 800bc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc5c:	693a      	ldr	r2, [r7, #16]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d3b7      	bcc.n	800bbd2 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc62:	2300      	movs	r3, #0
 800bc64:	613b      	str	r3, [r7, #16]
 800bc66:	e043      	b.n	800bcf0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	015a      	lsls	r2, r3, #5
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	4413      	add	r3, r2
 800bc70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc7e:	d118      	bne.n	800bcb2 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d10a      	bne.n	800bc9c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	015a      	lsls	r2, r3, #5
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc92:	461a      	mov	r2, r3
 800bc94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bc98:	6013      	str	r3, [r2, #0]
 800bc9a:	e013      	b.n	800bcc4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	015a      	lsls	r2, r3, #5
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	4413      	add	r3, r2
 800bca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bca8:	461a      	mov	r2, r3
 800bcaa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bcae:	6013      	str	r3, [r2, #0]
 800bcb0:	e008      	b.n	800bcc4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	015a      	lsls	r2, r3, #5
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	4413      	add	r3, r2
 800bcba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcbe:	461a      	mov	r2, r3
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	015a      	lsls	r2, r3, #5
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	4413      	add	r3, r2
 800bccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcd0:	461a      	mov	r2, r3
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	015a      	lsls	r2, r3, #5
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	4413      	add	r3, r2
 800bcde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bce2:	461a      	mov	r2, r3
 800bce4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bce8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	3301      	adds	r3, #1
 800bcee:	613b      	str	r3, [r7, #16]
 800bcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf2:	693a      	ldr	r2, [r7, #16]
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d3b7      	bcc.n	800bc68 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcfe:	691b      	ldr	r3, [r3, #16]
 800bd00:	68fa      	ldr	r2, [r7, #12]
 800bd02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd0a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bd18:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	699b      	ldr	r3, [r3, #24]
 800bd1e:	f043 0210 	orr.w	r2, r3, #16
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	699a      	ldr	r2, [r3, #24]
 800bd2a:	4b10      	ldr	r3, [pc, #64]	; (800bd6c <USB_DevInit+0x294>)
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	687a      	ldr	r2, [r7, #4]
 800bd30:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bd32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d005      	beq.n	800bd44 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	699b      	ldr	r3, [r3, #24]
 800bd3c:	f043 0208 	orr.w	r2, r3, #8
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bd44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd46:	2b01      	cmp	r3, #1
 800bd48:	d107      	bne.n	800bd5a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	699b      	ldr	r3, [r3, #24]
 800bd4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bd52:	f043 0304 	orr.w	r3, r3, #4
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bd5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3718      	adds	r7, #24
 800bd60:	46bd      	mov	sp, r7
 800bd62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bd66:	b004      	add	sp, #16
 800bd68:	4770      	bx	lr
 800bd6a:	bf00      	nop
 800bd6c:	803c3800 	.word	0x803c3800

0800bd70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b085      	sub	sp, #20
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	3301      	adds	r3, #1
 800bd82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	4a13      	ldr	r2, [pc, #76]	; (800bdd4 <USB_FlushTxFifo+0x64>)
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d901      	bls.n	800bd90 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bd8c:	2303      	movs	r3, #3
 800bd8e:	e01b      	b.n	800bdc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	691b      	ldr	r3, [r3, #16]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	daf2      	bge.n	800bd7e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	019b      	lsls	r3, r3, #6
 800bda0:	f043 0220 	orr.w	r2, r3, #32
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	3301      	adds	r3, #1
 800bdac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	4a08      	ldr	r2, [pc, #32]	; (800bdd4 <USB_FlushTxFifo+0x64>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d901      	bls.n	800bdba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bdb6:	2303      	movs	r3, #3
 800bdb8:	e006      	b.n	800bdc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	691b      	ldr	r3, [r3, #16]
 800bdbe:	f003 0320 	and.w	r3, r3, #32
 800bdc2:	2b20      	cmp	r3, #32
 800bdc4:	d0f0      	beq.n	800bda8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bdc6:	2300      	movs	r3, #0
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3714      	adds	r7, #20
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr
 800bdd4:	00030d40 	.word	0x00030d40

0800bdd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b085      	sub	sp, #20
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bde0:	2300      	movs	r3, #0
 800bde2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	3301      	adds	r3, #1
 800bde8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	4a11      	ldr	r2, [pc, #68]	; (800be34 <USB_FlushRxFifo+0x5c>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d901      	bls.n	800bdf6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bdf2:	2303      	movs	r3, #3
 800bdf4:	e018      	b.n	800be28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	daf2      	bge.n	800bde4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bdfe:	2300      	movs	r3, #0
 800be00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2210      	movs	r2, #16
 800be06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	3301      	adds	r3, #1
 800be0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	4a08      	ldr	r2, [pc, #32]	; (800be34 <USB_FlushRxFifo+0x5c>)
 800be12:	4293      	cmp	r3, r2
 800be14:	d901      	bls.n	800be1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800be16:	2303      	movs	r3, #3
 800be18:	e006      	b.n	800be28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	691b      	ldr	r3, [r3, #16]
 800be1e:	f003 0310 	and.w	r3, r3, #16
 800be22:	2b10      	cmp	r3, #16
 800be24:	d0f0      	beq.n	800be08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800be26:	2300      	movs	r3, #0
}
 800be28:	4618      	mov	r0, r3
 800be2a:	3714      	adds	r7, #20
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr
 800be34:	00030d40 	.word	0x00030d40

0800be38 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800be38:	b480      	push	{r7}
 800be3a:	b085      	sub	sp, #20
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	460b      	mov	r3, r1
 800be42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be4e:	681a      	ldr	r2, [r3, #0]
 800be50:	78fb      	ldrb	r3, [r7, #3]
 800be52:	68f9      	ldr	r1, [r7, #12]
 800be54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be58:	4313      	orrs	r3, r2
 800be5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800be5c:	2300      	movs	r3, #0
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3714      	adds	r7, #20
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr

0800be6a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800be6a:	b480      	push	{r7}
 800be6c:	b087      	sub	sp, #28
 800be6e:	af00      	add	r7, sp, #0
 800be70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be7c:	689b      	ldr	r3, [r3, #8]
 800be7e:	f003 0306 	and.w	r3, r3, #6
 800be82:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2b02      	cmp	r3, #2
 800be88:	d002      	beq.n	800be90 <USB_GetDevSpeed+0x26>
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2b06      	cmp	r3, #6
 800be8e:	d102      	bne.n	800be96 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800be90:	2302      	movs	r3, #2
 800be92:	75fb      	strb	r3, [r7, #23]
 800be94:	e001      	b.n	800be9a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800be96:	230f      	movs	r3, #15
 800be98:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800be9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	371c      	adds	r7, #28
 800bea0:	46bd      	mov	sp, r7
 800bea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea6:	4770      	bx	lr

0800bea8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bea8:	b480      	push	{r7}
 800beaa:	b085      	sub	sp, #20
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	785b      	ldrb	r3, [r3, #1]
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	d13a      	bne.n	800bf3a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800beca:	69da      	ldr	r2, [r3, #28]
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	f003 030f 	and.w	r3, r3, #15
 800bed4:	2101      	movs	r1, #1
 800bed6:	fa01 f303 	lsl.w	r3, r1, r3
 800beda:	b29b      	uxth	r3, r3
 800bedc:	68f9      	ldr	r1, [r7, #12]
 800bede:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bee2:	4313      	orrs	r3, r2
 800bee4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	015a      	lsls	r2, r3, #5
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	4413      	add	r3, r2
 800beee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d155      	bne.n	800bfa8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	015a      	lsls	r2, r3, #5
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	4413      	add	r3, r2
 800bf04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf08:	681a      	ldr	r2, [r3, #0]
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	68db      	ldr	r3, [r3, #12]
 800bf0e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	791b      	ldrb	r3, [r3, #4]
 800bf16:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bf18:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	059b      	lsls	r3, r3, #22
 800bf1e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bf20:	4313      	orrs	r3, r2
 800bf22:	68ba      	ldr	r2, [r7, #8]
 800bf24:	0151      	lsls	r1, r2, #5
 800bf26:	68fa      	ldr	r2, [r7, #12]
 800bf28:	440a      	add	r2, r1
 800bf2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf36:	6013      	str	r3, [r2, #0]
 800bf38:	e036      	b.n	800bfa8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf40:	69da      	ldr	r2, [r3, #28]
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	781b      	ldrb	r3, [r3, #0]
 800bf46:	f003 030f 	and.w	r3, r3, #15
 800bf4a:	2101      	movs	r1, #1
 800bf4c:	fa01 f303 	lsl.w	r3, r1, r3
 800bf50:	041b      	lsls	r3, r3, #16
 800bf52:	68f9      	ldr	r1, [r7, #12]
 800bf54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	015a      	lsls	r2, r3, #5
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	4413      	add	r3, r2
 800bf64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d11a      	bne.n	800bfa8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	015a      	lsls	r2, r3, #5
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	4413      	add	r3, r2
 800bf7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf7e:	681a      	ldr	r2, [r3, #0]
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	68db      	ldr	r3, [r3, #12]
 800bf84:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	791b      	ldrb	r3, [r3, #4]
 800bf8c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bf8e:	430b      	orrs	r3, r1
 800bf90:	4313      	orrs	r3, r2
 800bf92:	68ba      	ldr	r2, [r7, #8]
 800bf94:	0151      	lsls	r1, r2, #5
 800bf96:	68fa      	ldr	r2, [r7, #12]
 800bf98:	440a      	add	r2, r1
 800bf9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bfa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bfa6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bfa8:	2300      	movs	r3, #0
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3714      	adds	r7, #20
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb4:	4770      	bx	lr
	...

0800bfb8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b085      	sub	sp, #20
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	785b      	ldrb	r3, [r3, #1]
 800bfd0:	2b01      	cmp	r3, #1
 800bfd2:	d161      	bne.n	800c098 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	015a      	lsls	r2, r3, #5
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	4413      	add	r3, r2
 800bfdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bfe6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bfea:	d11f      	bne.n	800c02c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	015a      	lsls	r2, r3, #5
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	4413      	add	r3, r2
 800bff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	68ba      	ldr	r2, [r7, #8]
 800bffc:	0151      	lsls	r1, r2, #5
 800bffe:	68fa      	ldr	r2, [r7, #12]
 800c000:	440a      	add	r2, r1
 800c002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c006:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c00a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	015a      	lsls	r2, r3, #5
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	4413      	add	r3, r2
 800c014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	68ba      	ldr	r2, [r7, #8]
 800c01c:	0151      	lsls	r1, r2, #5
 800c01e:	68fa      	ldr	r2, [r7, #12]
 800c020:	440a      	add	r2, r1
 800c022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c026:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c02a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c032:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	781b      	ldrb	r3, [r3, #0]
 800c038:	f003 030f 	and.w	r3, r3, #15
 800c03c:	2101      	movs	r1, #1
 800c03e:	fa01 f303 	lsl.w	r3, r1, r3
 800c042:	b29b      	uxth	r3, r3
 800c044:	43db      	mvns	r3, r3
 800c046:	68f9      	ldr	r1, [r7, #12]
 800c048:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c04c:	4013      	ands	r3, r2
 800c04e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c056:	69da      	ldr	r2, [r3, #28]
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	f003 030f 	and.w	r3, r3, #15
 800c060:	2101      	movs	r1, #1
 800c062:	fa01 f303 	lsl.w	r3, r1, r3
 800c066:	b29b      	uxth	r3, r3
 800c068:	43db      	mvns	r3, r3
 800c06a:	68f9      	ldr	r1, [r7, #12]
 800c06c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c070:	4013      	ands	r3, r2
 800c072:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	015a      	lsls	r2, r3, #5
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	4413      	add	r3, r2
 800c07c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c080:	681a      	ldr	r2, [r3, #0]
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	0159      	lsls	r1, r3, #5
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	440b      	add	r3, r1
 800c08a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c08e:	4619      	mov	r1, r3
 800c090:	4b35      	ldr	r3, [pc, #212]	; (800c168 <USB_DeactivateEndpoint+0x1b0>)
 800c092:	4013      	ands	r3, r2
 800c094:	600b      	str	r3, [r1, #0]
 800c096:	e060      	b.n	800c15a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	015a      	lsls	r2, r3, #5
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	4413      	add	r3, r2
 800c0a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c0aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c0ae:	d11f      	bne.n	800c0f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	015a      	lsls	r2, r3, #5
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	4413      	add	r3, r2
 800c0b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	68ba      	ldr	r2, [r7, #8]
 800c0c0:	0151      	lsls	r1, r2, #5
 800c0c2:	68fa      	ldr	r2, [r7, #12]
 800c0c4:	440a      	add	r2, r1
 800c0c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c0ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	015a      	lsls	r2, r3, #5
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	4413      	add	r3, r2
 800c0d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	68ba      	ldr	r2, [r7, #8]
 800c0e0:	0151      	lsls	r1, r2, #5
 800c0e2:	68fa      	ldr	r2, [r7, #12]
 800c0e4:	440a      	add	r2, r1
 800c0e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c0ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	f003 030f 	and.w	r3, r3, #15
 800c100:	2101      	movs	r1, #1
 800c102:	fa01 f303 	lsl.w	r3, r1, r3
 800c106:	041b      	lsls	r3, r3, #16
 800c108:	43db      	mvns	r3, r3
 800c10a:	68f9      	ldr	r1, [r7, #12]
 800c10c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c110:	4013      	ands	r3, r2
 800c112:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c11a:	69da      	ldr	r2, [r3, #28]
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	f003 030f 	and.w	r3, r3, #15
 800c124:	2101      	movs	r1, #1
 800c126:	fa01 f303 	lsl.w	r3, r1, r3
 800c12a:	041b      	lsls	r3, r3, #16
 800c12c:	43db      	mvns	r3, r3
 800c12e:	68f9      	ldr	r1, [r7, #12]
 800c130:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c134:	4013      	ands	r3, r2
 800c136:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	015a      	lsls	r2, r3, #5
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	4413      	add	r3, r2
 800c140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c144:	681a      	ldr	r2, [r3, #0]
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	0159      	lsls	r1, r3, #5
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	440b      	add	r3, r1
 800c14e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c152:	4619      	mov	r1, r3
 800c154:	4b05      	ldr	r3, [pc, #20]	; (800c16c <USB_DeactivateEndpoint+0x1b4>)
 800c156:	4013      	ands	r3, r2
 800c158:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c15a:	2300      	movs	r3, #0
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3714      	adds	r7, #20
 800c160:	46bd      	mov	sp, r7
 800c162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c166:	4770      	bx	lr
 800c168:	ec337800 	.word	0xec337800
 800c16c:	eff37800 	.word	0xeff37800

0800c170 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b086      	sub	sp, #24
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	781b      	ldrb	r3, [r3, #0]
 800c182:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	785b      	ldrb	r3, [r3, #1]
 800c188:	2b01      	cmp	r3, #1
 800c18a:	f040 810a 	bne.w	800c3a2 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	699b      	ldr	r3, [r3, #24]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d132      	bne.n	800c1fc <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	015a      	lsls	r2, r3, #5
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	4413      	add	r3, r2
 800c19e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1a2:	691b      	ldr	r3, [r3, #16]
 800c1a4:	693a      	ldr	r2, [r7, #16]
 800c1a6:	0151      	lsls	r1, r2, #5
 800c1a8:	697a      	ldr	r2, [r7, #20]
 800c1aa:	440a      	add	r2, r1
 800c1ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c1b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c1b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	015a      	lsls	r2, r3, #5
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	4413      	add	r3, r2
 800c1c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1c6:	691b      	ldr	r3, [r3, #16]
 800c1c8:	693a      	ldr	r2, [r7, #16]
 800c1ca:	0151      	lsls	r1, r2, #5
 800c1cc:	697a      	ldr	r2, [r7, #20]
 800c1ce:	440a      	add	r2, r1
 800c1d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c1d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	015a      	lsls	r2, r3, #5
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1e6:	691b      	ldr	r3, [r3, #16]
 800c1e8:	693a      	ldr	r2, [r7, #16]
 800c1ea:	0151      	lsls	r1, r2, #5
 800c1ec:	697a      	ldr	r2, [r7, #20]
 800c1ee:	440a      	add	r2, r1
 800c1f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1f4:	0cdb      	lsrs	r3, r3, #19
 800c1f6:	04db      	lsls	r3, r3, #19
 800c1f8:	6113      	str	r3, [r2, #16]
 800c1fa:	e074      	b.n	800c2e6 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	015a      	lsls	r2, r3, #5
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	4413      	add	r3, r2
 800c204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c208:	691b      	ldr	r3, [r3, #16]
 800c20a:	693a      	ldr	r2, [r7, #16]
 800c20c:	0151      	lsls	r1, r2, #5
 800c20e:	697a      	ldr	r2, [r7, #20]
 800c210:	440a      	add	r2, r1
 800c212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c216:	0cdb      	lsrs	r3, r3, #19
 800c218:	04db      	lsls	r3, r3, #19
 800c21a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	015a      	lsls	r2, r3, #5
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	4413      	add	r3, r2
 800c224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c228:	691b      	ldr	r3, [r3, #16]
 800c22a:	693a      	ldr	r2, [r7, #16]
 800c22c:	0151      	lsls	r1, r2, #5
 800c22e:	697a      	ldr	r2, [r7, #20]
 800c230:	440a      	add	r2, r1
 800c232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c236:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c23a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c23e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	015a      	lsls	r2, r3, #5
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	4413      	add	r3, r2
 800c248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c24c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	6999      	ldr	r1, [r3, #24]
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	68db      	ldr	r3, [r3, #12]
 800c256:	440b      	add	r3, r1
 800c258:	1e59      	subs	r1, r3, #1
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	68db      	ldr	r3, [r3, #12]
 800c25e:	fbb1 f3f3 	udiv	r3, r1, r3
 800c262:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c264:	4b9e      	ldr	r3, [pc, #632]	; (800c4e0 <USB_EPStartXfer+0x370>)
 800c266:	400b      	ands	r3, r1
 800c268:	6939      	ldr	r1, [r7, #16]
 800c26a:	0148      	lsls	r0, r1, #5
 800c26c:	6979      	ldr	r1, [r7, #20]
 800c26e:	4401      	add	r1, r0
 800c270:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c274:	4313      	orrs	r3, r2
 800c276:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	015a      	lsls	r2, r3, #5
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	4413      	add	r3, r2
 800c280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c284:	691a      	ldr	r2, [r3, #16]
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	699b      	ldr	r3, [r3, #24]
 800c28a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c28e:	6939      	ldr	r1, [r7, #16]
 800c290:	0148      	lsls	r0, r1, #5
 800c292:	6979      	ldr	r1, [r7, #20]
 800c294:	4401      	add	r1, r0
 800c296:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c29a:	4313      	orrs	r3, r2
 800c29c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	791b      	ldrb	r3, [r3, #4]
 800c2a2:	2b01      	cmp	r3, #1
 800c2a4:	d11f      	bne.n	800c2e6 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	015a      	lsls	r2, r3, #5
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	4413      	add	r3, r2
 800c2ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2b2:	691b      	ldr	r3, [r3, #16]
 800c2b4:	693a      	ldr	r2, [r7, #16]
 800c2b6:	0151      	lsls	r1, r2, #5
 800c2b8:	697a      	ldr	r2, [r7, #20]
 800c2ba:	440a      	add	r2, r1
 800c2bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2c0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c2c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	015a      	lsls	r2, r3, #5
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	4413      	add	r3, r2
 800c2ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2d2:	691b      	ldr	r3, [r3, #16]
 800c2d4:	693a      	ldr	r2, [r7, #16]
 800c2d6:	0151      	lsls	r1, r2, #5
 800c2d8:	697a      	ldr	r2, [r7, #20]
 800c2da:	440a      	add	r2, r1
 800c2dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c2e4:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	015a      	lsls	r2, r3, #5
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	4413      	add	r3, r2
 800c2ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	693a      	ldr	r2, [r7, #16]
 800c2f6:	0151      	lsls	r1, r2, #5
 800c2f8:	697a      	ldr	r2, [r7, #20]
 800c2fa:	440a      	add	r2, r1
 800c2fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c300:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c304:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	791b      	ldrb	r3, [r3, #4]
 800c30a:	2b01      	cmp	r3, #1
 800c30c:	d015      	beq.n	800c33a <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	699b      	ldr	r3, [r3, #24]
 800c312:	2b00      	cmp	r3, #0
 800c314:	f000 8106 	beq.w	800c524 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c31e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	f003 030f 	and.w	r3, r3, #15
 800c328:	2101      	movs	r1, #1
 800c32a:	fa01 f303 	lsl.w	r3, r1, r3
 800c32e:	6979      	ldr	r1, [r7, #20]
 800c330:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c334:	4313      	orrs	r3, r2
 800c336:	634b      	str	r3, [r1, #52]	; 0x34
 800c338:	e0f4      	b.n	800c524 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c340:	689b      	ldr	r3, [r3, #8]
 800c342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c346:	2b00      	cmp	r3, #0
 800c348:	d110      	bne.n	800c36c <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	015a      	lsls	r2, r3, #5
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	4413      	add	r3, r2
 800c352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	693a      	ldr	r2, [r7, #16]
 800c35a:	0151      	lsls	r1, r2, #5
 800c35c:	697a      	ldr	r2, [r7, #20]
 800c35e:	440a      	add	r2, r1
 800c360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c364:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c368:	6013      	str	r3, [r2, #0]
 800c36a:	e00f      	b.n	800c38c <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	015a      	lsls	r2, r3, #5
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	4413      	add	r3, r2
 800c374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	693a      	ldr	r2, [r7, #16]
 800c37c:	0151      	lsls	r1, r2, #5
 800c37e:	697a      	ldr	r2, [r7, #20]
 800c380:	440a      	add	r2, r1
 800c382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c38a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	6919      	ldr	r1, [r3, #16]
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	781a      	ldrb	r2, [r3, #0]
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	699b      	ldr	r3, [r3, #24]
 800c398:	b29b      	uxth	r3, r3
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 fa94 	bl	800c8c8 <USB_WritePacket>
 800c3a0:	e0c0      	b.n	800c524 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	015a      	lsls	r2, r3, #5
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	4413      	add	r3, r2
 800c3aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3ae:	691b      	ldr	r3, [r3, #16]
 800c3b0:	693a      	ldr	r2, [r7, #16]
 800c3b2:	0151      	lsls	r1, r2, #5
 800c3b4:	697a      	ldr	r2, [r7, #20]
 800c3b6:	440a      	add	r2, r1
 800c3b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3bc:	0cdb      	lsrs	r3, r3, #19
 800c3be:	04db      	lsls	r3, r3, #19
 800c3c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	015a      	lsls	r2, r3, #5
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	4413      	add	r3, r2
 800c3ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3ce:	691b      	ldr	r3, [r3, #16]
 800c3d0:	693a      	ldr	r2, [r7, #16]
 800c3d2:	0151      	lsls	r1, r2, #5
 800c3d4:	697a      	ldr	r2, [r7, #20]
 800c3d6:	440a      	add	r2, r1
 800c3d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c3e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c3e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	699b      	ldr	r3, [r3, #24]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d123      	bne.n	800c436 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	015a      	lsls	r2, r3, #5
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	4413      	add	r3, r2
 800c3f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3fa:	691a      	ldr	r2, [r3, #16]
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	68db      	ldr	r3, [r3, #12]
 800c400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c404:	6939      	ldr	r1, [r7, #16]
 800c406:	0148      	lsls	r0, r1, #5
 800c408:	6979      	ldr	r1, [r7, #20]
 800c40a:	4401      	add	r1, r0
 800c40c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c410:	4313      	orrs	r3, r2
 800c412:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c414:	693b      	ldr	r3, [r7, #16]
 800c416:	015a      	lsls	r2, r3, #5
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	4413      	add	r3, r2
 800c41c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c420:	691b      	ldr	r3, [r3, #16]
 800c422:	693a      	ldr	r2, [r7, #16]
 800c424:	0151      	lsls	r1, r2, #5
 800c426:	697a      	ldr	r2, [r7, #20]
 800c428:	440a      	add	r2, r1
 800c42a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c42e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c432:	6113      	str	r3, [r2, #16]
 800c434:	e037      	b.n	800c4a6 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	699a      	ldr	r2, [r3, #24]
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	68db      	ldr	r3, [r3, #12]
 800c43e:	4413      	add	r3, r2
 800c440:	1e5a      	subs	r2, r3, #1
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	68db      	ldr	r3, [r3, #12]
 800c446:	fbb2 f3f3 	udiv	r3, r2, r3
 800c44a:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	68db      	ldr	r3, [r3, #12]
 800c450:	89fa      	ldrh	r2, [r7, #14]
 800c452:	fb03 f202 	mul.w	r2, r3, r2
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	015a      	lsls	r2, r3, #5
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	4413      	add	r3, r2
 800c462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c466:	691a      	ldr	r2, [r3, #16]
 800c468:	89fb      	ldrh	r3, [r7, #14]
 800c46a:	04d9      	lsls	r1, r3, #19
 800c46c:	4b1c      	ldr	r3, [pc, #112]	; (800c4e0 <USB_EPStartXfer+0x370>)
 800c46e:	400b      	ands	r3, r1
 800c470:	6939      	ldr	r1, [r7, #16]
 800c472:	0148      	lsls	r0, r1, #5
 800c474:	6979      	ldr	r1, [r7, #20]
 800c476:	4401      	add	r1, r0
 800c478:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c47c:	4313      	orrs	r3, r2
 800c47e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	015a      	lsls	r2, r3, #5
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	4413      	add	r3, r2
 800c488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c48c:	691a      	ldr	r2, [r3, #16]
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	69db      	ldr	r3, [r3, #28]
 800c492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c496:	6939      	ldr	r1, [r7, #16]
 800c498:	0148      	lsls	r0, r1, #5
 800c49a:	6979      	ldr	r1, [r7, #20]
 800c49c:	4401      	add	r1, r0
 800c49e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	791b      	ldrb	r3, [r3, #4]
 800c4aa:	2b01      	cmp	r3, #1
 800c4ac:	d12a      	bne.n	800c504 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4b4:	689b      	ldr	r3, [r3, #8]
 800c4b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d112      	bne.n	800c4e4 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	015a      	lsls	r2, r3, #5
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	4413      	add	r3, r2
 800c4c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	693a      	ldr	r2, [r7, #16]
 800c4ce:	0151      	lsls	r1, r2, #5
 800c4d0:	697a      	ldr	r2, [r7, #20]
 800c4d2:	440a      	add	r2, r1
 800c4d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c4dc:	6013      	str	r3, [r2, #0]
 800c4de:	e011      	b.n	800c504 <USB_EPStartXfer+0x394>
 800c4e0:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	015a      	lsls	r2, r3, #5
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	4413      	add	r3, r2
 800c4ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	693a      	ldr	r2, [r7, #16]
 800c4f4:	0151      	lsls	r1, r2, #5
 800c4f6:	697a      	ldr	r2, [r7, #20]
 800c4f8:	440a      	add	r2, r1
 800c4fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c502:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	015a      	lsls	r2, r3, #5
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	4413      	add	r3, r2
 800c50c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	693a      	ldr	r2, [r7, #16]
 800c514:	0151      	lsls	r1, r2, #5
 800c516:	697a      	ldr	r2, [r7, #20]
 800c518:	440a      	add	r2, r1
 800c51a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c51e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c522:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c524:	2300      	movs	r3, #0
}
 800c526:	4618      	mov	r0, r3
 800c528:	3718      	adds	r7, #24
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
 800c52e:	bf00      	nop

0800c530 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c530:	b480      	push	{r7}
 800c532:	b085      	sub	sp, #20
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	781b      	ldrb	r3, [r3, #0]
 800c542:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	785b      	ldrb	r3, [r3, #1]
 800c548:	2b01      	cmp	r3, #1
 800c54a:	f040 80ab 	bne.w	800c6a4 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	699b      	ldr	r3, [r3, #24]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d132      	bne.n	800c5bc <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	015a      	lsls	r2, r3, #5
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	4413      	add	r3, r2
 800c55e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c562:	691b      	ldr	r3, [r3, #16]
 800c564:	68ba      	ldr	r2, [r7, #8]
 800c566:	0151      	lsls	r1, r2, #5
 800c568:	68fa      	ldr	r2, [r7, #12]
 800c56a:	440a      	add	r2, r1
 800c56c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c570:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c574:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c578:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	015a      	lsls	r2, r3, #5
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	4413      	add	r3, r2
 800c582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c586:	691b      	ldr	r3, [r3, #16]
 800c588:	68ba      	ldr	r2, [r7, #8]
 800c58a:	0151      	lsls	r1, r2, #5
 800c58c:	68fa      	ldr	r2, [r7, #12]
 800c58e:	440a      	add	r2, r1
 800c590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c594:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c598:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	015a      	lsls	r2, r3, #5
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	4413      	add	r3, r2
 800c5a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5a6:	691b      	ldr	r3, [r3, #16]
 800c5a8:	68ba      	ldr	r2, [r7, #8]
 800c5aa:	0151      	lsls	r1, r2, #5
 800c5ac:	68fa      	ldr	r2, [r7, #12]
 800c5ae:	440a      	add	r2, r1
 800c5b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5b4:	0cdb      	lsrs	r3, r3, #19
 800c5b6:	04db      	lsls	r3, r3, #19
 800c5b8:	6113      	str	r3, [r2, #16]
 800c5ba:	e04e      	b.n	800c65a <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	015a      	lsls	r2, r3, #5
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	4413      	add	r3, r2
 800c5c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5c8:	691b      	ldr	r3, [r3, #16]
 800c5ca:	68ba      	ldr	r2, [r7, #8]
 800c5cc:	0151      	lsls	r1, r2, #5
 800c5ce:	68fa      	ldr	r2, [r7, #12]
 800c5d0:	440a      	add	r2, r1
 800c5d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5d6:	0cdb      	lsrs	r3, r3, #19
 800c5d8:	04db      	lsls	r3, r3, #19
 800c5da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	015a      	lsls	r2, r3, #5
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	4413      	add	r3, r2
 800c5e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5e8:	691b      	ldr	r3, [r3, #16]
 800c5ea:	68ba      	ldr	r2, [r7, #8]
 800c5ec:	0151      	lsls	r1, r2, #5
 800c5ee:	68fa      	ldr	r2, [r7, #12]
 800c5f0:	440a      	add	r2, r1
 800c5f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c5fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c5fe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	699a      	ldr	r2, [r3, #24]
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	68db      	ldr	r3, [r3, #12]
 800c608:	429a      	cmp	r2, r3
 800c60a:	d903      	bls.n	800c614 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	68da      	ldr	r2, [r3, #12]
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	015a      	lsls	r2, r3, #5
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	4413      	add	r3, r2
 800c61c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c620:	691b      	ldr	r3, [r3, #16]
 800c622:	68ba      	ldr	r2, [r7, #8]
 800c624:	0151      	lsls	r1, r2, #5
 800c626:	68fa      	ldr	r2, [r7, #12]
 800c628:	440a      	add	r2, r1
 800c62a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c62e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c632:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	015a      	lsls	r2, r3, #5
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	4413      	add	r3, r2
 800c63c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c640:	691a      	ldr	r2, [r3, #16]
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	699b      	ldr	r3, [r3, #24]
 800c646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c64a:	68b9      	ldr	r1, [r7, #8]
 800c64c:	0148      	lsls	r0, r1, #5
 800c64e:	68f9      	ldr	r1, [r7, #12]
 800c650:	4401      	add	r1, r0
 800c652:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c656:	4313      	orrs	r3, r2
 800c658:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	015a      	lsls	r2, r3, #5
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	4413      	add	r3, r2
 800c662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	68ba      	ldr	r2, [r7, #8]
 800c66a:	0151      	lsls	r1, r2, #5
 800c66c:	68fa      	ldr	r2, [r7, #12]
 800c66e:	440a      	add	r2, r1
 800c670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c674:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c678:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	699b      	ldr	r3, [r3, #24]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d071      	beq.n	800c766 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c688:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	781b      	ldrb	r3, [r3, #0]
 800c68e:	f003 030f 	and.w	r3, r3, #15
 800c692:	2101      	movs	r1, #1
 800c694:	fa01 f303 	lsl.w	r3, r1, r3
 800c698:	68f9      	ldr	r1, [r7, #12]
 800c69a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c69e:	4313      	orrs	r3, r2
 800c6a0:	634b      	str	r3, [r1, #52]	; 0x34
 800c6a2:	e060      	b.n	800c766 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	015a      	lsls	r2, r3, #5
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	4413      	add	r3, r2
 800c6ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6b0:	691b      	ldr	r3, [r3, #16]
 800c6b2:	68ba      	ldr	r2, [r7, #8]
 800c6b4:	0151      	lsls	r1, r2, #5
 800c6b6:	68fa      	ldr	r2, [r7, #12]
 800c6b8:	440a      	add	r2, r1
 800c6ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6be:	0cdb      	lsrs	r3, r3, #19
 800c6c0:	04db      	lsls	r3, r3, #19
 800c6c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	015a      	lsls	r2, r3, #5
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	4413      	add	r3, r2
 800c6cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6d0:	691b      	ldr	r3, [r3, #16]
 800c6d2:	68ba      	ldr	r2, [r7, #8]
 800c6d4:	0151      	lsls	r1, r2, #5
 800c6d6:	68fa      	ldr	r2, [r7, #12]
 800c6d8:	440a      	add	r2, r1
 800c6da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c6e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c6e6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	699b      	ldr	r3, [r3, #24]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d003      	beq.n	800c6f8 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	68da      	ldr	r2, [r3, #12]
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	68da      	ldr	r2, [r3, #12]
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	015a      	lsls	r2, r3, #5
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	4413      	add	r3, r2
 800c708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c70c:	691b      	ldr	r3, [r3, #16]
 800c70e:	68ba      	ldr	r2, [r7, #8]
 800c710:	0151      	lsls	r1, r2, #5
 800c712:	68fa      	ldr	r2, [r7, #12]
 800c714:	440a      	add	r2, r1
 800c716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c71a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c71e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	015a      	lsls	r2, r3, #5
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	4413      	add	r3, r2
 800c728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c72c:	691a      	ldr	r2, [r3, #16]
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	69db      	ldr	r3, [r3, #28]
 800c732:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c736:	68b9      	ldr	r1, [r7, #8]
 800c738:	0148      	lsls	r0, r1, #5
 800c73a:	68f9      	ldr	r1, [r7, #12]
 800c73c:	4401      	add	r1, r0
 800c73e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c742:	4313      	orrs	r3, r2
 800c744:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	015a      	lsls	r2, r3, #5
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	4413      	add	r3, r2
 800c74e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	68ba      	ldr	r2, [r7, #8]
 800c756:	0151      	lsls	r1, r2, #5
 800c758:	68fa      	ldr	r2, [r7, #12]
 800c75a:	440a      	add	r2, r1
 800c75c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c760:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c764:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c766:	2300      	movs	r3, #0
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3714      	adds	r7, #20
 800c76c:	46bd      	mov	sp, r7
 800c76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c772:	4770      	bx	lr

0800c774 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c774:	b480      	push	{r7}
 800c776:	b087      	sub	sp, #28
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c77e:	2300      	movs	r3, #0
 800c780:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c782:	2300      	movs	r3, #0
 800c784:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	785b      	ldrb	r3, [r3, #1]
 800c78e:	2b01      	cmp	r3, #1
 800c790:	d14a      	bne.n	800c828 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	781b      	ldrb	r3, [r3, #0]
 800c796:	015a      	lsls	r2, r3, #5
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	4413      	add	r3, r2
 800c79c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c7a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c7aa:	f040 8086 	bne.w	800c8ba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	015a      	lsls	r2, r3, #5
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	4413      	add	r3, r2
 800c7b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	683a      	ldr	r2, [r7, #0]
 800c7c0:	7812      	ldrb	r2, [r2, #0]
 800c7c2:	0151      	lsls	r1, r2, #5
 800c7c4:	693a      	ldr	r2, [r7, #16]
 800c7c6:	440a      	add	r2, r1
 800c7c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c7d0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	781b      	ldrb	r3, [r3, #0]
 800c7d6:	015a      	lsls	r2, r3, #5
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	4413      	add	r3, r2
 800c7dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	683a      	ldr	r2, [r7, #0]
 800c7e4:	7812      	ldrb	r2, [r2, #0]
 800c7e6:	0151      	lsls	r1, r2, #5
 800c7e8:	693a      	ldr	r2, [r7, #16]
 800c7ea:	440a      	add	r2, r1
 800c7ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c7f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	3301      	adds	r3, #1
 800c7fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	f242 7210 	movw	r2, #10000	; 0x2710
 800c802:	4293      	cmp	r3, r2
 800c804:	d902      	bls.n	800c80c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c806:	2301      	movs	r3, #1
 800c808:	75fb      	strb	r3, [r7, #23]
          break;
 800c80a:	e056      	b.n	800c8ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	015a      	lsls	r2, r3, #5
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	4413      	add	r3, r2
 800c816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c820:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c824:	d0e7      	beq.n	800c7f6 <USB_EPStopXfer+0x82>
 800c826:	e048      	b.n	800c8ba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	015a      	lsls	r2, r3, #5
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	4413      	add	r3, r2
 800c832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c83c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c840:	d13b      	bne.n	800c8ba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	781b      	ldrb	r3, [r3, #0]
 800c846:	015a      	lsls	r2, r3, #5
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	4413      	add	r3, r2
 800c84c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	683a      	ldr	r2, [r7, #0]
 800c854:	7812      	ldrb	r2, [r2, #0]
 800c856:	0151      	lsls	r1, r2, #5
 800c858:	693a      	ldr	r2, [r7, #16]
 800c85a:	440a      	add	r2, r1
 800c85c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c860:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c864:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	015a      	lsls	r2, r3, #5
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	4413      	add	r3, r2
 800c870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	683a      	ldr	r2, [r7, #0]
 800c878:	7812      	ldrb	r2, [r2, #0]
 800c87a:	0151      	lsls	r1, r2, #5
 800c87c:	693a      	ldr	r2, [r7, #16]
 800c87e:	440a      	add	r2, r1
 800c880:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c884:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c888:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	3301      	adds	r3, #1
 800c88e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f242 7210 	movw	r2, #10000	; 0x2710
 800c896:	4293      	cmp	r3, r2
 800c898:	d902      	bls.n	800c8a0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c89a:	2301      	movs	r3, #1
 800c89c:	75fb      	strb	r3, [r7, #23]
          break;
 800c89e:	e00c      	b.n	800c8ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	015a      	lsls	r2, r3, #5
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	4413      	add	r3, r2
 800c8aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c8b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c8b8:	d0e7      	beq.n	800c88a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c8ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	371c      	adds	r7, #28
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr

0800c8c8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b089      	sub	sp, #36	; 0x24
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	60f8      	str	r0, [r7, #12]
 800c8d0:	60b9      	str	r1, [r7, #8]
 800c8d2:	4611      	mov	r1, r2
 800c8d4:	461a      	mov	r2, r3
 800c8d6:	460b      	mov	r3, r1
 800c8d8:	71fb      	strb	r3, [r7, #7]
 800c8da:	4613      	mov	r3, r2
 800c8dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800c8e6:	88bb      	ldrh	r3, [r7, #4]
 800c8e8:	3303      	adds	r3, #3
 800c8ea:	089b      	lsrs	r3, r3, #2
 800c8ec:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	61bb      	str	r3, [r7, #24]
 800c8f2:	e018      	b.n	800c926 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c8f4:	79fb      	ldrb	r3, [r7, #7]
 800c8f6:	031a      	lsls	r2, r3, #12
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	4413      	add	r3, r2
 800c8fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c900:	461a      	mov	r2, r3
 800c902:	69fb      	ldr	r3, [r7, #28]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	6013      	str	r3, [r2, #0]
    pSrc++;
 800c908:	69fb      	ldr	r3, [r7, #28]
 800c90a:	3301      	adds	r3, #1
 800c90c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800c90e:	69fb      	ldr	r3, [r7, #28]
 800c910:	3301      	adds	r3, #1
 800c912:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800c914:	69fb      	ldr	r3, [r7, #28]
 800c916:	3301      	adds	r3, #1
 800c918:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800c91a:	69fb      	ldr	r3, [r7, #28]
 800c91c:	3301      	adds	r3, #1
 800c91e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c920:	69bb      	ldr	r3, [r7, #24]
 800c922:	3301      	adds	r3, #1
 800c924:	61bb      	str	r3, [r7, #24]
 800c926:	69ba      	ldr	r2, [r7, #24]
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d3e2      	bcc.n	800c8f4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800c92e:	2300      	movs	r3, #0
}
 800c930:	4618      	mov	r0, r3
 800c932:	3724      	adds	r7, #36	; 0x24
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr

0800c93c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b08b      	sub	sp, #44	; 0x2c
 800c940:	af00      	add	r7, sp, #0
 800c942:	60f8      	str	r0, [r7, #12]
 800c944:	60b9      	str	r1, [r7, #8]
 800c946:	4613      	mov	r3, r2
 800c948:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c952:	88fb      	ldrh	r3, [r7, #6]
 800c954:	089b      	lsrs	r3, r3, #2
 800c956:	b29b      	uxth	r3, r3
 800c958:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c95a:	88fb      	ldrh	r3, [r7, #6]
 800c95c:	f003 0303 	and.w	r3, r3, #3
 800c960:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c962:	2300      	movs	r3, #0
 800c964:	623b      	str	r3, [r7, #32]
 800c966:	e014      	b.n	800c992 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c968:	69bb      	ldr	r3, [r7, #24]
 800c96a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c96e:	681a      	ldr	r2, [r3, #0]
 800c970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c972:	601a      	str	r2, [r3, #0]
    pDest++;
 800c974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c976:	3301      	adds	r3, #1
 800c978:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97c:	3301      	adds	r3, #1
 800c97e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c982:	3301      	adds	r3, #1
 800c984:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c988:	3301      	adds	r3, #1
 800c98a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c98c:	6a3b      	ldr	r3, [r7, #32]
 800c98e:	3301      	adds	r3, #1
 800c990:	623b      	str	r3, [r7, #32]
 800c992:	6a3a      	ldr	r2, [r7, #32]
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	429a      	cmp	r2, r3
 800c998:	d3e6      	bcc.n	800c968 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c99a:	8bfb      	ldrh	r3, [r7, #30]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d01e      	beq.n	800c9de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c9a4:	69bb      	ldr	r3, [r7, #24]
 800c9a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9aa:	461a      	mov	r2, r3
 800c9ac:	f107 0310 	add.w	r3, r7, #16
 800c9b0:	6812      	ldr	r2, [r2, #0]
 800c9b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c9b4:	693a      	ldr	r2, [r7, #16]
 800c9b6:	6a3b      	ldr	r3, [r7, #32]
 800c9b8:	b2db      	uxtb	r3, r3
 800c9ba:	00db      	lsls	r3, r3, #3
 800c9bc:	fa22 f303 	lsr.w	r3, r2, r3
 800c9c0:	b2da      	uxtb	r2, r3
 800c9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c4:	701a      	strb	r2, [r3, #0]
      i++;
 800c9c6:	6a3b      	ldr	r3, [r7, #32]
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	623b      	str	r3, [r7, #32]
      pDest++;
 800c9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ce:	3301      	adds	r3, #1
 800c9d0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c9d2:	8bfb      	ldrh	r3, [r7, #30]
 800c9d4:	3b01      	subs	r3, #1
 800c9d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c9d8:	8bfb      	ldrh	r3, [r7, #30]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d1ea      	bne.n	800c9b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	372c      	adds	r7, #44	; 0x2c
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr

0800c9ec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b085      	sub	sp, #20
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	781b      	ldrb	r3, [r3, #0]
 800c9fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	785b      	ldrb	r3, [r3, #1]
 800ca04:	2b01      	cmp	r3, #1
 800ca06:	d12c      	bne.n	800ca62 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	015a      	lsls	r2, r3, #5
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	4413      	add	r3, r2
 800ca10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	db12      	blt.n	800ca40 <USB_EPSetStall+0x54>
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d00f      	beq.n	800ca40 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	015a      	lsls	r2, r3, #5
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	4413      	add	r3, r2
 800ca28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	68ba      	ldr	r2, [r7, #8]
 800ca30:	0151      	lsls	r1, r2, #5
 800ca32:	68fa      	ldr	r2, [r7, #12]
 800ca34:	440a      	add	r2, r1
 800ca36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ca3e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	015a      	lsls	r2, r3, #5
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	4413      	add	r3, r2
 800ca48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	68ba      	ldr	r2, [r7, #8]
 800ca50:	0151      	lsls	r1, r2, #5
 800ca52:	68fa      	ldr	r2, [r7, #12]
 800ca54:	440a      	add	r2, r1
 800ca56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ca5e:	6013      	str	r3, [r2, #0]
 800ca60:	e02b      	b.n	800caba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	015a      	lsls	r2, r3, #5
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	4413      	add	r3, r2
 800ca6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	db12      	blt.n	800ca9a <USB_EPSetStall+0xae>
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d00f      	beq.n	800ca9a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	015a      	lsls	r2, r3, #5
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	4413      	add	r3, r2
 800ca82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	68ba      	ldr	r2, [r7, #8]
 800ca8a:	0151      	lsls	r1, r2, #5
 800ca8c:	68fa      	ldr	r2, [r7, #12]
 800ca8e:	440a      	add	r2, r1
 800ca90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ca98:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	015a      	lsls	r2, r3, #5
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	4413      	add	r3, r2
 800caa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	68ba      	ldr	r2, [r7, #8]
 800caaa:	0151      	lsls	r1, r2, #5
 800caac:	68fa      	ldr	r2, [r7, #12]
 800caae:	440a      	add	r2, r1
 800cab0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cab4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cab8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800caba:	2300      	movs	r3, #0
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3714      	adds	r7, #20
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr

0800cac8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cac8:	b480      	push	{r7}
 800caca:	b085      	sub	sp, #20
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	785b      	ldrb	r3, [r3, #1]
 800cae0:	2b01      	cmp	r3, #1
 800cae2:	d128      	bne.n	800cb36 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	015a      	lsls	r2, r3, #5
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	4413      	add	r3, r2
 800caec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	68ba      	ldr	r2, [r7, #8]
 800caf4:	0151      	lsls	r1, r2, #5
 800caf6:	68fa      	ldr	r2, [r7, #12]
 800caf8:	440a      	add	r2, r1
 800cafa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cafe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cb02:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	791b      	ldrb	r3, [r3, #4]
 800cb08:	2b03      	cmp	r3, #3
 800cb0a:	d003      	beq.n	800cb14 <USB_EPClearStall+0x4c>
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	791b      	ldrb	r3, [r3, #4]
 800cb10:	2b02      	cmp	r3, #2
 800cb12:	d138      	bne.n	800cb86 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	015a      	lsls	r2, r3, #5
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	4413      	add	r3, r2
 800cb1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	68ba      	ldr	r2, [r7, #8]
 800cb24:	0151      	lsls	r1, r2, #5
 800cb26:	68fa      	ldr	r2, [r7, #12]
 800cb28:	440a      	add	r2, r1
 800cb2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb32:	6013      	str	r3, [r2, #0]
 800cb34:	e027      	b.n	800cb86 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	015a      	lsls	r2, r3, #5
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	4413      	add	r3, r2
 800cb3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	68ba      	ldr	r2, [r7, #8]
 800cb46:	0151      	lsls	r1, r2, #5
 800cb48:	68fa      	ldr	r2, [r7, #12]
 800cb4a:	440a      	add	r2, r1
 800cb4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cb54:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	791b      	ldrb	r3, [r3, #4]
 800cb5a:	2b03      	cmp	r3, #3
 800cb5c:	d003      	beq.n	800cb66 <USB_EPClearStall+0x9e>
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	791b      	ldrb	r3, [r3, #4]
 800cb62:	2b02      	cmp	r3, #2
 800cb64:	d10f      	bne.n	800cb86 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	015a      	lsls	r2, r3, #5
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	4413      	add	r3, r2
 800cb6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	68ba      	ldr	r2, [r7, #8]
 800cb76:	0151      	lsls	r1, r2, #5
 800cb78:	68fa      	ldr	r2, [r7, #12]
 800cb7a:	440a      	add	r2, r1
 800cb7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb84:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cb86:	2300      	movs	r3, #0
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3714      	adds	r7, #20
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb92:	4770      	bx	lr

0800cb94 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cb94:	b480      	push	{r7}
 800cb96:	b085      	sub	sp, #20
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
 800cb9c:	460b      	mov	r3, r1
 800cb9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	68fa      	ldr	r2, [r7, #12]
 800cbae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cbb2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cbb6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbbe:	681a      	ldr	r2, [r3, #0]
 800cbc0:	78fb      	ldrb	r3, [r7, #3]
 800cbc2:	011b      	lsls	r3, r3, #4
 800cbc4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cbc8:	68f9      	ldr	r1, [r7, #12]
 800cbca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cbce:	4313      	orrs	r3, r2
 800cbd0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cbd2:	2300      	movs	r3, #0
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3714      	adds	r7, #20
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbde:	4770      	bx	lr

0800cbe0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b085      	sub	sp, #20
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	68fa      	ldr	r2, [r7, #12]
 800cbf6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cbfa:	f023 0303 	bic.w	r3, r3, #3
 800cbfe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc06:	685b      	ldr	r3, [r3, #4]
 800cc08:	68fa      	ldr	r2, [r7, #12]
 800cc0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc0e:	f023 0302 	bic.w	r3, r3, #2
 800cc12:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cc14:	2300      	movs	r3, #0
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3714      	adds	r7, #20
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc20:	4770      	bx	lr

0800cc22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cc22:	b480      	push	{r7}
 800cc24:	b085      	sub	sp, #20
 800cc26:	af00      	add	r7, sp, #0
 800cc28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	68fa      	ldr	r2, [r7, #12]
 800cc38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cc3c:	f023 0303 	bic.w	r3, r3, #3
 800cc40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc48:	685b      	ldr	r3, [r3, #4]
 800cc4a:	68fa      	ldr	r2, [r7, #12]
 800cc4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc50:	f043 0302 	orr.w	r3, r3, #2
 800cc54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cc56:	2300      	movs	r3, #0
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3714      	adds	r7, #20
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc62:	4770      	bx	lr

0800cc64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b085      	sub	sp, #20
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	695b      	ldr	r3, [r3, #20]
 800cc70:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	699b      	ldr	r3, [r3, #24]
 800cc76:	68fa      	ldr	r2, [r7, #12]
 800cc78:	4013      	ands	r3, r2
 800cc7a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3714      	adds	r7, #20
 800cc82:	46bd      	mov	sp, r7
 800cc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc88:	4770      	bx	lr

0800cc8a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cc8a:	b480      	push	{r7}
 800cc8c:	b085      	sub	sp, #20
 800cc8e:	af00      	add	r7, sp, #0
 800cc90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc9c:	699b      	ldr	r3, [r3, #24]
 800cc9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cca6:	69db      	ldr	r3, [r3, #28]
 800cca8:	68ba      	ldr	r2, [r7, #8]
 800ccaa:	4013      	ands	r3, r2
 800ccac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	0c1b      	lsrs	r3, r3, #16
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3714      	adds	r7, #20
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbc:	4770      	bx	lr

0800ccbe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ccbe:	b480      	push	{r7}
 800ccc0:	b085      	sub	sp, #20
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccd0:	699b      	ldr	r3, [r3, #24]
 800ccd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccda:	69db      	ldr	r3, [r3, #28]
 800ccdc:	68ba      	ldr	r2, [r7, #8]
 800ccde:	4013      	ands	r3, r2
 800cce0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	b29b      	uxth	r3, r3
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3714      	adds	r7, #20
 800ccea:	46bd      	mov	sp, r7
 800ccec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf0:	4770      	bx	lr

0800ccf2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ccf2:	b480      	push	{r7}
 800ccf4:	b085      	sub	sp, #20
 800ccf6:	af00      	add	r7, sp, #0
 800ccf8:	6078      	str	r0, [r7, #4]
 800ccfa:	460b      	mov	r3, r1
 800ccfc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cd02:	78fb      	ldrb	r3, [r7, #3]
 800cd04:	015a      	lsls	r2, r3, #5
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	4413      	add	r3, r2
 800cd0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd0e:	689b      	ldr	r3, [r3, #8]
 800cd10:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd18:	695b      	ldr	r3, [r3, #20]
 800cd1a:	68ba      	ldr	r2, [r7, #8]
 800cd1c:	4013      	ands	r3, r2
 800cd1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cd20:	68bb      	ldr	r3, [r7, #8]
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3714      	adds	r7, #20
 800cd26:	46bd      	mov	sp, r7
 800cd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2c:	4770      	bx	lr

0800cd2e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cd2e:	b480      	push	{r7}
 800cd30:	b087      	sub	sp, #28
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	6078      	str	r0, [r7, #4]
 800cd36:	460b      	mov	r3, r1
 800cd38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd44:	691b      	ldr	r3, [r3, #16]
 800cd46:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd50:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cd52:	78fb      	ldrb	r3, [r7, #3]
 800cd54:	f003 030f 	and.w	r3, r3, #15
 800cd58:	68fa      	ldr	r2, [r7, #12]
 800cd5a:	fa22 f303 	lsr.w	r3, r2, r3
 800cd5e:	01db      	lsls	r3, r3, #7
 800cd60:	b2db      	uxtb	r3, r3
 800cd62:	693a      	ldr	r2, [r7, #16]
 800cd64:	4313      	orrs	r3, r2
 800cd66:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cd68:	78fb      	ldrb	r3, [r7, #3]
 800cd6a:	015a      	lsls	r2, r3, #5
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	4413      	add	r3, r2
 800cd70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd74:	689b      	ldr	r3, [r3, #8]
 800cd76:	693a      	ldr	r2, [r7, #16]
 800cd78:	4013      	ands	r3, r2
 800cd7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cd7c:	68bb      	ldr	r3, [r7, #8]
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	371c      	adds	r7, #28
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr

0800cd8a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cd8a:	b480      	push	{r7}
 800cd8c:	b083      	sub	sp, #12
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	695b      	ldr	r3, [r3, #20]
 800cd96:	f003 0301 	and.w	r3, r3, #1
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	370c      	adds	r7, #12
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda4:	4770      	bx	lr

0800cda6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800cda6:	b480      	push	{r7}
 800cda8:	b085      	sub	sp, #20
 800cdaa:	af00      	add	r7, sp, #0
 800cdac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	68fa      	ldr	r2, [r7, #12]
 800cdbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdc0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800cdc4:	f023 0307 	bic.w	r3, r3, #7
 800cdc8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	68fa      	ldr	r2, [r7, #12]
 800cdd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cdd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cddc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cdde:	2300      	movs	r3, #0
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3714      	adds	r7, #20
 800cde4:	46bd      	mov	sp, r7
 800cde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdea:	4770      	bx	lr

0800cdec <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800cdec:	b480      	push	{r7}
 800cdee:	b085      	sub	sp, #20
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	333c      	adds	r3, #60	; 0x3c
 800cdfe:	3304      	adds	r3, #4
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	4a1c      	ldr	r2, [pc, #112]	; (800ce78 <USB_EP0_OutStart+0x8c>)
 800ce08:	4293      	cmp	r3, r2
 800ce0a:	d90a      	bls.n	800ce22 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ce18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce1c:	d101      	bne.n	800ce22 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	e024      	b.n	800ce6c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce28:	461a      	mov	r2, r3
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce34:	691b      	ldr	r3, [r3, #16]
 800ce36:	68fa      	ldr	r2, [r7, #12]
 800ce38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce48:	691b      	ldr	r3, [r3, #16]
 800ce4a:	68fa      	ldr	r2, [r7, #12]
 800ce4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce50:	f043 0318 	orr.w	r3, r3, #24
 800ce54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce5c:	691b      	ldr	r3, [r3, #16]
 800ce5e:	68fa      	ldr	r2, [r7, #12]
 800ce60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce64:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ce68:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800ce6a:	2300      	movs	r3, #0
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3714      	adds	r7, #20
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr
 800ce78:	4f54300a 	.word	0x4f54300a

0800ce7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b085      	sub	sp, #20
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ce84:	2300      	movs	r3, #0
 800ce86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	3301      	adds	r3, #1
 800ce8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	4a13      	ldr	r2, [pc, #76]	; (800cee0 <USB_CoreReset+0x64>)
 800ce92:	4293      	cmp	r3, r2
 800ce94:	d901      	bls.n	800ce9a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ce96:	2303      	movs	r3, #3
 800ce98:	e01b      	b.n	800ced2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	691b      	ldr	r3, [r3, #16]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	daf2      	bge.n	800ce88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cea2:	2300      	movs	r3, #0
 800cea4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	691b      	ldr	r3, [r3, #16]
 800ceaa:	f043 0201 	orr.w	r2, r3, #1
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	3301      	adds	r3, #1
 800ceb6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	4a09      	ldr	r2, [pc, #36]	; (800cee0 <USB_CoreReset+0x64>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d901      	bls.n	800cec4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cec0:	2303      	movs	r3, #3
 800cec2:	e006      	b.n	800ced2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	691b      	ldr	r3, [r3, #16]
 800cec8:	f003 0301 	and.w	r3, r3, #1
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d0f0      	beq.n	800ceb2 <USB_CoreReset+0x36>

  return HAL_OK;
 800ced0:	2300      	movs	r3, #0
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	3714      	adds	r7, #20
 800ced6:	46bd      	mov	sp, r7
 800ced8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cedc:	4770      	bx	lr
 800cede:	bf00      	nop
 800cee0:	00030d40 	.word	0x00030d40

0800cee4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	460b      	mov	r3, r1
 800ceee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cef0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cef4:	f002 faea 	bl	800f4cc <USBD_static_malloc>
 800cef8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d105      	bne.n	800cf0c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2200      	movs	r2, #0
 800cf04:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800cf08:	2302      	movs	r3, #2
 800cf0a:	e066      	b.n	800cfda <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	68fa      	ldr	r2, [r7, #12]
 800cf10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	7c1b      	ldrb	r3, [r3, #16]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d119      	bne.n	800cf50 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cf1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf20:	2202      	movs	r2, #2
 800cf22:	2181      	movs	r1, #129	; 0x81
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f002 f8bd 	bl	800f0a4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2201      	movs	r2, #1
 800cf2e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cf30:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf34:	2202      	movs	r2, #2
 800cf36:	2101      	movs	r1, #1
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f002 f8b3 	bl	800f0a4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2201      	movs	r2, #1
 800cf42:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2210      	movs	r2, #16
 800cf4a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800cf4e:	e016      	b.n	800cf7e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cf50:	2340      	movs	r3, #64	; 0x40
 800cf52:	2202      	movs	r2, #2
 800cf54:	2181      	movs	r1, #129	; 0x81
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f002 f8a4 	bl	800f0a4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2201      	movs	r2, #1
 800cf60:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cf62:	2340      	movs	r3, #64	; 0x40
 800cf64:	2202      	movs	r2, #2
 800cf66:	2101      	movs	r1, #1
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f002 f89b 	bl	800f0a4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2201      	movs	r2, #1
 800cf72:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2210      	movs	r2, #16
 800cf7a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cf7e:	2308      	movs	r3, #8
 800cf80:	2203      	movs	r2, #3
 800cf82:	2182      	movs	r1, #130	; 0x82
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f002 f88d 	bl	800f0a4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2201      	movs	r2, #1
 800cf8e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	7c1b      	ldrb	r3, [r3, #16]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d109      	bne.n	800cfc8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cfba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cfbe:	2101      	movs	r1, #1
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f002 f9e9 	bl	800f398 <USBD_LL_PrepareReceive>
 800cfc6:	e007      	b.n	800cfd8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cfce:	2340      	movs	r3, #64	; 0x40
 800cfd0:	2101      	movs	r1, #1
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f002 f9e0 	bl	800f398 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cfd8:	2300      	movs	r3, #0
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3710      	adds	r7, #16
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}

0800cfe2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cfe2:	b580      	push	{r7, lr}
 800cfe4:	b082      	sub	sp, #8
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	6078      	str	r0, [r7, #4]
 800cfea:	460b      	mov	r3, r1
 800cfec:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800cfee:	2181      	movs	r1, #129	; 0x81
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f002 f895 	bl	800f120 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2200      	movs	r2, #0
 800cffa:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800cffc:	2101      	movs	r1, #1
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f002 f88e 	bl	800f120 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2200      	movs	r2, #0
 800d008:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d00c:	2182      	movs	r1, #130	; 0x82
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f002 f886 	bl	800f120 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2200      	movs	r2, #0
 800d018:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2200      	movs	r2, #0
 800d020:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d00e      	beq.n	800d04c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d034:	685b      	ldr	r3, [r3, #4]
 800d036:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d03e:	4618      	mov	r0, r3
 800d040:	f002 fa52 	bl	800f4e8 <USBD_static_free>
    pdev->pClassData = NULL;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2200      	movs	r2, #0
 800d048:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d04c:	2300      	movs	r3, #0
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3708      	adds	r7, #8
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}
	...

0800d058 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b086      	sub	sp, #24
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d068:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d06a:	2300      	movs	r3, #0
 800d06c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d06e:	2300      	movs	r3, #0
 800d070:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d072:	2300      	movs	r3, #0
 800d074:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d101      	bne.n	800d080 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800d07c:	2303      	movs	r3, #3
 800d07e:	e0af      	b.n	800d1e0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	781b      	ldrb	r3, [r3, #0]
 800d084:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d03f      	beq.n	800d10c <USBD_CDC_Setup+0xb4>
 800d08c:	2b20      	cmp	r3, #32
 800d08e:	f040 809f 	bne.w	800d1d0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	88db      	ldrh	r3, [r3, #6]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d02e      	beq.n	800d0f8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	781b      	ldrb	r3, [r3, #0]
 800d09e:	b25b      	sxtb	r3, r3
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	da16      	bge.n	800d0d2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d0aa:	689b      	ldr	r3, [r3, #8]
 800d0ac:	683a      	ldr	r2, [r7, #0]
 800d0ae:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800d0b0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d0b2:	683a      	ldr	r2, [r7, #0]
 800d0b4:	88d2      	ldrh	r2, [r2, #6]
 800d0b6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	88db      	ldrh	r3, [r3, #6]
 800d0bc:	2b07      	cmp	r3, #7
 800d0be:	bf28      	it	cs
 800d0c0:	2307      	movcs	r3, #7
 800d0c2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	89fa      	ldrh	r2, [r7, #14]
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f001 fb43 	bl	800e756 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800d0d0:	e085      	b.n	800d1de <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	785a      	ldrb	r2, [r3, #1]
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	88db      	ldrh	r3, [r3, #6]
 800d0e0:	b2da      	uxtb	r2, r3
 800d0e2:	693b      	ldr	r3, [r7, #16]
 800d0e4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d0e8:	6939      	ldr	r1, [r7, #16]
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	88db      	ldrh	r3, [r3, #6]
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f001 fb5c 	bl	800e7ae <USBD_CtlPrepareRx>
      break;
 800d0f6:	e072      	b.n	800d1de <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d0fe:	689b      	ldr	r3, [r3, #8]
 800d100:	683a      	ldr	r2, [r7, #0]
 800d102:	7850      	ldrb	r0, [r2, #1]
 800d104:	2200      	movs	r2, #0
 800d106:	6839      	ldr	r1, [r7, #0]
 800d108:	4798      	blx	r3
      break;
 800d10a:	e068      	b.n	800d1de <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	785b      	ldrb	r3, [r3, #1]
 800d110:	2b0b      	cmp	r3, #11
 800d112:	d852      	bhi.n	800d1ba <USBD_CDC_Setup+0x162>
 800d114:	a201      	add	r2, pc, #4	; (adr r2, 800d11c <USBD_CDC_Setup+0xc4>)
 800d116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d11a:	bf00      	nop
 800d11c:	0800d14d 	.word	0x0800d14d
 800d120:	0800d1c9 	.word	0x0800d1c9
 800d124:	0800d1bb 	.word	0x0800d1bb
 800d128:	0800d1bb 	.word	0x0800d1bb
 800d12c:	0800d1bb 	.word	0x0800d1bb
 800d130:	0800d1bb 	.word	0x0800d1bb
 800d134:	0800d1bb 	.word	0x0800d1bb
 800d138:	0800d1bb 	.word	0x0800d1bb
 800d13c:	0800d1bb 	.word	0x0800d1bb
 800d140:	0800d1bb 	.word	0x0800d1bb
 800d144:	0800d177 	.word	0x0800d177
 800d148:	0800d1a1 	.word	0x0800d1a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d152:	b2db      	uxtb	r3, r3
 800d154:	2b03      	cmp	r3, #3
 800d156:	d107      	bne.n	800d168 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d158:	f107 030a 	add.w	r3, r7, #10
 800d15c:	2202      	movs	r2, #2
 800d15e:	4619      	mov	r1, r3
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f001 faf8 	bl	800e756 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d166:	e032      	b.n	800d1ce <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d168:	6839      	ldr	r1, [r7, #0]
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f001 fa82 	bl	800e674 <USBD_CtlError>
            ret = USBD_FAIL;
 800d170:	2303      	movs	r3, #3
 800d172:	75fb      	strb	r3, [r7, #23]
          break;
 800d174:	e02b      	b.n	800d1ce <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d17c:	b2db      	uxtb	r3, r3
 800d17e:	2b03      	cmp	r3, #3
 800d180:	d107      	bne.n	800d192 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d182:	f107 030d 	add.w	r3, r7, #13
 800d186:	2201      	movs	r2, #1
 800d188:	4619      	mov	r1, r3
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f001 fae3 	bl	800e756 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d190:	e01d      	b.n	800d1ce <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d192:	6839      	ldr	r1, [r7, #0]
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f001 fa6d 	bl	800e674 <USBD_CtlError>
            ret = USBD_FAIL;
 800d19a:	2303      	movs	r3, #3
 800d19c:	75fb      	strb	r3, [r7, #23]
          break;
 800d19e:	e016      	b.n	800d1ce <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1a6:	b2db      	uxtb	r3, r3
 800d1a8:	2b03      	cmp	r3, #3
 800d1aa:	d00f      	beq.n	800d1cc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800d1ac:	6839      	ldr	r1, [r7, #0]
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f001 fa60 	bl	800e674 <USBD_CtlError>
            ret = USBD_FAIL;
 800d1b4:	2303      	movs	r3, #3
 800d1b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d1b8:	e008      	b.n	800d1cc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d1ba:	6839      	ldr	r1, [r7, #0]
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f001 fa59 	bl	800e674 <USBD_CtlError>
          ret = USBD_FAIL;
 800d1c2:	2303      	movs	r3, #3
 800d1c4:	75fb      	strb	r3, [r7, #23]
          break;
 800d1c6:	e002      	b.n	800d1ce <USBD_CDC_Setup+0x176>
          break;
 800d1c8:	bf00      	nop
 800d1ca:	e008      	b.n	800d1de <USBD_CDC_Setup+0x186>
          break;
 800d1cc:	bf00      	nop
      }
      break;
 800d1ce:	e006      	b.n	800d1de <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800d1d0:	6839      	ldr	r1, [r7, #0]
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f001 fa4e 	bl	800e674 <USBD_CtlError>
      ret = USBD_FAIL;
 800d1d8:	2303      	movs	r3, #3
 800d1da:	75fb      	strb	r3, [r7, #23]
      break;
 800d1dc:	bf00      	nop
  }

  return (uint8_t)ret;
 800d1de:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3718      	adds	r7, #24
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b084      	sub	sp, #16
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	460b      	mov	r3, r1
 800d1f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d1fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d202:	2b00      	cmp	r3, #0
 800d204:	d101      	bne.n	800d20a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d206:	2303      	movs	r3, #3
 800d208:	e04f      	b.n	800d2aa <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d210:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d212:	78fa      	ldrb	r2, [r7, #3]
 800d214:	6879      	ldr	r1, [r7, #4]
 800d216:	4613      	mov	r3, r2
 800d218:	009b      	lsls	r3, r3, #2
 800d21a:	4413      	add	r3, r2
 800d21c:	009b      	lsls	r3, r3, #2
 800d21e:	440b      	add	r3, r1
 800d220:	3318      	adds	r3, #24
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d029      	beq.n	800d27c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d228:	78fa      	ldrb	r2, [r7, #3]
 800d22a:	6879      	ldr	r1, [r7, #4]
 800d22c:	4613      	mov	r3, r2
 800d22e:	009b      	lsls	r3, r3, #2
 800d230:	4413      	add	r3, r2
 800d232:	009b      	lsls	r3, r3, #2
 800d234:	440b      	add	r3, r1
 800d236:	3318      	adds	r3, #24
 800d238:	681a      	ldr	r2, [r3, #0]
 800d23a:	78f9      	ldrb	r1, [r7, #3]
 800d23c:	68f8      	ldr	r0, [r7, #12]
 800d23e:	460b      	mov	r3, r1
 800d240:	00db      	lsls	r3, r3, #3
 800d242:	440b      	add	r3, r1
 800d244:	009b      	lsls	r3, r3, #2
 800d246:	4403      	add	r3, r0
 800d248:	3348      	adds	r3, #72	; 0x48
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	fbb2 f1f3 	udiv	r1, r2, r3
 800d250:	fb01 f303 	mul.w	r3, r1, r3
 800d254:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d256:	2b00      	cmp	r3, #0
 800d258:	d110      	bne.n	800d27c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d25a:	78fa      	ldrb	r2, [r7, #3]
 800d25c:	6879      	ldr	r1, [r7, #4]
 800d25e:	4613      	mov	r3, r2
 800d260:	009b      	lsls	r3, r3, #2
 800d262:	4413      	add	r3, r2
 800d264:	009b      	lsls	r3, r3, #2
 800d266:	440b      	add	r3, r1
 800d268:	3318      	adds	r3, #24
 800d26a:	2200      	movs	r2, #0
 800d26c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d26e:	78f9      	ldrb	r1, [r7, #3]
 800d270:	2300      	movs	r3, #0
 800d272:	2200      	movs	r2, #0
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f002 f857 	bl	800f328 <USBD_LL_Transmit>
 800d27a:	e015      	b.n	800d2a8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	2200      	movs	r2, #0
 800d280:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d28a:	691b      	ldr	r3, [r3, #16]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d00b      	beq.n	800d2a8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d296:	691b      	ldr	r3, [r3, #16]
 800d298:	68ba      	ldr	r2, [r7, #8]
 800d29a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d29e:	68ba      	ldr	r2, [r7, #8]
 800d2a0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d2a4:	78fa      	ldrb	r2, [r7, #3]
 800d2a6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d2a8:	2300      	movs	r3, #0
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3710      	adds	r7, #16
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}

0800d2b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d2b2:	b580      	push	{r7, lr}
 800d2b4:	b084      	sub	sp, #16
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	6078      	str	r0, [r7, #4]
 800d2ba:	460b      	mov	r3, r1
 800d2bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d2c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d101      	bne.n	800d2d4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d2d0:	2303      	movs	r3, #3
 800d2d2:	e015      	b.n	800d300 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d2d4:	78fb      	ldrb	r3, [r7, #3]
 800d2d6:	4619      	mov	r1, r3
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f002 f895 	bl	800f408 <USBD_LL_GetRxDataSize>
 800d2de:	4602      	mov	r2, r0
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d2ec:	68db      	ldr	r3, [r3, #12]
 800d2ee:	68fa      	ldr	r2, [r7, #12]
 800d2f0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d2f4:	68fa      	ldr	r2, [r7, #12]
 800d2f6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d2fa:	4611      	mov	r1, r2
 800d2fc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d2fe:	2300      	movs	r3, #0
}
 800d300:	4618      	mov	r0, r3
 800d302:	3710      	adds	r7, #16
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b084      	sub	sp, #16
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d316:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d101      	bne.n	800d322 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800d31e:	2303      	movs	r3, #3
 800d320:	e01b      	b.n	800d35a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d015      	beq.n	800d358 <USBD_CDC_EP0_RxReady+0x50>
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d332:	2bff      	cmp	r3, #255	; 0xff
 800d334:	d010      	beq.n	800d358 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d33c:	689b      	ldr	r3, [r3, #8]
 800d33e:	68fa      	ldr	r2, [r7, #12]
 800d340:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800d344:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d346:	68fa      	ldr	r2, [r7, #12]
 800d348:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d34c:	b292      	uxth	r2, r2
 800d34e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	22ff      	movs	r2, #255	; 0xff
 800d354:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d358:	2300      	movs	r3, #0
}
 800d35a:	4618      	mov	r0, r3
 800d35c:	3710      	adds	r7, #16
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}
	...

0800d364 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d364:	b480      	push	{r7}
 800d366:	b083      	sub	sp, #12
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2243      	movs	r2, #67	; 0x43
 800d370:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800d372:	4b03      	ldr	r3, [pc, #12]	; (800d380 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d374:	4618      	mov	r0, r3
 800d376:	370c      	adds	r7, #12
 800d378:	46bd      	mov	sp, r7
 800d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37e:	4770      	bx	lr
 800d380:	20000094 	.word	0x20000094

0800d384 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d384:	b480      	push	{r7}
 800d386:	b083      	sub	sp, #12
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2243      	movs	r2, #67	; 0x43
 800d390:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800d392:	4b03      	ldr	r3, [pc, #12]	; (800d3a0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d394:	4618      	mov	r0, r3
 800d396:	370c      	adds	r7, #12
 800d398:	46bd      	mov	sp, r7
 800d39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39e:	4770      	bx	lr
 800d3a0:	20000050 	.word	0x20000050

0800d3a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2243      	movs	r2, #67	; 0x43
 800d3b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800d3b2:	4b03      	ldr	r3, [pc, #12]	; (800d3c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	370c      	adds	r7, #12
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr
 800d3c0:	200000d8 	.word	0x200000d8

0800d3c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b083      	sub	sp, #12
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	220a      	movs	r2, #10
 800d3d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d3d2:	4b03      	ldr	r3, [pc, #12]	; (800d3e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	370c      	adds	r7, #12
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr
 800d3e0:	2000000c 	.word	0x2000000c

0800d3e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b083      	sub	sp, #12
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
 800d3ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d101      	bne.n	800d3f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d3f4:	2303      	movs	r3, #3
 800d3f6:	e004      	b.n	800d402 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	683a      	ldr	r2, [r7, #0]
 800d3fc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d400:	2300      	movs	r3, #0
}
 800d402:	4618      	mov	r0, r3
 800d404:	370c      	adds	r7, #12
 800d406:	46bd      	mov	sp, r7
 800d408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40c:	4770      	bx	lr

0800d40e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d40e:	b480      	push	{r7}
 800d410:	b087      	sub	sp, #28
 800d412:	af00      	add	r7, sp, #0
 800d414:	60f8      	str	r0, [r7, #12]
 800d416:	60b9      	str	r1, [r7, #8]
 800d418:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d420:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d101      	bne.n	800d42c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d428:	2303      	movs	r3, #3
 800d42a:	e008      	b.n	800d43e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	68ba      	ldr	r2, [r7, #8]
 800d430:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	687a      	ldr	r2, [r7, #4]
 800d438:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d43c:	2300      	movs	r3, #0
}
 800d43e:	4618      	mov	r0, r3
 800d440:	371c      	adds	r7, #28
 800d442:	46bd      	mov	sp, r7
 800d444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d448:	4770      	bx	lr

0800d44a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d44a:	b480      	push	{r7}
 800d44c:	b085      	sub	sp, #20
 800d44e:	af00      	add	r7, sp, #0
 800d450:	6078      	str	r0, [r7, #4]
 800d452:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d45a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d101      	bne.n	800d466 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800d462:	2303      	movs	r3, #3
 800d464:	e004      	b.n	800d470 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	683a      	ldr	r2, [r7, #0]
 800d46a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d46e:	2300      	movs	r3, #0
}
 800d470:	4618      	mov	r0, r3
 800d472:	3714      	adds	r7, #20
 800d474:	46bd      	mov	sp, r7
 800d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47a:	4770      	bx	lr

0800d47c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b084      	sub	sp, #16
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d48a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d48c:	2301      	movs	r3, #1
 800d48e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d496:	2b00      	cmp	r3, #0
 800d498:	d101      	bne.n	800d49e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d49a:	2303      	movs	r3, #3
 800d49c:	e01a      	b.n	800d4d4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d114      	bne.n	800d4d2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	2201      	movs	r2, #1
 800d4ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d4c6:	2181      	movs	r1, #129	; 0x81
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f001 ff2d 	bl	800f328 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d4d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3710      	adds	r7, #16
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}

0800d4dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b084      	sub	sp, #16
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d4ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d101      	bne.n	800d4fa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d4f6:	2303      	movs	r3, #3
 800d4f8:	e016      	b.n	800d528 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	7c1b      	ldrb	r3, [r3, #16]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d109      	bne.n	800d516 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d50c:	2101      	movs	r1, #1
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f001 ff42 	bl	800f398 <USBD_LL_PrepareReceive>
 800d514:	e007      	b.n	800d526 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d51c:	2340      	movs	r3, #64	; 0x40
 800d51e:	2101      	movs	r1, #1
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f001 ff39 	bl	800f398 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d526:	2300      	movs	r3, #0
}
 800d528:	4618      	mov	r0, r3
 800d52a:	3710      	adds	r7, #16
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}

0800d530 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b086      	sub	sp, #24
 800d534:	af00      	add	r7, sp, #0
 800d536:	60f8      	str	r0, [r7, #12]
 800d538:	60b9      	str	r1, [r7, #8]
 800d53a:	4613      	mov	r3, r2
 800d53c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d101      	bne.n	800d548 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d544:	2303      	movs	r3, #3
 800d546:	e01f      	b.n	800d588 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	2200      	movs	r2, #0
 800d54c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	2200      	movs	r2, #0
 800d554:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	2200      	movs	r2, #0
 800d55c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d003      	beq.n	800d56e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	68ba      	ldr	r2, [r7, #8]
 800d56a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	2201      	movs	r2, #1
 800d572:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	79fa      	ldrb	r2, [r7, #7]
 800d57a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d57c:	68f8      	ldr	r0, [r7, #12]
 800d57e:	f001 fd15 	bl	800efac <USBD_LL_Init>
 800d582:	4603      	mov	r3, r0
 800d584:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d586:	7dfb      	ldrb	r3, [r7, #23]
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3718      	adds	r7, #24
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}

0800d590 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b084      	sub	sp, #16
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d59a:	2300      	movs	r3, #0
 800d59c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d101      	bne.n	800d5a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d5a4:	2303      	movs	r3, #3
 800d5a6:	e016      	b.n	800d5d6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	683a      	ldr	r2, [r7, #0]
 800d5ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d00b      	beq.n	800d5d4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5c4:	f107 020e 	add.w	r2, r7, #14
 800d5c8:	4610      	mov	r0, r2
 800d5ca:	4798      	blx	r3
 800d5cc:	4602      	mov	r2, r0
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800d5d4:	2300      	movs	r3, #0
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3710      	adds	r7, #16
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}

0800d5de <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d5de:	b580      	push	{r7, lr}
 800d5e0:	b082      	sub	sp, #8
 800d5e2:	af00      	add	r7, sp, #0
 800d5e4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f001 fd2a 	bl	800f040 <USBD_LL_Start>
 800d5ec:	4603      	mov	r3, r0
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3708      	adds	r7, #8
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}

0800d5f6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d5f6:	b480      	push	{r7}
 800d5f8:	b083      	sub	sp, #12
 800d5fa:	af00      	add	r7, sp, #0
 800d5fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d5fe:	2300      	movs	r3, #0
}
 800d600:	4618      	mov	r0, r3
 800d602:	370c      	adds	r7, #12
 800d604:	46bd      	mov	sp, r7
 800d606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60a:	4770      	bx	lr

0800d60c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b084      	sub	sp, #16
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	460b      	mov	r3, r1
 800d616:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d618:	2303      	movs	r3, #3
 800d61a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d622:	2b00      	cmp	r3, #0
 800d624:	d009      	beq.n	800d63a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	78fa      	ldrb	r2, [r7, #3]
 800d630:	4611      	mov	r1, r2
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	4798      	blx	r3
 800d636:	4603      	mov	r3, r0
 800d638:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d63a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3710      	adds	r7, #16
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}

0800d644 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b082      	sub	sp, #8
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	460b      	mov	r3, r1
 800d64e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d656:	2b00      	cmp	r3, #0
 800d658:	d007      	beq.n	800d66a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d660:	685b      	ldr	r3, [r3, #4]
 800d662:	78fa      	ldrb	r2, [r7, #3]
 800d664:	4611      	mov	r1, r2
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	4798      	blx	r3
  }

  return USBD_OK;
 800d66a:	2300      	movs	r3, #0
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3708      	adds	r7, #8
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}

0800d674 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b084      	sub	sp, #16
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d684:	6839      	ldr	r1, [r7, #0]
 800d686:	4618      	mov	r0, r3
 800d688:	f000 ffba 	bl	800e600 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2201      	movs	r2, #1
 800d690:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d69a:	461a      	mov	r2, r3
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d6a8:	f003 031f 	and.w	r3, r3, #31
 800d6ac:	2b02      	cmp	r3, #2
 800d6ae:	d01a      	beq.n	800d6e6 <USBD_LL_SetupStage+0x72>
 800d6b0:	2b02      	cmp	r3, #2
 800d6b2:	d822      	bhi.n	800d6fa <USBD_LL_SetupStage+0x86>
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d002      	beq.n	800d6be <USBD_LL_SetupStage+0x4a>
 800d6b8:	2b01      	cmp	r3, #1
 800d6ba:	d00a      	beq.n	800d6d2 <USBD_LL_SetupStage+0x5e>
 800d6bc:	e01d      	b.n	800d6fa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d6c4:	4619      	mov	r1, r3
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f000 fa62 	bl	800db90 <USBD_StdDevReq>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	73fb      	strb	r3, [r7, #15]
      break;
 800d6d0:	e020      	b.n	800d714 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d6d8:	4619      	mov	r1, r3
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f000 fac6 	bl	800dc6c <USBD_StdItfReq>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	73fb      	strb	r3, [r7, #15]
      break;
 800d6e4:	e016      	b.n	800d714 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f000 fb05 	bl	800dcfe <USBD_StdEPReq>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	73fb      	strb	r3, [r7, #15]
      break;
 800d6f8:	e00c      	b.n	800d714 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d700:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d704:	b2db      	uxtb	r3, r3
 800d706:	4619      	mov	r1, r3
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f001 fd3f 	bl	800f18c <USBD_LL_StallEP>
 800d70e:	4603      	mov	r3, r0
 800d710:	73fb      	strb	r3, [r7, #15]
      break;
 800d712:	bf00      	nop
  }

  return ret;
 800d714:	7bfb      	ldrb	r3, [r7, #15]
}
 800d716:	4618      	mov	r0, r3
 800d718:	3710      	adds	r7, #16
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}

0800d71e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d71e:	b580      	push	{r7, lr}
 800d720:	b086      	sub	sp, #24
 800d722:	af00      	add	r7, sp, #0
 800d724:	60f8      	str	r0, [r7, #12]
 800d726:	460b      	mov	r3, r1
 800d728:	607a      	str	r2, [r7, #4]
 800d72a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d72c:	7afb      	ldrb	r3, [r7, #11]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d138      	bne.n	800d7a4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d738:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d740:	2b03      	cmp	r3, #3
 800d742:	d14a      	bne.n	800d7da <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	689a      	ldr	r2, [r3, #8]
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	68db      	ldr	r3, [r3, #12]
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d913      	bls.n	800d778 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	689a      	ldr	r2, [r3, #8]
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	68db      	ldr	r3, [r3, #12]
 800d758:	1ad2      	subs	r2, r2, r3
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	68da      	ldr	r2, [r3, #12]
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	689b      	ldr	r3, [r3, #8]
 800d766:	4293      	cmp	r3, r2
 800d768:	bf28      	it	cs
 800d76a:	4613      	movcs	r3, r2
 800d76c:	461a      	mov	r2, r3
 800d76e:	6879      	ldr	r1, [r7, #4]
 800d770:	68f8      	ldr	r0, [r7, #12]
 800d772:	f001 f839 	bl	800e7e8 <USBD_CtlContinueRx>
 800d776:	e030      	b.n	800d7da <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d77e:	b2db      	uxtb	r3, r3
 800d780:	2b03      	cmp	r3, #3
 800d782:	d10b      	bne.n	800d79c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d78a:	691b      	ldr	r3, [r3, #16]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d005      	beq.n	800d79c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d796:	691b      	ldr	r3, [r3, #16]
 800d798:	68f8      	ldr	r0, [r7, #12]
 800d79a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d79c:	68f8      	ldr	r0, [r7, #12]
 800d79e:	f001 f834 	bl	800e80a <USBD_CtlSendStatus>
 800d7a2:	e01a      	b.n	800d7da <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7aa:	b2db      	uxtb	r3, r3
 800d7ac:	2b03      	cmp	r3, #3
 800d7ae:	d114      	bne.n	800d7da <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7b6:	699b      	ldr	r3, [r3, #24]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d00e      	beq.n	800d7da <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7c2:	699b      	ldr	r3, [r3, #24]
 800d7c4:	7afa      	ldrb	r2, [r7, #11]
 800d7c6:	4611      	mov	r1, r2
 800d7c8:	68f8      	ldr	r0, [r7, #12]
 800d7ca:	4798      	blx	r3
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d7d0:	7dfb      	ldrb	r3, [r7, #23]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d001      	beq.n	800d7da <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d7d6:	7dfb      	ldrb	r3, [r7, #23]
 800d7d8:	e000      	b.n	800d7dc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d7da:	2300      	movs	r3, #0
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3718      	adds	r7, #24
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}

0800d7e4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b086      	sub	sp, #24
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	60f8      	str	r0, [r7, #12]
 800d7ec:	460b      	mov	r3, r1
 800d7ee:	607a      	str	r2, [r7, #4]
 800d7f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d7f2:	7afb      	ldrb	r3, [r7, #11]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d16b      	bne.n	800d8d0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	3314      	adds	r3, #20
 800d7fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d804:	2b02      	cmp	r3, #2
 800d806:	d156      	bne.n	800d8b6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	689a      	ldr	r2, [r3, #8]
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	68db      	ldr	r3, [r3, #12]
 800d810:	429a      	cmp	r2, r3
 800d812:	d914      	bls.n	800d83e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	689a      	ldr	r2, [r3, #8]
 800d818:	693b      	ldr	r3, [r7, #16]
 800d81a:	68db      	ldr	r3, [r3, #12]
 800d81c:	1ad2      	subs	r2, r2, r3
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	689b      	ldr	r3, [r3, #8]
 800d826:	461a      	mov	r2, r3
 800d828:	6879      	ldr	r1, [r7, #4]
 800d82a:	68f8      	ldr	r0, [r7, #12]
 800d82c:	f000 ffae 	bl	800e78c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d830:	2300      	movs	r3, #0
 800d832:	2200      	movs	r2, #0
 800d834:	2100      	movs	r1, #0
 800d836:	68f8      	ldr	r0, [r7, #12]
 800d838:	f001 fdae 	bl	800f398 <USBD_LL_PrepareReceive>
 800d83c:	e03b      	b.n	800d8b6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	68da      	ldr	r2, [r3, #12]
 800d842:	693b      	ldr	r3, [r7, #16]
 800d844:	689b      	ldr	r3, [r3, #8]
 800d846:	429a      	cmp	r2, r3
 800d848:	d11c      	bne.n	800d884 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	685a      	ldr	r2, [r3, #4]
 800d84e:	693b      	ldr	r3, [r7, #16]
 800d850:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d852:	429a      	cmp	r2, r3
 800d854:	d316      	bcc.n	800d884 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	685a      	ldr	r2, [r3, #4]
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d860:	429a      	cmp	r2, r3
 800d862:	d20f      	bcs.n	800d884 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d864:	2200      	movs	r2, #0
 800d866:	2100      	movs	r1, #0
 800d868:	68f8      	ldr	r0, [r7, #12]
 800d86a:	f000 ff8f 	bl	800e78c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	2200      	movs	r2, #0
 800d872:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d876:	2300      	movs	r3, #0
 800d878:	2200      	movs	r2, #0
 800d87a:	2100      	movs	r1, #0
 800d87c:	68f8      	ldr	r0, [r7, #12]
 800d87e:	f001 fd8b 	bl	800f398 <USBD_LL_PrepareReceive>
 800d882:	e018      	b.n	800d8b6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d88a:	b2db      	uxtb	r3, r3
 800d88c:	2b03      	cmp	r3, #3
 800d88e:	d10b      	bne.n	800d8a8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d896:	68db      	ldr	r3, [r3, #12]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d005      	beq.n	800d8a8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8a2:	68db      	ldr	r3, [r3, #12]
 800d8a4:	68f8      	ldr	r0, [r7, #12]
 800d8a6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d8a8:	2180      	movs	r1, #128	; 0x80
 800d8aa:	68f8      	ldr	r0, [r7, #12]
 800d8ac:	f001 fc6e 	bl	800f18c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d8b0:	68f8      	ldr	r0, [r7, #12]
 800d8b2:	f000 ffbd 	bl	800e830 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d8bc:	2b01      	cmp	r3, #1
 800d8be:	d122      	bne.n	800d906 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d8c0:	68f8      	ldr	r0, [r7, #12]
 800d8c2:	f7ff fe98 	bl	800d5f6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d8ce:	e01a      	b.n	800d906 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8d6:	b2db      	uxtb	r3, r3
 800d8d8:	2b03      	cmp	r3, #3
 800d8da:	d114      	bne.n	800d906 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8e2:	695b      	ldr	r3, [r3, #20]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d00e      	beq.n	800d906 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8ee:	695b      	ldr	r3, [r3, #20]
 800d8f0:	7afa      	ldrb	r2, [r7, #11]
 800d8f2:	4611      	mov	r1, r2
 800d8f4:	68f8      	ldr	r0, [r7, #12]
 800d8f6:	4798      	blx	r3
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d8fc:	7dfb      	ldrb	r3, [r7, #23]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d001      	beq.n	800d906 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d902:	7dfb      	ldrb	r3, [r7, #23]
 800d904:	e000      	b.n	800d908 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d906:	2300      	movs	r3, #0
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3718      	adds	r7, #24
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}

0800d910 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b082      	sub	sp, #8
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2201      	movs	r2, #1
 800d91c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2200      	movs	r2, #0
 800d924:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2200      	movs	r2, #0
 800d92c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2200      	movs	r2, #0
 800d932:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d101      	bne.n	800d944 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d940:	2303      	movs	r3, #3
 800d942:	e02f      	b.n	800d9a4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d00f      	beq.n	800d96e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d954:	685b      	ldr	r3, [r3, #4]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d009      	beq.n	800d96e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d960:	685b      	ldr	r3, [r3, #4]
 800d962:	687a      	ldr	r2, [r7, #4]
 800d964:	6852      	ldr	r2, [r2, #4]
 800d966:	b2d2      	uxtb	r2, r2
 800d968:	4611      	mov	r1, r2
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d96e:	2340      	movs	r3, #64	; 0x40
 800d970:	2200      	movs	r2, #0
 800d972:	2100      	movs	r1, #0
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f001 fb95 	bl	800f0a4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2201      	movs	r2, #1
 800d97e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2240      	movs	r2, #64	; 0x40
 800d986:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d98a:	2340      	movs	r3, #64	; 0x40
 800d98c:	2200      	movs	r2, #0
 800d98e:	2180      	movs	r1, #128	; 0x80
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f001 fb87 	bl	800f0a4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2201      	movs	r2, #1
 800d99a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2240      	movs	r2, #64	; 0x40
 800d9a0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d9a2:	2300      	movs	r3, #0
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3708      	adds	r7, #8
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	b083      	sub	sp, #12
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	78fa      	ldrb	r2, [r7, #3]
 800d9bc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d9be:	2300      	movs	r3, #0
}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	370c      	adds	r7, #12
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ca:	4770      	bx	lr

0800d9cc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	b083      	sub	sp, #12
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9da:	b2da      	uxtb	r2, r3
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2204      	movs	r2, #4
 800d9e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d9ea:	2300      	movs	r3, #0
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	370c      	adds	r7, #12
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f6:	4770      	bx	lr

0800d9f8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b083      	sub	sp, #12
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da06:	b2db      	uxtb	r3, r3
 800da08:	2b04      	cmp	r3, #4
 800da0a:	d106      	bne.n	800da1a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800da12:	b2da      	uxtb	r2, r3
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800da1a:	2300      	movs	r3, #0
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	370c      	adds	r7, #12
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr

0800da28 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b082      	sub	sp, #8
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da36:	2b00      	cmp	r3, #0
 800da38:	d101      	bne.n	800da3e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800da3a:	2303      	movs	r3, #3
 800da3c:	e012      	b.n	800da64 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da44:	b2db      	uxtb	r3, r3
 800da46:	2b03      	cmp	r3, #3
 800da48:	d10b      	bne.n	800da62 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da50:	69db      	ldr	r3, [r3, #28]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d005      	beq.n	800da62 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da5c:	69db      	ldr	r3, [r3, #28]
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800da62:	2300      	movs	r3, #0
}
 800da64:	4618      	mov	r0, r3
 800da66:	3708      	adds	r7, #8
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}

0800da6c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b082      	sub	sp, #8
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
 800da74:	460b      	mov	r3, r1
 800da76:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d101      	bne.n	800da86 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800da82:	2303      	movs	r3, #3
 800da84:	e014      	b.n	800dab0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da8c:	b2db      	uxtb	r3, r3
 800da8e:	2b03      	cmp	r3, #3
 800da90:	d10d      	bne.n	800daae <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da98:	6a1b      	ldr	r3, [r3, #32]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d007      	beq.n	800daae <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daa4:	6a1b      	ldr	r3, [r3, #32]
 800daa6:	78fa      	ldrb	r2, [r7, #3]
 800daa8:	4611      	mov	r1, r2
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800daae:	2300      	movs	r3, #0
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3708      	adds	r7, #8
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}

0800dab8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b082      	sub	sp, #8
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	460b      	mov	r3, r1
 800dac2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d101      	bne.n	800dad2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800dace:	2303      	movs	r3, #3
 800dad0:	e014      	b.n	800dafc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dad8:	b2db      	uxtb	r3, r3
 800dada:	2b03      	cmp	r3, #3
 800dadc:	d10d      	bne.n	800dafa <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d007      	beq.n	800dafa <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daf2:	78fa      	ldrb	r2, [r7, #3]
 800daf4:	4611      	mov	r1, r2
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dafa:	2300      	movs	r3, #0
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3708      	adds	r7, #8
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800db04:	b480      	push	{r7}
 800db06:	b083      	sub	sp, #12
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800db0c:	2300      	movs	r3, #0
}
 800db0e:	4618      	mov	r0, r3
 800db10:	370c      	adds	r7, #12
 800db12:	46bd      	mov	sp, r7
 800db14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db18:	4770      	bx	lr

0800db1a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800db1a:	b580      	push	{r7, lr}
 800db1c:	b082      	sub	sp, #8
 800db1e:	af00      	add	r7, sp, #0
 800db20:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2201      	movs	r2, #1
 800db26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db30:	2b00      	cmp	r3, #0
 800db32:	d009      	beq.n	800db48 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db3a:	685b      	ldr	r3, [r3, #4]
 800db3c:	687a      	ldr	r2, [r7, #4]
 800db3e:	6852      	ldr	r2, [r2, #4]
 800db40:	b2d2      	uxtb	r2, r2
 800db42:	4611      	mov	r1, r2
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	4798      	blx	r3
  }

  return USBD_OK;
 800db48:	2300      	movs	r3, #0
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	3708      	adds	r7, #8
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}

0800db52 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800db52:	b480      	push	{r7}
 800db54:	b087      	sub	sp, #28
 800db56:	af00      	add	r7, sp, #0
 800db58:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	3301      	adds	r3, #1
 800db68:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	781b      	ldrb	r3, [r3, #0]
 800db6e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800db70:	8a3b      	ldrh	r3, [r7, #16]
 800db72:	021b      	lsls	r3, r3, #8
 800db74:	b21a      	sxth	r2, r3
 800db76:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800db7a:	4313      	orrs	r3, r2
 800db7c:	b21b      	sxth	r3, r3
 800db7e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800db80:	89fb      	ldrh	r3, [r7, #14]
}
 800db82:	4618      	mov	r0, r3
 800db84:	371c      	adds	r7, #28
 800db86:	46bd      	mov	sp, r7
 800db88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8c:	4770      	bx	lr
	...

0800db90 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b084      	sub	sp, #16
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800db9a:	2300      	movs	r3, #0
 800db9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	781b      	ldrb	r3, [r3, #0]
 800dba2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dba6:	2b40      	cmp	r3, #64	; 0x40
 800dba8:	d005      	beq.n	800dbb6 <USBD_StdDevReq+0x26>
 800dbaa:	2b40      	cmp	r3, #64	; 0x40
 800dbac:	d853      	bhi.n	800dc56 <USBD_StdDevReq+0xc6>
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d00b      	beq.n	800dbca <USBD_StdDevReq+0x3a>
 800dbb2:	2b20      	cmp	r3, #32
 800dbb4:	d14f      	bne.n	800dc56 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbbc:	689b      	ldr	r3, [r3, #8]
 800dbbe:	6839      	ldr	r1, [r7, #0]
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	4798      	blx	r3
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	73fb      	strb	r3, [r7, #15]
      break;
 800dbc8:	e04a      	b.n	800dc60 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	785b      	ldrb	r3, [r3, #1]
 800dbce:	2b09      	cmp	r3, #9
 800dbd0:	d83b      	bhi.n	800dc4a <USBD_StdDevReq+0xba>
 800dbd2:	a201      	add	r2, pc, #4	; (adr r2, 800dbd8 <USBD_StdDevReq+0x48>)
 800dbd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbd8:	0800dc2d 	.word	0x0800dc2d
 800dbdc:	0800dc41 	.word	0x0800dc41
 800dbe0:	0800dc4b 	.word	0x0800dc4b
 800dbe4:	0800dc37 	.word	0x0800dc37
 800dbe8:	0800dc4b 	.word	0x0800dc4b
 800dbec:	0800dc0b 	.word	0x0800dc0b
 800dbf0:	0800dc01 	.word	0x0800dc01
 800dbf4:	0800dc4b 	.word	0x0800dc4b
 800dbf8:	0800dc23 	.word	0x0800dc23
 800dbfc:	0800dc15 	.word	0x0800dc15
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dc00:	6839      	ldr	r1, [r7, #0]
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f000 f9de 	bl	800dfc4 <USBD_GetDescriptor>
          break;
 800dc08:	e024      	b.n	800dc54 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dc0a:	6839      	ldr	r1, [r7, #0]
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f000 fb6d 	bl	800e2ec <USBD_SetAddress>
          break;
 800dc12:	e01f      	b.n	800dc54 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800dc14:	6839      	ldr	r1, [r7, #0]
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f000 fbac 	bl	800e374 <USBD_SetConfig>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	73fb      	strb	r3, [r7, #15]
          break;
 800dc20:	e018      	b.n	800dc54 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dc22:	6839      	ldr	r1, [r7, #0]
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f000 fc4b 	bl	800e4c0 <USBD_GetConfig>
          break;
 800dc2a:	e013      	b.n	800dc54 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dc2c:	6839      	ldr	r1, [r7, #0]
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f000 fc7c 	bl	800e52c <USBD_GetStatus>
          break;
 800dc34:	e00e      	b.n	800dc54 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dc36:	6839      	ldr	r1, [r7, #0]
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f000 fcab 	bl	800e594 <USBD_SetFeature>
          break;
 800dc3e:	e009      	b.n	800dc54 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dc40:	6839      	ldr	r1, [r7, #0]
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f000 fcba 	bl	800e5bc <USBD_ClrFeature>
          break;
 800dc48:	e004      	b.n	800dc54 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800dc4a:	6839      	ldr	r1, [r7, #0]
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f000 fd11 	bl	800e674 <USBD_CtlError>
          break;
 800dc52:	bf00      	nop
      }
      break;
 800dc54:	e004      	b.n	800dc60 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800dc56:	6839      	ldr	r1, [r7, #0]
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f000 fd0b 	bl	800e674 <USBD_CtlError>
      break;
 800dc5e:	bf00      	nop
  }

  return ret;
 800dc60:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc62:	4618      	mov	r0, r3
 800dc64:	3710      	adds	r7, #16
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}
 800dc6a:	bf00      	nop

0800dc6c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b084      	sub	sp, #16
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc76:	2300      	movs	r3, #0
 800dc78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	781b      	ldrb	r3, [r3, #0]
 800dc7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc82:	2b40      	cmp	r3, #64	; 0x40
 800dc84:	d005      	beq.n	800dc92 <USBD_StdItfReq+0x26>
 800dc86:	2b40      	cmp	r3, #64	; 0x40
 800dc88:	d82f      	bhi.n	800dcea <USBD_StdItfReq+0x7e>
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d001      	beq.n	800dc92 <USBD_StdItfReq+0x26>
 800dc8e:	2b20      	cmp	r3, #32
 800dc90:	d12b      	bne.n	800dcea <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc98:	b2db      	uxtb	r3, r3
 800dc9a:	3b01      	subs	r3, #1
 800dc9c:	2b02      	cmp	r3, #2
 800dc9e:	d81d      	bhi.n	800dcdc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	889b      	ldrh	r3, [r3, #4]
 800dca4:	b2db      	uxtb	r3, r3
 800dca6:	2b01      	cmp	r3, #1
 800dca8:	d813      	bhi.n	800dcd2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcb0:	689b      	ldr	r3, [r3, #8]
 800dcb2:	6839      	ldr	r1, [r7, #0]
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	4798      	blx	r3
 800dcb8:	4603      	mov	r3, r0
 800dcba:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	88db      	ldrh	r3, [r3, #6]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d110      	bne.n	800dce6 <USBD_StdItfReq+0x7a>
 800dcc4:	7bfb      	ldrb	r3, [r7, #15]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d10d      	bne.n	800dce6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f000 fd9d 	bl	800e80a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dcd0:	e009      	b.n	800dce6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800dcd2:	6839      	ldr	r1, [r7, #0]
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f000 fccd 	bl	800e674 <USBD_CtlError>
          break;
 800dcda:	e004      	b.n	800dce6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800dcdc:	6839      	ldr	r1, [r7, #0]
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f000 fcc8 	bl	800e674 <USBD_CtlError>
          break;
 800dce4:	e000      	b.n	800dce8 <USBD_StdItfReq+0x7c>
          break;
 800dce6:	bf00      	nop
      }
      break;
 800dce8:	e004      	b.n	800dcf4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800dcea:	6839      	ldr	r1, [r7, #0]
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f000 fcc1 	bl	800e674 <USBD_CtlError>
      break;
 800dcf2:	bf00      	nop
  }

  return ret;
 800dcf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	3710      	adds	r7, #16
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}

0800dcfe <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcfe:	b580      	push	{r7, lr}
 800dd00:	b084      	sub	sp, #16
 800dd02:	af00      	add	r7, sp, #0
 800dd04:	6078      	str	r0, [r7, #4]
 800dd06:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	889b      	ldrh	r3, [r3, #4]
 800dd10:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dd1a:	2b40      	cmp	r3, #64	; 0x40
 800dd1c:	d007      	beq.n	800dd2e <USBD_StdEPReq+0x30>
 800dd1e:	2b40      	cmp	r3, #64	; 0x40
 800dd20:	f200 8145 	bhi.w	800dfae <USBD_StdEPReq+0x2b0>
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d00c      	beq.n	800dd42 <USBD_StdEPReq+0x44>
 800dd28:	2b20      	cmp	r3, #32
 800dd2a:	f040 8140 	bne.w	800dfae <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd34:	689b      	ldr	r3, [r3, #8]
 800dd36:	6839      	ldr	r1, [r7, #0]
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	4798      	blx	r3
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	73fb      	strb	r3, [r7, #15]
      break;
 800dd40:	e13a      	b.n	800dfb8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	785b      	ldrb	r3, [r3, #1]
 800dd46:	2b03      	cmp	r3, #3
 800dd48:	d007      	beq.n	800dd5a <USBD_StdEPReq+0x5c>
 800dd4a:	2b03      	cmp	r3, #3
 800dd4c:	f300 8129 	bgt.w	800dfa2 <USBD_StdEPReq+0x2a4>
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d07f      	beq.n	800de54 <USBD_StdEPReq+0x156>
 800dd54:	2b01      	cmp	r3, #1
 800dd56:	d03c      	beq.n	800ddd2 <USBD_StdEPReq+0xd4>
 800dd58:	e123      	b.n	800dfa2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd60:	b2db      	uxtb	r3, r3
 800dd62:	2b02      	cmp	r3, #2
 800dd64:	d002      	beq.n	800dd6c <USBD_StdEPReq+0x6e>
 800dd66:	2b03      	cmp	r3, #3
 800dd68:	d016      	beq.n	800dd98 <USBD_StdEPReq+0x9a>
 800dd6a:	e02c      	b.n	800ddc6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd6c:	7bbb      	ldrb	r3, [r7, #14]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d00d      	beq.n	800dd8e <USBD_StdEPReq+0x90>
 800dd72:	7bbb      	ldrb	r3, [r7, #14]
 800dd74:	2b80      	cmp	r3, #128	; 0x80
 800dd76:	d00a      	beq.n	800dd8e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dd78:	7bbb      	ldrb	r3, [r7, #14]
 800dd7a:	4619      	mov	r1, r3
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f001 fa05 	bl	800f18c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd82:	2180      	movs	r1, #128	; 0x80
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f001 fa01 	bl	800f18c <USBD_LL_StallEP>
 800dd8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dd8c:	e020      	b.n	800ddd0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800dd8e:	6839      	ldr	r1, [r7, #0]
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f000 fc6f 	bl	800e674 <USBD_CtlError>
              break;
 800dd96:	e01b      	b.n	800ddd0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	885b      	ldrh	r3, [r3, #2]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d10e      	bne.n	800ddbe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dda0:	7bbb      	ldrb	r3, [r7, #14]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d00b      	beq.n	800ddbe <USBD_StdEPReq+0xc0>
 800dda6:	7bbb      	ldrb	r3, [r7, #14]
 800dda8:	2b80      	cmp	r3, #128	; 0x80
 800ddaa:	d008      	beq.n	800ddbe <USBD_StdEPReq+0xc0>
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	88db      	ldrh	r3, [r3, #6]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d104      	bne.n	800ddbe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ddb4:	7bbb      	ldrb	r3, [r7, #14]
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f001 f9e7 	bl	800f18c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ddbe:	6878      	ldr	r0, [r7, #4]
 800ddc0:	f000 fd23 	bl	800e80a <USBD_CtlSendStatus>

              break;
 800ddc4:	e004      	b.n	800ddd0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ddc6:	6839      	ldr	r1, [r7, #0]
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f000 fc53 	bl	800e674 <USBD_CtlError>
              break;
 800ddce:	bf00      	nop
          }
          break;
 800ddd0:	e0ec      	b.n	800dfac <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddd8:	b2db      	uxtb	r3, r3
 800ddda:	2b02      	cmp	r3, #2
 800dddc:	d002      	beq.n	800dde4 <USBD_StdEPReq+0xe6>
 800ddde:	2b03      	cmp	r3, #3
 800dde0:	d016      	beq.n	800de10 <USBD_StdEPReq+0x112>
 800dde2:	e030      	b.n	800de46 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dde4:	7bbb      	ldrb	r3, [r7, #14]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d00d      	beq.n	800de06 <USBD_StdEPReq+0x108>
 800ddea:	7bbb      	ldrb	r3, [r7, #14]
 800ddec:	2b80      	cmp	r3, #128	; 0x80
 800ddee:	d00a      	beq.n	800de06 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ddf0:	7bbb      	ldrb	r3, [r7, #14]
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f001 f9c9 	bl	800f18c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ddfa:	2180      	movs	r1, #128	; 0x80
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f001 f9c5 	bl	800f18c <USBD_LL_StallEP>
 800de02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800de04:	e025      	b.n	800de52 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800de06:	6839      	ldr	r1, [r7, #0]
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f000 fc33 	bl	800e674 <USBD_CtlError>
              break;
 800de0e:	e020      	b.n	800de52 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	885b      	ldrh	r3, [r3, #2]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d11b      	bne.n	800de50 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800de18:	7bbb      	ldrb	r3, [r7, #14]
 800de1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d004      	beq.n	800de2c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800de22:	7bbb      	ldrb	r3, [r7, #14]
 800de24:	4619      	mov	r1, r3
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f001 f9e6 	bl	800f1f8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	f000 fcec 	bl	800e80a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de38:	689b      	ldr	r3, [r3, #8]
 800de3a:	6839      	ldr	r1, [r7, #0]
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	4798      	blx	r3
 800de40:	4603      	mov	r3, r0
 800de42:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800de44:	e004      	b.n	800de50 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800de46:	6839      	ldr	r1, [r7, #0]
 800de48:	6878      	ldr	r0, [r7, #4]
 800de4a:	f000 fc13 	bl	800e674 <USBD_CtlError>
              break;
 800de4e:	e000      	b.n	800de52 <USBD_StdEPReq+0x154>
              break;
 800de50:	bf00      	nop
          }
          break;
 800de52:	e0ab      	b.n	800dfac <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de5a:	b2db      	uxtb	r3, r3
 800de5c:	2b02      	cmp	r3, #2
 800de5e:	d002      	beq.n	800de66 <USBD_StdEPReq+0x168>
 800de60:	2b03      	cmp	r3, #3
 800de62:	d032      	beq.n	800deca <USBD_StdEPReq+0x1cc>
 800de64:	e097      	b.n	800df96 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de66:	7bbb      	ldrb	r3, [r7, #14]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d007      	beq.n	800de7c <USBD_StdEPReq+0x17e>
 800de6c:	7bbb      	ldrb	r3, [r7, #14]
 800de6e:	2b80      	cmp	r3, #128	; 0x80
 800de70:	d004      	beq.n	800de7c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800de72:	6839      	ldr	r1, [r7, #0]
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f000 fbfd 	bl	800e674 <USBD_CtlError>
                break;
 800de7a:	e091      	b.n	800dfa0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de80:	2b00      	cmp	r3, #0
 800de82:	da0b      	bge.n	800de9c <USBD_StdEPReq+0x19e>
 800de84:	7bbb      	ldrb	r3, [r7, #14]
 800de86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800de8a:	4613      	mov	r3, r2
 800de8c:	009b      	lsls	r3, r3, #2
 800de8e:	4413      	add	r3, r2
 800de90:	009b      	lsls	r3, r3, #2
 800de92:	3310      	adds	r3, #16
 800de94:	687a      	ldr	r2, [r7, #4]
 800de96:	4413      	add	r3, r2
 800de98:	3304      	adds	r3, #4
 800de9a:	e00b      	b.n	800deb4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800de9c:	7bbb      	ldrb	r3, [r7, #14]
 800de9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dea2:	4613      	mov	r3, r2
 800dea4:	009b      	lsls	r3, r3, #2
 800dea6:	4413      	add	r3, r2
 800dea8:	009b      	lsls	r3, r3, #2
 800deaa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800deae:	687a      	ldr	r2, [r7, #4]
 800deb0:	4413      	add	r3, r2
 800deb2:	3304      	adds	r3, #4
 800deb4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	2200      	movs	r2, #0
 800deba:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	2202      	movs	r2, #2
 800dec0:	4619      	mov	r1, r3
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f000 fc47 	bl	800e756 <USBD_CtlSendData>
              break;
 800dec8:	e06a      	b.n	800dfa0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800deca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	da11      	bge.n	800def6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ded2:	7bbb      	ldrb	r3, [r7, #14]
 800ded4:	f003 020f 	and.w	r2, r3, #15
 800ded8:	6879      	ldr	r1, [r7, #4]
 800deda:	4613      	mov	r3, r2
 800dedc:	009b      	lsls	r3, r3, #2
 800dede:	4413      	add	r3, r2
 800dee0:	009b      	lsls	r3, r3, #2
 800dee2:	440b      	add	r3, r1
 800dee4:	3324      	adds	r3, #36	; 0x24
 800dee6:	881b      	ldrh	r3, [r3, #0]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d117      	bne.n	800df1c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800deec:	6839      	ldr	r1, [r7, #0]
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f000 fbc0 	bl	800e674 <USBD_CtlError>
                  break;
 800def4:	e054      	b.n	800dfa0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800def6:	7bbb      	ldrb	r3, [r7, #14]
 800def8:	f003 020f 	and.w	r2, r3, #15
 800defc:	6879      	ldr	r1, [r7, #4]
 800defe:	4613      	mov	r3, r2
 800df00:	009b      	lsls	r3, r3, #2
 800df02:	4413      	add	r3, r2
 800df04:	009b      	lsls	r3, r3, #2
 800df06:	440b      	add	r3, r1
 800df08:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800df0c:	881b      	ldrh	r3, [r3, #0]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d104      	bne.n	800df1c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800df12:	6839      	ldr	r1, [r7, #0]
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f000 fbad 	bl	800e674 <USBD_CtlError>
                  break;
 800df1a:	e041      	b.n	800dfa0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df20:	2b00      	cmp	r3, #0
 800df22:	da0b      	bge.n	800df3c <USBD_StdEPReq+0x23e>
 800df24:	7bbb      	ldrb	r3, [r7, #14]
 800df26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800df2a:	4613      	mov	r3, r2
 800df2c:	009b      	lsls	r3, r3, #2
 800df2e:	4413      	add	r3, r2
 800df30:	009b      	lsls	r3, r3, #2
 800df32:	3310      	adds	r3, #16
 800df34:	687a      	ldr	r2, [r7, #4]
 800df36:	4413      	add	r3, r2
 800df38:	3304      	adds	r3, #4
 800df3a:	e00b      	b.n	800df54 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800df3c:	7bbb      	ldrb	r3, [r7, #14]
 800df3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df42:	4613      	mov	r3, r2
 800df44:	009b      	lsls	r3, r3, #2
 800df46:	4413      	add	r3, r2
 800df48:	009b      	lsls	r3, r3, #2
 800df4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800df4e:	687a      	ldr	r2, [r7, #4]
 800df50:	4413      	add	r3, r2
 800df52:	3304      	adds	r3, #4
 800df54:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800df56:	7bbb      	ldrb	r3, [r7, #14]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d002      	beq.n	800df62 <USBD_StdEPReq+0x264>
 800df5c:	7bbb      	ldrb	r3, [r7, #14]
 800df5e:	2b80      	cmp	r3, #128	; 0x80
 800df60:	d103      	bne.n	800df6a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	2200      	movs	r2, #0
 800df66:	601a      	str	r2, [r3, #0]
 800df68:	e00e      	b.n	800df88 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800df6a:	7bbb      	ldrb	r3, [r7, #14]
 800df6c:	4619      	mov	r1, r3
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f001 f978 	bl	800f264 <USBD_LL_IsStallEP>
 800df74:	4603      	mov	r3, r0
 800df76:	2b00      	cmp	r3, #0
 800df78:	d003      	beq.n	800df82 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	2201      	movs	r2, #1
 800df7e:	601a      	str	r2, [r3, #0]
 800df80:	e002      	b.n	800df88 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	2200      	movs	r2, #0
 800df86:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	2202      	movs	r2, #2
 800df8c:	4619      	mov	r1, r3
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f000 fbe1 	bl	800e756 <USBD_CtlSendData>
              break;
 800df94:	e004      	b.n	800dfa0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800df96:	6839      	ldr	r1, [r7, #0]
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f000 fb6b 	bl	800e674 <USBD_CtlError>
              break;
 800df9e:	bf00      	nop
          }
          break;
 800dfa0:	e004      	b.n	800dfac <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800dfa2:	6839      	ldr	r1, [r7, #0]
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f000 fb65 	bl	800e674 <USBD_CtlError>
          break;
 800dfaa:	bf00      	nop
      }
      break;
 800dfac:	e004      	b.n	800dfb8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800dfae:	6839      	ldr	r1, [r7, #0]
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f000 fb5f 	bl	800e674 <USBD_CtlError>
      break;
 800dfb6:	bf00      	nop
  }

  return ret;
 800dfb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3710      	adds	r7, #16
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}
	...

0800dfc4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b084      	sub	sp, #16
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
 800dfcc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	885b      	ldrh	r3, [r3, #2]
 800dfde:	0a1b      	lsrs	r3, r3, #8
 800dfe0:	b29b      	uxth	r3, r3
 800dfe2:	3b01      	subs	r3, #1
 800dfe4:	2b0e      	cmp	r3, #14
 800dfe6:	f200 8152 	bhi.w	800e28e <USBD_GetDescriptor+0x2ca>
 800dfea:	a201      	add	r2, pc, #4	; (adr r2, 800dff0 <USBD_GetDescriptor+0x2c>)
 800dfec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dff0:	0800e061 	.word	0x0800e061
 800dff4:	0800e079 	.word	0x0800e079
 800dff8:	0800e0b9 	.word	0x0800e0b9
 800dffc:	0800e28f 	.word	0x0800e28f
 800e000:	0800e28f 	.word	0x0800e28f
 800e004:	0800e22f 	.word	0x0800e22f
 800e008:	0800e25b 	.word	0x0800e25b
 800e00c:	0800e28f 	.word	0x0800e28f
 800e010:	0800e28f 	.word	0x0800e28f
 800e014:	0800e28f 	.word	0x0800e28f
 800e018:	0800e28f 	.word	0x0800e28f
 800e01c:	0800e28f 	.word	0x0800e28f
 800e020:	0800e28f 	.word	0x0800e28f
 800e024:	0800e28f 	.word	0x0800e28f
 800e028:	0800e02d 	.word	0x0800e02d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e032:	69db      	ldr	r3, [r3, #28]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d00b      	beq.n	800e050 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e03e:	69db      	ldr	r3, [r3, #28]
 800e040:	687a      	ldr	r2, [r7, #4]
 800e042:	7c12      	ldrb	r2, [r2, #16]
 800e044:	f107 0108 	add.w	r1, r7, #8
 800e048:	4610      	mov	r0, r2
 800e04a:	4798      	blx	r3
 800e04c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e04e:	e126      	b.n	800e29e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e050:	6839      	ldr	r1, [r7, #0]
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f000 fb0e 	bl	800e674 <USBD_CtlError>
        err++;
 800e058:	7afb      	ldrb	r3, [r7, #11]
 800e05a:	3301      	adds	r3, #1
 800e05c:	72fb      	strb	r3, [r7, #11]
      break;
 800e05e:	e11e      	b.n	800e29e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	687a      	ldr	r2, [r7, #4]
 800e06a:	7c12      	ldrb	r2, [r2, #16]
 800e06c:	f107 0108 	add.w	r1, r7, #8
 800e070:	4610      	mov	r0, r2
 800e072:	4798      	blx	r3
 800e074:	60f8      	str	r0, [r7, #12]
      break;
 800e076:	e112      	b.n	800e29e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	7c1b      	ldrb	r3, [r3, #16]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d10d      	bne.n	800e09c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e088:	f107 0208 	add.w	r2, r7, #8
 800e08c:	4610      	mov	r0, r2
 800e08e:	4798      	blx	r3
 800e090:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	3301      	adds	r3, #1
 800e096:	2202      	movs	r2, #2
 800e098:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e09a:	e100      	b.n	800e29e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0a4:	f107 0208 	add.w	r2, r7, #8
 800e0a8:	4610      	mov	r0, r2
 800e0aa:	4798      	blx	r3
 800e0ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	3301      	adds	r3, #1
 800e0b2:	2202      	movs	r2, #2
 800e0b4:	701a      	strb	r2, [r3, #0]
      break;
 800e0b6:	e0f2      	b.n	800e29e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	885b      	ldrh	r3, [r3, #2]
 800e0bc:	b2db      	uxtb	r3, r3
 800e0be:	2b05      	cmp	r3, #5
 800e0c0:	f200 80ac 	bhi.w	800e21c <USBD_GetDescriptor+0x258>
 800e0c4:	a201      	add	r2, pc, #4	; (adr r2, 800e0cc <USBD_GetDescriptor+0x108>)
 800e0c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0ca:	bf00      	nop
 800e0cc:	0800e0e5 	.word	0x0800e0e5
 800e0d0:	0800e119 	.word	0x0800e119
 800e0d4:	0800e14d 	.word	0x0800e14d
 800e0d8:	0800e181 	.word	0x0800e181
 800e0dc:	0800e1b5 	.word	0x0800e1b5
 800e0e0:	0800e1e9 	.word	0x0800e1e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0ea:	685b      	ldr	r3, [r3, #4]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d00b      	beq.n	800e108 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0f6:	685b      	ldr	r3, [r3, #4]
 800e0f8:	687a      	ldr	r2, [r7, #4]
 800e0fa:	7c12      	ldrb	r2, [r2, #16]
 800e0fc:	f107 0108 	add.w	r1, r7, #8
 800e100:	4610      	mov	r0, r2
 800e102:	4798      	blx	r3
 800e104:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e106:	e091      	b.n	800e22c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e108:	6839      	ldr	r1, [r7, #0]
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f000 fab2 	bl	800e674 <USBD_CtlError>
            err++;
 800e110:	7afb      	ldrb	r3, [r7, #11]
 800e112:	3301      	adds	r3, #1
 800e114:	72fb      	strb	r3, [r7, #11]
          break;
 800e116:	e089      	b.n	800e22c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e11e:	689b      	ldr	r3, [r3, #8]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d00b      	beq.n	800e13c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e12a:	689b      	ldr	r3, [r3, #8]
 800e12c:	687a      	ldr	r2, [r7, #4]
 800e12e:	7c12      	ldrb	r2, [r2, #16]
 800e130:	f107 0108 	add.w	r1, r7, #8
 800e134:	4610      	mov	r0, r2
 800e136:	4798      	blx	r3
 800e138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e13a:	e077      	b.n	800e22c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e13c:	6839      	ldr	r1, [r7, #0]
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f000 fa98 	bl	800e674 <USBD_CtlError>
            err++;
 800e144:	7afb      	ldrb	r3, [r7, #11]
 800e146:	3301      	adds	r3, #1
 800e148:	72fb      	strb	r3, [r7, #11]
          break;
 800e14a:	e06f      	b.n	800e22c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e152:	68db      	ldr	r3, [r3, #12]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d00b      	beq.n	800e170 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e15e:	68db      	ldr	r3, [r3, #12]
 800e160:	687a      	ldr	r2, [r7, #4]
 800e162:	7c12      	ldrb	r2, [r2, #16]
 800e164:	f107 0108 	add.w	r1, r7, #8
 800e168:	4610      	mov	r0, r2
 800e16a:	4798      	blx	r3
 800e16c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e16e:	e05d      	b.n	800e22c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e170:	6839      	ldr	r1, [r7, #0]
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f000 fa7e 	bl	800e674 <USBD_CtlError>
            err++;
 800e178:	7afb      	ldrb	r3, [r7, #11]
 800e17a:	3301      	adds	r3, #1
 800e17c:	72fb      	strb	r3, [r7, #11]
          break;
 800e17e:	e055      	b.n	800e22c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e186:	691b      	ldr	r3, [r3, #16]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d00b      	beq.n	800e1a4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e192:	691b      	ldr	r3, [r3, #16]
 800e194:	687a      	ldr	r2, [r7, #4]
 800e196:	7c12      	ldrb	r2, [r2, #16]
 800e198:	f107 0108 	add.w	r1, r7, #8
 800e19c:	4610      	mov	r0, r2
 800e19e:	4798      	blx	r3
 800e1a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e1a2:	e043      	b.n	800e22c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e1a4:	6839      	ldr	r1, [r7, #0]
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	f000 fa64 	bl	800e674 <USBD_CtlError>
            err++;
 800e1ac:	7afb      	ldrb	r3, [r7, #11]
 800e1ae:	3301      	adds	r3, #1
 800e1b0:	72fb      	strb	r3, [r7, #11]
          break;
 800e1b2:	e03b      	b.n	800e22c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1ba:	695b      	ldr	r3, [r3, #20]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d00b      	beq.n	800e1d8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1c6:	695b      	ldr	r3, [r3, #20]
 800e1c8:	687a      	ldr	r2, [r7, #4]
 800e1ca:	7c12      	ldrb	r2, [r2, #16]
 800e1cc:	f107 0108 	add.w	r1, r7, #8
 800e1d0:	4610      	mov	r0, r2
 800e1d2:	4798      	blx	r3
 800e1d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e1d6:	e029      	b.n	800e22c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e1d8:	6839      	ldr	r1, [r7, #0]
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f000 fa4a 	bl	800e674 <USBD_CtlError>
            err++;
 800e1e0:	7afb      	ldrb	r3, [r7, #11]
 800e1e2:	3301      	adds	r3, #1
 800e1e4:	72fb      	strb	r3, [r7, #11]
          break;
 800e1e6:	e021      	b.n	800e22c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1ee:	699b      	ldr	r3, [r3, #24]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d00b      	beq.n	800e20c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1fa:	699b      	ldr	r3, [r3, #24]
 800e1fc:	687a      	ldr	r2, [r7, #4]
 800e1fe:	7c12      	ldrb	r2, [r2, #16]
 800e200:	f107 0108 	add.w	r1, r7, #8
 800e204:	4610      	mov	r0, r2
 800e206:	4798      	blx	r3
 800e208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e20a:	e00f      	b.n	800e22c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e20c:	6839      	ldr	r1, [r7, #0]
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f000 fa30 	bl	800e674 <USBD_CtlError>
            err++;
 800e214:	7afb      	ldrb	r3, [r7, #11]
 800e216:	3301      	adds	r3, #1
 800e218:	72fb      	strb	r3, [r7, #11]
          break;
 800e21a:	e007      	b.n	800e22c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e21c:	6839      	ldr	r1, [r7, #0]
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f000 fa28 	bl	800e674 <USBD_CtlError>
          err++;
 800e224:	7afb      	ldrb	r3, [r7, #11]
 800e226:	3301      	adds	r3, #1
 800e228:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800e22a:	bf00      	nop
      }
      break;
 800e22c:	e037      	b.n	800e29e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	7c1b      	ldrb	r3, [r3, #16]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d109      	bne.n	800e24a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e23e:	f107 0208 	add.w	r2, r7, #8
 800e242:	4610      	mov	r0, r2
 800e244:	4798      	blx	r3
 800e246:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e248:	e029      	b.n	800e29e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e24a:	6839      	ldr	r1, [r7, #0]
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f000 fa11 	bl	800e674 <USBD_CtlError>
        err++;
 800e252:	7afb      	ldrb	r3, [r7, #11]
 800e254:	3301      	adds	r3, #1
 800e256:	72fb      	strb	r3, [r7, #11]
      break;
 800e258:	e021      	b.n	800e29e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	7c1b      	ldrb	r3, [r3, #16]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d10d      	bne.n	800e27e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e26a:	f107 0208 	add.w	r2, r7, #8
 800e26e:	4610      	mov	r0, r2
 800e270:	4798      	blx	r3
 800e272:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	3301      	adds	r3, #1
 800e278:	2207      	movs	r2, #7
 800e27a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e27c:	e00f      	b.n	800e29e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e27e:	6839      	ldr	r1, [r7, #0]
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f000 f9f7 	bl	800e674 <USBD_CtlError>
        err++;
 800e286:	7afb      	ldrb	r3, [r7, #11]
 800e288:	3301      	adds	r3, #1
 800e28a:	72fb      	strb	r3, [r7, #11]
      break;
 800e28c:	e007      	b.n	800e29e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e28e:	6839      	ldr	r1, [r7, #0]
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f000 f9ef 	bl	800e674 <USBD_CtlError>
      err++;
 800e296:	7afb      	ldrb	r3, [r7, #11]
 800e298:	3301      	adds	r3, #1
 800e29a:	72fb      	strb	r3, [r7, #11]
      break;
 800e29c:	bf00      	nop
  }

  if (err != 0U)
 800e29e:	7afb      	ldrb	r3, [r7, #11]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d11e      	bne.n	800e2e2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	88db      	ldrh	r3, [r3, #6]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d016      	beq.n	800e2da <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e2ac:	893b      	ldrh	r3, [r7, #8]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d00e      	beq.n	800e2d0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	88da      	ldrh	r2, [r3, #6]
 800e2b6:	893b      	ldrh	r3, [r7, #8]
 800e2b8:	4293      	cmp	r3, r2
 800e2ba:	bf28      	it	cs
 800e2bc:	4613      	movcs	r3, r2
 800e2be:	b29b      	uxth	r3, r3
 800e2c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e2c2:	893b      	ldrh	r3, [r7, #8]
 800e2c4:	461a      	mov	r2, r3
 800e2c6:	68f9      	ldr	r1, [r7, #12]
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f000 fa44 	bl	800e756 <USBD_CtlSendData>
 800e2ce:	e009      	b.n	800e2e4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e2d0:	6839      	ldr	r1, [r7, #0]
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f000 f9ce 	bl	800e674 <USBD_CtlError>
 800e2d8:	e004      	b.n	800e2e4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f000 fa95 	bl	800e80a <USBD_CtlSendStatus>
 800e2e0:	e000      	b.n	800e2e4 <USBD_GetDescriptor+0x320>
    return;
 800e2e2:	bf00      	nop
  }
}
 800e2e4:	3710      	adds	r7, #16
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}
 800e2ea:	bf00      	nop

0800e2ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b084      	sub	sp, #16
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
 800e2f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	889b      	ldrh	r3, [r3, #4]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d131      	bne.n	800e362 <USBD_SetAddress+0x76>
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	88db      	ldrh	r3, [r3, #6]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d12d      	bne.n	800e362 <USBD_SetAddress+0x76>
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	885b      	ldrh	r3, [r3, #2]
 800e30a:	2b7f      	cmp	r3, #127	; 0x7f
 800e30c:	d829      	bhi.n	800e362 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	885b      	ldrh	r3, [r3, #2]
 800e312:	b2db      	uxtb	r3, r3
 800e314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e318:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e320:	b2db      	uxtb	r3, r3
 800e322:	2b03      	cmp	r3, #3
 800e324:	d104      	bne.n	800e330 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e326:	6839      	ldr	r1, [r7, #0]
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f000 f9a3 	bl	800e674 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e32e:	e01d      	b.n	800e36c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	7bfa      	ldrb	r2, [r7, #15]
 800e334:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e338:	7bfb      	ldrb	r3, [r7, #15]
 800e33a:	4619      	mov	r1, r3
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f000 ffbd 	bl	800f2bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f000 fa61 	bl	800e80a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e348:	7bfb      	ldrb	r3, [r7, #15]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d004      	beq.n	800e358 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2202      	movs	r2, #2
 800e352:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e356:	e009      	b.n	800e36c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2201      	movs	r2, #1
 800e35c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e360:	e004      	b.n	800e36c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e362:	6839      	ldr	r1, [r7, #0]
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f000 f985 	bl	800e674 <USBD_CtlError>
  }
}
 800e36a:	bf00      	nop
 800e36c:	bf00      	nop
 800e36e:	3710      	adds	r7, #16
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}

0800e374 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b084      	sub	sp, #16
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
 800e37c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e37e:	2300      	movs	r3, #0
 800e380:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	885b      	ldrh	r3, [r3, #2]
 800e386:	b2da      	uxtb	r2, r3
 800e388:	4b4c      	ldr	r3, [pc, #304]	; (800e4bc <USBD_SetConfig+0x148>)
 800e38a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e38c:	4b4b      	ldr	r3, [pc, #300]	; (800e4bc <USBD_SetConfig+0x148>)
 800e38e:	781b      	ldrb	r3, [r3, #0]
 800e390:	2b01      	cmp	r3, #1
 800e392:	d905      	bls.n	800e3a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e394:	6839      	ldr	r1, [r7, #0]
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f000 f96c 	bl	800e674 <USBD_CtlError>
    return USBD_FAIL;
 800e39c:	2303      	movs	r3, #3
 800e39e:	e088      	b.n	800e4b2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3a6:	b2db      	uxtb	r3, r3
 800e3a8:	2b02      	cmp	r3, #2
 800e3aa:	d002      	beq.n	800e3b2 <USBD_SetConfig+0x3e>
 800e3ac:	2b03      	cmp	r3, #3
 800e3ae:	d025      	beq.n	800e3fc <USBD_SetConfig+0x88>
 800e3b0:	e071      	b.n	800e496 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e3b2:	4b42      	ldr	r3, [pc, #264]	; (800e4bc <USBD_SetConfig+0x148>)
 800e3b4:	781b      	ldrb	r3, [r3, #0]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d01c      	beq.n	800e3f4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800e3ba:	4b40      	ldr	r3, [pc, #256]	; (800e4bc <USBD_SetConfig+0x148>)
 800e3bc:	781b      	ldrb	r3, [r3, #0]
 800e3be:	461a      	mov	r2, r3
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e3c4:	4b3d      	ldr	r3, [pc, #244]	; (800e4bc <USBD_SetConfig+0x148>)
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	4619      	mov	r1, r3
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f7ff f91e 	bl	800d60c <USBD_SetClassConfig>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e3d4:	7bfb      	ldrb	r3, [r7, #15]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d004      	beq.n	800e3e4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800e3da:	6839      	ldr	r1, [r7, #0]
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f000 f949 	bl	800e674 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e3e2:	e065      	b.n	800e4b0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f000 fa10 	bl	800e80a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2203      	movs	r2, #3
 800e3ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e3f2:	e05d      	b.n	800e4b0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f000 fa08 	bl	800e80a <USBD_CtlSendStatus>
      break;
 800e3fa:	e059      	b.n	800e4b0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e3fc:	4b2f      	ldr	r3, [pc, #188]	; (800e4bc <USBD_SetConfig+0x148>)
 800e3fe:	781b      	ldrb	r3, [r3, #0]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d112      	bne.n	800e42a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2202      	movs	r2, #2
 800e408:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e40c:	4b2b      	ldr	r3, [pc, #172]	; (800e4bc <USBD_SetConfig+0x148>)
 800e40e:	781b      	ldrb	r3, [r3, #0]
 800e410:	461a      	mov	r2, r3
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e416:	4b29      	ldr	r3, [pc, #164]	; (800e4bc <USBD_SetConfig+0x148>)
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	4619      	mov	r1, r3
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f7ff f911 	bl	800d644 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f000 f9f1 	bl	800e80a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e428:	e042      	b.n	800e4b0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e42a:	4b24      	ldr	r3, [pc, #144]	; (800e4bc <USBD_SetConfig+0x148>)
 800e42c:	781b      	ldrb	r3, [r3, #0]
 800e42e:	461a      	mov	r2, r3
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	685b      	ldr	r3, [r3, #4]
 800e434:	429a      	cmp	r2, r3
 800e436:	d02a      	beq.n	800e48e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	685b      	ldr	r3, [r3, #4]
 800e43c:	b2db      	uxtb	r3, r3
 800e43e:	4619      	mov	r1, r3
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	f7ff f8ff 	bl	800d644 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e446:	4b1d      	ldr	r3, [pc, #116]	; (800e4bc <USBD_SetConfig+0x148>)
 800e448:	781b      	ldrb	r3, [r3, #0]
 800e44a:	461a      	mov	r2, r3
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e450:	4b1a      	ldr	r3, [pc, #104]	; (800e4bc <USBD_SetConfig+0x148>)
 800e452:	781b      	ldrb	r3, [r3, #0]
 800e454:	4619      	mov	r1, r3
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	f7ff f8d8 	bl	800d60c <USBD_SetClassConfig>
 800e45c:	4603      	mov	r3, r0
 800e45e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e460:	7bfb      	ldrb	r3, [r7, #15]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d00f      	beq.n	800e486 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e466:	6839      	ldr	r1, [r7, #0]
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	f000 f903 	bl	800e674 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	685b      	ldr	r3, [r3, #4]
 800e472:	b2db      	uxtb	r3, r3
 800e474:	4619      	mov	r1, r3
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f7ff f8e4 	bl	800d644 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2202      	movs	r2, #2
 800e480:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e484:	e014      	b.n	800e4b0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	f000 f9bf 	bl	800e80a <USBD_CtlSendStatus>
      break;
 800e48c:	e010      	b.n	800e4b0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f000 f9bb 	bl	800e80a <USBD_CtlSendStatus>
      break;
 800e494:	e00c      	b.n	800e4b0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800e496:	6839      	ldr	r1, [r7, #0]
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f000 f8eb 	bl	800e674 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e49e:	4b07      	ldr	r3, [pc, #28]	; (800e4bc <USBD_SetConfig+0x148>)
 800e4a0:	781b      	ldrb	r3, [r3, #0]
 800e4a2:	4619      	mov	r1, r3
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	f7ff f8cd 	bl	800d644 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e4aa:	2303      	movs	r3, #3
 800e4ac:	73fb      	strb	r3, [r7, #15]
      break;
 800e4ae:	bf00      	nop
  }

  return ret;
 800e4b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3710      	adds	r7, #16
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}
 800e4ba:	bf00      	nop
 800e4bc:	200001b0 	.word	0x200001b0

0800e4c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b082      	sub	sp, #8
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
 800e4c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	88db      	ldrh	r3, [r3, #6]
 800e4ce:	2b01      	cmp	r3, #1
 800e4d0:	d004      	beq.n	800e4dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e4d2:	6839      	ldr	r1, [r7, #0]
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f000 f8cd 	bl	800e674 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e4da:	e023      	b.n	800e524 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4e2:	b2db      	uxtb	r3, r3
 800e4e4:	2b02      	cmp	r3, #2
 800e4e6:	dc02      	bgt.n	800e4ee <USBD_GetConfig+0x2e>
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	dc03      	bgt.n	800e4f4 <USBD_GetConfig+0x34>
 800e4ec:	e015      	b.n	800e51a <USBD_GetConfig+0x5a>
 800e4ee:	2b03      	cmp	r3, #3
 800e4f0:	d00b      	beq.n	800e50a <USBD_GetConfig+0x4a>
 800e4f2:	e012      	b.n	800e51a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	3308      	adds	r3, #8
 800e4fe:	2201      	movs	r2, #1
 800e500:	4619      	mov	r1, r3
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f000 f927 	bl	800e756 <USBD_CtlSendData>
        break;
 800e508:	e00c      	b.n	800e524 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	3304      	adds	r3, #4
 800e50e:	2201      	movs	r2, #1
 800e510:	4619      	mov	r1, r3
 800e512:	6878      	ldr	r0, [r7, #4]
 800e514:	f000 f91f 	bl	800e756 <USBD_CtlSendData>
        break;
 800e518:	e004      	b.n	800e524 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e51a:	6839      	ldr	r1, [r7, #0]
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	f000 f8a9 	bl	800e674 <USBD_CtlError>
        break;
 800e522:	bf00      	nop
}
 800e524:	bf00      	nop
 800e526:	3708      	adds	r7, #8
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}

0800e52c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b082      	sub	sp, #8
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e53c:	b2db      	uxtb	r3, r3
 800e53e:	3b01      	subs	r3, #1
 800e540:	2b02      	cmp	r3, #2
 800e542:	d81e      	bhi.n	800e582 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	88db      	ldrh	r3, [r3, #6]
 800e548:	2b02      	cmp	r3, #2
 800e54a:	d004      	beq.n	800e556 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e54c:	6839      	ldr	r1, [r7, #0]
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	f000 f890 	bl	800e674 <USBD_CtlError>
        break;
 800e554:	e01a      	b.n	800e58c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2201      	movs	r2, #1
 800e55a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e562:	2b00      	cmp	r3, #0
 800e564:	d005      	beq.n	800e572 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	68db      	ldr	r3, [r3, #12]
 800e56a:	f043 0202 	orr.w	r2, r3, #2
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	330c      	adds	r3, #12
 800e576:	2202      	movs	r2, #2
 800e578:	4619      	mov	r1, r3
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f000 f8eb 	bl	800e756 <USBD_CtlSendData>
      break;
 800e580:	e004      	b.n	800e58c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e582:	6839      	ldr	r1, [r7, #0]
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f000 f875 	bl	800e674 <USBD_CtlError>
      break;
 800e58a:	bf00      	nop
  }
}
 800e58c:	bf00      	nop
 800e58e:	3708      	adds	r7, #8
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}

0800e594 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b082      	sub	sp, #8
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
 800e59c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	885b      	ldrh	r3, [r3, #2]
 800e5a2:	2b01      	cmp	r3, #1
 800e5a4:	d106      	bne.n	800e5b4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2201      	movs	r2, #1
 800e5aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f000 f92b 	bl	800e80a <USBD_CtlSendStatus>
  }
}
 800e5b4:	bf00      	nop
 800e5b6:	3708      	adds	r7, #8
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}

0800e5bc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b082      	sub	sp, #8
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
 800e5c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5cc:	b2db      	uxtb	r3, r3
 800e5ce:	3b01      	subs	r3, #1
 800e5d0:	2b02      	cmp	r3, #2
 800e5d2:	d80b      	bhi.n	800e5ec <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	885b      	ldrh	r3, [r3, #2]
 800e5d8:	2b01      	cmp	r3, #1
 800e5da:	d10c      	bne.n	800e5f6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2200      	movs	r2, #0
 800e5e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f000 f910 	bl	800e80a <USBD_CtlSendStatus>
      }
      break;
 800e5ea:	e004      	b.n	800e5f6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e5ec:	6839      	ldr	r1, [r7, #0]
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f000 f840 	bl	800e674 <USBD_CtlError>
      break;
 800e5f4:	e000      	b.n	800e5f8 <USBD_ClrFeature+0x3c>
      break;
 800e5f6:	bf00      	nop
  }
}
 800e5f8:	bf00      	nop
 800e5fa:	3708      	adds	r7, #8
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}

0800e600 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b084      	sub	sp, #16
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
 800e608:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	781a      	ldrb	r2, [r3, #0]
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	3301      	adds	r3, #1
 800e61a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	781a      	ldrb	r2, [r3, #0]
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	3301      	adds	r3, #1
 800e628:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e62a:	68f8      	ldr	r0, [r7, #12]
 800e62c:	f7ff fa91 	bl	800db52 <SWAPBYTE>
 800e630:	4603      	mov	r3, r0
 800e632:	461a      	mov	r2, r3
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	3301      	adds	r3, #1
 800e63c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	3301      	adds	r3, #1
 800e642:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e644:	68f8      	ldr	r0, [r7, #12]
 800e646:	f7ff fa84 	bl	800db52 <SWAPBYTE>
 800e64a:	4603      	mov	r3, r0
 800e64c:	461a      	mov	r2, r3
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	3301      	adds	r3, #1
 800e656:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	3301      	adds	r3, #1
 800e65c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e65e:	68f8      	ldr	r0, [r7, #12]
 800e660:	f7ff fa77 	bl	800db52 <SWAPBYTE>
 800e664:	4603      	mov	r3, r0
 800e666:	461a      	mov	r2, r3
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	80da      	strh	r2, [r3, #6]
}
 800e66c:	bf00      	nop
 800e66e:	3710      	adds	r7, #16
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}

0800e674 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b082      	sub	sp, #8
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
 800e67c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e67e:	2180      	movs	r1, #128	; 0x80
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f000 fd83 	bl	800f18c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e686:	2100      	movs	r1, #0
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f000 fd7f 	bl	800f18c <USBD_LL_StallEP>
}
 800e68e:	bf00      	nop
 800e690:	3708      	adds	r7, #8
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}

0800e696 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e696:	b580      	push	{r7, lr}
 800e698:	b086      	sub	sp, #24
 800e69a:	af00      	add	r7, sp, #0
 800e69c:	60f8      	str	r0, [r7, #12]
 800e69e:	60b9      	str	r1, [r7, #8]
 800e6a0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d036      	beq.n	800e71a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e6b0:	6938      	ldr	r0, [r7, #16]
 800e6b2:	f000 f836 	bl	800e722 <USBD_GetLen>
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	3301      	adds	r3, #1
 800e6ba:	b29b      	uxth	r3, r3
 800e6bc:	005b      	lsls	r3, r3, #1
 800e6be:	b29a      	uxth	r2, r3
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e6c4:	7dfb      	ldrb	r3, [r7, #23]
 800e6c6:	68ba      	ldr	r2, [r7, #8]
 800e6c8:	4413      	add	r3, r2
 800e6ca:	687a      	ldr	r2, [r7, #4]
 800e6cc:	7812      	ldrb	r2, [r2, #0]
 800e6ce:	701a      	strb	r2, [r3, #0]
  idx++;
 800e6d0:	7dfb      	ldrb	r3, [r7, #23]
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e6d6:	7dfb      	ldrb	r3, [r7, #23]
 800e6d8:	68ba      	ldr	r2, [r7, #8]
 800e6da:	4413      	add	r3, r2
 800e6dc:	2203      	movs	r2, #3
 800e6de:	701a      	strb	r2, [r3, #0]
  idx++;
 800e6e0:	7dfb      	ldrb	r3, [r7, #23]
 800e6e2:	3301      	adds	r3, #1
 800e6e4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e6e6:	e013      	b.n	800e710 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e6e8:	7dfb      	ldrb	r3, [r7, #23]
 800e6ea:	68ba      	ldr	r2, [r7, #8]
 800e6ec:	4413      	add	r3, r2
 800e6ee:	693a      	ldr	r2, [r7, #16]
 800e6f0:	7812      	ldrb	r2, [r2, #0]
 800e6f2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e6f4:	693b      	ldr	r3, [r7, #16]
 800e6f6:	3301      	adds	r3, #1
 800e6f8:	613b      	str	r3, [r7, #16]
    idx++;
 800e6fa:	7dfb      	ldrb	r3, [r7, #23]
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e700:	7dfb      	ldrb	r3, [r7, #23]
 800e702:	68ba      	ldr	r2, [r7, #8]
 800e704:	4413      	add	r3, r2
 800e706:	2200      	movs	r2, #0
 800e708:	701a      	strb	r2, [r3, #0]
    idx++;
 800e70a:	7dfb      	ldrb	r3, [r7, #23]
 800e70c:	3301      	adds	r3, #1
 800e70e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	781b      	ldrb	r3, [r3, #0]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d1e7      	bne.n	800e6e8 <USBD_GetString+0x52>
 800e718:	e000      	b.n	800e71c <USBD_GetString+0x86>
    return;
 800e71a:	bf00      	nop
  }
}
 800e71c:	3718      	adds	r7, #24
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}

0800e722 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e722:	b480      	push	{r7}
 800e724:	b085      	sub	sp, #20
 800e726:	af00      	add	r7, sp, #0
 800e728:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e72a:	2300      	movs	r3, #0
 800e72c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e732:	e005      	b.n	800e740 <USBD_GetLen+0x1e>
  {
    len++;
 800e734:	7bfb      	ldrb	r3, [r7, #15]
 800e736:	3301      	adds	r3, #1
 800e738:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e73a:	68bb      	ldr	r3, [r7, #8]
 800e73c:	3301      	adds	r3, #1
 800e73e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e740:	68bb      	ldr	r3, [r7, #8]
 800e742:	781b      	ldrb	r3, [r3, #0]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d1f5      	bne.n	800e734 <USBD_GetLen+0x12>
  }

  return len;
 800e748:	7bfb      	ldrb	r3, [r7, #15]
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	3714      	adds	r7, #20
 800e74e:	46bd      	mov	sp, r7
 800e750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e754:	4770      	bx	lr

0800e756 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e756:	b580      	push	{r7, lr}
 800e758:	b084      	sub	sp, #16
 800e75a:	af00      	add	r7, sp, #0
 800e75c:	60f8      	str	r0, [r7, #12]
 800e75e:	60b9      	str	r1, [r7, #8]
 800e760:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	2202      	movs	r2, #2
 800e766:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	687a      	ldr	r2, [r7, #4]
 800e76e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	687a      	ldr	r2, [r7, #4]
 800e774:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	68ba      	ldr	r2, [r7, #8]
 800e77a:	2100      	movs	r1, #0
 800e77c:	68f8      	ldr	r0, [r7, #12]
 800e77e:	f000 fdd3 	bl	800f328 <USBD_LL_Transmit>

  return USBD_OK;
 800e782:	2300      	movs	r3, #0
}
 800e784:	4618      	mov	r0, r3
 800e786:	3710      	adds	r7, #16
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}

0800e78c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b084      	sub	sp, #16
 800e790:	af00      	add	r7, sp, #0
 800e792:	60f8      	str	r0, [r7, #12]
 800e794:	60b9      	str	r1, [r7, #8]
 800e796:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	68ba      	ldr	r2, [r7, #8]
 800e79c:	2100      	movs	r1, #0
 800e79e:	68f8      	ldr	r0, [r7, #12]
 800e7a0:	f000 fdc2 	bl	800f328 <USBD_LL_Transmit>

  return USBD_OK;
 800e7a4:	2300      	movs	r3, #0
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3710      	adds	r7, #16
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}

0800e7ae <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e7ae:	b580      	push	{r7, lr}
 800e7b0:	b084      	sub	sp, #16
 800e7b2:	af00      	add	r7, sp, #0
 800e7b4:	60f8      	str	r0, [r7, #12]
 800e7b6:	60b9      	str	r1, [r7, #8]
 800e7b8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	2203      	movs	r2, #3
 800e7be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	687a      	ldr	r2, [r7, #4]
 800e7c6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	687a      	ldr	r2, [r7, #4]
 800e7ce:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	68ba      	ldr	r2, [r7, #8]
 800e7d6:	2100      	movs	r1, #0
 800e7d8:	68f8      	ldr	r0, [r7, #12]
 800e7da:	f000 fddd 	bl	800f398 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e7de:	2300      	movs	r3, #0
}
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	3710      	adds	r7, #16
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}

0800e7e8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b084      	sub	sp, #16
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	60f8      	str	r0, [r7, #12]
 800e7f0:	60b9      	str	r1, [r7, #8]
 800e7f2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	68ba      	ldr	r2, [r7, #8]
 800e7f8:	2100      	movs	r1, #0
 800e7fa:	68f8      	ldr	r0, [r7, #12]
 800e7fc:	f000 fdcc 	bl	800f398 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e800:	2300      	movs	r3, #0
}
 800e802:	4618      	mov	r0, r3
 800e804:	3710      	adds	r7, #16
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}

0800e80a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e80a:	b580      	push	{r7, lr}
 800e80c:	b082      	sub	sp, #8
 800e80e:	af00      	add	r7, sp, #0
 800e810:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	2204      	movs	r2, #4
 800e816:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e81a:	2300      	movs	r3, #0
 800e81c:	2200      	movs	r2, #0
 800e81e:	2100      	movs	r1, #0
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f000 fd81 	bl	800f328 <USBD_LL_Transmit>

  return USBD_OK;
 800e826:	2300      	movs	r3, #0
}
 800e828:	4618      	mov	r0, r3
 800e82a:	3708      	adds	r7, #8
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}

0800e830 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b082      	sub	sp, #8
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2205      	movs	r2, #5
 800e83c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e840:	2300      	movs	r3, #0
 800e842:	2200      	movs	r2, #0
 800e844:	2100      	movs	r1, #0
 800e846:	6878      	ldr	r0, [r7, #4]
 800e848:	f000 fda6 	bl	800f398 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e84c:	2300      	movs	r3, #0
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3708      	adds	r7, #8
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}
	...

0800e858 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e85c:	2200      	movs	r2, #0
 800e85e:	4912      	ldr	r1, [pc, #72]	; (800e8a8 <MX_USB_DEVICE_Init+0x50>)
 800e860:	4812      	ldr	r0, [pc, #72]	; (800e8ac <MX_USB_DEVICE_Init+0x54>)
 800e862:	f7fe fe65 	bl	800d530 <USBD_Init>
 800e866:	4603      	mov	r3, r0
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d001      	beq.n	800e870 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e86c:	f7f9 fd5c 	bl	8008328 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e870:	490f      	ldr	r1, [pc, #60]	; (800e8b0 <MX_USB_DEVICE_Init+0x58>)
 800e872:	480e      	ldr	r0, [pc, #56]	; (800e8ac <MX_USB_DEVICE_Init+0x54>)
 800e874:	f7fe fe8c 	bl	800d590 <USBD_RegisterClass>
 800e878:	4603      	mov	r3, r0
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d001      	beq.n	800e882 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e87e:	f7f9 fd53 	bl	8008328 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e882:	490c      	ldr	r1, [pc, #48]	; (800e8b4 <MX_USB_DEVICE_Init+0x5c>)
 800e884:	4809      	ldr	r0, [pc, #36]	; (800e8ac <MX_USB_DEVICE_Init+0x54>)
 800e886:	f7fe fdad 	bl	800d3e4 <USBD_CDC_RegisterInterface>
 800e88a:	4603      	mov	r3, r0
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d001      	beq.n	800e894 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e890:	f7f9 fd4a 	bl	8008328 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e894:	4805      	ldr	r0, [pc, #20]	; (800e8ac <MX_USB_DEVICE_Init+0x54>)
 800e896:	f7fe fea2 	bl	800d5de <USBD_Start>
 800e89a:	4603      	mov	r3, r0
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d001      	beq.n	800e8a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e8a0:	f7f9 fd42 	bl	8008328 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e8a4:	bf00      	nop
 800e8a6:	bd80      	pop	{r7, pc}
 800e8a8:	20000130 	.word	0x20000130
 800e8ac:	200001b4 	.word	0x200001b4
 800e8b0:	20000018 	.word	0x20000018
 800e8b4:	2000011c 	.word	0x2000011c

0800e8b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e8bc:	2200      	movs	r2, #0
 800e8be:	4905      	ldr	r1, [pc, #20]	; (800e8d4 <CDC_Init_FS+0x1c>)
 800e8c0:	4805      	ldr	r0, [pc, #20]	; (800e8d8 <CDC_Init_FS+0x20>)
 800e8c2:	f7fe fda4 	bl	800d40e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e8c6:	4905      	ldr	r1, [pc, #20]	; (800e8dc <CDC_Init_FS+0x24>)
 800e8c8:	4803      	ldr	r0, [pc, #12]	; (800e8d8 <CDC_Init_FS+0x20>)
 800e8ca:	f7fe fdbe 	bl	800d44a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e8ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	bd80      	pop	{r7, pc}
 800e8d4:	20000c84 	.word	0x20000c84
 800e8d8:	200001b4 	.word	0x200001b4
 800e8dc:	20000484 	.word	0x20000484

0800e8e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e8e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ee:	4770      	bx	lr

0800e8f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e8f0:	b480      	push	{r7}
 800e8f2:	b083      	sub	sp, #12
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	6039      	str	r1, [r7, #0]
 800e8fa:	71fb      	strb	r3, [r7, #7]
 800e8fc:	4613      	mov	r3, r2
 800e8fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e900:	79fb      	ldrb	r3, [r7, #7]
 800e902:	2b23      	cmp	r3, #35	; 0x23
 800e904:	d84a      	bhi.n	800e99c <CDC_Control_FS+0xac>
 800e906:	a201      	add	r2, pc, #4	; (adr r2, 800e90c <CDC_Control_FS+0x1c>)
 800e908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e90c:	0800e99d 	.word	0x0800e99d
 800e910:	0800e99d 	.word	0x0800e99d
 800e914:	0800e99d 	.word	0x0800e99d
 800e918:	0800e99d 	.word	0x0800e99d
 800e91c:	0800e99d 	.word	0x0800e99d
 800e920:	0800e99d 	.word	0x0800e99d
 800e924:	0800e99d 	.word	0x0800e99d
 800e928:	0800e99d 	.word	0x0800e99d
 800e92c:	0800e99d 	.word	0x0800e99d
 800e930:	0800e99d 	.word	0x0800e99d
 800e934:	0800e99d 	.word	0x0800e99d
 800e938:	0800e99d 	.word	0x0800e99d
 800e93c:	0800e99d 	.word	0x0800e99d
 800e940:	0800e99d 	.word	0x0800e99d
 800e944:	0800e99d 	.word	0x0800e99d
 800e948:	0800e99d 	.word	0x0800e99d
 800e94c:	0800e99d 	.word	0x0800e99d
 800e950:	0800e99d 	.word	0x0800e99d
 800e954:	0800e99d 	.word	0x0800e99d
 800e958:	0800e99d 	.word	0x0800e99d
 800e95c:	0800e99d 	.word	0x0800e99d
 800e960:	0800e99d 	.word	0x0800e99d
 800e964:	0800e99d 	.word	0x0800e99d
 800e968:	0800e99d 	.word	0x0800e99d
 800e96c:	0800e99d 	.word	0x0800e99d
 800e970:	0800e99d 	.word	0x0800e99d
 800e974:	0800e99d 	.word	0x0800e99d
 800e978:	0800e99d 	.word	0x0800e99d
 800e97c:	0800e99d 	.word	0x0800e99d
 800e980:	0800e99d 	.word	0x0800e99d
 800e984:	0800e99d 	.word	0x0800e99d
 800e988:	0800e99d 	.word	0x0800e99d
 800e98c:	0800e99d 	.word	0x0800e99d
 800e990:	0800e99d 	.word	0x0800e99d
 800e994:	0800e99d 	.word	0x0800e99d
 800e998:	0800e99d 	.word	0x0800e99d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e99c:	bf00      	nop
  }

  return (USBD_OK);
 800e99e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	370c      	adds	r7, #12
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9aa:	4770      	bx	lr

0800e9ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b082      	sub	sp, #8
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
 800e9b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e9b6:	6879      	ldr	r1, [r7, #4]
 800e9b8:	480b      	ldr	r0, [pc, #44]	; (800e9e8 <CDC_Receive_FS+0x3c>)
 800e9ba:	f7fe fd46 	bl	800d44a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e9be:	480a      	ldr	r0, [pc, #40]	; (800e9e8 <CDC_Receive_FS+0x3c>)
 800e9c0:	f7fe fd8c 	bl	800d4dc <USBD_CDC_ReceivePacket>
  USB_CDC_RxHandler(UserRxBufferFS, *Len);
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	4619      	mov	r1, r3
 800e9ca:	4808      	ldr	r0, [pc, #32]	; (800e9ec <CDC_Receive_FS+0x40>)
 800e9cc:	f7f9 fc98 	bl	8008300 <USB_CDC_RxHandler>
  memset(UserRxBufferFS, '\0', *Len);
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	2100      	movs	r1, #0
 800e9d8:	4804      	ldr	r0, [pc, #16]	; (800e9ec <CDC_Receive_FS+0x40>)
 800e9da:	f000 fdb9 	bl	800f550 <memset>
  return (USBD_OK);
 800e9de:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	3708      	adds	r7, #8
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}
 800e9e8:	200001b4 	.word	0x200001b4
 800e9ec:	20000484 	.word	0x20000484

0800e9f0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b084      	sub	sp, #16
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
 800e9f8:	460b      	mov	r3, r1
 800e9fa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ea00:	4b0d      	ldr	r3, [pc, #52]	; (800ea38 <CDC_Transmit_FS+0x48>)
 800ea02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea06:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ea08:	68bb      	ldr	r3, [r7, #8]
 800ea0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d001      	beq.n	800ea16 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ea12:	2301      	movs	r3, #1
 800ea14:	e00b      	b.n	800ea2e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ea16:	887b      	ldrh	r3, [r7, #2]
 800ea18:	461a      	mov	r2, r3
 800ea1a:	6879      	ldr	r1, [r7, #4]
 800ea1c:	4806      	ldr	r0, [pc, #24]	; (800ea38 <CDC_Transmit_FS+0x48>)
 800ea1e:	f7fe fcf6 	bl	800d40e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ea22:	4805      	ldr	r0, [pc, #20]	; (800ea38 <CDC_Transmit_FS+0x48>)
 800ea24:	f7fe fd2a 	bl	800d47c <USBD_CDC_TransmitPacket>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ea2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3710      	adds	r7, #16
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}
 800ea36:	bf00      	nop
 800ea38:	200001b4 	.word	0x200001b4

0800ea3c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ea3c:	b480      	push	{r7}
 800ea3e:	b087      	sub	sp, #28
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	60f8      	str	r0, [r7, #12]
 800ea44:	60b9      	str	r1, [r7, #8]
 800ea46:	4613      	mov	r3, r2
 800ea48:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ea4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ea52:	4618      	mov	r0, r3
 800ea54:	371c      	adds	r7, #28
 800ea56:	46bd      	mov	sp, r7
 800ea58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5c:	4770      	bx	lr
	...

0800ea60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea60:	b480      	push	{r7}
 800ea62:	b083      	sub	sp, #12
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	4603      	mov	r3, r0
 800ea68:	6039      	str	r1, [r7, #0]
 800ea6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	2212      	movs	r2, #18
 800ea70:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ea72:	4b03      	ldr	r3, [pc, #12]	; (800ea80 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	370c      	adds	r7, #12
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7e:	4770      	bx	lr
 800ea80:	20000150 	.word	0x20000150

0800ea84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea84:	b480      	push	{r7}
 800ea86:	b083      	sub	sp, #12
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	6039      	str	r1, [r7, #0]
 800ea8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	2204      	movs	r2, #4
 800ea94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ea96:	4b03      	ldr	r3, [pc, #12]	; (800eaa4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	370c      	adds	r7, #12
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa2:	4770      	bx	lr
 800eaa4:	20000170 	.word	0x20000170

0800eaa8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b082      	sub	sp, #8
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	4603      	mov	r3, r0
 800eab0:	6039      	str	r1, [r7, #0]
 800eab2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eab4:	79fb      	ldrb	r3, [r7, #7]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d105      	bne.n	800eac6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eaba:	683a      	ldr	r2, [r7, #0]
 800eabc:	4907      	ldr	r1, [pc, #28]	; (800eadc <USBD_FS_ProductStrDescriptor+0x34>)
 800eabe:	4808      	ldr	r0, [pc, #32]	; (800eae0 <USBD_FS_ProductStrDescriptor+0x38>)
 800eac0:	f7ff fde9 	bl	800e696 <USBD_GetString>
 800eac4:	e004      	b.n	800ead0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eac6:	683a      	ldr	r2, [r7, #0]
 800eac8:	4904      	ldr	r1, [pc, #16]	; (800eadc <USBD_FS_ProductStrDescriptor+0x34>)
 800eaca:	4805      	ldr	r0, [pc, #20]	; (800eae0 <USBD_FS_ProductStrDescriptor+0x38>)
 800eacc:	f7ff fde3 	bl	800e696 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ead0:	4b02      	ldr	r3, [pc, #8]	; (800eadc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	3708      	adds	r7, #8
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}
 800eada:	bf00      	nop
 800eadc:	20001484 	.word	0x20001484
 800eae0:	0800f584 	.word	0x0800f584

0800eae4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b082      	sub	sp, #8
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	4603      	mov	r3, r0
 800eaec:	6039      	str	r1, [r7, #0]
 800eaee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eaf0:	683a      	ldr	r2, [r7, #0]
 800eaf2:	4904      	ldr	r1, [pc, #16]	; (800eb04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800eaf4:	4804      	ldr	r0, [pc, #16]	; (800eb08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800eaf6:	f7ff fdce 	bl	800e696 <USBD_GetString>
  return USBD_StrDesc;
 800eafa:	4b02      	ldr	r3, [pc, #8]	; (800eb04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	3708      	adds	r7, #8
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}
 800eb04:	20001484 	.word	0x20001484
 800eb08:	0800f59c 	.word	0x0800f59c

0800eb0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b082      	sub	sp, #8
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	4603      	mov	r3, r0
 800eb14:	6039      	str	r1, [r7, #0]
 800eb16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	221a      	movs	r2, #26
 800eb1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800eb1e:	f000 f855 	bl	800ebcc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800eb22:	4b02      	ldr	r3, [pc, #8]	; (800eb2c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	3708      	adds	r7, #8
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}
 800eb2c:	20000174 	.word	0x20000174

0800eb30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b082      	sub	sp, #8
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	4603      	mov	r3, r0
 800eb38:	6039      	str	r1, [r7, #0]
 800eb3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800eb3c:	79fb      	ldrb	r3, [r7, #7]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d105      	bne.n	800eb4e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eb42:	683a      	ldr	r2, [r7, #0]
 800eb44:	4907      	ldr	r1, [pc, #28]	; (800eb64 <USBD_FS_ConfigStrDescriptor+0x34>)
 800eb46:	4808      	ldr	r0, [pc, #32]	; (800eb68 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eb48:	f7ff fda5 	bl	800e696 <USBD_GetString>
 800eb4c:	e004      	b.n	800eb58 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eb4e:	683a      	ldr	r2, [r7, #0]
 800eb50:	4904      	ldr	r1, [pc, #16]	; (800eb64 <USBD_FS_ConfigStrDescriptor+0x34>)
 800eb52:	4805      	ldr	r0, [pc, #20]	; (800eb68 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eb54:	f7ff fd9f 	bl	800e696 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb58:	4b02      	ldr	r3, [pc, #8]	; (800eb64 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	3708      	adds	r7, #8
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}
 800eb62:	bf00      	nop
 800eb64:	20001484 	.word	0x20001484
 800eb68:	0800f5a4 	.word	0x0800f5a4

0800eb6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b082      	sub	sp, #8
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	4603      	mov	r3, r0
 800eb74:	6039      	str	r1, [r7, #0]
 800eb76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eb78:	79fb      	ldrb	r3, [r7, #7]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d105      	bne.n	800eb8a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eb7e:	683a      	ldr	r2, [r7, #0]
 800eb80:	4907      	ldr	r1, [pc, #28]	; (800eba0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800eb82:	4808      	ldr	r0, [pc, #32]	; (800eba4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eb84:	f7ff fd87 	bl	800e696 <USBD_GetString>
 800eb88:	e004      	b.n	800eb94 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eb8a:	683a      	ldr	r2, [r7, #0]
 800eb8c:	4904      	ldr	r1, [pc, #16]	; (800eba0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800eb8e:	4805      	ldr	r0, [pc, #20]	; (800eba4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eb90:	f7ff fd81 	bl	800e696 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb94:	4b02      	ldr	r3, [pc, #8]	; (800eba0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800eb96:	4618      	mov	r0, r3
 800eb98:	3708      	adds	r7, #8
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	bd80      	pop	{r7, pc}
 800eb9e:	bf00      	nop
 800eba0:	20001484 	.word	0x20001484
 800eba4:	0800f5b0 	.word	0x0800f5b0

0800eba8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b083      	sub	sp, #12
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	4603      	mov	r3, r0
 800ebb0:	6039      	str	r1, [r7, #0]
 800ebb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	220c      	movs	r2, #12
 800ebb8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800ebba:	4b03      	ldr	r3, [pc, #12]	; (800ebc8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	370c      	adds	r7, #12
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc6:	4770      	bx	lr
 800ebc8:	20000164 	.word	0x20000164

0800ebcc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b084      	sub	sp, #16
 800ebd0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ebd2:	4b0f      	ldr	r3, [pc, #60]	; (800ec10 <Get_SerialNum+0x44>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ebd8:	4b0e      	ldr	r3, [pc, #56]	; (800ec14 <Get_SerialNum+0x48>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ebde:	4b0e      	ldr	r3, [pc, #56]	; (800ec18 <Get_SerialNum+0x4c>)
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ebe4:	68fa      	ldr	r2, [r7, #12]
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	4413      	add	r3, r2
 800ebea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d009      	beq.n	800ec06 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ebf2:	2208      	movs	r2, #8
 800ebf4:	4909      	ldr	r1, [pc, #36]	; (800ec1c <Get_SerialNum+0x50>)
 800ebf6:	68f8      	ldr	r0, [r7, #12]
 800ebf8:	f000 f814 	bl	800ec24 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ebfc:	2204      	movs	r2, #4
 800ebfe:	4908      	ldr	r1, [pc, #32]	; (800ec20 <Get_SerialNum+0x54>)
 800ec00:	68b8      	ldr	r0, [r7, #8]
 800ec02:	f000 f80f 	bl	800ec24 <IntToUnicode>
  }
}
 800ec06:	bf00      	nop
 800ec08:	3710      	adds	r7, #16
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}
 800ec0e:	bf00      	nop
 800ec10:	1fff7590 	.word	0x1fff7590
 800ec14:	1fff7594 	.word	0x1fff7594
 800ec18:	1fff7598 	.word	0x1fff7598
 800ec1c:	20000176 	.word	0x20000176
 800ec20:	20000186 	.word	0x20000186

0800ec24 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ec24:	b480      	push	{r7}
 800ec26:	b087      	sub	sp, #28
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	60f8      	str	r0, [r7, #12]
 800ec2c:	60b9      	str	r1, [r7, #8]
 800ec2e:	4613      	mov	r3, r2
 800ec30:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ec32:	2300      	movs	r3, #0
 800ec34:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ec36:	2300      	movs	r3, #0
 800ec38:	75fb      	strb	r3, [r7, #23]
 800ec3a:	e027      	b.n	800ec8c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	0f1b      	lsrs	r3, r3, #28
 800ec40:	2b09      	cmp	r3, #9
 800ec42:	d80b      	bhi.n	800ec5c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	0f1b      	lsrs	r3, r3, #28
 800ec48:	b2da      	uxtb	r2, r3
 800ec4a:	7dfb      	ldrb	r3, [r7, #23]
 800ec4c:	005b      	lsls	r3, r3, #1
 800ec4e:	4619      	mov	r1, r3
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	440b      	add	r3, r1
 800ec54:	3230      	adds	r2, #48	; 0x30
 800ec56:	b2d2      	uxtb	r2, r2
 800ec58:	701a      	strb	r2, [r3, #0]
 800ec5a:	e00a      	b.n	800ec72 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	0f1b      	lsrs	r3, r3, #28
 800ec60:	b2da      	uxtb	r2, r3
 800ec62:	7dfb      	ldrb	r3, [r7, #23]
 800ec64:	005b      	lsls	r3, r3, #1
 800ec66:	4619      	mov	r1, r3
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	440b      	add	r3, r1
 800ec6c:	3237      	adds	r2, #55	; 0x37
 800ec6e:	b2d2      	uxtb	r2, r2
 800ec70:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	011b      	lsls	r3, r3, #4
 800ec76:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ec78:	7dfb      	ldrb	r3, [r7, #23]
 800ec7a:	005b      	lsls	r3, r3, #1
 800ec7c:	3301      	adds	r3, #1
 800ec7e:	68ba      	ldr	r2, [r7, #8]
 800ec80:	4413      	add	r3, r2
 800ec82:	2200      	movs	r2, #0
 800ec84:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ec86:	7dfb      	ldrb	r3, [r7, #23]
 800ec88:	3301      	adds	r3, #1
 800ec8a:	75fb      	strb	r3, [r7, #23]
 800ec8c:	7dfa      	ldrb	r2, [r7, #23]
 800ec8e:	79fb      	ldrb	r3, [r7, #7]
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d3d3      	bcc.n	800ec3c <IntToUnicode+0x18>
  }
}
 800ec94:	bf00      	nop
 800ec96:	bf00      	nop
 800ec98:	371c      	adds	r7, #28
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca0:	4770      	bx	lr
	...

0800eca4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b0b2      	sub	sp, #200	; 0xc8
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ecac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	601a      	str	r2, [r3, #0]
 800ecb4:	605a      	str	r2, [r3, #4]
 800ecb6:	609a      	str	r2, [r3, #8]
 800ecb8:	60da      	str	r2, [r3, #12]
 800ecba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ecbc:	f107 0318 	add.w	r3, r7, #24
 800ecc0:	229c      	movs	r2, #156	; 0x9c
 800ecc2:	2100      	movs	r1, #0
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f000 fc43 	bl	800f550 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ecd2:	d163      	bne.n	800ed9c <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ecd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ecd8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ece0:	f107 0318 	add.w	r3, r7, #24
 800ece4:	4618      	mov	r0, r3
 800ece6:	f7fc f839 	bl	800ad5c <HAL_RCCEx_PeriphCLKConfig>
 800ecea:	4603      	mov	r3, r0
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d001      	beq.n	800ecf4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800ecf0:	f7f9 fb1a 	bl	8008328 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ecf4:	4b2b      	ldr	r3, [pc, #172]	; (800eda4 <HAL_PCD_MspInit+0x100>)
 800ecf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ecf8:	4a2a      	ldr	r2, [pc, #168]	; (800eda4 <HAL_PCD_MspInit+0x100>)
 800ecfa:	f043 0301 	orr.w	r3, r3, #1
 800ecfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ed00:	4b28      	ldr	r3, [pc, #160]	; (800eda4 <HAL_PCD_MspInit+0x100>)
 800ed02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed04:	f003 0301 	and.w	r3, r3, #1
 800ed08:	617b      	str	r3, [r7, #20]
 800ed0a:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ed0c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ed10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed14:	2302      	movs	r3, #2
 800ed16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ed20:	2303      	movs	r3, #3
 800ed22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ed26:	230a      	movs	r3, #10
 800ed28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed2c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800ed30:	4619      	mov	r1, r3
 800ed32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ed36:	f7f9 fd3f 	bl	80087b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ed3a:	4b1a      	ldr	r3, [pc, #104]	; (800eda4 <HAL_PCD_MspInit+0x100>)
 800ed3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed3e:	4a19      	ldr	r2, [pc, #100]	; (800eda4 <HAL_PCD_MspInit+0x100>)
 800ed40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ed44:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ed46:	4b17      	ldr	r3, [pc, #92]	; (800eda4 <HAL_PCD_MspInit+0x100>)
 800ed48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ed4e:	613b      	str	r3, [r7, #16]
 800ed50:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ed52:	4b14      	ldr	r3, [pc, #80]	; (800eda4 <HAL_PCD_MspInit+0x100>)
 800ed54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d114      	bne.n	800ed88 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ed5e:	4b11      	ldr	r3, [pc, #68]	; (800eda4 <HAL_PCD_MspInit+0x100>)
 800ed60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed62:	4a10      	ldr	r2, [pc, #64]	; (800eda4 <HAL_PCD_MspInit+0x100>)
 800ed64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ed68:	6593      	str	r3, [r2, #88]	; 0x58
 800ed6a:	4b0e      	ldr	r3, [pc, #56]	; (800eda4 <HAL_PCD_MspInit+0x100>)
 800ed6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ed72:	60fb      	str	r3, [r7, #12]
 800ed74:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800ed76:	f7fb f935 	bl	8009fe4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800ed7a:	4b0a      	ldr	r3, [pc, #40]	; (800eda4 <HAL_PCD_MspInit+0x100>)
 800ed7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed7e:	4a09      	ldr	r2, [pc, #36]	; (800eda4 <HAL_PCD_MspInit+0x100>)
 800ed80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ed84:	6593      	str	r3, [r2, #88]	; 0x58
 800ed86:	e001      	b.n	800ed8c <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800ed88:	f7fb f92c 	bl	8009fe4 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	2100      	movs	r1, #0
 800ed90:	2043      	movs	r0, #67	; 0x43
 800ed92:	f7f9 fcda 	bl	800874a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ed96:	2043      	movs	r0, #67	; 0x43
 800ed98:	f7f9 fcf3 	bl	8008782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ed9c:	bf00      	nop
 800ed9e:	37c8      	adds	r7, #200	; 0xc8
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}
 800eda4:	40021000 	.word	0x40021000

0800eda8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b082      	sub	sp, #8
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800edbc:	4619      	mov	r1, r3
 800edbe:	4610      	mov	r0, r2
 800edc0:	f7fe fc58 	bl	800d674 <USBD_LL_SetupStage>
}
 800edc4:	bf00      	nop
 800edc6:	3708      	adds	r7, #8
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}

0800edcc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b082      	sub	sp, #8
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
 800edd4:	460b      	mov	r3, r1
 800edd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800edde:	78fa      	ldrb	r2, [r7, #3]
 800ede0:	6879      	ldr	r1, [r7, #4]
 800ede2:	4613      	mov	r3, r2
 800ede4:	00db      	lsls	r3, r3, #3
 800ede6:	4413      	add	r3, r2
 800ede8:	009b      	lsls	r3, r3, #2
 800edea:	440b      	add	r3, r1
 800edec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800edf0:	681a      	ldr	r2, [r3, #0]
 800edf2:	78fb      	ldrb	r3, [r7, #3]
 800edf4:	4619      	mov	r1, r3
 800edf6:	f7fe fc92 	bl	800d71e <USBD_LL_DataOutStage>
}
 800edfa:	bf00      	nop
 800edfc:	3708      	adds	r7, #8
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}

0800ee02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee02:	b580      	push	{r7, lr}
 800ee04:	b082      	sub	sp, #8
 800ee06:	af00      	add	r7, sp, #0
 800ee08:	6078      	str	r0, [r7, #4]
 800ee0a:	460b      	mov	r3, r1
 800ee0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ee14:	78fa      	ldrb	r2, [r7, #3]
 800ee16:	6879      	ldr	r1, [r7, #4]
 800ee18:	4613      	mov	r3, r2
 800ee1a:	00db      	lsls	r3, r3, #3
 800ee1c:	4413      	add	r3, r2
 800ee1e:	009b      	lsls	r3, r3, #2
 800ee20:	440b      	add	r3, r1
 800ee22:	334c      	adds	r3, #76	; 0x4c
 800ee24:	681a      	ldr	r2, [r3, #0]
 800ee26:	78fb      	ldrb	r3, [r7, #3]
 800ee28:	4619      	mov	r1, r3
 800ee2a:	f7fe fcdb 	bl	800d7e4 <USBD_LL_DataInStage>
}
 800ee2e:	bf00      	nop
 800ee30:	3708      	adds	r7, #8
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}

0800ee36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee36:	b580      	push	{r7, lr}
 800ee38:	b082      	sub	sp, #8
 800ee3a:	af00      	add	r7, sp, #0
 800ee3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7fe fdef 	bl	800da28 <USBD_LL_SOF>
}
 800ee4a:	bf00      	nop
 800ee4c:	3708      	adds	r7, #8
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}

0800ee52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee52:	b580      	push	{r7, lr}
 800ee54:	b084      	sub	sp, #16
 800ee56:	af00      	add	r7, sp, #0
 800ee58:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ee5a:	2301      	movs	r3, #1
 800ee5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	68db      	ldr	r3, [r3, #12]
 800ee62:	2b02      	cmp	r3, #2
 800ee64:	d001      	beq.n	800ee6a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ee66:	f7f9 fa5f 	bl	8008328 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ee70:	7bfa      	ldrb	r2, [r7, #15]
 800ee72:	4611      	mov	r1, r2
 800ee74:	4618      	mov	r0, r3
 800ee76:	f7fe fd99 	bl	800d9ac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ee80:	4618      	mov	r0, r3
 800ee82:	f7fe fd45 	bl	800d910 <USBD_LL_Reset>
}
 800ee86:	bf00      	nop
 800ee88:	3710      	adds	r7, #16
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
	...

0800ee90 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b082      	sub	sp, #8
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	687a      	ldr	r2, [r7, #4]
 800eea4:	6812      	ldr	r2, [r2, #0]
 800eea6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800eeaa:	f043 0301 	orr.w	r3, r3, #1
 800eeae:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f7fe fd88 	bl	800d9cc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	6a1b      	ldr	r3, [r3, #32]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d005      	beq.n	800eed0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eec4:	4b04      	ldr	r3, [pc, #16]	; (800eed8 <HAL_PCD_SuspendCallback+0x48>)
 800eec6:	691b      	ldr	r3, [r3, #16]
 800eec8:	4a03      	ldr	r2, [pc, #12]	; (800eed8 <HAL_PCD_SuspendCallback+0x48>)
 800eeca:	f043 0306 	orr.w	r3, r3, #6
 800eece:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800eed0:	bf00      	nop
 800eed2:	3708      	adds	r7, #8
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}
 800eed8:	e000ed00 	.word	0xe000ed00

0800eedc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b082      	sub	sp, #8
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	687a      	ldr	r2, [r7, #4]
 800eef0:	6812      	ldr	r2, [r2, #0]
 800eef2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800eef6:	f023 0301 	bic.w	r3, r3, #1
 800eefa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	6a1b      	ldr	r3, [r3, #32]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d007      	beq.n	800ef14 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ef04:	4b08      	ldr	r3, [pc, #32]	; (800ef28 <HAL_PCD_ResumeCallback+0x4c>)
 800ef06:	691b      	ldr	r3, [r3, #16]
 800ef08:	4a07      	ldr	r2, [pc, #28]	; (800ef28 <HAL_PCD_ResumeCallback+0x4c>)
 800ef0a:	f023 0306 	bic.w	r3, r3, #6
 800ef0e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ef10:	f000 faf4 	bl	800f4fc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f7fe fd6c 	bl	800d9f8 <USBD_LL_Resume>
}
 800ef20:	bf00      	nop
 800ef22:	3708      	adds	r7, #8
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}
 800ef28:	e000ed00 	.word	0xe000ed00

0800ef2c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b082      	sub	sp, #8
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
 800ef34:	460b      	mov	r3, r1
 800ef36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef3e:	78fa      	ldrb	r2, [r7, #3]
 800ef40:	4611      	mov	r1, r2
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7fe fdb8 	bl	800dab8 <USBD_LL_IsoOUTIncomplete>
}
 800ef48:	bf00      	nop
 800ef4a:	3708      	adds	r7, #8
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}

0800ef50 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b082      	sub	sp, #8
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
 800ef58:	460b      	mov	r3, r1
 800ef5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef62:	78fa      	ldrb	r2, [r7, #3]
 800ef64:	4611      	mov	r1, r2
 800ef66:	4618      	mov	r0, r3
 800ef68:	f7fe fd80 	bl	800da6c <USBD_LL_IsoINIncomplete>
}
 800ef6c:	bf00      	nop
 800ef6e:	3708      	adds	r7, #8
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}

0800ef74 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b082      	sub	sp, #8
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef82:	4618      	mov	r0, r3
 800ef84:	f7fe fdbe 	bl	800db04 <USBD_LL_DevConnected>
}
 800ef88:	bf00      	nop
 800ef8a:	3708      	adds	r7, #8
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}

0800ef90 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b082      	sub	sp, #8
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f7fe fdbb 	bl	800db1a <USBD_LL_DevDisconnected>
}
 800efa4:	bf00      	nop
 800efa6:	3708      	adds	r7, #8
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bd80      	pop	{r7, pc}

0800efac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b082      	sub	sp, #8
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	781b      	ldrb	r3, [r3, #0]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d139      	bne.n	800f030 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800efbc:	4a1f      	ldr	r2, [pc, #124]	; (800f03c <USBD_LL_Init+0x90>)
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	4a1d      	ldr	r2, [pc, #116]	; (800f03c <USBD_LL_Init+0x90>)
 800efc8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800efcc:	4b1b      	ldr	r3, [pc, #108]	; (800f03c <USBD_LL_Init+0x90>)
 800efce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800efd2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800efd4:	4b19      	ldr	r3, [pc, #100]	; (800f03c <USBD_LL_Init+0x90>)
 800efd6:	2206      	movs	r2, #6
 800efd8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800efda:	4b18      	ldr	r3, [pc, #96]	; (800f03c <USBD_LL_Init+0x90>)
 800efdc:	2202      	movs	r2, #2
 800efde:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800efe0:	4b16      	ldr	r3, [pc, #88]	; (800f03c <USBD_LL_Init+0x90>)
 800efe2:	2200      	movs	r2, #0
 800efe4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800efe6:	4b15      	ldr	r3, [pc, #84]	; (800f03c <USBD_LL_Init+0x90>)
 800efe8:	2200      	movs	r2, #0
 800efea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800efec:	4b13      	ldr	r3, [pc, #76]	; (800f03c <USBD_LL_Init+0x90>)
 800efee:	2200      	movs	r2, #0
 800eff0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800eff2:	4b12      	ldr	r3, [pc, #72]	; (800f03c <USBD_LL_Init+0x90>)
 800eff4:	2200      	movs	r2, #0
 800eff6:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800eff8:	4b10      	ldr	r3, [pc, #64]	; (800f03c <USBD_LL_Init+0x90>)
 800effa:	2200      	movs	r2, #0
 800effc:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800effe:	4b0f      	ldr	r3, [pc, #60]	; (800f03c <USBD_LL_Init+0x90>)
 800f000:	2200      	movs	r2, #0
 800f002:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f004:	480d      	ldr	r0, [pc, #52]	; (800f03c <USBD_LL_Init+0x90>)
 800f006:	f7f9 fd69 	bl	8008adc <HAL_PCD_Init>
 800f00a:	4603      	mov	r3, r0
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d001      	beq.n	800f014 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800f010:	f7f9 f98a 	bl	8008328 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f014:	2180      	movs	r1, #128	; 0x80
 800f016:	4809      	ldr	r0, [pc, #36]	; (800f03c <USBD_LL_Init+0x90>)
 800f018:	f7fa feeb 	bl	8009df2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f01c:	2240      	movs	r2, #64	; 0x40
 800f01e:	2100      	movs	r1, #0
 800f020:	4806      	ldr	r0, [pc, #24]	; (800f03c <USBD_LL_Init+0x90>)
 800f022:	f7fa fe9f 	bl	8009d64 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f026:	2280      	movs	r2, #128	; 0x80
 800f028:	2101      	movs	r1, #1
 800f02a:	4804      	ldr	r0, [pc, #16]	; (800f03c <USBD_LL_Init+0x90>)
 800f02c:	f7fa fe9a 	bl	8009d64 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f030:	2300      	movs	r3, #0
}
 800f032:	4618      	mov	r0, r3
 800f034:	3708      	adds	r7, #8
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}
 800f03a:	bf00      	nop
 800f03c:	20001684 	.word	0x20001684

0800f040 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b084      	sub	sp, #16
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f048:	2300      	movs	r3, #0
 800f04a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f04c:	2300      	movs	r3, #0
 800f04e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f056:	4618      	mov	r0, r3
 800f058:	f7f9 fe64 	bl	8008d24 <HAL_PCD_Start>
 800f05c:	4603      	mov	r3, r0
 800f05e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f060:	7bbb      	ldrb	r3, [r7, #14]
 800f062:	2b03      	cmp	r3, #3
 800f064:	d816      	bhi.n	800f094 <USBD_LL_Start+0x54>
 800f066:	a201      	add	r2, pc, #4	; (adr r2, 800f06c <USBD_LL_Start+0x2c>)
 800f068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f06c:	0800f07d 	.word	0x0800f07d
 800f070:	0800f083 	.word	0x0800f083
 800f074:	0800f089 	.word	0x0800f089
 800f078:	0800f08f 	.word	0x0800f08f
    case HAL_OK :
      usb_status = USBD_OK;
 800f07c:	2300      	movs	r3, #0
 800f07e:	73fb      	strb	r3, [r7, #15]
    break;
 800f080:	e00b      	b.n	800f09a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f082:	2303      	movs	r3, #3
 800f084:	73fb      	strb	r3, [r7, #15]
    break;
 800f086:	e008      	b.n	800f09a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f088:	2301      	movs	r3, #1
 800f08a:	73fb      	strb	r3, [r7, #15]
    break;
 800f08c:	e005      	b.n	800f09a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f08e:	2303      	movs	r3, #3
 800f090:	73fb      	strb	r3, [r7, #15]
    break;
 800f092:	e002      	b.n	800f09a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800f094:	2303      	movs	r3, #3
 800f096:	73fb      	strb	r3, [r7, #15]
    break;
 800f098:	bf00      	nop
  }
  return usb_status;
 800f09a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f09c:	4618      	mov	r0, r3
 800f09e:	3710      	adds	r7, #16
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}

0800f0a4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b084      	sub	sp, #16
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	4608      	mov	r0, r1
 800f0ae:	4611      	mov	r1, r2
 800f0b0:	461a      	mov	r2, r3
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	70fb      	strb	r3, [r7, #3]
 800f0b6:	460b      	mov	r3, r1
 800f0b8:	70bb      	strb	r3, [r7, #2]
 800f0ba:	4613      	mov	r3, r2
 800f0bc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f0cc:	78bb      	ldrb	r3, [r7, #2]
 800f0ce:	883a      	ldrh	r2, [r7, #0]
 800f0d0:	78f9      	ldrb	r1, [r7, #3]
 800f0d2:	f7fa fb0e 	bl	80096f2 <HAL_PCD_EP_Open>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f0da:	7bbb      	ldrb	r3, [r7, #14]
 800f0dc:	2b03      	cmp	r3, #3
 800f0de:	d817      	bhi.n	800f110 <USBD_LL_OpenEP+0x6c>
 800f0e0:	a201      	add	r2, pc, #4	; (adr r2, 800f0e8 <USBD_LL_OpenEP+0x44>)
 800f0e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0e6:	bf00      	nop
 800f0e8:	0800f0f9 	.word	0x0800f0f9
 800f0ec:	0800f0ff 	.word	0x0800f0ff
 800f0f0:	0800f105 	.word	0x0800f105
 800f0f4:	0800f10b 	.word	0x0800f10b
    case HAL_OK :
      usb_status = USBD_OK;
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	73fb      	strb	r3, [r7, #15]
    break;
 800f0fc:	e00b      	b.n	800f116 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f0fe:	2303      	movs	r3, #3
 800f100:	73fb      	strb	r3, [r7, #15]
    break;
 800f102:	e008      	b.n	800f116 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f104:	2301      	movs	r3, #1
 800f106:	73fb      	strb	r3, [r7, #15]
    break;
 800f108:	e005      	b.n	800f116 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f10a:	2303      	movs	r3, #3
 800f10c:	73fb      	strb	r3, [r7, #15]
    break;
 800f10e:	e002      	b.n	800f116 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800f110:	2303      	movs	r3, #3
 800f112:	73fb      	strb	r3, [r7, #15]
    break;
 800f114:	bf00      	nop
  }
  return usb_status;
 800f116:	7bfb      	ldrb	r3, [r7, #15]
}
 800f118:	4618      	mov	r0, r3
 800f11a:	3710      	adds	r7, #16
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd80      	pop	{r7, pc}

0800f120 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b084      	sub	sp, #16
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
 800f128:	460b      	mov	r3, r1
 800f12a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f12c:	2300      	movs	r3, #0
 800f12e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f130:	2300      	movs	r3, #0
 800f132:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f13a:	78fa      	ldrb	r2, [r7, #3]
 800f13c:	4611      	mov	r1, r2
 800f13e:	4618      	mov	r0, r3
 800f140:	f7fa fb3f 	bl	80097c2 <HAL_PCD_EP_Close>
 800f144:	4603      	mov	r3, r0
 800f146:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f148:	7bbb      	ldrb	r3, [r7, #14]
 800f14a:	2b03      	cmp	r3, #3
 800f14c:	d816      	bhi.n	800f17c <USBD_LL_CloseEP+0x5c>
 800f14e:	a201      	add	r2, pc, #4	; (adr r2, 800f154 <USBD_LL_CloseEP+0x34>)
 800f150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f154:	0800f165 	.word	0x0800f165
 800f158:	0800f16b 	.word	0x0800f16b
 800f15c:	0800f171 	.word	0x0800f171
 800f160:	0800f177 	.word	0x0800f177
    case HAL_OK :
      usb_status = USBD_OK;
 800f164:	2300      	movs	r3, #0
 800f166:	73fb      	strb	r3, [r7, #15]
    break;
 800f168:	e00b      	b.n	800f182 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f16a:	2303      	movs	r3, #3
 800f16c:	73fb      	strb	r3, [r7, #15]
    break;
 800f16e:	e008      	b.n	800f182 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f170:	2301      	movs	r3, #1
 800f172:	73fb      	strb	r3, [r7, #15]
    break;
 800f174:	e005      	b.n	800f182 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f176:	2303      	movs	r3, #3
 800f178:	73fb      	strb	r3, [r7, #15]
    break;
 800f17a:	e002      	b.n	800f182 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f17c:	2303      	movs	r3, #3
 800f17e:	73fb      	strb	r3, [r7, #15]
    break;
 800f180:	bf00      	nop
  }
  return usb_status;
 800f182:	7bfb      	ldrb	r3, [r7, #15]
}
 800f184:	4618      	mov	r0, r3
 800f186:	3710      	adds	r7, #16
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}

0800f18c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b084      	sub	sp, #16
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
 800f194:	460b      	mov	r3, r1
 800f196:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f198:	2300      	movs	r3, #0
 800f19a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f19c:	2300      	movs	r3, #0
 800f19e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f1a6:	78fa      	ldrb	r2, [r7, #3]
 800f1a8:	4611      	mov	r1, r2
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f7fa fbe6 	bl	800997c <HAL_PCD_EP_SetStall>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f1b4:	7bbb      	ldrb	r3, [r7, #14]
 800f1b6:	2b03      	cmp	r3, #3
 800f1b8:	d816      	bhi.n	800f1e8 <USBD_LL_StallEP+0x5c>
 800f1ba:	a201      	add	r2, pc, #4	; (adr r2, 800f1c0 <USBD_LL_StallEP+0x34>)
 800f1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1c0:	0800f1d1 	.word	0x0800f1d1
 800f1c4:	0800f1d7 	.word	0x0800f1d7
 800f1c8:	0800f1dd 	.word	0x0800f1dd
 800f1cc:	0800f1e3 	.word	0x0800f1e3
    case HAL_OK :
      usb_status = USBD_OK;
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	73fb      	strb	r3, [r7, #15]
    break;
 800f1d4:	e00b      	b.n	800f1ee <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f1d6:	2303      	movs	r3, #3
 800f1d8:	73fb      	strb	r3, [r7, #15]
    break;
 800f1da:	e008      	b.n	800f1ee <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f1dc:	2301      	movs	r3, #1
 800f1de:	73fb      	strb	r3, [r7, #15]
    break;
 800f1e0:	e005      	b.n	800f1ee <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f1e2:	2303      	movs	r3, #3
 800f1e4:	73fb      	strb	r3, [r7, #15]
    break;
 800f1e6:	e002      	b.n	800f1ee <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f1e8:	2303      	movs	r3, #3
 800f1ea:	73fb      	strb	r3, [r7, #15]
    break;
 800f1ec:	bf00      	nop
  }
  return usb_status;
 800f1ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	3710      	adds	r7, #16
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bd80      	pop	{r7, pc}

0800f1f8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b084      	sub	sp, #16
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
 800f200:	460b      	mov	r3, r1
 800f202:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f204:	2300      	movs	r3, #0
 800f206:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f208:	2300      	movs	r3, #0
 800f20a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f212:	78fa      	ldrb	r2, [r7, #3]
 800f214:	4611      	mov	r1, r2
 800f216:	4618      	mov	r0, r3
 800f218:	f7fa fc12 	bl	8009a40 <HAL_PCD_EP_ClrStall>
 800f21c:	4603      	mov	r3, r0
 800f21e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f220:	7bbb      	ldrb	r3, [r7, #14]
 800f222:	2b03      	cmp	r3, #3
 800f224:	d816      	bhi.n	800f254 <USBD_LL_ClearStallEP+0x5c>
 800f226:	a201      	add	r2, pc, #4	; (adr r2, 800f22c <USBD_LL_ClearStallEP+0x34>)
 800f228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f22c:	0800f23d 	.word	0x0800f23d
 800f230:	0800f243 	.word	0x0800f243
 800f234:	0800f249 	.word	0x0800f249
 800f238:	0800f24f 	.word	0x0800f24f
    case HAL_OK :
      usb_status = USBD_OK;
 800f23c:	2300      	movs	r3, #0
 800f23e:	73fb      	strb	r3, [r7, #15]
    break;
 800f240:	e00b      	b.n	800f25a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f242:	2303      	movs	r3, #3
 800f244:	73fb      	strb	r3, [r7, #15]
    break;
 800f246:	e008      	b.n	800f25a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f248:	2301      	movs	r3, #1
 800f24a:	73fb      	strb	r3, [r7, #15]
    break;
 800f24c:	e005      	b.n	800f25a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f24e:	2303      	movs	r3, #3
 800f250:	73fb      	strb	r3, [r7, #15]
    break;
 800f252:	e002      	b.n	800f25a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f254:	2303      	movs	r3, #3
 800f256:	73fb      	strb	r3, [r7, #15]
    break;
 800f258:	bf00      	nop
  }
  return usb_status;
 800f25a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f25c:	4618      	mov	r0, r3
 800f25e:	3710      	adds	r7, #16
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}

0800f264 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f264:	b480      	push	{r7}
 800f266:	b085      	sub	sp, #20
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
 800f26c:	460b      	mov	r3, r1
 800f26e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f276:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f278:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	da0b      	bge.n	800f298 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f280:	78fb      	ldrb	r3, [r7, #3]
 800f282:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f286:	68f9      	ldr	r1, [r7, #12]
 800f288:	4613      	mov	r3, r2
 800f28a:	00db      	lsls	r3, r3, #3
 800f28c:	4413      	add	r3, r2
 800f28e:	009b      	lsls	r3, r3, #2
 800f290:	440b      	add	r3, r1
 800f292:	333e      	adds	r3, #62	; 0x3e
 800f294:	781b      	ldrb	r3, [r3, #0]
 800f296:	e00b      	b.n	800f2b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f298:	78fb      	ldrb	r3, [r7, #3]
 800f29a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f29e:	68f9      	ldr	r1, [r7, #12]
 800f2a0:	4613      	mov	r3, r2
 800f2a2:	00db      	lsls	r3, r3, #3
 800f2a4:	4413      	add	r3, r2
 800f2a6:	009b      	lsls	r3, r3, #2
 800f2a8:	440b      	add	r3, r1
 800f2aa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f2ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	3714      	adds	r7, #20
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ba:	4770      	bx	lr

0800f2bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b084      	sub	sp, #16
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
 800f2c4:	460b      	mov	r3, r1
 800f2c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f2d6:	78fa      	ldrb	r2, [r7, #3]
 800f2d8:	4611      	mov	r1, r2
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f7fa f9e4 	bl	80096a8 <HAL_PCD_SetAddress>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f2e4:	7bbb      	ldrb	r3, [r7, #14]
 800f2e6:	2b03      	cmp	r3, #3
 800f2e8:	d816      	bhi.n	800f318 <USBD_LL_SetUSBAddress+0x5c>
 800f2ea:	a201      	add	r2, pc, #4	; (adr r2, 800f2f0 <USBD_LL_SetUSBAddress+0x34>)
 800f2ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2f0:	0800f301 	.word	0x0800f301
 800f2f4:	0800f307 	.word	0x0800f307
 800f2f8:	0800f30d 	.word	0x0800f30d
 800f2fc:	0800f313 	.word	0x0800f313
    case HAL_OK :
      usb_status = USBD_OK;
 800f300:	2300      	movs	r3, #0
 800f302:	73fb      	strb	r3, [r7, #15]
    break;
 800f304:	e00b      	b.n	800f31e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f306:	2303      	movs	r3, #3
 800f308:	73fb      	strb	r3, [r7, #15]
    break;
 800f30a:	e008      	b.n	800f31e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f30c:	2301      	movs	r3, #1
 800f30e:	73fb      	strb	r3, [r7, #15]
    break;
 800f310:	e005      	b.n	800f31e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f312:	2303      	movs	r3, #3
 800f314:	73fb      	strb	r3, [r7, #15]
    break;
 800f316:	e002      	b.n	800f31e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800f318:	2303      	movs	r3, #3
 800f31a:	73fb      	strb	r3, [r7, #15]
    break;
 800f31c:	bf00      	nop
  }
  return usb_status;
 800f31e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f320:	4618      	mov	r0, r3
 800f322:	3710      	adds	r7, #16
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}

0800f328 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b086      	sub	sp, #24
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	60f8      	str	r0, [r7, #12]
 800f330:	607a      	str	r2, [r7, #4]
 800f332:	603b      	str	r3, [r7, #0]
 800f334:	460b      	mov	r3, r1
 800f336:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f338:	2300      	movs	r3, #0
 800f33a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f33c:	2300      	movs	r3, #0
 800f33e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f346:	7af9      	ldrb	r1, [r7, #11]
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	687a      	ldr	r2, [r7, #4]
 800f34c:	f7fa fad9 	bl	8009902 <HAL_PCD_EP_Transmit>
 800f350:	4603      	mov	r3, r0
 800f352:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800f354:	7dbb      	ldrb	r3, [r7, #22]
 800f356:	2b03      	cmp	r3, #3
 800f358:	d816      	bhi.n	800f388 <USBD_LL_Transmit+0x60>
 800f35a:	a201      	add	r2, pc, #4	; (adr r2, 800f360 <USBD_LL_Transmit+0x38>)
 800f35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f360:	0800f371 	.word	0x0800f371
 800f364:	0800f377 	.word	0x0800f377
 800f368:	0800f37d 	.word	0x0800f37d
 800f36c:	0800f383 	.word	0x0800f383
    case HAL_OK :
      usb_status = USBD_OK;
 800f370:	2300      	movs	r3, #0
 800f372:	75fb      	strb	r3, [r7, #23]
    break;
 800f374:	e00b      	b.n	800f38e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f376:	2303      	movs	r3, #3
 800f378:	75fb      	strb	r3, [r7, #23]
    break;
 800f37a:	e008      	b.n	800f38e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f37c:	2301      	movs	r3, #1
 800f37e:	75fb      	strb	r3, [r7, #23]
    break;
 800f380:	e005      	b.n	800f38e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f382:	2303      	movs	r3, #3
 800f384:	75fb      	strb	r3, [r7, #23]
    break;
 800f386:	e002      	b.n	800f38e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800f388:	2303      	movs	r3, #3
 800f38a:	75fb      	strb	r3, [r7, #23]
    break;
 800f38c:	bf00      	nop
  }
  return usb_status;
 800f38e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f390:	4618      	mov	r0, r3
 800f392:	3718      	adds	r7, #24
 800f394:	46bd      	mov	sp, r7
 800f396:	bd80      	pop	{r7, pc}

0800f398 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b086      	sub	sp, #24
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	60f8      	str	r0, [r7, #12]
 800f3a0:	607a      	str	r2, [r7, #4]
 800f3a2:	603b      	str	r3, [r7, #0]
 800f3a4:	460b      	mov	r3, r1
 800f3a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f3b6:	7af9      	ldrb	r1, [r7, #11]
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	687a      	ldr	r2, [r7, #4]
 800f3bc:	f7fa fa4b 	bl	8009856 <HAL_PCD_EP_Receive>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800f3c4:	7dbb      	ldrb	r3, [r7, #22]
 800f3c6:	2b03      	cmp	r3, #3
 800f3c8:	d816      	bhi.n	800f3f8 <USBD_LL_PrepareReceive+0x60>
 800f3ca:	a201      	add	r2, pc, #4	; (adr r2, 800f3d0 <USBD_LL_PrepareReceive+0x38>)
 800f3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3d0:	0800f3e1 	.word	0x0800f3e1
 800f3d4:	0800f3e7 	.word	0x0800f3e7
 800f3d8:	0800f3ed 	.word	0x0800f3ed
 800f3dc:	0800f3f3 	.word	0x0800f3f3
    case HAL_OK :
      usb_status = USBD_OK;
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	75fb      	strb	r3, [r7, #23]
    break;
 800f3e4:	e00b      	b.n	800f3fe <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f3e6:	2303      	movs	r3, #3
 800f3e8:	75fb      	strb	r3, [r7, #23]
    break;
 800f3ea:	e008      	b.n	800f3fe <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f3ec:	2301      	movs	r3, #1
 800f3ee:	75fb      	strb	r3, [r7, #23]
    break;
 800f3f0:	e005      	b.n	800f3fe <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f3f2:	2303      	movs	r3, #3
 800f3f4:	75fb      	strb	r3, [r7, #23]
    break;
 800f3f6:	e002      	b.n	800f3fe <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800f3f8:	2303      	movs	r3, #3
 800f3fa:	75fb      	strb	r3, [r7, #23]
    break;
 800f3fc:	bf00      	nop
  }
  return usb_status;
 800f3fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800f400:	4618      	mov	r0, r3
 800f402:	3718      	adds	r7, #24
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}

0800f408 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b082      	sub	sp, #8
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	460b      	mov	r3, r1
 800f412:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f41a:	78fa      	ldrb	r2, [r7, #3]
 800f41c:	4611      	mov	r1, r2
 800f41e:	4618      	mov	r0, r3
 800f420:	f7fa fa57 	bl	80098d2 <HAL_PCD_EP_GetRxCount>
 800f424:	4603      	mov	r3, r0
}
 800f426:	4618      	mov	r0, r3
 800f428:	3708      	adds	r7, #8
 800f42a:	46bd      	mov	sp, r7
 800f42c:	bd80      	pop	{r7, pc}
	...

0800f430 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b082      	sub	sp, #8
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
 800f438:	460b      	mov	r3, r1
 800f43a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800f43c:	78fb      	ldrb	r3, [r7, #3]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d002      	beq.n	800f448 <HAL_PCDEx_LPM_Callback+0x18>
 800f442:	2b01      	cmp	r3, #1
 800f444:	d01f      	beq.n	800f486 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800f446:	e03b      	b.n	800f4c0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	6a1b      	ldr	r3, [r3, #32]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d007      	beq.n	800f460 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f450:	f000 f854 	bl	800f4fc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f454:	4b1c      	ldr	r3, [pc, #112]	; (800f4c8 <HAL_PCDEx_LPM_Callback+0x98>)
 800f456:	691b      	ldr	r3, [r3, #16]
 800f458:	4a1b      	ldr	r2, [pc, #108]	; (800f4c8 <HAL_PCDEx_LPM_Callback+0x98>)
 800f45a:	f023 0306 	bic.w	r3, r3, #6
 800f45e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	687a      	ldr	r2, [r7, #4]
 800f46c:	6812      	ldr	r2, [r2, #0]
 800f46e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f472:	f023 0301 	bic.w	r3, r3, #1
 800f476:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f47e:	4618      	mov	r0, r3
 800f480:	f7fe faba 	bl	800d9f8 <USBD_LL_Resume>
    break;
 800f484:	e01c      	b.n	800f4c0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	687a      	ldr	r2, [r7, #4]
 800f492:	6812      	ldr	r2, [r2, #0]
 800f494:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f498:	f043 0301 	orr.w	r3, r3, #1
 800f49c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f7fe fa91 	bl	800d9cc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	6a1b      	ldr	r3, [r3, #32]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d005      	beq.n	800f4be <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f4b2:	4b05      	ldr	r3, [pc, #20]	; (800f4c8 <HAL_PCDEx_LPM_Callback+0x98>)
 800f4b4:	691b      	ldr	r3, [r3, #16]
 800f4b6:	4a04      	ldr	r2, [pc, #16]	; (800f4c8 <HAL_PCDEx_LPM_Callback+0x98>)
 800f4b8:	f043 0306 	orr.w	r3, r3, #6
 800f4bc:	6113      	str	r3, [r2, #16]
    break;
 800f4be:	bf00      	nop
}
 800f4c0:	bf00      	nop
 800f4c2:	3708      	adds	r7, #8
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}
 800f4c8:	e000ed00 	.word	0xe000ed00

0800f4cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	b083      	sub	sp, #12
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f4d4:	4b03      	ldr	r3, [pc, #12]	; (800f4e4 <USBD_static_malloc+0x18>)
}
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	370c      	adds	r7, #12
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e0:	4770      	bx	lr
 800f4e2:	bf00      	nop
 800f4e4:	20001b90 	.word	0x20001b90

0800f4e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f4e8:	b480      	push	{r7}
 800f4ea:	b083      	sub	sp, #12
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]

}
 800f4f0:	bf00      	nop
 800f4f2:	370c      	adds	r7, #12
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fa:	4770      	bx	lr

0800f4fc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f500:	f7f8 fe87 	bl	8008212 <SystemClock_Config>
}
 800f504:	bf00      	nop
 800f506:	bd80      	pop	{r7, pc}

0800f508 <__libc_init_array>:
 800f508:	b570      	push	{r4, r5, r6, lr}
 800f50a:	4d0d      	ldr	r5, [pc, #52]	; (800f540 <__libc_init_array+0x38>)
 800f50c:	4c0d      	ldr	r4, [pc, #52]	; (800f544 <__libc_init_array+0x3c>)
 800f50e:	1b64      	subs	r4, r4, r5
 800f510:	10a4      	asrs	r4, r4, #2
 800f512:	2600      	movs	r6, #0
 800f514:	42a6      	cmp	r6, r4
 800f516:	d109      	bne.n	800f52c <__libc_init_array+0x24>
 800f518:	4d0b      	ldr	r5, [pc, #44]	; (800f548 <__libc_init_array+0x40>)
 800f51a:	4c0c      	ldr	r4, [pc, #48]	; (800f54c <__libc_init_array+0x44>)
 800f51c:	f000 f820 	bl	800f560 <_init>
 800f520:	1b64      	subs	r4, r4, r5
 800f522:	10a4      	asrs	r4, r4, #2
 800f524:	2600      	movs	r6, #0
 800f526:	42a6      	cmp	r6, r4
 800f528:	d105      	bne.n	800f536 <__libc_init_array+0x2e>
 800f52a:	bd70      	pop	{r4, r5, r6, pc}
 800f52c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f530:	4798      	blx	r3
 800f532:	3601      	adds	r6, #1
 800f534:	e7ee      	b.n	800f514 <__libc_init_array+0xc>
 800f536:	f855 3b04 	ldr.w	r3, [r5], #4
 800f53a:	4798      	blx	r3
 800f53c:	3601      	adds	r6, #1
 800f53e:	e7f2      	b.n	800f526 <__libc_init_array+0x1e>
 800f540:	0800f600 	.word	0x0800f600
 800f544:	0800f600 	.word	0x0800f600
 800f548:	0800f600 	.word	0x0800f600
 800f54c:	0800f604 	.word	0x0800f604

0800f550 <memset>:
 800f550:	4402      	add	r2, r0
 800f552:	4603      	mov	r3, r0
 800f554:	4293      	cmp	r3, r2
 800f556:	d100      	bne.n	800f55a <memset+0xa>
 800f558:	4770      	bx	lr
 800f55a:	f803 1b01 	strb.w	r1, [r3], #1
 800f55e:	e7f9      	b.n	800f554 <memset+0x4>

0800f560 <_init>:
 800f560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f562:	bf00      	nop
 800f564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f566:	bc08      	pop	{r3}
 800f568:	469e      	mov	lr, r3
 800f56a:	4770      	bx	lr

0800f56c <_fini>:
 800f56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f56e:	bf00      	nop
 800f570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f572:	bc08      	pop	{r3}
 800f574:	469e      	mov	lr, r3
 800f576:	4770      	bx	lr
