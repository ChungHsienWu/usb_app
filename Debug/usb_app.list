
usb_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000794c  081001c0  081001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08107b0c  08107b0c  00017b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08107b88  08107b88  000201b0  2**0
                  CONTENTS
  4 .ARM          00000000  08107b88  08107b88  000201b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08107b88  08107b88  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08107b88  08107b88  00017b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08107b8c  08107b8c  00017b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b0  20000000  08107b90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c20  200001b0  08107d40  000201b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001dd0  08107d40  00021dd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011828  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003533  00000000  00000000  00031a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00034f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de0  00000000  00000000  00035ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032c63  00000000  00000000  00036c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000137a6  00000000  00000000  000698eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00120d57  00000000  00000000  0007d091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019dde8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ce8  00000000  00000000  0019de38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081001c0 <__do_global_dtors_aux>:
 81001c0:	b510      	push	{r4, lr}
 81001c2:	4c05      	ldr	r4, [pc, #20]	; (81001d8 <__do_global_dtors_aux+0x18>)
 81001c4:	7823      	ldrb	r3, [r4, #0]
 81001c6:	b933      	cbnz	r3, 81001d6 <__do_global_dtors_aux+0x16>
 81001c8:	4b04      	ldr	r3, [pc, #16]	; (81001dc <__do_global_dtors_aux+0x1c>)
 81001ca:	b113      	cbz	r3, 81001d2 <__do_global_dtors_aux+0x12>
 81001cc:	4804      	ldr	r0, [pc, #16]	; (81001e0 <__do_global_dtors_aux+0x20>)
 81001ce:	f3af 8000 	nop.w
 81001d2:	2301      	movs	r3, #1
 81001d4:	7023      	strb	r3, [r4, #0]
 81001d6:	bd10      	pop	{r4, pc}
 81001d8:	200001b0 	.word	0x200001b0
 81001dc:	00000000 	.word	0x00000000
 81001e0:	08107af4 	.word	0x08107af4

081001e4 <frame_dummy>:
 81001e4:	b508      	push	{r3, lr}
 81001e6:	4b03      	ldr	r3, [pc, #12]	; (81001f4 <frame_dummy+0x10>)
 81001e8:	b11b      	cbz	r3, 81001f2 <frame_dummy+0xe>
 81001ea:	4903      	ldr	r1, [pc, #12]	; (81001f8 <frame_dummy+0x14>)
 81001ec:	4803      	ldr	r0, [pc, #12]	; (81001fc <frame_dummy+0x18>)
 81001ee:	f3af 8000 	nop.w
 81001f2:	bd08      	pop	{r3, pc}
 81001f4:	00000000 	.word	0x00000000
 81001f8:	200001b4 	.word	0x200001b4
 81001fc:	08107af4 	.word	0x08107af4

08100200 <FlashErase>:
 * Function unlocks the flash memory, erases the specified page, and then locks the flash memory again.
 * 		@ PageAddress: Address of the flash page to be erased. The address must be aligned to the start of a flash page.
 * 		@ Return: HAL Status. HAL_OK if the operation is successful, otherwise an error code.
 */
HAL_StatusTypeDef FlashErase(uint32_t PageAddress)
{
 8100200:	b580      	push	{r7, lr}
 8100202:	b088      	sub	sp, #32
 8100204:	af00      	add	r7, sp, #0
 8100206:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PageError = 0;
 8100208:	2300      	movs	r3, #0
 810020a:	60bb      	str	r3, [r7, #8]
	// Unlock the Flash to enable the flash control register access
	HAL_FLASH_Unlock();
 810020c:	f000 fbac 	bl	8100968 <HAL_FLASH_Unlock>
	// Config EraseInit structure
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8100210:	2300      	movs	r3, #0
 8100212:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.Banks = FLASH_BANK_1;
 8100214:	2301      	movs	r3, #1
 8100216:	613b      	str	r3, [r7, #16]
	EraseInitStruct.Page = (PageAddress - FLASH_BASE_ADDR) / FLASH_PAGE_SIZE;
 8100218:	687b      	ldr	r3, [r7, #4]
 810021a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 810021e:	0b1b      	lsrs	r3, r3, #12
 8100220:	617b      	str	r3, [r7, #20]

	// Erase the specified flash page
	status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8100222:	f107 0208 	add.w	r2, r7, #8
 8100226:	f107 030c 	add.w	r3, r7, #12
 810022a:	4611      	mov	r1, r2
 810022c:	4618      	mov	r0, r3
 810022e:	f000 fc81 	bl	8100b34 <HAL_FLASHEx_Erase>
 8100232:	4603      	mov	r3, r0
 8100234:	77fb      	strb	r3, [r7, #31]
	// Lock the Flash to disable the flash control register access
	HAL_FLASH_Lock();
 8100236:	f000 fbb9 	bl	81009ac <HAL_FLASH_Lock>

	return status;
 810023a:	7ffb      	ldrb	r3, [r7, #31]
}
 810023c:	4618      	mov	r0, r3
 810023e:	3720      	adds	r7, #32
 8100240:	46bd      	mov	sp, r7
 8100242:	bd80      	pop	{r7, pc}

08100244 <FlashWrite>:
 * 		@ Data: Data to be written to flash memory. This must be a 64-bit value.
 * 		@ Return: HAL Status. HAL_OK if the operation is successful, otherwise an error code.
 *
 */
HAL_StatusTypeDef FlashWrite(uint32_t Address, uint32_t Data)
{
 8100244:	b5b0      	push	{r4, r5, r7, lr}
 8100246:	b084      	sub	sp, #16
 8100248:	af00      	add	r7, sp, #0
 810024a:	6078      	str	r0, [r7, #4]
 810024c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
	// Unlock the Flash to enable the flash control register access
	HAL_FLASH_Unlock();
 810024e:	f000 fb8b 	bl	8100968 <HAL_FLASH_Unlock>
	// Program the specified address with the data
	status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Data);
 8100252:	683b      	ldr	r3, [r7, #0]
 8100254:	2200      	movs	r2, #0
 8100256:	461c      	mov	r4, r3
 8100258:	4615      	mov	r5, r2
 810025a:	4622      	mov	r2, r4
 810025c:	462b      	mov	r3, r5
 810025e:	6879      	ldr	r1, [r7, #4]
 8100260:	2000      	movs	r0, #0
 8100262:	f000 fb15 	bl	8100890 <HAL_FLASH_Program>
 8100266:	4603      	mov	r3, r0
 8100268:	73fb      	strb	r3, [r7, #15]
	// Lock the Flash to disable the flash control register access
	HAL_FLASH_Lock();
 810026a:	f000 fb9f 	bl	81009ac <HAL_FLASH_Lock>

	return status;
 810026e:	7bfb      	ldrb	r3, [r7, #15]
}
 8100270:	4618      	mov	r0, r3
 8100272:	3710      	adds	r7, #16
 8100274:	46bd      	mov	sp, r7
 8100276:	bdb0      	pop	{r4, r5, r7, pc}

08100278 <FlashRead>:
 * 		@ Address: Address in flash memory to read data from. The address must be aligned to a double word boundary.
 * 		@ Return: Data read from flash memory.
 *
 */
uint64_t FlashRead(uint32_t Address)
{
 8100278:	b480      	push	{r7}
 810027a:	b083      	sub	sp, #12
 810027c:	af00      	add	r7, sp, #0
 810027e:	6078      	str	r0, [r7, #4]
	return *(uint64_t*)Address;
 8100280:	687b      	ldr	r3, [r7, #4]
 8100282:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8100286:	4610      	mov	r0, r2
 8100288:	4619      	mov	r1, r3
 810028a:	370c      	adds	r7, #12
 810028c:	46bd      	mov	sp, r7
 810028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100292:	4770      	bx	lr
 8100294:	0000      	movs	r0, r0
	...

08100298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100298:	b580      	push	{r7, lr}
 810029a:	b088      	sub	sp, #32
 810029c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 810029e:	f000 f94c 	bl	810053a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 81002a2:	f000 f829 	bl	81002f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81002a6:	f000 f879 	bl	810039c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 81002aa:	f006 fdc5 	bl	8106e38 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  uint32_t pageAddress = ADDR_FLASH_PAGE_63; // Replace with your target page address
 81002ae:	4b10      	ldr	r3, [pc, #64]	; (81002f0 <main+0x58>)
 81002b0:	61fb      	str	r3, [r7, #28]
  uint32_t flashAddress = 0x0801F800; // Replace with your target flash address
 81002b2:	4b10      	ldr	r3, [pc, #64]	; (81002f4 <main+0x5c>)
 81002b4:	61bb      	str	r3, [r7, #24]
  uint64_t data = 0x12345678ABCDEF00; // Data to write (64-bit)
 81002b6:	a30c      	add	r3, pc, #48	; (adr r3, 81002e8 <main+0x50>)
 81002b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81002bc:	e9c7 2304 	strd	r2, r3, [r7, #16]

  HAL_StatusTypeDef status = FlashErase(pageAddress);
 81002c0:	69f8      	ldr	r0, [r7, #28]
 81002c2:	f7ff ff9d 	bl	8100200 <FlashErase>
 81002c6:	4603      	mov	r3, r0
 81002c8:	73fb      	strb	r3, [r7, #15]
  status = FlashWrite(flashAddress, data);
 81002ca:	693b      	ldr	r3, [r7, #16]
 81002cc:	4619      	mov	r1, r3
 81002ce:	69b8      	ldr	r0, [r7, #24]
 81002d0:	f7ff ffb8 	bl	8100244 <FlashWrite>
 81002d4:	4603      	mov	r3, r0
 81002d6:	73fb      	strb	r3, [r7, #15]
  uint64_t readdata = FlashRead(flashAddress);
 81002d8:	69b8      	ldr	r0, [r7, #24]
 81002da:	f7ff ffcd 	bl	8100278 <FlashRead>
 81002de:	e9c7 0100 	strd	r0, r1, [r7]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81002e2:	e7fe      	b.n	81002e2 <main+0x4a>
 81002e4:	f3af 8000 	nop.w
 81002e8:	abcdef00 	.word	0xabcdef00
 81002ec:	12345678 	.word	0x12345678
 81002f0:	0803f000 	.word	0x0803f000
 81002f4:	0801f800 	.word	0x0801f800

081002f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 81002f8:	b580      	push	{r7, lr}
 81002fa:	b096      	sub	sp, #88	; 0x58
 81002fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 81002fe:	f107 0314 	add.w	r3, r7, #20
 8100302:	2244      	movs	r2, #68	; 0x44
 8100304:	2100      	movs	r1, #0
 8100306:	4618      	mov	r0, r3
 8100308:	f007 fbec 	bl	8107ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 810030c:	463b      	mov	r3, r7
 810030e:	2200      	movs	r2, #0
 8100310:	601a      	str	r2, [r3, #0]
 8100312:	605a      	str	r2, [r3, #4]
 8100314:	609a      	str	r2, [r3, #8]
 8100316:	60da      	str	r2, [r3, #12]
 8100318:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 810031a:	2000      	movs	r0, #0
 810031c:	f002 f8de 	bl	81024dc <HAL_PWREx_ControlVoltageScaling>
 8100320:	4603      	mov	r3, r0
 8100322:	2b00      	cmp	r3, #0
 8100324:	d001      	beq.n	810032a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8100326:	f000 f86c 	bl	8100402 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 810032a:	2321      	movs	r3, #33	; 0x21
 810032c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 810032e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8100332:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8100334:	2301      	movs	r3, #1
 8100336:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8100338:	2302      	movs	r3, #2
 810033a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 810033c:	2303      	movs	r3, #3
 810033e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8100340:	2301      	movs	r3, #1
 8100342:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8100344:	231e      	movs	r3, #30
 8100346:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8100348:	2302      	movs	r3, #2
 810034a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 810034c:	2302      	movs	r3, #2
 810034e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8100350:	2302      	movs	r3, #2
 8100352:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8100354:	f107 0314 	add.w	r3, r7, #20
 8100358:	4618      	mov	r0, r3
 810035a:	f002 f973 	bl	8102644 <HAL_RCC_OscConfig>
 810035e:	4603      	mov	r3, r0
 8100360:	2b00      	cmp	r3, #0
 8100362:	d001      	beq.n	8100368 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8100364:	f000 f84d 	bl	8100402 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8100368:	230f      	movs	r3, #15
 810036a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 810036c:	2303      	movs	r3, #3
 810036e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8100370:	2300      	movs	r3, #0
 8100372:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8100374:	2300      	movs	r3, #0
 8100376:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8100378:	2300      	movs	r3, #0
 810037a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 810037c:	463b      	mov	r3, r7
 810037e:	2105      	movs	r1, #5
 8100380:	4618      	mov	r0, r3
 8100382:	f002 fd79 	bl	8102e78 <HAL_RCC_ClockConfig>
 8100386:	4603      	mov	r3, r0
 8100388:	2b00      	cmp	r3, #0
 810038a:	d001      	beq.n	8100390 <SystemClock_Config+0x98>
  {
    Error_Handler();
 810038c:	f000 f839 	bl	8100402 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8100390:	f003 fb94 	bl	8103abc <HAL_RCCEx_EnableMSIPLLMode>
}
 8100394:	bf00      	nop
 8100396:	3758      	adds	r7, #88	; 0x58
 8100398:	46bd      	mov	sp, r7
 810039a:	bd80      	pop	{r7, pc}

0810039c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 810039c:	b480      	push	{r7}
 810039e:	b083      	sub	sp, #12
 81003a0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81003a2:	4b0f      	ldr	r3, [pc, #60]	; (81003e0 <MX_GPIO_Init+0x44>)
 81003a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81003a6:	4a0e      	ldr	r2, [pc, #56]	; (81003e0 <MX_GPIO_Init+0x44>)
 81003a8:	f043 0301 	orr.w	r3, r3, #1
 81003ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 81003ae:	4b0c      	ldr	r3, [pc, #48]	; (81003e0 <MX_GPIO_Init+0x44>)
 81003b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81003b2:	f003 0301 	and.w	r3, r3, #1
 81003b6:	607b      	str	r3, [r7, #4]
 81003b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 81003ba:	4b09      	ldr	r3, [pc, #36]	; (81003e0 <MX_GPIO_Init+0x44>)
 81003bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81003be:	4a08      	ldr	r2, [pc, #32]	; (81003e0 <MX_GPIO_Init+0x44>)
 81003c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81003c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 81003c6:	4b06      	ldr	r3, [pc, #24]	; (81003e0 <MX_GPIO_Init+0x44>)
 81003c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81003ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81003ce:	603b      	str	r3, [r7, #0]
 81003d0:	683b      	ldr	r3, [r7, #0]

}
 81003d2:	bf00      	nop
 81003d4:	370c      	adds	r7, #12
 81003d6:	46bd      	mov	sp, r7
 81003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81003dc:	4770      	bx	lr
 81003de:	bf00      	nop
 81003e0:	40021000 	.word	0x40021000

081003e4 <USB_CDC_RxHandler>:

/* USER CODE BEGIN 4 */

void USB_CDC_RxHandler(uint8_t* USB_Buf, uint32_t Len)
{
 81003e4:	b480      	push	{r7}
 81003e6:	b083      	sub	sp, #12
 81003e8:	af00      	add	r7, sp, #0
 81003ea:	6078      	str	r0, [r7, #4]
 81003ec:	6039      	str	r1, [r7, #0]
	USB_Buf[0]=USB_Buf[0];
 81003ee:	687b      	ldr	r3, [r7, #4]
 81003f0:	781a      	ldrb	r2, [r3, #0]
 81003f2:	687b      	ldr	r3, [r7, #4]
 81003f4:	701a      	strb	r2, [r3, #0]
	//CDC_Transmit_FS((uint8_t*)"FW:250204", sizeof("FW:250204") - 1);
}
 81003f6:	bf00      	nop
 81003f8:	370c      	adds	r7, #12
 81003fa:	46bd      	mov	sp, r7
 81003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100400:	4770      	bx	lr

08100402 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100402:	b480      	push	{r7}
 8100404:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100406:	b672      	cpsid	i
}
 8100408:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810040a:	e7fe      	b.n	810040a <Error_Handler+0x8>

0810040c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810040c:	b480      	push	{r7}
 810040e:	b083      	sub	sp, #12
 8100410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100412:	4b0f      	ldr	r3, [pc, #60]	; (8100450 <HAL_MspInit+0x44>)
 8100414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8100416:	4a0e      	ldr	r2, [pc, #56]	; (8100450 <HAL_MspInit+0x44>)
 8100418:	f043 0301 	orr.w	r3, r3, #1
 810041c:	6613      	str	r3, [r2, #96]	; 0x60
 810041e:	4b0c      	ldr	r3, [pc, #48]	; (8100450 <HAL_MspInit+0x44>)
 8100420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8100422:	f003 0301 	and.w	r3, r3, #1
 8100426:	607b      	str	r3, [r7, #4]
 8100428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 810042a:	4b09      	ldr	r3, [pc, #36]	; (8100450 <HAL_MspInit+0x44>)
 810042c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810042e:	4a08      	ldr	r2, [pc, #32]	; (8100450 <HAL_MspInit+0x44>)
 8100430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8100434:	6593      	str	r3, [r2, #88]	; 0x58
 8100436:	4b06      	ldr	r3, [pc, #24]	; (8100450 <HAL_MspInit+0x44>)
 8100438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810043a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810043e:	603b      	str	r3, [r7, #0]
 8100440:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100442:	bf00      	nop
 8100444:	370c      	adds	r7, #12
 8100446:	46bd      	mov	sp, r7
 8100448:	f85d 7b04 	ldr.w	r7, [sp], #4
 810044c:	4770      	bx	lr
 810044e:	bf00      	nop
 8100450:	40021000 	.word	0x40021000

08100454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100454:	b480      	push	{r7}
 8100456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100458:	e7fe      	b.n	8100458 <NMI_Handler+0x4>

0810045a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810045a:	b480      	push	{r7}
 810045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810045e:	e7fe      	b.n	810045e <HardFault_Handler+0x4>

08100460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100460:	b480      	push	{r7}
 8100462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100464:	e7fe      	b.n	8100464 <MemManage_Handler+0x4>

08100466 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100466:	b480      	push	{r7}
 8100468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810046a:	e7fe      	b.n	810046a <BusFault_Handler+0x4>

0810046c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810046c:	b480      	push	{r7}
 810046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100470:	e7fe      	b.n	8100470 <UsageFault_Handler+0x4>

08100472 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100472:	b480      	push	{r7}
 8100474:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100476:	bf00      	nop
 8100478:	46bd      	mov	sp, r7
 810047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810047e:	4770      	bx	lr

08100480 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100480:	b480      	push	{r7}
 8100482:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100484:	bf00      	nop
 8100486:	46bd      	mov	sp, r7
 8100488:	f85d 7b04 	ldr.w	r7, [sp], #4
 810048c:	4770      	bx	lr

0810048e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 810048e:	b480      	push	{r7}
 8100490:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8100492:	bf00      	nop
 8100494:	46bd      	mov	sp, r7
 8100496:	f85d 7b04 	ldr.w	r7, [sp], #4
 810049a:	4770      	bx	lr

0810049c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 810049c:	b580      	push	{r7, lr}
 810049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81004a0:	f000 f8a0 	bl	81005e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81004a4:	bf00      	nop
 81004a6:	bd80      	pop	{r7, pc}

081004a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 81004a8:	b580      	push	{r7, lr}
 81004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 81004ac:	4802      	ldr	r0, [pc, #8]	; (81004b8 <OTG_FS_IRQHandler+0x10>)
 81004ae:	f000 ff88 	bl	81013c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 81004b2:	bf00      	nop
 81004b4:	bd80      	pop	{r7, pc}
 81004b6:	bf00      	nop
 81004b8:	200016a4 	.word	0x200016a4

081004bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 81004bc:	b480      	push	{r7}
 81004be:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 81004c0:	4b08      	ldr	r3, [pc, #32]	; (81004e4 <SystemInit+0x28>)
 81004c2:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 81004c6:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 81004c8:	4b06      	ldr	r3, [pc, #24]	; (81004e4 <SystemInit+0x28>)
 81004ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81004ce:	4a05      	ldr	r2, [pc, #20]	; (81004e4 <SystemInit+0x28>)
 81004d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81004d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 81004d8:	bf00      	nop
 81004da:	46bd      	mov	sp, r7
 81004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004e0:	4770      	bx	lr
 81004e2:	bf00      	nop
 81004e4:	e000ed00 	.word	0xe000ed00

081004e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 81004e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100520 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 81004ec:	f7ff ffe6 	bl	81004bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81004f0:	480c      	ldr	r0, [pc, #48]	; (8100524 <LoopForever+0x6>)
  ldr r1, =_edata
 81004f2:	490d      	ldr	r1, [pc, #52]	; (8100528 <LoopForever+0xa>)
  ldr r2, =_sidata
 81004f4:	4a0d      	ldr	r2, [pc, #52]	; (810052c <LoopForever+0xe>)
  movs r3, #0
 81004f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81004f8:	e002      	b.n	8100500 <LoopCopyDataInit>

081004fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81004fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81004fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81004fe:	3304      	adds	r3, #4

08100500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100504:	d3f9      	bcc.n	81004fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100506:	4a0a      	ldr	r2, [pc, #40]	; (8100530 <LoopForever+0x12>)
  ldr r4, =_ebss
 8100508:	4c0a      	ldr	r4, [pc, #40]	; (8100534 <LoopForever+0x16>)
  movs r3, #0
 810050a:	2300      	movs	r3, #0
  b LoopFillZerobss
 810050c:	e001      	b.n	8100512 <LoopFillZerobss>

0810050e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810050e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100510:	3204      	adds	r2, #4

08100512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100514:	d3fb      	bcc.n	810050e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100516:	f007 fac1 	bl	8107a9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 810051a:	f7ff febd 	bl	8100298 <main>

0810051e <LoopForever>:

LoopForever:
    b LoopForever
 810051e:	e7fe      	b.n	810051e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8100520:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8100524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8100528:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 810052c:	08107b90 	.word	0x08107b90
  ldr r2, =_sbss
 8100530:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 8100534:	20001dd0 	.word	0x20001dd0

08100538 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8100538:	e7fe      	b.n	8100538 <ADC1_IRQHandler>

0810053a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 810053a:	b580      	push	{r7, lr}
 810053c:	b082      	sub	sp, #8
 810053e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8100540:	2300      	movs	r3, #0
 8100542:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100544:	2003      	movs	r0, #3
 8100546:	f000 f961 	bl	810080c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810054a:	200f      	movs	r0, #15
 810054c:	f000 f80e 	bl	810056c <HAL_InitTick>
 8100550:	4603      	mov	r3, r0
 8100552:	2b00      	cmp	r3, #0
 8100554:	d002      	beq.n	810055c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8100556:	2301      	movs	r3, #1
 8100558:	71fb      	strb	r3, [r7, #7]
 810055a:	e001      	b.n	8100560 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 810055c:	f7ff ff56 	bl	810040c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8100560:	79fb      	ldrb	r3, [r7, #7]
}
 8100562:	4618      	mov	r0, r3
 8100564:	3708      	adds	r7, #8
 8100566:	46bd      	mov	sp, r7
 8100568:	bd80      	pop	{r7, pc}
	...

0810056c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 810056c:	b580      	push	{r7, lr}
 810056e:	b084      	sub	sp, #16
 8100570:	af00      	add	r7, sp, #0
 8100572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8100574:	2300      	movs	r3, #0
 8100576:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8100578:	4b17      	ldr	r3, [pc, #92]	; (81005d8 <HAL_InitTick+0x6c>)
 810057a:	781b      	ldrb	r3, [r3, #0]
 810057c:	2b00      	cmp	r3, #0
 810057e:	d023      	beq.n	81005c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8100580:	4b16      	ldr	r3, [pc, #88]	; (81005dc <HAL_InitTick+0x70>)
 8100582:	681a      	ldr	r2, [r3, #0]
 8100584:	4b14      	ldr	r3, [pc, #80]	; (81005d8 <HAL_InitTick+0x6c>)
 8100586:	781b      	ldrb	r3, [r3, #0]
 8100588:	4619      	mov	r1, r3
 810058a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810058e:	fbb3 f3f1 	udiv	r3, r3, r1
 8100592:	fbb2 f3f3 	udiv	r3, r2, r3
 8100596:	4618      	mov	r0, r3
 8100598:	f000 f96d 	bl	8100876 <HAL_SYSTICK_Config>
 810059c:	4603      	mov	r3, r0
 810059e:	2b00      	cmp	r3, #0
 81005a0:	d10f      	bne.n	81005c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81005a2:	687b      	ldr	r3, [r7, #4]
 81005a4:	2b0f      	cmp	r3, #15
 81005a6:	d809      	bhi.n	81005bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81005a8:	2200      	movs	r2, #0
 81005aa:	6879      	ldr	r1, [r7, #4]
 81005ac:	f04f 30ff 	mov.w	r0, #4294967295
 81005b0:	f000 f937 	bl	8100822 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 81005b4:	4a0a      	ldr	r2, [pc, #40]	; (81005e0 <HAL_InitTick+0x74>)
 81005b6:	687b      	ldr	r3, [r7, #4]
 81005b8:	6013      	str	r3, [r2, #0]
 81005ba:	e007      	b.n	81005cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 81005bc:	2301      	movs	r3, #1
 81005be:	73fb      	strb	r3, [r7, #15]
 81005c0:	e004      	b.n	81005cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 81005c2:	2301      	movs	r3, #1
 81005c4:	73fb      	strb	r3, [r7, #15]
 81005c6:	e001      	b.n	81005cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 81005c8:	2301      	movs	r3, #1
 81005ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 81005cc:	7bfb      	ldrb	r3, [r7, #15]
}
 81005ce:	4618      	mov	r0, r3
 81005d0:	3710      	adds	r7, #16
 81005d2:	46bd      	mov	sp, r7
 81005d4:	bd80      	pop	{r7, pc}
 81005d6:	bf00      	nop
 81005d8:	20000008 	.word	0x20000008
 81005dc:	20000000 	.word	0x20000000
 81005e0:	20000004 	.word	0x20000004

081005e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81005e4:	b480      	push	{r7}
 81005e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81005e8:	4b06      	ldr	r3, [pc, #24]	; (8100604 <HAL_IncTick+0x20>)
 81005ea:	781b      	ldrb	r3, [r3, #0]
 81005ec:	461a      	mov	r2, r3
 81005ee:	4b06      	ldr	r3, [pc, #24]	; (8100608 <HAL_IncTick+0x24>)
 81005f0:	681b      	ldr	r3, [r3, #0]
 81005f2:	4413      	add	r3, r2
 81005f4:	4a04      	ldr	r2, [pc, #16]	; (8100608 <HAL_IncTick+0x24>)
 81005f6:	6013      	str	r3, [r2, #0]
}
 81005f8:	bf00      	nop
 81005fa:	46bd      	mov	sp, r7
 81005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100600:	4770      	bx	lr
 8100602:	bf00      	nop
 8100604:	20000008 	.word	0x20000008
 8100608:	200001cc 	.word	0x200001cc

0810060c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 810060c:	b480      	push	{r7}
 810060e:	af00      	add	r7, sp, #0
  return uwTick;
 8100610:	4b03      	ldr	r3, [pc, #12]	; (8100620 <HAL_GetTick+0x14>)
 8100612:	681b      	ldr	r3, [r3, #0]
}
 8100614:	4618      	mov	r0, r3
 8100616:	46bd      	mov	sp, r7
 8100618:	f85d 7b04 	ldr.w	r7, [sp], #4
 810061c:	4770      	bx	lr
 810061e:	bf00      	nop
 8100620:	200001cc 	.word	0x200001cc

08100624 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8100624:	b580      	push	{r7, lr}
 8100626:	b084      	sub	sp, #16
 8100628:	af00      	add	r7, sp, #0
 810062a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 810062c:	f7ff ffee 	bl	810060c <HAL_GetTick>
 8100630:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8100632:	687b      	ldr	r3, [r7, #4]
 8100634:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8100636:	68fb      	ldr	r3, [r7, #12]
 8100638:	f1b3 3fff 	cmp.w	r3, #4294967295
 810063c:	d005      	beq.n	810064a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 810063e:	4b0a      	ldr	r3, [pc, #40]	; (8100668 <HAL_Delay+0x44>)
 8100640:	781b      	ldrb	r3, [r3, #0]
 8100642:	461a      	mov	r2, r3
 8100644:	68fb      	ldr	r3, [r7, #12]
 8100646:	4413      	add	r3, r2
 8100648:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810064a:	bf00      	nop
 810064c:	f7ff ffde 	bl	810060c <HAL_GetTick>
 8100650:	4602      	mov	r2, r0
 8100652:	68bb      	ldr	r3, [r7, #8]
 8100654:	1ad3      	subs	r3, r2, r3
 8100656:	68fa      	ldr	r2, [r7, #12]
 8100658:	429a      	cmp	r2, r3
 810065a:	d8f7      	bhi.n	810064c <HAL_Delay+0x28>
  {
  }
}
 810065c:	bf00      	nop
 810065e:	bf00      	nop
 8100660:	3710      	adds	r7, #16
 8100662:	46bd      	mov	sp, r7
 8100664:	bd80      	pop	{r7, pc}
 8100666:	bf00      	nop
 8100668:	20000008 	.word	0x20000008

0810066c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810066c:	b480      	push	{r7}
 810066e:	b085      	sub	sp, #20
 8100670:	af00      	add	r7, sp, #0
 8100672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100674:	687b      	ldr	r3, [r7, #4]
 8100676:	f003 0307 	and.w	r3, r3, #7
 810067a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810067c:	4b0c      	ldr	r3, [pc, #48]	; (81006b0 <__NVIC_SetPriorityGrouping+0x44>)
 810067e:	68db      	ldr	r3, [r3, #12]
 8100680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100682:	68ba      	ldr	r2, [r7, #8]
 8100684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100688:	4013      	ands	r3, r2
 810068a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810068c:	68fb      	ldr	r3, [r7, #12]
 810068e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100690:	68bb      	ldr	r3, [r7, #8]
 8100692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810069c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810069e:	4a04      	ldr	r2, [pc, #16]	; (81006b0 <__NVIC_SetPriorityGrouping+0x44>)
 81006a0:	68bb      	ldr	r3, [r7, #8]
 81006a2:	60d3      	str	r3, [r2, #12]
}
 81006a4:	bf00      	nop
 81006a6:	3714      	adds	r7, #20
 81006a8:	46bd      	mov	sp, r7
 81006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006ae:	4770      	bx	lr
 81006b0:	e000ed00 	.word	0xe000ed00

081006b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81006b4:	b480      	push	{r7}
 81006b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81006b8:	4b04      	ldr	r3, [pc, #16]	; (81006cc <__NVIC_GetPriorityGrouping+0x18>)
 81006ba:	68db      	ldr	r3, [r3, #12]
 81006bc:	0a1b      	lsrs	r3, r3, #8
 81006be:	f003 0307 	and.w	r3, r3, #7
}
 81006c2:	4618      	mov	r0, r3
 81006c4:	46bd      	mov	sp, r7
 81006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006ca:	4770      	bx	lr
 81006cc:	e000ed00 	.word	0xe000ed00

081006d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81006d0:	b480      	push	{r7}
 81006d2:	b083      	sub	sp, #12
 81006d4:	af00      	add	r7, sp, #0
 81006d6:	4603      	mov	r3, r0
 81006d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 81006da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 81006de:	2b00      	cmp	r3, #0
 81006e0:	db0b      	blt.n	81006fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81006e2:	79fb      	ldrb	r3, [r7, #7]
 81006e4:	f003 021f 	and.w	r2, r3, #31
 81006e8:	4907      	ldr	r1, [pc, #28]	; (8100708 <__NVIC_EnableIRQ+0x38>)
 81006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 81006ee:	095b      	lsrs	r3, r3, #5
 81006f0:	2001      	movs	r0, #1
 81006f2:	fa00 f202 	lsl.w	r2, r0, r2
 81006f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81006fa:	bf00      	nop
 81006fc:	370c      	adds	r7, #12
 81006fe:	46bd      	mov	sp, r7
 8100700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100704:	4770      	bx	lr
 8100706:	bf00      	nop
 8100708:	e000e100 	.word	0xe000e100

0810070c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810070c:	b480      	push	{r7}
 810070e:	b083      	sub	sp, #12
 8100710:	af00      	add	r7, sp, #0
 8100712:	4603      	mov	r3, r0
 8100714:	6039      	str	r1, [r7, #0]
 8100716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8100718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 810071c:	2b00      	cmp	r3, #0
 810071e:	db0a      	blt.n	8100736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100720:	683b      	ldr	r3, [r7, #0]
 8100722:	b2da      	uxtb	r2, r3
 8100724:	490c      	ldr	r1, [pc, #48]	; (8100758 <__NVIC_SetPriority+0x4c>)
 8100726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 810072a:	0112      	lsls	r2, r2, #4
 810072c:	b2d2      	uxtb	r2, r2
 810072e:	440b      	add	r3, r1
 8100730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100734:	e00a      	b.n	810074c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100736:	683b      	ldr	r3, [r7, #0]
 8100738:	b2da      	uxtb	r2, r3
 810073a:	4908      	ldr	r1, [pc, #32]	; (810075c <__NVIC_SetPriority+0x50>)
 810073c:	79fb      	ldrb	r3, [r7, #7]
 810073e:	f003 030f 	and.w	r3, r3, #15
 8100742:	3b04      	subs	r3, #4
 8100744:	0112      	lsls	r2, r2, #4
 8100746:	b2d2      	uxtb	r2, r2
 8100748:	440b      	add	r3, r1
 810074a:	761a      	strb	r2, [r3, #24]
}
 810074c:	bf00      	nop
 810074e:	370c      	adds	r7, #12
 8100750:	46bd      	mov	sp, r7
 8100752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100756:	4770      	bx	lr
 8100758:	e000e100 	.word	0xe000e100
 810075c:	e000ed00 	.word	0xe000ed00

08100760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100760:	b480      	push	{r7}
 8100762:	b089      	sub	sp, #36	; 0x24
 8100764:	af00      	add	r7, sp, #0
 8100766:	60f8      	str	r0, [r7, #12]
 8100768:	60b9      	str	r1, [r7, #8]
 810076a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810076c:	68fb      	ldr	r3, [r7, #12]
 810076e:	f003 0307 	and.w	r3, r3, #7
 8100772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100774:	69fb      	ldr	r3, [r7, #28]
 8100776:	f1c3 0307 	rsb	r3, r3, #7
 810077a:	2b04      	cmp	r3, #4
 810077c:	bf28      	it	cs
 810077e:	2304      	movcs	r3, #4
 8100780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100782:	69fb      	ldr	r3, [r7, #28]
 8100784:	3304      	adds	r3, #4
 8100786:	2b06      	cmp	r3, #6
 8100788:	d902      	bls.n	8100790 <NVIC_EncodePriority+0x30>
 810078a:	69fb      	ldr	r3, [r7, #28]
 810078c:	3b03      	subs	r3, #3
 810078e:	e000      	b.n	8100792 <NVIC_EncodePriority+0x32>
 8100790:	2300      	movs	r3, #0
 8100792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100794:	f04f 32ff 	mov.w	r2, #4294967295
 8100798:	69bb      	ldr	r3, [r7, #24]
 810079a:	fa02 f303 	lsl.w	r3, r2, r3
 810079e:	43da      	mvns	r2, r3
 81007a0:	68bb      	ldr	r3, [r7, #8]
 81007a2:	401a      	ands	r2, r3
 81007a4:	697b      	ldr	r3, [r7, #20]
 81007a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81007a8:	f04f 31ff 	mov.w	r1, #4294967295
 81007ac:	697b      	ldr	r3, [r7, #20]
 81007ae:	fa01 f303 	lsl.w	r3, r1, r3
 81007b2:	43d9      	mvns	r1, r3
 81007b4:	687b      	ldr	r3, [r7, #4]
 81007b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81007b8:	4313      	orrs	r3, r2
         );
}
 81007ba:	4618      	mov	r0, r3
 81007bc:	3724      	adds	r7, #36	; 0x24
 81007be:	46bd      	mov	sp, r7
 81007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007c4:	4770      	bx	lr
	...

081007c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81007c8:	b580      	push	{r7, lr}
 81007ca:	b082      	sub	sp, #8
 81007cc:	af00      	add	r7, sp, #0
 81007ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81007d0:	687b      	ldr	r3, [r7, #4]
 81007d2:	3b01      	subs	r3, #1
 81007d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81007d8:	d301      	bcc.n	81007de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81007da:	2301      	movs	r3, #1
 81007dc:	e00f      	b.n	81007fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81007de:	4a0a      	ldr	r2, [pc, #40]	; (8100808 <SysTick_Config+0x40>)
 81007e0:	687b      	ldr	r3, [r7, #4]
 81007e2:	3b01      	subs	r3, #1
 81007e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81007e6:	210f      	movs	r1, #15
 81007e8:	f04f 30ff 	mov.w	r0, #4294967295
 81007ec:	f7ff ff8e 	bl	810070c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81007f0:	4b05      	ldr	r3, [pc, #20]	; (8100808 <SysTick_Config+0x40>)
 81007f2:	2200      	movs	r2, #0
 81007f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81007f6:	4b04      	ldr	r3, [pc, #16]	; (8100808 <SysTick_Config+0x40>)
 81007f8:	2207      	movs	r2, #7
 81007fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81007fc:	2300      	movs	r3, #0
}
 81007fe:	4618      	mov	r0, r3
 8100800:	3708      	adds	r7, #8
 8100802:	46bd      	mov	sp, r7
 8100804:	bd80      	pop	{r7, pc}
 8100806:	bf00      	nop
 8100808:	e000e010 	.word	0xe000e010

0810080c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810080c:	b580      	push	{r7, lr}
 810080e:	b082      	sub	sp, #8
 8100810:	af00      	add	r7, sp, #0
 8100812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100814:	6878      	ldr	r0, [r7, #4]
 8100816:	f7ff ff29 	bl	810066c <__NVIC_SetPriorityGrouping>
}
 810081a:	bf00      	nop
 810081c:	3708      	adds	r7, #8
 810081e:	46bd      	mov	sp, r7
 8100820:	bd80      	pop	{r7, pc}

08100822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100822:	b580      	push	{r7, lr}
 8100824:	b086      	sub	sp, #24
 8100826:	af00      	add	r7, sp, #0
 8100828:	4603      	mov	r3, r0
 810082a:	60b9      	str	r1, [r7, #8]
 810082c:	607a      	str	r2, [r7, #4]
 810082e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8100830:	2300      	movs	r3, #0
 8100832:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100834:	f7ff ff3e 	bl	81006b4 <__NVIC_GetPriorityGrouping>
 8100838:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810083a:	687a      	ldr	r2, [r7, #4]
 810083c:	68b9      	ldr	r1, [r7, #8]
 810083e:	6978      	ldr	r0, [r7, #20]
 8100840:	f7ff ff8e 	bl	8100760 <NVIC_EncodePriority>
 8100844:	4602      	mov	r2, r0
 8100846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810084a:	4611      	mov	r1, r2
 810084c:	4618      	mov	r0, r3
 810084e:	f7ff ff5d 	bl	810070c <__NVIC_SetPriority>
}
 8100852:	bf00      	nop
 8100854:	3718      	adds	r7, #24
 8100856:	46bd      	mov	sp, r7
 8100858:	bd80      	pop	{r7, pc}

0810085a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810085a:	b580      	push	{r7, lr}
 810085c:	b082      	sub	sp, #8
 810085e:	af00      	add	r7, sp, #0
 8100860:	4603      	mov	r3, r0
 8100862:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8100864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8100868:	4618      	mov	r0, r3
 810086a:	f7ff ff31 	bl	81006d0 <__NVIC_EnableIRQ>
}
 810086e:	bf00      	nop
 8100870:	3708      	adds	r7, #8
 8100872:	46bd      	mov	sp, r7
 8100874:	bd80      	pop	{r7, pc}

08100876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100876:	b580      	push	{r7, lr}
 8100878:	b082      	sub	sp, #8
 810087a:	af00      	add	r7, sp, #0
 810087c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810087e:	6878      	ldr	r0, [r7, #4]
 8100880:	f7ff ffa2 	bl	81007c8 <SysTick_Config>
 8100884:	4603      	mov	r3, r0
}
 8100886:	4618      	mov	r0, r3
 8100888:	3708      	adds	r7, #8
 810088a:	46bd      	mov	sp, r7
 810088c:	bd80      	pop	{r7, pc}
	...

08100890 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8100890:	b580      	push	{r7, lr}
 8100892:	b086      	sub	sp, #24
 8100894:	af00      	add	r7, sp, #0
 8100896:	60f8      	str	r0, [r7, #12]
 8100898:	60b9      	str	r1, [r7, #8]
 810089a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 810089e:	2300      	movs	r3, #0
 81008a0:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 81008a2:	4b2f      	ldr	r3, [pc, #188]	; (8100960 <HAL_FLASH_Program+0xd0>)
 81008a4:	781b      	ldrb	r3, [r3, #0]
 81008a6:	2b01      	cmp	r3, #1
 81008a8:	d101      	bne.n	81008ae <HAL_FLASH_Program+0x1e>
 81008aa:	2302      	movs	r3, #2
 81008ac:	e053      	b.n	8100956 <HAL_FLASH_Program+0xc6>
 81008ae:	4b2c      	ldr	r3, [pc, #176]	; (8100960 <HAL_FLASH_Program+0xd0>)
 81008b0:	2201      	movs	r2, #1
 81008b2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 81008b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 81008b8:	f000 f888 	bl	81009cc <FLASH_WaitForLastOperation>
 81008bc:	4603      	mov	r3, r0
 81008be:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 81008c0:	7dfb      	ldrb	r3, [r7, #23]
 81008c2:	2b00      	cmp	r3, #0
 81008c4:	d143      	bne.n	810094e <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 81008c6:	4b26      	ldr	r3, [pc, #152]	; (8100960 <HAL_FLASH_Program+0xd0>)
 81008c8:	2200      	movs	r2, #0
 81008ca:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 81008cc:	4b25      	ldr	r3, [pc, #148]	; (8100964 <HAL_FLASH_Program+0xd4>)
 81008ce:	681b      	ldr	r3, [r3, #0]
 81008d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81008d4:	2b00      	cmp	r3, #0
 81008d6:	d009      	beq.n	81008ec <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 81008d8:	4b22      	ldr	r3, [pc, #136]	; (8100964 <HAL_FLASH_Program+0xd4>)
 81008da:	681b      	ldr	r3, [r3, #0]
 81008dc:	4a21      	ldr	r2, [pc, #132]	; (8100964 <HAL_FLASH_Program+0xd4>)
 81008de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 81008e2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 81008e4:	4b1e      	ldr	r3, [pc, #120]	; (8100960 <HAL_FLASH_Program+0xd0>)
 81008e6:	2202      	movs	r2, #2
 81008e8:	771a      	strb	r2, [r3, #28]
 81008ea:	e002      	b.n	81008f2 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 81008ec:	4b1c      	ldr	r3, [pc, #112]	; (8100960 <HAL_FLASH_Program+0xd0>)
 81008ee:	2200      	movs	r2, #0
 81008f0:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 81008f2:	68fb      	ldr	r3, [r7, #12]
 81008f4:	2b00      	cmp	r3, #0
 81008f6:	d107      	bne.n	8100908 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 81008f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 81008fc:	68b8      	ldr	r0, [r7, #8]
 81008fe:	f000 f8bd 	bl	8100a7c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8100902:	2301      	movs	r3, #1
 8100904:	613b      	str	r3, [r7, #16]
 8100906:	e010      	b.n	810092a <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8100908:	68fb      	ldr	r3, [r7, #12]
 810090a:	2b01      	cmp	r3, #1
 810090c:	d002      	beq.n	8100914 <HAL_FLASH_Program+0x84>
 810090e:	68fb      	ldr	r3, [r7, #12]
 8100910:	2b02      	cmp	r3, #2
 8100912:	d10a      	bne.n	810092a <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8100914:	683b      	ldr	r3, [r7, #0]
 8100916:	4619      	mov	r1, r3
 8100918:	68b8      	ldr	r0, [r7, #8]
 810091a:	f000 f8d5 	bl	8100ac8 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 810091e:	68fb      	ldr	r3, [r7, #12]
 8100920:	2b02      	cmp	r3, #2
 8100922:	d102      	bne.n	810092a <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8100924:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8100928:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 810092a:	f24c 3050 	movw	r0, #50000	; 0xc350
 810092e:	f000 f84d 	bl	81009cc <FLASH_WaitForLastOperation>
 8100932:	4603      	mov	r3, r0
 8100934:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8100936:	693b      	ldr	r3, [r7, #16]
 8100938:	2b00      	cmp	r3, #0
 810093a:	d006      	beq.n	810094a <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 810093c:	4b09      	ldr	r3, [pc, #36]	; (8100964 <HAL_FLASH_Program+0xd4>)
 810093e:	695a      	ldr	r2, [r3, #20]
 8100940:	693b      	ldr	r3, [r7, #16]
 8100942:	43db      	mvns	r3, r3
 8100944:	4907      	ldr	r1, [pc, #28]	; (8100964 <HAL_FLASH_Program+0xd4>)
 8100946:	4013      	ands	r3, r2
 8100948:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 810094a:	f000 fa0b 	bl	8100d64 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 810094e:	4b04      	ldr	r3, [pc, #16]	; (8100960 <HAL_FLASH_Program+0xd0>)
 8100950:	2200      	movs	r2, #0
 8100952:	701a      	strb	r2, [r3, #0]

  return status;
 8100954:	7dfb      	ldrb	r3, [r7, #23]
}
 8100956:	4618      	mov	r0, r3
 8100958:	3718      	adds	r7, #24
 810095a:	46bd      	mov	sp, r7
 810095c:	bd80      	pop	{r7, pc}
 810095e:	bf00      	nop
 8100960:	2000000c 	.word	0x2000000c
 8100964:	40022000 	.word	0x40022000

08100968 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8100968:	b480      	push	{r7}
 810096a:	b083      	sub	sp, #12
 810096c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 810096e:	2300      	movs	r3, #0
 8100970:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8100972:	4b0b      	ldr	r3, [pc, #44]	; (81009a0 <HAL_FLASH_Unlock+0x38>)
 8100974:	695b      	ldr	r3, [r3, #20]
 8100976:	2b00      	cmp	r3, #0
 8100978:	da0b      	bge.n	8100992 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 810097a:	4b09      	ldr	r3, [pc, #36]	; (81009a0 <HAL_FLASH_Unlock+0x38>)
 810097c:	4a09      	ldr	r2, [pc, #36]	; (81009a4 <HAL_FLASH_Unlock+0x3c>)
 810097e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8100980:	4b07      	ldr	r3, [pc, #28]	; (81009a0 <HAL_FLASH_Unlock+0x38>)
 8100982:	4a09      	ldr	r2, [pc, #36]	; (81009a8 <HAL_FLASH_Unlock+0x40>)
 8100984:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8100986:	4b06      	ldr	r3, [pc, #24]	; (81009a0 <HAL_FLASH_Unlock+0x38>)
 8100988:	695b      	ldr	r3, [r3, #20]
 810098a:	2b00      	cmp	r3, #0
 810098c:	da01      	bge.n	8100992 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 810098e:	2301      	movs	r3, #1
 8100990:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8100992:	79fb      	ldrb	r3, [r7, #7]
}
 8100994:	4618      	mov	r0, r3
 8100996:	370c      	adds	r7, #12
 8100998:	46bd      	mov	sp, r7
 810099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810099e:	4770      	bx	lr
 81009a0:	40022000 	.word	0x40022000
 81009a4:	45670123 	.word	0x45670123
 81009a8:	cdef89ab 	.word	0xcdef89ab

081009ac <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 81009ac:	b480      	push	{r7}
 81009ae:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 81009b0:	4b05      	ldr	r3, [pc, #20]	; (81009c8 <HAL_FLASH_Lock+0x1c>)
 81009b2:	695b      	ldr	r3, [r3, #20]
 81009b4:	4a04      	ldr	r2, [pc, #16]	; (81009c8 <HAL_FLASH_Lock+0x1c>)
 81009b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 81009ba:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 81009bc:	2300      	movs	r3, #0
}
 81009be:	4618      	mov	r0, r3
 81009c0:	46bd      	mov	sp, r7
 81009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009c6:	4770      	bx	lr
 81009c8:	40022000 	.word	0x40022000

081009cc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 81009cc:	b580      	push	{r7, lr}
 81009ce:	b084      	sub	sp, #16
 81009d0:	af00      	add	r7, sp, #0
 81009d2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 81009d4:	f7ff fe1a 	bl	810060c <HAL_GetTick>
 81009d8:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 81009da:	e00d      	b.n	81009f8 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 81009dc:	687b      	ldr	r3, [r7, #4]
 81009de:	f1b3 3fff 	cmp.w	r3, #4294967295
 81009e2:	d009      	beq.n	81009f8 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 81009e4:	f7ff fe12 	bl	810060c <HAL_GetTick>
 81009e8:	4602      	mov	r2, r0
 81009ea:	68fb      	ldr	r3, [r7, #12]
 81009ec:	1ad3      	subs	r3, r2, r3
 81009ee:	687a      	ldr	r2, [r7, #4]
 81009f0:	429a      	cmp	r2, r3
 81009f2:	d801      	bhi.n	81009f8 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 81009f4:	2303      	movs	r3, #3
 81009f6:	e036      	b.n	8100a66 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 81009f8:	4b1d      	ldr	r3, [pc, #116]	; (8100a70 <FLASH_WaitForLastOperation+0xa4>)
 81009fa:	691b      	ldr	r3, [r3, #16]
 81009fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100a00:	2b00      	cmp	r3, #0
 8100a02:	d1eb      	bne.n	81009dc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8100a04:	4b1a      	ldr	r3, [pc, #104]	; (8100a70 <FLASH_WaitForLastOperation+0xa4>)
 8100a06:	691a      	ldr	r2, [r3, #16]
 8100a08:	4b1a      	ldr	r3, [pc, #104]	; (8100a74 <FLASH_WaitForLastOperation+0xa8>)
 8100a0a:	4013      	ands	r3, r2
 8100a0c:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8100a0e:	68bb      	ldr	r3, [r7, #8]
 8100a10:	2b00      	cmp	r3, #0
 8100a12:	d01e      	beq.n	8100a52 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8100a14:	4b18      	ldr	r3, [pc, #96]	; (8100a78 <FLASH_WaitForLastOperation+0xac>)
 8100a16:	685a      	ldr	r2, [r3, #4]
 8100a18:	68bb      	ldr	r3, [r7, #8]
 8100a1a:	4313      	orrs	r3, r2
 8100a1c:	4a16      	ldr	r2, [pc, #88]	; (8100a78 <FLASH_WaitForLastOperation+0xac>)
 8100a1e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8100a20:	68bb      	ldr	r3, [r7, #8]
 8100a22:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8100a26:	2b00      	cmp	r3, #0
 8100a28:	d007      	beq.n	8100a3a <FLASH_WaitForLastOperation+0x6e>
 8100a2a:	4b11      	ldr	r3, [pc, #68]	; (8100a70 <FLASH_WaitForLastOperation+0xa4>)
 8100a2c:	699a      	ldr	r2, [r3, #24]
 8100a2e:	68bb      	ldr	r3, [r7, #8]
 8100a30:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8100a34:	490e      	ldr	r1, [pc, #56]	; (8100a70 <FLASH_WaitForLastOperation+0xa4>)
 8100a36:	4313      	orrs	r3, r2
 8100a38:	618b      	str	r3, [r1, #24]
 8100a3a:	68bb      	ldr	r3, [r7, #8]
 8100a3c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8100a40:	2b00      	cmp	r3, #0
 8100a42:	d004      	beq.n	8100a4e <FLASH_WaitForLastOperation+0x82>
 8100a44:	4a0a      	ldr	r2, [pc, #40]	; (8100a70 <FLASH_WaitForLastOperation+0xa4>)
 8100a46:	68bb      	ldr	r3, [r7, #8]
 8100a48:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8100a4c:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8100a4e:	2301      	movs	r3, #1
 8100a50:	e009      	b.n	8100a66 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8100a52:	4b07      	ldr	r3, [pc, #28]	; (8100a70 <FLASH_WaitForLastOperation+0xa4>)
 8100a54:	691b      	ldr	r3, [r3, #16]
 8100a56:	f003 0301 	and.w	r3, r3, #1
 8100a5a:	2b00      	cmp	r3, #0
 8100a5c:	d002      	beq.n	8100a64 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8100a5e:	4b04      	ldr	r3, [pc, #16]	; (8100a70 <FLASH_WaitForLastOperation+0xa4>)
 8100a60:	2201      	movs	r2, #1
 8100a62:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8100a64:	2300      	movs	r3, #0
}
 8100a66:	4618      	mov	r0, r3
 8100a68:	3710      	adds	r7, #16
 8100a6a:	46bd      	mov	sp, r7
 8100a6c:	bd80      	pop	{r7, pc}
 8100a6e:	bf00      	nop
 8100a70:	40022000 	.word	0x40022000
 8100a74:	0002c3fa 	.word	0x0002c3fa
 8100a78:	2000000c 	.word	0x2000000c

08100a7c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8100a7c:	b480      	push	{r7}
 8100a7e:	b085      	sub	sp, #20
 8100a80:	af00      	add	r7, sp, #0
 8100a82:	60f8      	str	r0, [r7, #12]
 8100a84:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8100a88:	4b0e      	ldr	r3, [pc, #56]	; (8100ac4 <FLASH_Program_DoubleWord+0x48>)
 8100a8a:	695b      	ldr	r3, [r3, #20]
 8100a8c:	4a0d      	ldr	r2, [pc, #52]	; (8100ac4 <FLASH_Program_DoubleWord+0x48>)
 8100a8e:	f043 0301 	orr.w	r3, r3, #1
 8100a92:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8100a94:	68fb      	ldr	r3, [r7, #12]
 8100a96:	683a      	ldr	r2, [r7, #0]
 8100a98:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8100a9a:	f3bf 8f6f 	isb	sy
}
 8100a9e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8100aa0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8100aa4:	f04f 0200 	mov.w	r2, #0
 8100aa8:	f04f 0300 	mov.w	r3, #0
 8100aac:	000a      	movs	r2, r1
 8100aae:	2300      	movs	r3, #0
 8100ab0:	68f9      	ldr	r1, [r7, #12]
 8100ab2:	3104      	adds	r1, #4
 8100ab4:	4613      	mov	r3, r2
 8100ab6:	600b      	str	r3, [r1, #0]
}
 8100ab8:	bf00      	nop
 8100aba:	3714      	adds	r7, #20
 8100abc:	46bd      	mov	sp, r7
 8100abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ac2:	4770      	bx	lr
 8100ac4:	40022000 	.word	0x40022000

08100ac8 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8100ac8:	b480      	push	{r7}
 8100aca:	b089      	sub	sp, #36	; 0x24
 8100acc:	af00      	add	r7, sp, #0
 8100ace:	6078      	str	r0, [r7, #4]
 8100ad0:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8100ad2:	2380      	movs	r3, #128	; 0x80
 8100ad4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8100ad6:	687b      	ldr	r3, [r7, #4]
 8100ad8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8100ada:	683b      	ldr	r3, [r7, #0]
 8100adc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8100ade:	4b14      	ldr	r3, [pc, #80]	; (8100b30 <FLASH_Program_Fast+0x68>)
 8100ae0:	695b      	ldr	r3, [r3, #20]
 8100ae2:	4a13      	ldr	r2, [pc, #76]	; (8100b30 <FLASH_Program_Fast+0x68>)
 8100ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8100ae8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8100aea:	f3ef 8310 	mrs	r3, PRIMASK
 8100aee:	60fb      	str	r3, [r7, #12]
  return(result);
 8100af0:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8100af2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8100af4:	b672      	cpsid	i
}
 8100af6:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8100af8:	697b      	ldr	r3, [r7, #20]
 8100afa:	681a      	ldr	r2, [r3, #0]
 8100afc:	69bb      	ldr	r3, [r7, #24]
 8100afe:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8100b00:	69bb      	ldr	r3, [r7, #24]
 8100b02:	3304      	adds	r3, #4
 8100b04:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8100b06:	697b      	ldr	r3, [r7, #20]
 8100b08:	3304      	adds	r3, #4
 8100b0a:	617b      	str	r3, [r7, #20]
    row_index--;
 8100b0c:	7ffb      	ldrb	r3, [r7, #31]
 8100b0e:	3b01      	subs	r3, #1
 8100b10:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8100b12:	7ffb      	ldrb	r3, [r7, #31]
 8100b14:	2b00      	cmp	r3, #0
 8100b16:	d1ef      	bne.n	8100af8 <FLASH_Program_Fast+0x30>
 8100b18:	693b      	ldr	r3, [r7, #16]
 8100b1a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8100b1c:	68bb      	ldr	r3, [r7, #8]
 8100b1e:	f383 8810 	msr	PRIMASK, r3
}
 8100b22:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8100b24:	bf00      	nop
 8100b26:	3724      	adds	r7, #36	; 0x24
 8100b28:	46bd      	mov	sp, r7
 8100b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b2e:	4770      	bx	lr
 8100b30:	40022000 	.word	0x40022000

08100b34 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8100b34:	b580      	push	{r7, lr}
 8100b36:	b084      	sub	sp, #16
 8100b38:	af00      	add	r7, sp, #0
 8100b3a:	6078      	str	r0, [r7, #4]
 8100b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8100b3e:	4b49      	ldr	r3, [pc, #292]	; (8100c64 <HAL_FLASHEx_Erase+0x130>)
 8100b40:	781b      	ldrb	r3, [r3, #0]
 8100b42:	2b01      	cmp	r3, #1
 8100b44:	d101      	bne.n	8100b4a <HAL_FLASHEx_Erase+0x16>
 8100b46:	2302      	movs	r3, #2
 8100b48:	e087      	b.n	8100c5a <HAL_FLASHEx_Erase+0x126>
 8100b4a:	4b46      	ldr	r3, [pc, #280]	; (8100c64 <HAL_FLASHEx_Erase+0x130>)
 8100b4c:	2201      	movs	r2, #1
 8100b4e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8100b50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8100b54:	f7ff ff3a 	bl	81009cc <FLASH_WaitForLastOperation>
 8100b58:	4603      	mov	r3, r0
 8100b5a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8100b5c:	7bfb      	ldrb	r3, [r7, #15]
 8100b5e:	2b00      	cmp	r3, #0
 8100b60:	d177      	bne.n	8100c52 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8100b62:	4b40      	ldr	r3, [pc, #256]	; (8100c64 <HAL_FLASHEx_Erase+0x130>)
 8100b64:	2200      	movs	r2, #0
 8100b66:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8100b68:	4b3f      	ldr	r3, [pc, #252]	; (8100c68 <HAL_FLASHEx_Erase+0x134>)
 8100b6a:	681b      	ldr	r3, [r3, #0]
 8100b6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8100b70:	2b00      	cmp	r3, #0
 8100b72:	d013      	beq.n	8100b9c <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8100b74:	4b3c      	ldr	r3, [pc, #240]	; (8100c68 <HAL_FLASHEx_Erase+0x134>)
 8100b76:	681b      	ldr	r3, [r3, #0]
 8100b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8100b7c:	2b00      	cmp	r3, #0
 8100b7e:	d009      	beq.n	8100b94 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8100b80:	4b39      	ldr	r3, [pc, #228]	; (8100c68 <HAL_FLASHEx_Erase+0x134>)
 8100b82:	681b      	ldr	r3, [r3, #0]
 8100b84:	4a38      	ldr	r2, [pc, #224]	; (8100c68 <HAL_FLASHEx_Erase+0x134>)
 8100b86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8100b8a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8100b8c:	4b35      	ldr	r3, [pc, #212]	; (8100c64 <HAL_FLASHEx_Erase+0x130>)
 8100b8e:	2203      	movs	r2, #3
 8100b90:	771a      	strb	r2, [r3, #28]
 8100b92:	e016      	b.n	8100bc2 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8100b94:	4b33      	ldr	r3, [pc, #204]	; (8100c64 <HAL_FLASHEx_Erase+0x130>)
 8100b96:	2201      	movs	r2, #1
 8100b98:	771a      	strb	r2, [r3, #28]
 8100b9a:	e012      	b.n	8100bc2 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8100b9c:	4b32      	ldr	r3, [pc, #200]	; (8100c68 <HAL_FLASHEx_Erase+0x134>)
 8100b9e:	681b      	ldr	r3, [r3, #0]
 8100ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8100ba4:	2b00      	cmp	r3, #0
 8100ba6:	d009      	beq.n	8100bbc <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8100ba8:	4b2f      	ldr	r3, [pc, #188]	; (8100c68 <HAL_FLASHEx_Erase+0x134>)
 8100baa:	681b      	ldr	r3, [r3, #0]
 8100bac:	4a2e      	ldr	r2, [pc, #184]	; (8100c68 <HAL_FLASHEx_Erase+0x134>)
 8100bae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8100bb2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8100bb4:	4b2b      	ldr	r3, [pc, #172]	; (8100c64 <HAL_FLASHEx_Erase+0x130>)
 8100bb6:	2202      	movs	r2, #2
 8100bb8:	771a      	strb	r2, [r3, #28]
 8100bba:	e002      	b.n	8100bc2 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8100bbc:	4b29      	ldr	r3, [pc, #164]	; (8100c64 <HAL_FLASHEx_Erase+0x130>)
 8100bbe:	2200      	movs	r2, #0
 8100bc0:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8100bc2:	687b      	ldr	r3, [r7, #4]
 8100bc4:	681b      	ldr	r3, [r3, #0]
 8100bc6:	2b01      	cmp	r3, #1
 8100bc8:	d113      	bne.n	8100bf2 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8100bca:	687b      	ldr	r3, [r7, #4]
 8100bcc:	685b      	ldr	r3, [r3, #4]
 8100bce:	4618      	mov	r0, r3
 8100bd0:	f000 f84c 	bl	8100c6c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8100bd4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8100bd8:	f7ff fef8 	bl	81009cc <FLASH_WaitForLastOperation>
 8100bdc:	4603      	mov	r3, r0
 8100bde:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8100be0:	4b21      	ldr	r3, [pc, #132]	; (8100c68 <HAL_FLASHEx_Erase+0x134>)
 8100be2:	695b      	ldr	r3, [r3, #20]
 8100be4:	4a20      	ldr	r2, [pc, #128]	; (8100c68 <HAL_FLASHEx_Erase+0x134>)
 8100be6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8100bea:	f023 0304 	bic.w	r3, r3, #4
 8100bee:	6153      	str	r3, [r2, #20]
 8100bf0:	e02d      	b.n	8100c4e <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8100bf2:	683b      	ldr	r3, [r7, #0]
 8100bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8100bf8:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8100bfa:	687b      	ldr	r3, [r7, #4]
 8100bfc:	689b      	ldr	r3, [r3, #8]
 8100bfe:	60bb      	str	r3, [r7, #8]
 8100c00:	e01d      	b.n	8100c3e <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8100c02:	687b      	ldr	r3, [r7, #4]
 8100c04:	685b      	ldr	r3, [r3, #4]
 8100c06:	4619      	mov	r1, r3
 8100c08:	68b8      	ldr	r0, [r7, #8]
 8100c0a:	f000 f867 	bl	8100cdc <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8100c0e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8100c12:	f7ff fedb 	bl	81009cc <FLASH_WaitForLastOperation>
 8100c16:	4603      	mov	r3, r0
 8100c18:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8100c1a:	4b13      	ldr	r3, [pc, #76]	; (8100c68 <HAL_FLASHEx_Erase+0x134>)
 8100c1c:	695b      	ldr	r3, [r3, #20]
 8100c1e:	4a12      	ldr	r2, [pc, #72]	; (8100c68 <HAL_FLASHEx_Erase+0x134>)
 8100c20:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8100c24:	f023 0302 	bic.w	r3, r3, #2
 8100c28:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8100c2a:	7bfb      	ldrb	r3, [r7, #15]
 8100c2c:	2b00      	cmp	r3, #0
 8100c2e:	d003      	beq.n	8100c38 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8100c30:	683b      	ldr	r3, [r7, #0]
 8100c32:	68ba      	ldr	r2, [r7, #8]
 8100c34:	601a      	str	r2, [r3, #0]
          break;
 8100c36:	e00a      	b.n	8100c4e <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8100c38:	68bb      	ldr	r3, [r7, #8]
 8100c3a:	3301      	adds	r3, #1
 8100c3c:	60bb      	str	r3, [r7, #8]
 8100c3e:	687b      	ldr	r3, [r7, #4]
 8100c40:	689a      	ldr	r2, [r3, #8]
 8100c42:	687b      	ldr	r3, [r7, #4]
 8100c44:	68db      	ldr	r3, [r3, #12]
 8100c46:	4413      	add	r3, r2
 8100c48:	68ba      	ldr	r2, [r7, #8]
 8100c4a:	429a      	cmp	r2, r3
 8100c4c:	d3d9      	bcc.n	8100c02 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8100c4e:	f000 f889 	bl	8100d64 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8100c52:	4b04      	ldr	r3, [pc, #16]	; (8100c64 <HAL_FLASHEx_Erase+0x130>)
 8100c54:	2200      	movs	r2, #0
 8100c56:	701a      	strb	r2, [r3, #0]

  return status;
 8100c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8100c5a:	4618      	mov	r0, r3
 8100c5c:	3710      	adds	r7, #16
 8100c5e:	46bd      	mov	sp, r7
 8100c60:	bd80      	pop	{r7, pc}
 8100c62:	bf00      	nop
 8100c64:	2000000c 	.word	0x2000000c
 8100c68:	40022000 	.word	0x40022000

08100c6c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8100c6c:	b480      	push	{r7}
 8100c6e:	b083      	sub	sp, #12
 8100c70:	af00      	add	r7, sp, #0
 8100c72:	6078      	str	r0, [r7, #4]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8100c74:	4b18      	ldr	r3, [pc, #96]	; (8100cd8 <FLASH_MassErase+0x6c>)
 8100c76:	6a1b      	ldr	r3, [r3, #32]
 8100c78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8100c7c:	2b00      	cmp	r3, #0
 8100c7e:	d016      	beq.n	8100cae <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8100c80:	687b      	ldr	r3, [r7, #4]
 8100c82:	f003 0301 	and.w	r3, r3, #1
 8100c86:	2b00      	cmp	r3, #0
 8100c88:	d005      	beq.n	8100c96 <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8100c8a:	4b13      	ldr	r3, [pc, #76]	; (8100cd8 <FLASH_MassErase+0x6c>)
 8100c8c:	695b      	ldr	r3, [r3, #20]
 8100c8e:	4a12      	ldr	r2, [pc, #72]	; (8100cd8 <FLASH_MassErase+0x6c>)
 8100c90:	f043 0304 	orr.w	r3, r3, #4
 8100c94:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8100c96:	687b      	ldr	r3, [r7, #4]
 8100c98:	f003 0302 	and.w	r3, r3, #2
 8100c9c:	2b00      	cmp	r3, #0
 8100c9e:	d00e      	beq.n	8100cbe <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8100ca0:	4b0d      	ldr	r3, [pc, #52]	; (8100cd8 <FLASH_MassErase+0x6c>)
 8100ca2:	695b      	ldr	r3, [r3, #20]
 8100ca4:	4a0c      	ldr	r2, [pc, #48]	; (8100cd8 <FLASH_MassErase+0x6c>)
 8100ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8100caa:	6153      	str	r3, [r2, #20]
 8100cac:	e007      	b.n	8100cbe <FLASH_MassErase+0x52>
#endif
  }
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8100cae:	4b0a      	ldr	r3, [pc, #40]	; (8100cd8 <FLASH_MassErase+0x6c>)
 8100cb0:	695b      	ldr	r3, [r3, #20]
 8100cb2:	4a09      	ldr	r2, [pc, #36]	; (8100cd8 <FLASH_MassErase+0x6c>)
 8100cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8100cb8:	f043 0304 	orr.w	r3, r3, #4
 8100cbc:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8100cbe:	4b06      	ldr	r3, [pc, #24]	; (8100cd8 <FLASH_MassErase+0x6c>)
 8100cc0:	695b      	ldr	r3, [r3, #20]
 8100cc2:	4a05      	ldr	r2, [pc, #20]	; (8100cd8 <FLASH_MassErase+0x6c>)
 8100cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8100cc8:	6153      	str	r3, [r2, #20]
}
 8100cca:	bf00      	nop
 8100ccc:	370c      	adds	r7, #12
 8100cce:	46bd      	mov	sp, r7
 8100cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cd4:	4770      	bx	lr
 8100cd6:	bf00      	nop
 8100cd8:	40022000 	.word	0x40022000

08100cdc <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8100cdc:	b480      	push	{r7}
 8100cde:	b083      	sub	sp, #12
 8100ce0:	af00      	add	r7, sp, #0
 8100ce2:	6078      	str	r0, [r7, #4]
 8100ce4:	6039      	str	r1, [r7, #0]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8100ce6:	4b1e      	ldr	r3, [pc, #120]	; (8100d60 <FLASH_PageErase+0x84>)
 8100ce8:	6a1b      	ldr	r3, [r3, #32]
 8100cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8100cee:	2b00      	cmp	r3, #0
 8100cf0:	d106      	bne.n	8100d00 <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8100cf2:	4b1b      	ldr	r3, [pc, #108]	; (8100d60 <FLASH_PageErase+0x84>)
 8100cf4:	695b      	ldr	r3, [r3, #20]
 8100cf6:	4a1a      	ldr	r2, [pc, #104]	; (8100d60 <FLASH_PageErase+0x84>)
 8100cf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8100cfc:	6153      	str	r3, [r2, #20]
 8100cfe:	e011      	b.n	8100d24 <FLASH_PageErase+0x48>
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8100d00:	683b      	ldr	r3, [r7, #0]
 8100d02:	f003 0301 	and.w	r3, r3, #1
 8100d06:	2b00      	cmp	r3, #0
 8100d08:	d006      	beq.n	8100d18 <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8100d0a:	4b15      	ldr	r3, [pc, #84]	; (8100d60 <FLASH_PageErase+0x84>)
 8100d0c:	695b      	ldr	r3, [r3, #20]
 8100d0e:	4a14      	ldr	r2, [pc, #80]	; (8100d60 <FLASH_PageErase+0x84>)
 8100d10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8100d14:	6153      	str	r3, [r2, #20]
 8100d16:	e005      	b.n	8100d24 <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8100d18:	4b11      	ldr	r3, [pc, #68]	; (8100d60 <FLASH_PageErase+0x84>)
 8100d1a:	695b      	ldr	r3, [r3, #20]
 8100d1c:	4a10      	ldr	r2, [pc, #64]	; (8100d60 <FLASH_PageErase+0x84>)
 8100d1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8100d22:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8100d24:	4b0e      	ldr	r3, [pc, #56]	; (8100d60 <FLASH_PageErase+0x84>)
 8100d26:	695b      	ldr	r3, [r3, #20]
 8100d28:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8100d2c:	687b      	ldr	r3, [r7, #4]
 8100d2e:	00db      	lsls	r3, r3, #3
 8100d30:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8100d34:	490a      	ldr	r1, [pc, #40]	; (8100d60 <FLASH_PageErase+0x84>)
 8100d36:	4313      	orrs	r3, r2
 8100d38:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8100d3a:	4b09      	ldr	r3, [pc, #36]	; (8100d60 <FLASH_PageErase+0x84>)
 8100d3c:	695b      	ldr	r3, [r3, #20]
 8100d3e:	4a08      	ldr	r2, [pc, #32]	; (8100d60 <FLASH_PageErase+0x84>)
 8100d40:	f043 0302 	orr.w	r3, r3, #2
 8100d44:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8100d46:	4b06      	ldr	r3, [pc, #24]	; (8100d60 <FLASH_PageErase+0x84>)
 8100d48:	695b      	ldr	r3, [r3, #20]
 8100d4a:	4a05      	ldr	r2, [pc, #20]	; (8100d60 <FLASH_PageErase+0x84>)
 8100d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8100d50:	6153      	str	r3, [r2, #20]
}
 8100d52:	bf00      	nop
 8100d54:	370c      	adds	r7, #12
 8100d56:	46bd      	mov	sp, r7
 8100d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d5c:	4770      	bx	lr
 8100d5e:	bf00      	nop
 8100d60:	40022000 	.word	0x40022000

08100d64 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8100d64:	b480      	push	{r7}
 8100d66:	b083      	sub	sp, #12
 8100d68:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8100d6a:	4b21      	ldr	r3, [pc, #132]	; (8100df0 <FLASH_FlushCaches+0x8c>)
 8100d6c:	7f1b      	ldrb	r3, [r3, #28]
 8100d6e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8100d70:	79fb      	ldrb	r3, [r7, #7]
 8100d72:	2b01      	cmp	r3, #1
 8100d74:	d002      	beq.n	8100d7c <FLASH_FlushCaches+0x18>
 8100d76:	79fb      	ldrb	r3, [r7, #7]
 8100d78:	2b03      	cmp	r3, #3
 8100d7a:	d117      	bne.n	8100dac <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8100d7c:	4b1d      	ldr	r3, [pc, #116]	; (8100df4 <FLASH_FlushCaches+0x90>)
 8100d7e:	681b      	ldr	r3, [r3, #0]
 8100d80:	4a1c      	ldr	r2, [pc, #112]	; (8100df4 <FLASH_FlushCaches+0x90>)
 8100d82:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8100d86:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8100d88:	4b1a      	ldr	r3, [pc, #104]	; (8100df4 <FLASH_FlushCaches+0x90>)
 8100d8a:	681b      	ldr	r3, [r3, #0]
 8100d8c:	4a19      	ldr	r2, [pc, #100]	; (8100df4 <FLASH_FlushCaches+0x90>)
 8100d8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8100d92:	6013      	str	r3, [r2, #0]
 8100d94:	4b17      	ldr	r3, [pc, #92]	; (8100df4 <FLASH_FlushCaches+0x90>)
 8100d96:	681b      	ldr	r3, [r3, #0]
 8100d98:	4a16      	ldr	r2, [pc, #88]	; (8100df4 <FLASH_FlushCaches+0x90>)
 8100d9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8100d9e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8100da0:	4b14      	ldr	r3, [pc, #80]	; (8100df4 <FLASH_FlushCaches+0x90>)
 8100da2:	681b      	ldr	r3, [r3, #0]
 8100da4:	4a13      	ldr	r2, [pc, #76]	; (8100df4 <FLASH_FlushCaches+0x90>)
 8100da6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8100daa:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8100dac:	79fb      	ldrb	r3, [r7, #7]
 8100dae:	2b02      	cmp	r3, #2
 8100db0:	d002      	beq.n	8100db8 <FLASH_FlushCaches+0x54>
 8100db2:	79fb      	ldrb	r3, [r7, #7]
 8100db4:	2b03      	cmp	r3, #3
 8100db6:	d111      	bne.n	8100ddc <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8100db8:	4b0e      	ldr	r3, [pc, #56]	; (8100df4 <FLASH_FlushCaches+0x90>)
 8100dba:	681b      	ldr	r3, [r3, #0]
 8100dbc:	4a0d      	ldr	r2, [pc, #52]	; (8100df4 <FLASH_FlushCaches+0x90>)
 8100dbe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8100dc2:	6013      	str	r3, [r2, #0]
 8100dc4:	4b0b      	ldr	r3, [pc, #44]	; (8100df4 <FLASH_FlushCaches+0x90>)
 8100dc6:	681b      	ldr	r3, [r3, #0]
 8100dc8:	4a0a      	ldr	r2, [pc, #40]	; (8100df4 <FLASH_FlushCaches+0x90>)
 8100dca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8100dce:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8100dd0:	4b08      	ldr	r3, [pc, #32]	; (8100df4 <FLASH_FlushCaches+0x90>)
 8100dd2:	681b      	ldr	r3, [r3, #0]
 8100dd4:	4a07      	ldr	r2, [pc, #28]	; (8100df4 <FLASH_FlushCaches+0x90>)
 8100dd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8100dda:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8100ddc:	4b04      	ldr	r3, [pc, #16]	; (8100df0 <FLASH_FlushCaches+0x8c>)
 8100dde:	2200      	movs	r2, #0
 8100de0:	771a      	strb	r2, [r3, #28]
}
 8100de2:	bf00      	nop
 8100de4:	370c      	adds	r7, #12
 8100de6:	46bd      	mov	sp, r7
 8100de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100dec:	4770      	bx	lr
 8100dee:	bf00      	nop
 8100df0:	2000000c 	.word	0x2000000c
 8100df4:	40022000 	.word	0x40022000

08100df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8100df8:	b480      	push	{r7}
 8100dfa:	b087      	sub	sp, #28
 8100dfc:	af00      	add	r7, sp, #0
 8100dfe:	6078      	str	r0, [r7, #4]
 8100e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8100e02:	2300      	movs	r3, #0
 8100e04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8100e06:	e166      	b.n	81010d6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8100e08:	683b      	ldr	r3, [r7, #0]
 8100e0a:	681a      	ldr	r2, [r3, #0]
 8100e0c:	2101      	movs	r1, #1
 8100e0e:	697b      	ldr	r3, [r7, #20]
 8100e10:	fa01 f303 	lsl.w	r3, r1, r3
 8100e14:	4013      	ands	r3, r2
 8100e16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8100e18:	68fb      	ldr	r3, [r7, #12]
 8100e1a:	2b00      	cmp	r3, #0
 8100e1c:	f000 8158 	beq.w	81010d0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100e20:	683b      	ldr	r3, [r7, #0]
 8100e22:	685b      	ldr	r3, [r3, #4]
 8100e24:	f003 0303 	and.w	r3, r3, #3
 8100e28:	2b01      	cmp	r3, #1
 8100e2a:	d005      	beq.n	8100e38 <HAL_GPIO_Init+0x40>
 8100e2c:	683b      	ldr	r3, [r7, #0]
 8100e2e:	685b      	ldr	r3, [r3, #4]
 8100e30:	f003 0303 	and.w	r3, r3, #3
 8100e34:	2b02      	cmp	r3, #2
 8100e36:	d130      	bne.n	8100e9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100e38:	687b      	ldr	r3, [r7, #4]
 8100e3a:	689b      	ldr	r3, [r3, #8]
 8100e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8100e3e:	697b      	ldr	r3, [r7, #20]
 8100e40:	005b      	lsls	r3, r3, #1
 8100e42:	2203      	movs	r2, #3
 8100e44:	fa02 f303 	lsl.w	r3, r2, r3
 8100e48:	43db      	mvns	r3, r3
 8100e4a:	693a      	ldr	r2, [r7, #16]
 8100e4c:	4013      	ands	r3, r2
 8100e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8100e50:	683b      	ldr	r3, [r7, #0]
 8100e52:	68da      	ldr	r2, [r3, #12]
 8100e54:	697b      	ldr	r3, [r7, #20]
 8100e56:	005b      	lsls	r3, r3, #1
 8100e58:	fa02 f303 	lsl.w	r3, r2, r3
 8100e5c:	693a      	ldr	r2, [r7, #16]
 8100e5e:	4313      	orrs	r3, r2
 8100e60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8100e62:	687b      	ldr	r3, [r7, #4]
 8100e64:	693a      	ldr	r2, [r7, #16]
 8100e66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100e68:	687b      	ldr	r3, [r7, #4]
 8100e6a:	685b      	ldr	r3, [r3, #4]
 8100e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100e6e:	2201      	movs	r2, #1
 8100e70:	697b      	ldr	r3, [r7, #20]
 8100e72:	fa02 f303 	lsl.w	r3, r2, r3
 8100e76:	43db      	mvns	r3, r3
 8100e78:	693a      	ldr	r2, [r7, #16]
 8100e7a:	4013      	ands	r3, r2
 8100e7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8100e7e:	683b      	ldr	r3, [r7, #0]
 8100e80:	685b      	ldr	r3, [r3, #4]
 8100e82:	091b      	lsrs	r3, r3, #4
 8100e84:	f003 0201 	and.w	r2, r3, #1
 8100e88:	697b      	ldr	r3, [r7, #20]
 8100e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8100e8e:	693a      	ldr	r2, [r7, #16]
 8100e90:	4313      	orrs	r3, r2
 8100e92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8100e94:	687b      	ldr	r3, [r7, #4]
 8100e96:	693a      	ldr	r2, [r7, #16]
 8100e98:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100e9a:	683b      	ldr	r3, [r7, #0]
 8100e9c:	685b      	ldr	r3, [r3, #4]
 8100e9e:	f003 0303 	and.w	r3, r3, #3
 8100ea2:	2b03      	cmp	r3, #3
 8100ea4:	d017      	beq.n	8100ed6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8100ea6:	687b      	ldr	r3, [r7, #4]
 8100ea8:	68db      	ldr	r3, [r3, #12]
 8100eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100eac:	697b      	ldr	r3, [r7, #20]
 8100eae:	005b      	lsls	r3, r3, #1
 8100eb0:	2203      	movs	r2, #3
 8100eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8100eb6:	43db      	mvns	r3, r3
 8100eb8:	693a      	ldr	r2, [r7, #16]
 8100eba:	4013      	ands	r3, r2
 8100ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8100ebe:	683b      	ldr	r3, [r7, #0]
 8100ec0:	689a      	ldr	r2, [r3, #8]
 8100ec2:	697b      	ldr	r3, [r7, #20]
 8100ec4:	005b      	lsls	r3, r3, #1
 8100ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8100eca:	693a      	ldr	r2, [r7, #16]
 8100ecc:	4313      	orrs	r3, r2
 8100ece:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8100ed0:	687b      	ldr	r3, [r7, #4]
 8100ed2:	693a      	ldr	r2, [r7, #16]
 8100ed4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100ed6:	683b      	ldr	r3, [r7, #0]
 8100ed8:	685b      	ldr	r3, [r3, #4]
 8100eda:	f003 0303 	and.w	r3, r3, #3
 8100ede:	2b02      	cmp	r3, #2
 8100ee0:	d123      	bne.n	8100f2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8100ee2:	697b      	ldr	r3, [r7, #20]
 8100ee4:	08da      	lsrs	r2, r3, #3
 8100ee6:	687b      	ldr	r3, [r7, #4]
 8100ee8:	3208      	adds	r2, #8
 8100eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100eee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8100ef0:	697b      	ldr	r3, [r7, #20]
 8100ef2:	f003 0307 	and.w	r3, r3, #7
 8100ef6:	009b      	lsls	r3, r3, #2
 8100ef8:	220f      	movs	r2, #15
 8100efa:	fa02 f303 	lsl.w	r3, r2, r3
 8100efe:	43db      	mvns	r3, r3
 8100f00:	693a      	ldr	r2, [r7, #16]
 8100f02:	4013      	ands	r3, r2
 8100f04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8100f06:	683b      	ldr	r3, [r7, #0]
 8100f08:	691a      	ldr	r2, [r3, #16]
 8100f0a:	697b      	ldr	r3, [r7, #20]
 8100f0c:	f003 0307 	and.w	r3, r3, #7
 8100f10:	009b      	lsls	r3, r3, #2
 8100f12:	fa02 f303 	lsl.w	r3, r2, r3
 8100f16:	693a      	ldr	r2, [r7, #16]
 8100f18:	4313      	orrs	r3, r2
 8100f1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8100f1c:	697b      	ldr	r3, [r7, #20]
 8100f1e:	08da      	lsrs	r2, r3, #3
 8100f20:	687b      	ldr	r3, [r7, #4]
 8100f22:	3208      	adds	r2, #8
 8100f24:	6939      	ldr	r1, [r7, #16]
 8100f26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100f2a:	687b      	ldr	r3, [r7, #4]
 8100f2c:	681b      	ldr	r3, [r3, #0]
 8100f2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8100f30:	697b      	ldr	r3, [r7, #20]
 8100f32:	005b      	lsls	r3, r3, #1
 8100f34:	2203      	movs	r2, #3
 8100f36:	fa02 f303 	lsl.w	r3, r2, r3
 8100f3a:	43db      	mvns	r3, r3
 8100f3c:	693a      	ldr	r2, [r7, #16]
 8100f3e:	4013      	ands	r3, r2
 8100f40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8100f42:	683b      	ldr	r3, [r7, #0]
 8100f44:	685b      	ldr	r3, [r3, #4]
 8100f46:	f003 0203 	and.w	r2, r3, #3
 8100f4a:	697b      	ldr	r3, [r7, #20]
 8100f4c:	005b      	lsls	r3, r3, #1
 8100f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8100f52:	693a      	ldr	r2, [r7, #16]
 8100f54:	4313      	orrs	r3, r2
 8100f56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8100f58:	687b      	ldr	r3, [r7, #4]
 8100f5a:	693a      	ldr	r2, [r7, #16]
 8100f5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8100f5e:	683b      	ldr	r3, [r7, #0]
 8100f60:	685b      	ldr	r3, [r3, #4]
 8100f62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8100f66:	2b00      	cmp	r3, #0
 8100f68:	f000 80b2 	beq.w	81010d0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100f6c:	4b61      	ldr	r3, [pc, #388]	; (81010f4 <HAL_GPIO_Init+0x2fc>)
 8100f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8100f70:	4a60      	ldr	r2, [pc, #384]	; (81010f4 <HAL_GPIO_Init+0x2fc>)
 8100f72:	f043 0301 	orr.w	r3, r3, #1
 8100f76:	6613      	str	r3, [r2, #96]	; 0x60
 8100f78:	4b5e      	ldr	r3, [pc, #376]	; (81010f4 <HAL_GPIO_Init+0x2fc>)
 8100f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8100f7c:	f003 0301 	and.w	r3, r3, #1
 8100f80:	60bb      	str	r3, [r7, #8]
 8100f82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8100f84:	4a5c      	ldr	r2, [pc, #368]	; (81010f8 <HAL_GPIO_Init+0x300>)
 8100f86:	697b      	ldr	r3, [r7, #20]
 8100f88:	089b      	lsrs	r3, r3, #2
 8100f8a:	3302      	adds	r3, #2
 8100f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100f90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8100f92:	697b      	ldr	r3, [r7, #20]
 8100f94:	f003 0303 	and.w	r3, r3, #3
 8100f98:	009b      	lsls	r3, r3, #2
 8100f9a:	220f      	movs	r2, #15
 8100f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8100fa0:	43db      	mvns	r3, r3
 8100fa2:	693a      	ldr	r2, [r7, #16]
 8100fa4:	4013      	ands	r3, r2
 8100fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8100fa8:	687b      	ldr	r3, [r7, #4]
 8100faa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8100fae:	d02b      	beq.n	8101008 <HAL_GPIO_Init+0x210>
 8100fb0:	687b      	ldr	r3, [r7, #4]
 8100fb2:	4a52      	ldr	r2, [pc, #328]	; (81010fc <HAL_GPIO_Init+0x304>)
 8100fb4:	4293      	cmp	r3, r2
 8100fb6:	d025      	beq.n	8101004 <HAL_GPIO_Init+0x20c>
 8100fb8:	687b      	ldr	r3, [r7, #4]
 8100fba:	4a51      	ldr	r2, [pc, #324]	; (8101100 <HAL_GPIO_Init+0x308>)
 8100fbc:	4293      	cmp	r3, r2
 8100fbe:	d01f      	beq.n	8101000 <HAL_GPIO_Init+0x208>
 8100fc0:	687b      	ldr	r3, [r7, #4]
 8100fc2:	4a50      	ldr	r2, [pc, #320]	; (8101104 <HAL_GPIO_Init+0x30c>)
 8100fc4:	4293      	cmp	r3, r2
 8100fc6:	d019      	beq.n	8100ffc <HAL_GPIO_Init+0x204>
 8100fc8:	687b      	ldr	r3, [r7, #4]
 8100fca:	4a4f      	ldr	r2, [pc, #316]	; (8101108 <HAL_GPIO_Init+0x310>)
 8100fcc:	4293      	cmp	r3, r2
 8100fce:	d013      	beq.n	8100ff8 <HAL_GPIO_Init+0x200>
 8100fd0:	687b      	ldr	r3, [r7, #4]
 8100fd2:	4a4e      	ldr	r2, [pc, #312]	; (810110c <HAL_GPIO_Init+0x314>)
 8100fd4:	4293      	cmp	r3, r2
 8100fd6:	d00d      	beq.n	8100ff4 <HAL_GPIO_Init+0x1fc>
 8100fd8:	687b      	ldr	r3, [r7, #4]
 8100fda:	4a4d      	ldr	r2, [pc, #308]	; (8101110 <HAL_GPIO_Init+0x318>)
 8100fdc:	4293      	cmp	r3, r2
 8100fde:	d007      	beq.n	8100ff0 <HAL_GPIO_Init+0x1f8>
 8100fe0:	687b      	ldr	r3, [r7, #4]
 8100fe2:	4a4c      	ldr	r2, [pc, #304]	; (8101114 <HAL_GPIO_Init+0x31c>)
 8100fe4:	4293      	cmp	r3, r2
 8100fe6:	d101      	bne.n	8100fec <HAL_GPIO_Init+0x1f4>
 8100fe8:	2307      	movs	r3, #7
 8100fea:	e00e      	b.n	810100a <HAL_GPIO_Init+0x212>
 8100fec:	2308      	movs	r3, #8
 8100fee:	e00c      	b.n	810100a <HAL_GPIO_Init+0x212>
 8100ff0:	2306      	movs	r3, #6
 8100ff2:	e00a      	b.n	810100a <HAL_GPIO_Init+0x212>
 8100ff4:	2305      	movs	r3, #5
 8100ff6:	e008      	b.n	810100a <HAL_GPIO_Init+0x212>
 8100ff8:	2304      	movs	r3, #4
 8100ffa:	e006      	b.n	810100a <HAL_GPIO_Init+0x212>
 8100ffc:	2303      	movs	r3, #3
 8100ffe:	e004      	b.n	810100a <HAL_GPIO_Init+0x212>
 8101000:	2302      	movs	r3, #2
 8101002:	e002      	b.n	810100a <HAL_GPIO_Init+0x212>
 8101004:	2301      	movs	r3, #1
 8101006:	e000      	b.n	810100a <HAL_GPIO_Init+0x212>
 8101008:	2300      	movs	r3, #0
 810100a:	697a      	ldr	r2, [r7, #20]
 810100c:	f002 0203 	and.w	r2, r2, #3
 8101010:	0092      	lsls	r2, r2, #2
 8101012:	4093      	lsls	r3, r2
 8101014:	693a      	ldr	r2, [r7, #16]
 8101016:	4313      	orrs	r3, r2
 8101018:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 810101a:	4937      	ldr	r1, [pc, #220]	; (81010f8 <HAL_GPIO_Init+0x300>)
 810101c:	697b      	ldr	r3, [r7, #20]
 810101e:	089b      	lsrs	r3, r3, #2
 8101020:	3302      	adds	r3, #2
 8101022:	693a      	ldr	r2, [r7, #16]
 8101024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101028:	4b3b      	ldr	r3, [pc, #236]	; (8101118 <HAL_GPIO_Init+0x320>)
 810102a:	689b      	ldr	r3, [r3, #8]
 810102c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 810102e:	68fb      	ldr	r3, [r7, #12]
 8101030:	43db      	mvns	r3, r3
 8101032:	693a      	ldr	r2, [r7, #16]
 8101034:	4013      	ands	r3, r2
 8101036:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8101038:	683b      	ldr	r3, [r7, #0]
 810103a:	685b      	ldr	r3, [r3, #4]
 810103c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101040:	2b00      	cmp	r3, #0
 8101042:	d003      	beq.n	810104c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8101044:	693a      	ldr	r2, [r7, #16]
 8101046:	68fb      	ldr	r3, [r7, #12]
 8101048:	4313      	orrs	r3, r2
 810104a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 810104c:	4a32      	ldr	r2, [pc, #200]	; (8101118 <HAL_GPIO_Init+0x320>)
 810104e:	693b      	ldr	r3, [r7, #16]
 8101050:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8101052:	4b31      	ldr	r3, [pc, #196]	; (8101118 <HAL_GPIO_Init+0x320>)
 8101054:	68db      	ldr	r3, [r3, #12]
 8101056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8101058:	68fb      	ldr	r3, [r7, #12]
 810105a:	43db      	mvns	r3, r3
 810105c:	693a      	ldr	r2, [r7, #16]
 810105e:	4013      	ands	r3, r2
 8101060:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8101062:	683b      	ldr	r3, [r7, #0]
 8101064:	685b      	ldr	r3, [r3, #4]
 8101066:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810106a:	2b00      	cmp	r3, #0
 810106c:	d003      	beq.n	8101076 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 810106e:	693a      	ldr	r2, [r7, #16]
 8101070:	68fb      	ldr	r3, [r7, #12]
 8101072:	4313      	orrs	r3, r2
 8101074:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8101076:	4a28      	ldr	r2, [pc, #160]	; (8101118 <HAL_GPIO_Init+0x320>)
 8101078:	693b      	ldr	r3, [r7, #16]
 810107a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 810107c:	4b26      	ldr	r3, [pc, #152]	; (8101118 <HAL_GPIO_Init+0x320>)
 810107e:	685b      	ldr	r3, [r3, #4]
 8101080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8101082:	68fb      	ldr	r3, [r7, #12]
 8101084:	43db      	mvns	r3, r3
 8101086:	693a      	ldr	r2, [r7, #16]
 8101088:	4013      	ands	r3, r2
 810108a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 810108c:	683b      	ldr	r3, [r7, #0]
 810108e:	685b      	ldr	r3, [r3, #4]
 8101090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101094:	2b00      	cmp	r3, #0
 8101096:	d003      	beq.n	81010a0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8101098:	693a      	ldr	r2, [r7, #16]
 810109a:	68fb      	ldr	r3, [r7, #12]
 810109c:	4313      	orrs	r3, r2
 810109e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 81010a0:	4a1d      	ldr	r2, [pc, #116]	; (8101118 <HAL_GPIO_Init+0x320>)
 81010a2:	693b      	ldr	r3, [r7, #16]
 81010a4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 81010a6:	4b1c      	ldr	r3, [pc, #112]	; (8101118 <HAL_GPIO_Init+0x320>)
 81010a8:	681b      	ldr	r3, [r3, #0]
 81010aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 81010ac:	68fb      	ldr	r3, [r7, #12]
 81010ae:	43db      	mvns	r3, r3
 81010b0:	693a      	ldr	r2, [r7, #16]
 81010b2:	4013      	ands	r3, r2
 81010b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 81010b6:	683b      	ldr	r3, [r7, #0]
 81010b8:	685b      	ldr	r3, [r3, #4]
 81010ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81010be:	2b00      	cmp	r3, #0
 81010c0:	d003      	beq.n	81010ca <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 81010c2:	693a      	ldr	r2, [r7, #16]
 81010c4:	68fb      	ldr	r3, [r7, #12]
 81010c6:	4313      	orrs	r3, r2
 81010c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 81010ca:	4a13      	ldr	r2, [pc, #76]	; (8101118 <HAL_GPIO_Init+0x320>)
 81010cc:	693b      	ldr	r3, [r7, #16]
 81010ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 81010d0:	697b      	ldr	r3, [r7, #20]
 81010d2:	3301      	adds	r3, #1
 81010d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 81010d6:	683b      	ldr	r3, [r7, #0]
 81010d8:	681a      	ldr	r2, [r3, #0]
 81010da:	697b      	ldr	r3, [r7, #20]
 81010dc:	fa22 f303 	lsr.w	r3, r2, r3
 81010e0:	2b00      	cmp	r3, #0
 81010e2:	f47f ae91 	bne.w	8100e08 <HAL_GPIO_Init+0x10>
  }
}
 81010e6:	bf00      	nop
 81010e8:	bf00      	nop
 81010ea:	371c      	adds	r7, #28
 81010ec:	46bd      	mov	sp, r7
 81010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010f2:	4770      	bx	lr
 81010f4:	40021000 	.word	0x40021000
 81010f8:	40010000 	.word	0x40010000
 81010fc:	48000400 	.word	0x48000400
 8101100:	48000800 	.word	0x48000800
 8101104:	48000c00 	.word	0x48000c00
 8101108:	48001000 	.word	0x48001000
 810110c:	48001400 	.word	0x48001400
 8101110:	48001800 	.word	0x48001800
 8101114:	48001c00 	.word	0x48001c00
 8101118:	40010400 	.word	0x40010400

0810111c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 810111c:	b5f0      	push	{r4, r5, r6, r7, lr}
 810111e:	b08f      	sub	sp, #60	; 0x3c
 8101120:	af0a      	add	r7, sp, #40	; 0x28
 8101122:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8101124:	687b      	ldr	r3, [r7, #4]
 8101126:	2b00      	cmp	r3, #0
 8101128:	d101      	bne.n	810112e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 810112a:	2301      	movs	r3, #1
 810112c:	e116      	b.n	810135c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 810112e:	687b      	ldr	r3, [r7, #4]
 8101130:	681b      	ldr	r3, [r3, #0]
 8101132:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8101134:	687b      	ldr	r3, [r7, #4]
 8101136:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 810113a:	b2db      	uxtb	r3, r3
 810113c:	2b00      	cmp	r3, #0
 810113e:	d106      	bne.n	810114e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8101140:	687b      	ldr	r3, [r7, #4]
 8101142:	2200      	movs	r2, #0
 8101144:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8101148:	6878      	ldr	r0, [r7, #4]
 810114a:	f006 f875 	bl	8107238 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 810114e:	687b      	ldr	r3, [r7, #4]
 8101150:	2203      	movs	r2, #3
 8101152:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8101156:	68bb      	ldr	r3, [r7, #8]
 8101158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810115a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810115e:	2b00      	cmp	r3, #0
 8101160:	d102      	bne.n	8101168 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8101162:	687b      	ldr	r3, [r7, #4]
 8101164:	2200      	movs	r2, #0
 8101166:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8101168:	687b      	ldr	r3, [r7, #4]
 810116a:	681b      	ldr	r3, [r3, #0]
 810116c:	4618      	mov	r0, r3
 810116e:	f002 ff76 	bl	810405e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8101172:	687b      	ldr	r3, [r7, #4]
 8101174:	681b      	ldr	r3, [r3, #0]
 8101176:	603b      	str	r3, [r7, #0]
 8101178:	687e      	ldr	r6, [r7, #4]
 810117a:	466d      	mov	r5, sp
 810117c:	f106 0410 	add.w	r4, r6, #16
 8101180:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101182:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101184:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101186:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101188:	e894 0003 	ldmia.w	r4, {r0, r1}
 810118c:	e885 0003 	stmia.w	r5, {r0, r1}
 8101190:	1d33      	adds	r3, r6, #4
 8101192:	cb0e      	ldmia	r3, {r1, r2, r3}
 8101194:	6838      	ldr	r0, [r7, #0]
 8101196:	f002 fe89 	bl	8103eac <USB_CoreInit>
 810119a:	4603      	mov	r3, r0
 810119c:	2b00      	cmp	r3, #0
 810119e:	d005      	beq.n	81011ac <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 81011a0:	687b      	ldr	r3, [r7, #4]
 81011a2:	2202      	movs	r2, #2
 81011a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 81011a8:	2301      	movs	r3, #1
 81011aa:	e0d7      	b.n	810135c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 81011ac:	687b      	ldr	r3, [r7, #4]
 81011ae:	681b      	ldr	r3, [r3, #0]
 81011b0:	2100      	movs	r1, #0
 81011b2:	4618      	mov	r0, r3
 81011b4:	f002 ff64 	bl	8104080 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81011b8:	2300      	movs	r3, #0
 81011ba:	73fb      	strb	r3, [r7, #15]
 81011bc:	e04a      	b.n	8101254 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 81011be:	7bfa      	ldrb	r2, [r7, #15]
 81011c0:	6879      	ldr	r1, [r7, #4]
 81011c2:	4613      	mov	r3, r2
 81011c4:	00db      	lsls	r3, r3, #3
 81011c6:	4413      	add	r3, r2
 81011c8:	009b      	lsls	r3, r3, #2
 81011ca:	440b      	add	r3, r1
 81011cc:	333d      	adds	r3, #61	; 0x3d
 81011ce:	2201      	movs	r2, #1
 81011d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 81011d2:	7bfa      	ldrb	r2, [r7, #15]
 81011d4:	6879      	ldr	r1, [r7, #4]
 81011d6:	4613      	mov	r3, r2
 81011d8:	00db      	lsls	r3, r3, #3
 81011da:	4413      	add	r3, r2
 81011dc:	009b      	lsls	r3, r3, #2
 81011de:	440b      	add	r3, r1
 81011e0:	333c      	adds	r3, #60	; 0x3c
 81011e2:	7bfa      	ldrb	r2, [r7, #15]
 81011e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 81011e6:	7bfa      	ldrb	r2, [r7, #15]
 81011e8:	7bfb      	ldrb	r3, [r7, #15]
 81011ea:	b298      	uxth	r0, r3
 81011ec:	6879      	ldr	r1, [r7, #4]
 81011ee:	4613      	mov	r3, r2
 81011f0:	00db      	lsls	r3, r3, #3
 81011f2:	4413      	add	r3, r2
 81011f4:	009b      	lsls	r3, r3, #2
 81011f6:	440b      	add	r3, r1
 81011f8:	3344      	adds	r3, #68	; 0x44
 81011fa:	4602      	mov	r2, r0
 81011fc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 81011fe:	7bfa      	ldrb	r2, [r7, #15]
 8101200:	6879      	ldr	r1, [r7, #4]
 8101202:	4613      	mov	r3, r2
 8101204:	00db      	lsls	r3, r3, #3
 8101206:	4413      	add	r3, r2
 8101208:	009b      	lsls	r3, r3, #2
 810120a:	440b      	add	r3, r1
 810120c:	3340      	adds	r3, #64	; 0x40
 810120e:	2200      	movs	r2, #0
 8101210:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8101212:	7bfa      	ldrb	r2, [r7, #15]
 8101214:	6879      	ldr	r1, [r7, #4]
 8101216:	4613      	mov	r3, r2
 8101218:	00db      	lsls	r3, r3, #3
 810121a:	4413      	add	r3, r2
 810121c:	009b      	lsls	r3, r3, #2
 810121e:	440b      	add	r3, r1
 8101220:	3348      	adds	r3, #72	; 0x48
 8101222:	2200      	movs	r2, #0
 8101224:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8101226:	7bfa      	ldrb	r2, [r7, #15]
 8101228:	6879      	ldr	r1, [r7, #4]
 810122a:	4613      	mov	r3, r2
 810122c:	00db      	lsls	r3, r3, #3
 810122e:	4413      	add	r3, r2
 8101230:	009b      	lsls	r3, r3, #2
 8101232:	440b      	add	r3, r1
 8101234:	334c      	adds	r3, #76	; 0x4c
 8101236:	2200      	movs	r2, #0
 8101238:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 810123a:	7bfa      	ldrb	r2, [r7, #15]
 810123c:	6879      	ldr	r1, [r7, #4]
 810123e:	4613      	mov	r3, r2
 8101240:	00db      	lsls	r3, r3, #3
 8101242:	4413      	add	r3, r2
 8101244:	009b      	lsls	r3, r3, #2
 8101246:	440b      	add	r3, r1
 8101248:	3354      	adds	r3, #84	; 0x54
 810124a:	2200      	movs	r2, #0
 810124c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 810124e:	7bfb      	ldrb	r3, [r7, #15]
 8101250:	3301      	adds	r3, #1
 8101252:	73fb      	strb	r3, [r7, #15]
 8101254:	7bfa      	ldrb	r2, [r7, #15]
 8101256:	687b      	ldr	r3, [r7, #4]
 8101258:	685b      	ldr	r3, [r3, #4]
 810125a:	429a      	cmp	r2, r3
 810125c:	d3af      	bcc.n	81011be <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 810125e:	2300      	movs	r3, #0
 8101260:	73fb      	strb	r3, [r7, #15]
 8101262:	e044      	b.n	81012ee <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8101264:	7bfa      	ldrb	r2, [r7, #15]
 8101266:	6879      	ldr	r1, [r7, #4]
 8101268:	4613      	mov	r3, r2
 810126a:	00db      	lsls	r3, r3, #3
 810126c:	4413      	add	r3, r2
 810126e:	009b      	lsls	r3, r3, #2
 8101270:	440b      	add	r3, r1
 8101272:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8101276:	2200      	movs	r2, #0
 8101278:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 810127a:	7bfa      	ldrb	r2, [r7, #15]
 810127c:	6879      	ldr	r1, [r7, #4]
 810127e:	4613      	mov	r3, r2
 8101280:	00db      	lsls	r3, r3, #3
 8101282:	4413      	add	r3, r2
 8101284:	009b      	lsls	r3, r3, #2
 8101286:	440b      	add	r3, r1
 8101288:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 810128c:	7bfa      	ldrb	r2, [r7, #15]
 810128e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8101290:	7bfa      	ldrb	r2, [r7, #15]
 8101292:	6879      	ldr	r1, [r7, #4]
 8101294:	4613      	mov	r3, r2
 8101296:	00db      	lsls	r3, r3, #3
 8101298:	4413      	add	r3, r2
 810129a:	009b      	lsls	r3, r3, #2
 810129c:	440b      	add	r3, r1
 810129e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 81012a2:	2200      	movs	r2, #0
 81012a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 81012a6:	7bfa      	ldrb	r2, [r7, #15]
 81012a8:	6879      	ldr	r1, [r7, #4]
 81012aa:	4613      	mov	r3, r2
 81012ac:	00db      	lsls	r3, r3, #3
 81012ae:	4413      	add	r3, r2
 81012b0:	009b      	lsls	r3, r3, #2
 81012b2:	440b      	add	r3, r1
 81012b4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 81012b8:	2200      	movs	r2, #0
 81012ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 81012bc:	7bfa      	ldrb	r2, [r7, #15]
 81012be:	6879      	ldr	r1, [r7, #4]
 81012c0:	4613      	mov	r3, r2
 81012c2:	00db      	lsls	r3, r3, #3
 81012c4:	4413      	add	r3, r2
 81012c6:	009b      	lsls	r3, r3, #2
 81012c8:	440b      	add	r3, r1
 81012ca:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 81012ce:	2200      	movs	r2, #0
 81012d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 81012d2:	7bfa      	ldrb	r2, [r7, #15]
 81012d4:	6879      	ldr	r1, [r7, #4]
 81012d6:	4613      	mov	r3, r2
 81012d8:	00db      	lsls	r3, r3, #3
 81012da:	4413      	add	r3, r2
 81012dc:	009b      	lsls	r3, r3, #2
 81012de:	440b      	add	r3, r1
 81012e0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 81012e4:	2200      	movs	r2, #0
 81012e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81012e8:	7bfb      	ldrb	r3, [r7, #15]
 81012ea:	3301      	adds	r3, #1
 81012ec:	73fb      	strb	r3, [r7, #15]
 81012ee:	7bfa      	ldrb	r2, [r7, #15]
 81012f0:	687b      	ldr	r3, [r7, #4]
 81012f2:	685b      	ldr	r3, [r3, #4]
 81012f4:	429a      	cmp	r2, r3
 81012f6:	d3b5      	bcc.n	8101264 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 81012f8:	687b      	ldr	r3, [r7, #4]
 81012fa:	681b      	ldr	r3, [r3, #0]
 81012fc:	603b      	str	r3, [r7, #0]
 81012fe:	687e      	ldr	r6, [r7, #4]
 8101300:	466d      	mov	r5, sp
 8101302:	f106 0410 	add.w	r4, r6, #16
 8101306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810130a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810130c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810130e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8101312:	e885 0003 	stmia.w	r5, {r0, r1}
 8101316:	1d33      	adds	r3, r6, #4
 8101318:	cb0e      	ldmia	r3, {r1, r2, r3}
 810131a:	6838      	ldr	r0, [r7, #0]
 810131c:	f002 fefc 	bl	8104118 <USB_DevInit>
 8101320:	4603      	mov	r3, r0
 8101322:	2b00      	cmp	r3, #0
 8101324:	d005      	beq.n	8101332 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8101326:	687b      	ldr	r3, [r7, #4]
 8101328:	2202      	movs	r2, #2
 810132a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 810132e:	2301      	movs	r3, #1
 8101330:	e014      	b.n	810135c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8101332:	687b      	ldr	r3, [r7, #4]
 8101334:	2200      	movs	r2, #0
 8101336:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 810133a:	687b      	ldr	r3, [r7, #4]
 810133c:	2201      	movs	r2, #1
 810133e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8101342:	687b      	ldr	r3, [r7, #4]
 8101344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101346:	2b01      	cmp	r3, #1
 8101348:	d102      	bne.n	8101350 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 810134a:	6878      	ldr	r0, [r7, #4]
 810134c:	f001 f882 	bl	8102454 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8101350:	687b      	ldr	r3, [r7, #4]
 8101352:	681b      	ldr	r3, [r3, #0]
 8101354:	4618      	mov	r0, r3
 8101356:	f003 ff84 	bl	8105262 <USB_DevDisconnect>

  return HAL_OK;
 810135a:	2300      	movs	r3, #0
}
 810135c:	4618      	mov	r0, r3
 810135e:	3714      	adds	r7, #20
 8101360:	46bd      	mov	sp, r7
 8101362:	bdf0      	pop	{r4, r5, r6, r7, pc}

08101364 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8101364:	b580      	push	{r7, lr}
 8101366:	b084      	sub	sp, #16
 8101368:	af00      	add	r7, sp, #0
 810136a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 810136c:	687b      	ldr	r3, [r7, #4]
 810136e:	681b      	ldr	r3, [r3, #0]
 8101370:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8101372:	687b      	ldr	r3, [r7, #4]
 8101374:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8101378:	2b01      	cmp	r3, #1
 810137a:	d101      	bne.n	8101380 <HAL_PCD_Start+0x1c>
 810137c:	2302      	movs	r3, #2
 810137e:	e01c      	b.n	81013ba <HAL_PCD_Start+0x56>
 8101380:	687b      	ldr	r3, [r7, #4]
 8101382:	2201      	movs	r2, #1
 8101384:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8101388:	687b      	ldr	r3, [r7, #4]
 810138a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810138c:	2b01      	cmp	r3, #1
 810138e:	d105      	bne.n	810139c <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8101390:	68fb      	ldr	r3, [r7, #12]
 8101392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8101394:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8101398:	68fb      	ldr	r3, [r7, #12]
 810139a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 810139c:	687b      	ldr	r3, [r7, #4]
 810139e:	681b      	ldr	r3, [r3, #0]
 81013a0:	4618      	mov	r0, r3
 81013a2:	f002 fe4b 	bl	810403c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 81013a6:	687b      	ldr	r3, [r7, #4]
 81013a8:	681b      	ldr	r3, [r3, #0]
 81013aa:	4618      	mov	r0, r3
 81013ac:	f003 ff38 	bl	8105220 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 81013b0:	687b      	ldr	r3, [r7, #4]
 81013b2:	2200      	movs	r2, #0
 81013b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 81013b8:	2300      	movs	r3, #0
}
 81013ba:	4618      	mov	r0, r3
 81013bc:	3710      	adds	r7, #16
 81013be:	46bd      	mov	sp, r7
 81013c0:	bd80      	pop	{r7, pc}

081013c2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 81013c2:	b590      	push	{r4, r7, lr}
 81013c4:	b08d      	sub	sp, #52	; 0x34
 81013c6:	af00      	add	r7, sp, #0
 81013c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 81013ca:	687b      	ldr	r3, [r7, #4]
 81013cc:	681b      	ldr	r3, [r3, #0]
 81013ce:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81013d0:	6a3b      	ldr	r3, [r7, #32]
 81013d2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 81013d4:	687b      	ldr	r3, [r7, #4]
 81013d6:	681b      	ldr	r3, [r3, #0]
 81013d8:	4618      	mov	r0, r3
 81013da:	f003 fff6 	bl	81053ca <USB_GetMode>
 81013de:	4603      	mov	r3, r0
 81013e0:	2b00      	cmp	r3, #0
 81013e2:	f040 847e 	bne.w	8101ce2 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 81013e6:	687b      	ldr	r3, [r7, #4]
 81013e8:	681b      	ldr	r3, [r3, #0]
 81013ea:	4618      	mov	r0, r3
 81013ec:	f003 ff5a 	bl	81052a4 <USB_ReadInterrupts>
 81013f0:	4603      	mov	r3, r0
 81013f2:	2b00      	cmp	r3, #0
 81013f4:	f000 8474 	beq.w	8101ce0 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 81013f8:	69fb      	ldr	r3, [r7, #28]
 81013fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81013fe:	689b      	ldr	r3, [r3, #8]
 8101400:	0a1b      	lsrs	r3, r3, #8
 8101402:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8101406:	687b      	ldr	r3, [r7, #4]
 8101408:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 810140c:	687b      	ldr	r3, [r7, #4]
 810140e:	681b      	ldr	r3, [r3, #0]
 8101410:	4618      	mov	r0, r3
 8101412:	f003 ff47 	bl	81052a4 <USB_ReadInterrupts>
 8101416:	4603      	mov	r3, r0
 8101418:	f003 0302 	and.w	r3, r3, #2
 810141c:	2b02      	cmp	r3, #2
 810141e:	d107      	bne.n	8101430 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8101420:	687b      	ldr	r3, [r7, #4]
 8101422:	681b      	ldr	r3, [r3, #0]
 8101424:	695a      	ldr	r2, [r3, #20]
 8101426:	687b      	ldr	r3, [r7, #4]
 8101428:	681b      	ldr	r3, [r3, #0]
 810142a:	f002 0202 	and.w	r2, r2, #2
 810142e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8101430:	687b      	ldr	r3, [r7, #4]
 8101432:	681b      	ldr	r3, [r3, #0]
 8101434:	4618      	mov	r0, r3
 8101436:	f003 ff35 	bl	81052a4 <USB_ReadInterrupts>
 810143a:	4603      	mov	r3, r0
 810143c:	f003 0310 	and.w	r3, r3, #16
 8101440:	2b10      	cmp	r3, #16
 8101442:	d161      	bne.n	8101508 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8101444:	687b      	ldr	r3, [r7, #4]
 8101446:	681b      	ldr	r3, [r3, #0]
 8101448:	699a      	ldr	r2, [r3, #24]
 810144a:	687b      	ldr	r3, [r7, #4]
 810144c:	681b      	ldr	r3, [r3, #0]
 810144e:	f022 0210 	bic.w	r2, r2, #16
 8101452:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8101454:	6a3b      	ldr	r3, [r7, #32]
 8101456:	6a1b      	ldr	r3, [r3, #32]
 8101458:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 810145a:	69bb      	ldr	r3, [r7, #24]
 810145c:	f003 020f 	and.w	r2, r3, #15
 8101460:	4613      	mov	r3, r2
 8101462:	00db      	lsls	r3, r3, #3
 8101464:	4413      	add	r3, r2
 8101466:	009b      	lsls	r3, r3, #2
 8101468:	f503 731e 	add.w	r3, r3, #632	; 0x278
 810146c:	687a      	ldr	r2, [r7, #4]
 810146e:	4413      	add	r3, r2
 8101470:	3304      	adds	r3, #4
 8101472:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8101474:	69bb      	ldr	r3, [r7, #24]
 8101476:	0c5b      	lsrs	r3, r3, #17
 8101478:	f003 030f 	and.w	r3, r3, #15
 810147c:	2b02      	cmp	r3, #2
 810147e:	d124      	bne.n	81014ca <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8101480:	69ba      	ldr	r2, [r7, #24]
 8101482:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8101486:	4013      	ands	r3, r2
 8101488:	2b00      	cmp	r3, #0
 810148a:	d035      	beq.n	81014f8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 810148c:	697b      	ldr	r3, [r7, #20]
 810148e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8101490:	69bb      	ldr	r3, [r7, #24]
 8101492:	091b      	lsrs	r3, r3, #4
 8101494:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8101496:	f3c3 030a 	ubfx	r3, r3, #0, #11
 810149a:	b29b      	uxth	r3, r3
 810149c:	461a      	mov	r2, r3
 810149e:	6a38      	ldr	r0, [r7, #32]
 81014a0:	f003 fd6c 	bl	8104f7c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 81014a4:	697b      	ldr	r3, [r7, #20]
 81014a6:	691a      	ldr	r2, [r3, #16]
 81014a8:	69bb      	ldr	r3, [r7, #24]
 81014aa:	091b      	lsrs	r3, r3, #4
 81014ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 81014b0:	441a      	add	r2, r3
 81014b2:	697b      	ldr	r3, [r7, #20]
 81014b4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 81014b6:	697b      	ldr	r3, [r7, #20]
 81014b8:	6a1a      	ldr	r2, [r3, #32]
 81014ba:	69bb      	ldr	r3, [r7, #24]
 81014bc:	091b      	lsrs	r3, r3, #4
 81014be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 81014c2:	441a      	add	r2, r3
 81014c4:	697b      	ldr	r3, [r7, #20]
 81014c6:	621a      	str	r2, [r3, #32]
 81014c8:	e016      	b.n	81014f8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 81014ca:	69bb      	ldr	r3, [r7, #24]
 81014cc:	0c5b      	lsrs	r3, r3, #17
 81014ce:	f003 030f 	and.w	r3, r3, #15
 81014d2:	2b06      	cmp	r3, #6
 81014d4:	d110      	bne.n	81014f8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 81014d6:	687b      	ldr	r3, [r7, #4]
 81014d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 81014dc:	2208      	movs	r2, #8
 81014de:	4619      	mov	r1, r3
 81014e0:	6a38      	ldr	r0, [r7, #32]
 81014e2:	f003 fd4b 	bl	8104f7c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 81014e6:	697b      	ldr	r3, [r7, #20]
 81014e8:	6a1a      	ldr	r2, [r3, #32]
 81014ea:	69bb      	ldr	r3, [r7, #24]
 81014ec:	091b      	lsrs	r3, r3, #4
 81014ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 81014f2:	441a      	add	r2, r3
 81014f4:	697b      	ldr	r3, [r7, #20]
 81014f6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 81014f8:	687b      	ldr	r3, [r7, #4]
 81014fa:	681b      	ldr	r3, [r3, #0]
 81014fc:	699a      	ldr	r2, [r3, #24]
 81014fe:	687b      	ldr	r3, [r7, #4]
 8101500:	681b      	ldr	r3, [r3, #0]
 8101502:	f042 0210 	orr.w	r2, r2, #16
 8101506:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8101508:	687b      	ldr	r3, [r7, #4]
 810150a:	681b      	ldr	r3, [r3, #0]
 810150c:	4618      	mov	r0, r3
 810150e:	f003 fec9 	bl	81052a4 <USB_ReadInterrupts>
 8101512:	4603      	mov	r3, r0
 8101514:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8101518:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 810151c:	f040 80a7 	bne.w	810166e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8101520:	2300      	movs	r3, #0
 8101522:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8101524:	687b      	ldr	r3, [r7, #4]
 8101526:	681b      	ldr	r3, [r3, #0]
 8101528:	4618      	mov	r0, r3
 810152a:	f003 fece 	bl	81052ca <USB_ReadDevAllOutEpInterrupt>
 810152e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8101530:	e099      	b.n	8101666 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8101532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101534:	f003 0301 	and.w	r3, r3, #1
 8101538:	2b00      	cmp	r3, #0
 810153a:	f000 808e 	beq.w	810165a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 810153e:	687b      	ldr	r3, [r7, #4]
 8101540:	681b      	ldr	r3, [r3, #0]
 8101542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101544:	b2d2      	uxtb	r2, r2
 8101546:	4611      	mov	r1, r2
 8101548:	4618      	mov	r0, r3
 810154a:	f003 fef2 	bl	8105332 <USB_ReadDevOutEPInterrupt>
 810154e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8101550:	693b      	ldr	r3, [r7, #16]
 8101552:	f003 0301 	and.w	r3, r3, #1
 8101556:	2b00      	cmp	r3, #0
 8101558:	d00c      	beq.n	8101574 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 810155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810155c:	015a      	lsls	r2, r3, #5
 810155e:	69fb      	ldr	r3, [r7, #28]
 8101560:	4413      	add	r3, r2
 8101562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8101566:	461a      	mov	r2, r3
 8101568:	2301      	movs	r3, #1
 810156a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 810156c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 810156e:	6878      	ldr	r0, [r7, #4]
 8101570:	f000 fe96 	bl	81022a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8101574:	693b      	ldr	r3, [r7, #16]
 8101576:	f003 0308 	and.w	r3, r3, #8
 810157a:	2b00      	cmp	r3, #0
 810157c:	d00c      	beq.n	8101598 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 810157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101580:	015a      	lsls	r2, r3, #5
 8101582:	69fb      	ldr	r3, [r7, #28]
 8101584:	4413      	add	r3, r2
 8101586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810158a:	461a      	mov	r2, r3
 810158c:	2308      	movs	r3, #8
 810158e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8101590:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8101592:	6878      	ldr	r0, [r7, #4]
 8101594:	f000 fed2 	bl	810233c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8101598:	693b      	ldr	r3, [r7, #16]
 810159a:	f003 0310 	and.w	r3, r3, #16
 810159e:	2b00      	cmp	r3, #0
 81015a0:	d008      	beq.n	81015b4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 81015a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81015a4:	015a      	lsls	r2, r3, #5
 81015a6:	69fb      	ldr	r3, [r7, #28]
 81015a8:	4413      	add	r3, r2
 81015aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81015ae:	461a      	mov	r2, r3
 81015b0:	2310      	movs	r3, #16
 81015b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 81015b4:	693b      	ldr	r3, [r7, #16]
 81015b6:	f003 0302 	and.w	r3, r3, #2
 81015ba:	2b00      	cmp	r3, #0
 81015bc:	d030      	beq.n	8101620 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 81015be:	6a3b      	ldr	r3, [r7, #32]
 81015c0:	695b      	ldr	r3, [r3, #20]
 81015c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81015c6:	2b80      	cmp	r3, #128	; 0x80
 81015c8:	d109      	bne.n	81015de <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 81015ca:	69fb      	ldr	r3, [r7, #28]
 81015cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81015d0:	685b      	ldr	r3, [r3, #4]
 81015d2:	69fa      	ldr	r2, [r7, #28]
 81015d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 81015d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 81015dc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 81015de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81015e0:	4613      	mov	r3, r2
 81015e2:	00db      	lsls	r3, r3, #3
 81015e4:	4413      	add	r3, r2
 81015e6:	009b      	lsls	r3, r3, #2
 81015e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 81015ec:	687a      	ldr	r2, [r7, #4]
 81015ee:	4413      	add	r3, r2
 81015f0:	3304      	adds	r3, #4
 81015f2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 81015f4:	697b      	ldr	r3, [r7, #20]
 81015f6:	78db      	ldrb	r3, [r3, #3]
 81015f8:	2b01      	cmp	r3, #1
 81015fa:	d108      	bne.n	810160e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 81015fc:	697b      	ldr	r3, [r7, #20]
 81015fe:	2200      	movs	r2, #0
 8101600:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8101602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101604:	b2db      	uxtb	r3, r3
 8101606:	4619      	mov	r1, r3
 8101608:	6878      	ldr	r0, [r7, #4]
 810160a:	f005 ff59 	bl	81074c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 810160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101610:	015a      	lsls	r2, r3, #5
 8101612:	69fb      	ldr	r3, [r7, #28]
 8101614:	4413      	add	r3, r2
 8101616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810161a:	461a      	mov	r2, r3
 810161c:	2302      	movs	r3, #2
 810161e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8101620:	693b      	ldr	r3, [r7, #16]
 8101622:	f003 0320 	and.w	r3, r3, #32
 8101626:	2b00      	cmp	r3, #0
 8101628:	d008      	beq.n	810163c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 810162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810162c:	015a      	lsls	r2, r3, #5
 810162e:	69fb      	ldr	r3, [r7, #28]
 8101630:	4413      	add	r3, r2
 8101632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8101636:	461a      	mov	r2, r3
 8101638:	2320      	movs	r3, #32
 810163a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 810163c:	693b      	ldr	r3, [r7, #16]
 810163e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8101642:	2b00      	cmp	r3, #0
 8101644:	d009      	beq.n	810165a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8101646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101648:	015a      	lsls	r2, r3, #5
 810164a:	69fb      	ldr	r3, [r7, #28]
 810164c:	4413      	add	r3, r2
 810164e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8101652:	461a      	mov	r2, r3
 8101654:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8101658:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 810165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810165c:	3301      	adds	r3, #1
 810165e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8101660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101662:	085b      	lsrs	r3, r3, #1
 8101664:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8101666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101668:	2b00      	cmp	r3, #0
 810166a:	f47f af62 	bne.w	8101532 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 810166e:	687b      	ldr	r3, [r7, #4]
 8101670:	681b      	ldr	r3, [r3, #0]
 8101672:	4618      	mov	r0, r3
 8101674:	f003 fe16 	bl	81052a4 <USB_ReadInterrupts>
 8101678:	4603      	mov	r3, r0
 810167a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810167e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8101682:	f040 80a4 	bne.w	81017ce <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8101686:	687b      	ldr	r3, [r7, #4]
 8101688:	681b      	ldr	r3, [r3, #0]
 810168a:	4618      	mov	r0, r3
 810168c:	f003 fe37 	bl	81052fe <USB_ReadDevAllInEpInterrupt>
 8101690:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8101692:	2300      	movs	r3, #0
 8101694:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8101696:	e096      	b.n	81017c6 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8101698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810169a:	f003 0301 	and.w	r3, r3, #1
 810169e:	2b00      	cmp	r3, #0
 81016a0:	f000 808b 	beq.w	81017ba <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 81016a4:	687b      	ldr	r3, [r7, #4]
 81016a6:	681b      	ldr	r3, [r3, #0]
 81016a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81016aa:	b2d2      	uxtb	r2, r2
 81016ac:	4611      	mov	r1, r2
 81016ae:	4618      	mov	r0, r3
 81016b0:	f003 fe5d 	bl	810536e <USB_ReadDevInEPInterrupt>
 81016b4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 81016b6:	693b      	ldr	r3, [r7, #16]
 81016b8:	f003 0301 	and.w	r3, r3, #1
 81016bc:	2b00      	cmp	r3, #0
 81016be:	d020      	beq.n	8101702 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 81016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81016c2:	f003 030f 	and.w	r3, r3, #15
 81016c6:	2201      	movs	r2, #1
 81016c8:	fa02 f303 	lsl.w	r3, r2, r3
 81016cc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 81016ce:	69fb      	ldr	r3, [r7, #28]
 81016d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81016d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81016d6:	68fb      	ldr	r3, [r7, #12]
 81016d8:	43db      	mvns	r3, r3
 81016da:	69f9      	ldr	r1, [r7, #28]
 81016dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 81016e0:	4013      	ands	r3, r2
 81016e2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 81016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81016e6:	015a      	lsls	r2, r3, #5
 81016e8:	69fb      	ldr	r3, [r7, #28]
 81016ea:	4413      	add	r3, r2
 81016ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81016f0:	461a      	mov	r2, r3
 81016f2:	2301      	movs	r3, #1
 81016f4:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 81016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81016f8:	b2db      	uxtb	r3, r3
 81016fa:	4619      	mov	r1, r3
 81016fc:	6878      	ldr	r0, [r7, #4]
 81016fe:	f005 fe4a 	bl	8107396 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8101702:	693b      	ldr	r3, [r7, #16]
 8101704:	f003 0308 	and.w	r3, r3, #8
 8101708:	2b00      	cmp	r3, #0
 810170a:	d008      	beq.n	810171e <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 810170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810170e:	015a      	lsls	r2, r3, #5
 8101710:	69fb      	ldr	r3, [r7, #28]
 8101712:	4413      	add	r3, r2
 8101714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8101718:	461a      	mov	r2, r3
 810171a:	2308      	movs	r3, #8
 810171c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 810171e:	693b      	ldr	r3, [r7, #16]
 8101720:	f003 0310 	and.w	r3, r3, #16
 8101724:	2b00      	cmp	r3, #0
 8101726:	d008      	beq.n	810173a <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8101728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810172a:	015a      	lsls	r2, r3, #5
 810172c:	69fb      	ldr	r3, [r7, #28]
 810172e:	4413      	add	r3, r2
 8101730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8101734:	461a      	mov	r2, r3
 8101736:	2310      	movs	r3, #16
 8101738:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 810173a:	693b      	ldr	r3, [r7, #16]
 810173c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101740:	2b00      	cmp	r3, #0
 8101742:	d008      	beq.n	8101756 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8101744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101746:	015a      	lsls	r2, r3, #5
 8101748:	69fb      	ldr	r3, [r7, #28]
 810174a:	4413      	add	r3, r2
 810174c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8101750:	461a      	mov	r2, r3
 8101752:	2340      	movs	r3, #64	; 0x40
 8101754:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8101756:	693b      	ldr	r3, [r7, #16]
 8101758:	f003 0302 	and.w	r3, r3, #2
 810175c:	2b00      	cmp	r3, #0
 810175e:	d023      	beq.n	81017a8 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8101760:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8101762:	6a38      	ldr	r0, [r7, #32]
 8101764:	f002 fe24 	bl	81043b0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8101768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810176a:	4613      	mov	r3, r2
 810176c:	00db      	lsls	r3, r3, #3
 810176e:	4413      	add	r3, r2
 8101770:	009b      	lsls	r3, r3, #2
 8101772:	3338      	adds	r3, #56	; 0x38
 8101774:	687a      	ldr	r2, [r7, #4]
 8101776:	4413      	add	r3, r2
 8101778:	3304      	adds	r3, #4
 810177a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 810177c:	697b      	ldr	r3, [r7, #20]
 810177e:	78db      	ldrb	r3, [r3, #3]
 8101780:	2b01      	cmp	r3, #1
 8101782:	d108      	bne.n	8101796 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8101784:	697b      	ldr	r3, [r7, #20]
 8101786:	2200      	movs	r2, #0
 8101788:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 810178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810178c:	b2db      	uxtb	r3, r3
 810178e:	4619      	mov	r1, r3
 8101790:	6878      	ldr	r0, [r7, #4]
 8101792:	f005 fea7 	bl	81074e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8101796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101798:	015a      	lsls	r2, r3, #5
 810179a:	69fb      	ldr	r3, [r7, #28]
 810179c:	4413      	add	r3, r2
 810179e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81017a2:	461a      	mov	r2, r3
 81017a4:	2302      	movs	r3, #2
 81017a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 81017a8:	693b      	ldr	r3, [r7, #16]
 81017aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81017ae:	2b00      	cmp	r3, #0
 81017b0:	d003      	beq.n	81017ba <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 81017b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 81017b4:	6878      	ldr	r0, [r7, #4]
 81017b6:	f000 fcea 	bl	810218e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 81017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81017bc:	3301      	adds	r3, #1
 81017be:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 81017c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81017c2:	085b      	lsrs	r3, r3, #1
 81017c4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 81017c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81017c8:	2b00      	cmp	r3, #0
 81017ca:	f47f af65 	bne.w	8101698 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 81017ce:	687b      	ldr	r3, [r7, #4]
 81017d0:	681b      	ldr	r3, [r3, #0]
 81017d2:	4618      	mov	r0, r3
 81017d4:	f003 fd66 	bl	81052a4 <USB_ReadInterrupts>
 81017d8:	4603      	mov	r3, r0
 81017da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 81017de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 81017e2:	d122      	bne.n	810182a <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 81017e4:	69fb      	ldr	r3, [r7, #28]
 81017e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81017ea:	685b      	ldr	r3, [r3, #4]
 81017ec:	69fa      	ldr	r2, [r7, #28]
 81017ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 81017f2:	f023 0301 	bic.w	r3, r3, #1
 81017f6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 81017f8:	687b      	ldr	r3, [r7, #4]
 81017fa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 81017fe:	2b01      	cmp	r3, #1
 8101800:	d108      	bne.n	8101814 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8101802:	687b      	ldr	r3, [r7, #4]
 8101804:	2200      	movs	r2, #0
 8101806:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 810180a:	2100      	movs	r1, #0
 810180c:	6878      	ldr	r0, [r7, #4]
 810180e:	f006 f8d9 	bl	81079c4 <HAL_PCDEx_LPM_Callback>
 8101812:	e002      	b.n	810181a <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8101814:	6878      	ldr	r0, [r7, #4]
 8101816:	f005 fe2b 	bl	8107470 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 810181a:	687b      	ldr	r3, [r7, #4]
 810181c:	681b      	ldr	r3, [r3, #0]
 810181e:	695a      	ldr	r2, [r3, #20]
 8101820:	687b      	ldr	r3, [r7, #4]
 8101822:	681b      	ldr	r3, [r3, #0]
 8101824:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8101828:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 810182a:	687b      	ldr	r3, [r7, #4]
 810182c:	681b      	ldr	r3, [r3, #0]
 810182e:	4618      	mov	r0, r3
 8101830:	f003 fd38 	bl	81052a4 <USB_ReadInterrupts>
 8101834:	4603      	mov	r3, r0
 8101836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810183a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810183e:	d112      	bne.n	8101866 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8101840:	69fb      	ldr	r3, [r7, #28]
 8101842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8101846:	689b      	ldr	r3, [r3, #8]
 8101848:	f003 0301 	and.w	r3, r3, #1
 810184c:	2b01      	cmp	r3, #1
 810184e:	d102      	bne.n	8101856 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8101850:	6878      	ldr	r0, [r7, #4]
 8101852:	f005 fde7 	bl	8107424 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8101856:	687b      	ldr	r3, [r7, #4]
 8101858:	681b      	ldr	r3, [r3, #0]
 810185a:	695a      	ldr	r2, [r3, #20]
 810185c:	687b      	ldr	r3, [r7, #4]
 810185e:	681b      	ldr	r3, [r3, #0]
 8101860:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8101864:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8101866:	687b      	ldr	r3, [r7, #4]
 8101868:	681b      	ldr	r3, [r3, #0]
 810186a:	4618      	mov	r0, r3
 810186c:	f003 fd1a 	bl	81052a4 <USB_ReadInterrupts>
 8101870:	4603      	mov	r3, r0
 8101872:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8101876:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810187a:	d121      	bne.n	81018c0 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 810187c:	687b      	ldr	r3, [r7, #4]
 810187e:	681b      	ldr	r3, [r3, #0]
 8101880:	695a      	ldr	r2, [r3, #20]
 8101882:	687b      	ldr	r3, [r7, #4]
 8101884:	681b      	ldr	r3, [r3, #0]
 8101886:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 810188a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 810188c:	687b      	ldr	r3, [r7, #4]
 810188e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8101892:	2b00      	cmp	r3, #0
 8101894:	d111      	bne.n	81018ba <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8101896:	687b      	ldr	r3, [r7, #4]
 8101898:	2201      	movs	r2, #1
 810189a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 810189e:	687b      	ldr	r3, [r7, #4]
 81018a0:	681b      	ldr	r3, [r3, #0]
 81018a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81018a4:	089b      	lsrs	r3, r3, #2
 81018a6:	f003 020f 	and.w	r2, r3, #15
 81018aa:	687b      	ldr	r3, [r7, #4]
 81018ac:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 81018b0:	2101      	movs	r1, #1
 81018b2:	6878      	ldr	r0, [r7, #4]
 81018b4:	f006 f886 	bl	81079c4 <HAL_PCDEx_LPM_Callback>
 81018b8:	e002      	b.n	81018c0 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 81018ba:	6878      	ldr	r0, [r7, #4]
 81018bc:	f005 fdb2 	bl	8107424 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 81018c0:	687b      	ldr	r3, [r7, #4]
 81018c2:	681b      	ldr	r3, [r3, #0]
 81018c4:	4618      	mov	r0, r3
 81018c6:	f003 fced 	bl	81052a4 <USB_ReadInterrupts>
 81018ca:	4603      	mov	r3, r0
 81018cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81018d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81018d4:	f040 80b5 	bne.w	8101a42 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 81018d8:	69fb      	ldr	r3, [r7, #28]
 81018da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81018de:	685b      	ldr	r3, [r3, #4]
 81018e0:	69fa      	ldr	r2, [r7, #28]
 81018e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 81018e6:	f023 0301 	bic.w	r3, r3, #1
 81018ea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 81018ec:	687b      	ldr	r3, [r7, #4]
 81018ee:	681b      	ldr	r3, [r3, #0]
 81018f0:	2110      	movs	r1, #16
 81018f2:	4618      	mov	r0, r3
 81018f4:	f002 fd5c 	bl	81043b0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81018f8:	2300      	movs	r3, #0
 81018fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 81018fc:	e046      	b.n	810198c <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 81018fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101900:	015a      	lsls	r2, r3, #5
 8101902:	69fb      	ldr	r3, [r7, #28]
 8101904:	4413      	add	r3, r2
 8101906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810190a:	461a      	mov	r2, r3
 810190c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8101910:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8101912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101914:	015a      	lsls	r2, r3, #5
 8101916:	69fb      	ldr	r3, [r7, #28]
 8101918:	4413      	add	r3, r2
 810191a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810191e:	681b      	ldr	r3, [r3, #0]
 8101920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8101922:	0151      	lsls	r1, r2, #5
 8101924:	69fa      	ldr	r2, [r7, #28]
 8101926:	440a      	add	r2, r1
 8101928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 810192c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8101930:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8101932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101934:	015a      	lsls	r2, r3, #5
 8101936:	69fb      	ldr	r3, [r7, #28]
 8101938:	4413      	add	r3, r2
 810193a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810193e:	461a      	mov	r2, r3
 8101940:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8101944:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8101946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101948:	015a      	lsls	r2, r3, #5
 810194a:	69fb      	ldr	r3, [r7, #28]
 810194c:	4413      	add	r3, r2
 810194e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8101952:	681b      	ldr	r3, [r3, #0]
 8101954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8101956:	0151      	lsls	r1, r2, #5
 8101958:	69fa      	ldr	r2, [r7, #28]
 810195a:	440a      	add	r2, r1
 810195c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8101960:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8101964:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8101966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101968:	015a      	lsls	r2, r3, #5
 810196a:	69fb      	ldr	r3, [r7, #28]
 810196c:	4413      	add	r3, r2
 810196e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8101972:	681b      	ldr	r3, [r3, #0]
 8101974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8101976:	0151      	lsls	r1, r2, #5
 8101978:	69fa      	ldr	r2, [r7, #28]
 810197a:	440a      	add	r2, r1
 810197c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8101980:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8101984:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8101986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101988:	3301      	adds	r3, #1
 810198a:	62fb      	str	r3, [r7, #44]	; 0x2c
 810198c:	687b      	ldr	r3, [r7, #4]
 810198e:	685b      	ldr	r3, [r3, #4]
 8101990:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8101992:	429a      	cmp	r2, r3
 8101994:	d3b3      	bcc.n	81018fe <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8101996:	69fb      	ldr	r3, [r7, #28]
 8101998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810199c:	69db      	ldr	r3, [r3, #28]
 810199e:	69fa      	ldr	r2, [r7, #28]
 81019a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 81019a4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 81019a8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 81019aa:	687b      	ldr	r3, [r7, #4]
 81019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81019ae:	2b00      	cmp	r3, #0
 81019b0:	d016      	beq.n	81019e0 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 81019b2:	69fb      	ldr	r3, [r7, #28]
 81019b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81019b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81019bc:	69fa      	ldr	r2, [r7, #28]
 81019be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 81019c2:	f043 030b 	orr.w	r3, r3, #11
 81019c6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 81019ca:	69fb      	ldr	r3, [r7, #28]
 81019cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81019d2:	69fa      	ldr	r2, [r7, #28]
 81019d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 81019d8:	f043 030b 	orr.w	r3, r3, #11
 81019dc:	6453      	str	r3, [r2, #68]	; 0x44
 81019de:	e015      	b.n	8101a0c <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 81019e0:	69fb      	ldr	r3, [r7, #28]
 81019e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81019e6:	695b      	ldr	r3, [r3, #20]
 81019e8:	69fa      	ldr	r2, [r7, #28]
 81019ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 81019ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 81019f2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 81019f6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 81019f8:	69fb      	ldr	r3, [r7, #28]
 81019fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81019fe:	691b      	ldr	r3, [r3, #16]
 8101a00:	69fa      	ldr	r2, [r7, #28]
 8101a02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8101a06:	f043 030b 	orr.w	r3, r3, #11
 8101a0a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8101a0c:	69fb      	ldr	r3, [r7, #28]
 8101a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8101a12:	681b      	ldr	r3, [r3, #0]
 8101a14:	69fa      	ldr	r2, [r7, #28]
 8101a16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8101a1a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8101a1e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8101a20:	687b      	ldr	r3, [r7, #4]
 8101a22:	681a      	ldr	r2, [r3, #0]
 8101a24:	687b      	ldr	r3, [r7, #4]
 8101a26:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8101a2a:	4619      	mov	r1, r3
 8101a2c:	4610      	mov	r0, r2
 8101a2e:	f003 fcfd 	bl	810542c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8101a32:	687b      	ldr	r3, [r7, #4]
 8101a34:	681b      	ldr	r3, [r3, #0]
 8101a36:	695a      	ldr	r2, [r3, #20]
 8101a38:	687b      	ldr	r3, [r7, #4]
 8101a3a:	681b      	ldr	r3, [r3, #0]
 8101a3c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8101a40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8101a42:	687b      	ldr	r3, [r7, #4]
 8101a44:	681b      	ldr	r3, [r3, #0]
 8101a46:	4618      	mov	r0, r3
 8101a48:	f003 fc2c 	bl	81052a4 <USB_ReadInterrupts>
 8101a4c:	4603      	mov	r3, r0
 8101a4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8101a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8101a56:	d124      	bne.n	8101aa2 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8101a58:	687b      	ldr	r3, [r7, #4]
 8101a5a:	681b      	ldr	r3, [r3, #0]
 8101a5c:	4618      	mov	r0, r3
 8101a5e:	f003 fcc2 	bl	81053e6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8101a62:	687b      	ldr	r3, [r7, #4]
 8101a64:	681b      	ldr	r3, [r3, #0]
 8101a66:	4618      	mov	r0, r3
 8101a68:	f002 fd1f 	bl	81044aa <USB_GetDevSpeed>
 8101a6c:	4603      	mov	r3, r0
 8101a6e:	461a      	mov	r2, r3
 8101a70:	687b      	ldr	r3, [r7, #4]
 8101a72:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8101a74:	687b      	ldr	r3, [r7, #4]
 8101a76:	681c      	ldr	r4, [r3, #0]
 8101a78:	f001 fbc4 	bl	8103204 <HAL_RCC_GetHCLKFreq>
 8101a7c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8101a7e:	687b      	ldr	r3, [r7, #4]
 8101a80:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8101a82:	b2db      	uxtb	r3, r3
 8101a84:	461a      	mov	r2, r3
 8101a86:	4620      	mov	r0, r4
 8101a88:	f002 fa3c 	bl	8103f04 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8101a8c:	6878      	ldr	r0, [r7, #4]
 8101a8e:	f005 fcaa 	bl	81073e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8101a92:	687b      	ldr	r3, [r7, #4]
 8101a94:	681b      	ldr	r3, [r3, #0]
 8101a96:	695a      	ldr	r2, [r3, #20]
 8101a98:	687b      	ldr	r3, [r7, #4]
 8101a9a:	681b      	ldr	r3, [r3, #0]
 8101a9c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8101aa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8101aa2:	687b      	ldr	r3, [r7, #4]
 8101aa4:	681b      	ldr	r3, [r3, #0]
 8101aa6:	4618      	mov	r0, r3
 8101aa8:	f003 fbfc 	bl	81052a4 <USB_ReadInterrupts>
 8101aac:	4603      	mov	r3, r0
 8101aae:	f003 0308 	and.w	r3, r3, #8
 8101ab2:	2b08      	cmp	r3, #8
 8101ab4:	d10a      	bne.n	8101acc <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8101ab6:	6878      	ldr	r0, [r7, #4]
 8101ab8:	f005 fc87 	bl	81073ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8101abc:	687b      	ldr	r3, [r7, #4]
 8101abe:	681b      	ldr	r3, [r3, #0]
 8101ac0:	695a      	ldr	r2, [r3, #20]
 8101ac2:	687b      	ldr	r3, [r7, #4]
 8101ac4:	681b      	ldr	r3, [r3, #0]
 8101ac6:	f002 0208 	and.w	r2, r2, #8
 8101aca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8101acc:	687b      	ldr	r3, [r7, #4]
 8101ace:	681b      	ldr	r3, [r3, #0]
 8101ad0:	4618      	mov	r0, r3
 8101ad2:	f003 fbe7 	bl	81052a4 <USB_ReadInterrupts>
 8101ad6:	4603      	mov	r3, r0
 8101ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101adc:	2b80      	cmp	r3, #128	; 0x80
 8101ade:	d122      	bne.n	8101b26 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8101ae0:	6a3b      	ldr	r3, [r7, #32]
 8101ae2:	699b      	ldr	r3, [r3, #24]
 8101ae4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8101ae8:	6a3b      	ldr	r3, [r7, #32]
 8101aea:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8101aec:	2301      	movs	r3, #1
 8101aee:	627b      	str	r3, [r7, #36]	; 0x24
 8101af0:	e014      	b.n	8101b1c <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8101af2:	6879      	ldr	r1, [r7, #4]
 8101af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101af6:	4613      	mov	r3, r2
 8101af8:	00db      	lsls	r3, r3, #3
 8101afa:	4413      	add	r3, r2
 8101afc:	009b      	lsls	r3, r3, #2
 8101afe:	440b      	add	r3, r1
 8101b00:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8101b04:	781b      	ldrb	r3, [r3, #0]
 8101b06:	2b01      	cmp	r3, #1
 8101b08:	d105      	bne.n	8101b16 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8101b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101b0c:	b2db      	uxtb	r3, r3
 8101b0e:	4619      	mov	r1, r3
 8101b10:	6878      	ldr	r0, [r7, #4]
 8101b12:	f000 fb0b 	bl	810212c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8101b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101b18:	3301      	adds	r3, #1
 8101b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8101b1c:	687b      	ldr	r3, [r7, #4]
 8101b1e:	685b      	ldr	r3, [r3, #4]
 8101b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101b22:	429a      	cmp	r2, r3
 8101b24:	d3e5      	bcc.n	8101af2 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8101b26:	687b      	ldr	r3, [r7, #4]
 8101b28:	681b      	ldr	r3, [r3, #0]
 8101b2a:	4618      	mov	r0, r3
 8101b2c:	f003 fbba 	bl	81052a4 <USB_ReadInterrupts>
 8101b30:	4603      	mov	r3, r0
 8101b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101b36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8101b3a:	d13b      	bne.n	8101bb4 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8101b3c:	2301      	movs	r3, #1
 8101b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8101b40:	e02b      	b.n	8101b9a <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8101b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101b44:	015a      	lsls	r2, r3, #5
 8101b46:	69fb      	ldr	r3, [r7, #28]
 8101b48:	4413      	add	r3, r2
 8101b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8101b4e:	681b      	ldr	r3, [r3, #0]
 8101b50:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8101b52:	6879      	ldr	r1, [r7, #4]
 8101b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101b56:	4613      	mov	r3, r2
 8101b58:	00db      	lsls	r3, r3, #3
 8101b5a:	4413      	add	r3, r2
 8101b5c:	009b      	lsls	r3, r3, #2
 8101b5e:	440b      	add	r3, r1
 8101b60:	3340      	adds	r3, #64	; 0x40
 8101b62:	781b      	ldrb	r3, [r3, #0]
 8101b64:	2b01      	cmp	r3, #1
 8101b66:	d115      	bne.n	8101b94 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8101b68:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8101b6a:	2b00      	cmp	r3, #0
 8101b6c:	da12      	bge.n	8101b94 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8101b6e:	6879      	ldr	r1, [r7, #4]
 8101b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101b72:	4613      	mov	r3, r2
 8101b74:	00db      	lsls	r3, r3, #3
 8101b76:	4413      	add	r3, r2
 8101b78:	009b      	lsls	r3, r3, #2
 8101b7a:	440b      	add	r3, r1
 8101b7c:	333f      	adds	r3, #63	; 0x3f
 8101b7e:	2201      	movs	r2, #1
 8101b80:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8101b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101b84:	b2db      	uxtb	r3, r3
 8101b86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8101b8a:	b2db      	uxtb	r3, r3
 8101b8c:	4619      	mov	r1, r3
 8101b8e:	6878      	ldr	r0, [r7, #4]
 8101b90:	f000 facc 	bl	810212c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8101b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101b96:	3301      	adds	r3, #1
 8101b98:	627b      	str	r3, [r7, #36]	; 0x24
 8101b9a:	687b      	ldr	r3, [r7, #4]
 8101b9c:	685b      	ldr	r3, [r3, #4]
 8101b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101ba0:	429a      	cmp	r2, r3
 8101ba2:	d3ce      	bcc.n	8101b42 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8101ba4:	687b      	ldr	r3, [r7, #4]
 8101ba6:	681b      	ldr	r3, [r3, #0]
 8101ba8:	695a      	ldr	r2, [r3, #20]
 8101baa:	687b      	ldr	r3, [r7, #4]
 8101bac:	681b      	ldr	r3, [r3, #0]
 8101bae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8101bb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8101bb4:	687b      	ldr	r3, [r7, #4]
 8101bb6:	681b      	ldr	r3, [r3, #0]
 8101bb8:	4618      	mov	r0, r3
 8101bba:	f003 fb73 	bl	81052a4 <USB_ReadInterrupts>
 8101bbe:	4603      	mov	r3, r0
 8101bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101bc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101bc8:	d155      	bne.n	8101c76 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8101bca:	2301      	movs	r3, #1
 8101bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8101bce:	e045      	b.n	8101c5c <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8101bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101bd2:	015a      	lsls	r2, r3, #5
 8101bd4:	69fb      	ldr	r3, [r7, #28]
 8101bd6:	4413      	add	r3, r2
 8101bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8101bdc:	681b      	ldr	r3, [r3, #0]
 8101bde:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8101be0:	6879      	ldr	r1, [r7, #4]
 8101be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101be4:	4613      	mov	r3, r2
 8101be6:	00db      	lsls	r3, r3, #3
 8101be8:	4413      	add	r3, r2
 8101bea:	009b      	lsls	r3, r3, #2
 8101bec:	440b      	add	r3, r1
 8101bee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8101bf2:	781b      	ldrb	r3, [r3, #0]
 8101bf4:	2b01      	cmp	r3, #1
 8101bf6:	d12e      	bne.n	8101c56 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8101bf8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8101bfa:	2b00      	cmp	r3, #0
 8101bfc:	da2b      	bge.n	8101c56 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8101bfe:	69bb      	ldr	r3, [r7, #24]
 8101c00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8101c04:	687b      	ldr	r3, [r7, #4]
 8101c06:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8101c0a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8101c0e:	429a      	cmp	r2, r3
 8101c10:	d121      	bne.n	8101c56 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8101c12:	6879      	ldr	r1, [r7, #4]
 8101c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101c16:	4613      	mov	r3, r2
 8101c18:	00db      	lsls	r3, r3, #3
 8101c1a:	4413      	add	r3, r2
 8101c1c:	009b      	lsls	r3, r3, #2
 8101c1e:	440b      	add	r3, r1
 8101c20:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8101c24:	2201      	movs	r2, #1
 8101c26:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8101c28:	6a3b      	ldr	r3, [r7, #32]
 8101c2a:	699b      	ldr	r3, [r3, #24]
 8101c2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8101c30:	6a3b      	ldr	r3, [r7, #32]
 8101c32:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8101c34:	6a3b      	ldr	r3, [r7, #32]
 8101c36:	695b      	ldr	r3, [r3, #20]
 8101c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101c3c:	2b00      	cmp	r3, #0
 8101c3e:	d10a      	bne.n	8101c56 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8101c40:	69fb      	ldr	r3, [r7, #28]
 8101c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8101c46:	685b      	ldr	r3, [r3, #4]
 8101c48:	69fa      	ldr	r2, [r7, #28]
 8101c4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8101c4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8101c52:	6053      	str	r3, [r2, #4]
            break;
 8101c54:	e007      	b.n	8101c66 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8101c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101c58:	3301      	adds	r3, #1
 8101c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8101c5c:	687b      	ldr	r3, [r7, #4]
 8101c5e:	685b      	ldr	r3, [r3, #4]
 8101c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101c62:	429a      	cmp	r2, r3
 8101c64:	d3b4      	bcc.n	8101bd0 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8101c66:	687b      	ldr	r3, [r7, #4]
 8101c68:	681b      	ldr	r3, [r3, #0]
 8101c6a:	695a      	ldr	r2, [r3, #20]
 8101c6c:	687b      	ldr	r3, [r7, #4]
 8101c6e:	681b      	ldr	r3, [r3, #0]
 8101c70:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8101c74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8101c76:	687b      	ldr	r3, [r7, #4]
 8101c78:	681b      	ldr	r3, [r3, #0]
 8101c7a:	4618      	mov	r0, r3
 8101c7c:	f003 fb12 	bl	81052a4 <USB_ReadInterrupts>
 8101c80:	4603      	mov	r3, r0
 8101c82:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8101c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101c8a:	d10a      	bne.n	8101ca2 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8101c8c:	6878      	ldr	r0, [r7, #4]
 8101c8e:	f005 fc3b 	bl	8107508 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8101c92:	687b      	ldr	r3, [r7, #4]
 8101c94:	681b      	ldr	r3, [r3, #0]
 8101c96:	695a      	ldr	r2, [r3, #20]
 8101c98:	687b      	ldr	r3, [r7, #4]
 8101c9a:	681b      	ldr	r3, [r3, #0]
 8101c9c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8101ca0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8101ca2:	687b      	ldr	r3, [r7, #4]
 8101ca4:	681b      	ldr	r3, [r3, #0]
 8101ca6:	4618      	mov	r0, r3
 8101ca8:	f003 fafc 	bl	81052a4 <USB_ReadInterrupts>
 8101cac:	4603      	mov	r3, r0
 8101cae:	f003 0304 	and.w	r3, r3, #4
 8101cb2:	2b04      	cmp	r3, #4
 8101cb4:	d115      	bne.n	8101ce2 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8101cb6:	687b      	ldr	r3, [r7, #4]
 8101cb8:	681b      	ldr	r3, [r3, #0]
 8101cba:	685b      	ldr	r3, [r3, #4]
 8101cbc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8101cbe:	69bb      	ldr	r3, [r7, #24]
 8101cc0:	f003 0304 	and.w	r3, r3, #4
 8101cc4:	2b00      	cmp	r3, #0
 8101cc6:	d002      	beq.n	8101cce <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8101cc8:	6878      	ldr	r0, [r7, #4]
 8101cca:	f005 fc2b 	bl	8107524 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8101cce:	687b      	ldr	r3, [r7, #4]
 8101cd0:	681b      	ldr	r3, [r3, #0]
 8101cd2:	6859      	ldr	r1, [r3, #4]
 8101cd4:	687b      	ldr	r3, [r7, #4]
 8101cd6:	681b      	ldr	r3, [r3, #0]
 8101cd8:	69ba      	ldr	r2, [r7, #24]
 8101cda:	430a      	orrs	r2, r1
 8101cdc:	605a      	str	r2, [r3, #4]
 8101cde:	e000      	b.n	8101ce2 <HAL_PCD_IRQHandler+0x920>
      return;
 8101ce0:	bf00      	nop
    }
  }
}
 8101ce2:	3734      	adds	r7, #52	; 0x34
 8101ce4:	46bd      	mov	sp, r7
 8101ce6:	bd90      	pop	{r4, r7, pc}

08101ce8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8101ce8:	b580      	push	{r7, lr}
 8101cea:	b082      	sub	sp, #8
 8101cec:	af00      	add	r7, sp, #0
 8101cee:	6078      	str	r0, [r7, #4]
 8101cf0:	460b      	mov	r3, r1
 8101cf2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8101cf4:	687b      	ldr	r3, [r7, #4]
 8101cf6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8101cfa:	2b01      	cmp	r3, #1
 8101cfc:	d101      	bne.n	8101d02 <HAL_PCD_SetAddress+0x1a>
 8101cfe:	2302      	movs	r3, #2
 8101d00:	e013      	b.n	8101d2a <HAL_PCD_SetAddress+0x42>
 8101d02:	687b      	ldr	r3, [r7, #4]
 8101d04:	2201      	movs	r2, #1
 8101d06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8101d0a:	687b      	ldr	r3, [r7, #4]
 8101d0c:	78fa      	ldrb	r2, [r7, #3]
 8101d0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8101d12:	687b      	ldr	r3, [r7, #4]
 8101d14:	681b      	ldr	r3, [r3, #0]
 8101d16:	78fa      	ldrb	r2, [r7, #3]
 8101d18:	4611      	mov	r1, r2
 8101d1a:	4618      	mov	r0, r3
 8101d1c:	f003 fa5a 	bl	81051d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8101d20:	687b      	ldr	r3, [r7, #4]
 8101d22:	2200      	movs	r2, #0
 8101d24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8101d28:	2300      	movs	r3, #0
}
 8101d2a:	4618      	mov	r0, r3
 8101d2c:	3708      	adds	r7, #8
 8101d2e:	46bd      	mov	sp, r7
 8101d30:	bd80      	pop	{r7, pc}

08101d32 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8101d32:	b580      	push	{r7, lr}
 8101d34:	b084      	sub	sp, #16
 8101d36:	af00      	add	r7, sp, #0
 8101d38:	6078      	str	r0, [r7, #4]
 8101d3a:	4608      	mov	r0, r1
 8101d3c:	4611      	mov	r1, r2
 8101d3e:	461a      	mov	r2, r3
 8101d40:	4603      	mov	r3, r0
 8101d42:	70fb      	strb	r3, [r7, #3]
 8101d44:	460b      	mov	r3, r1
 8101d46:	803b      	strh	r3, [r7, #0]
 8101d48:	4613      	mov	r3, r2
 8101d4a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8101d4c:	2300      	movs	r3, #0
 8101d4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8101d50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8101d54:	2b00      	cmp	r3, #0
 8101d56:	da0f      	bge.n	8101d78 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8101d58:	78fb      	ldrb	r3, [r7, #3]
 8101d5a:	f003 020f 	and.w	r2, r3, #15
 8101d5e:	4613      	mov	r3, r2
 8101d60:	00db      	lsls	r3, r3, #3
 8101d62:	4413      	add	r3, r2
 8101d64:	009b      	lsls	r3, r3, #2
 8101d66:	3338      	adds	r3, #56	; 0x38
 8101d68:	687a      	ldr	r2, [r7, #4]
 8101d6a:	4413      	add	r3, r2
 8101d6c:	3304      	adds	r3, #4
 8101d6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8101d70:	68fb      	ldr	r3, [r7, #12]
 8101d72:	2201      	movs	r2, #1
 8101d74:	705a      	strb	r2, [r3, #1]
 8101d76:	e00f      	b.n	8101d98 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8101d78:	78fb      	ldrb	r3, [r7, #3]
 8101d7a:	f003 020f 	and.w	r2, r3, #15
 8101d7e:	4613      	mov	r3, r2
 8101d80:	00db      	lsls	r3, r3, #3
 8101d82:	4413      	add	r3, r2
 8101d84:	009b      	lsls	r3, r3, #2
 8101d86:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8101d8a:	687a      	ldr	r2, [r7, #4]
 8101d8c:	4413      	add	r3, r2
 8101d8e:	3304      	adds	r3, #4
 8101d90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8101d92:	68fb      	ldr	r3, [r7, #12]
 8101d94:	2200      	movs	r2, #0
 8101d96:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8101d98:	78fb      	ldrb	r3, [r7, #3]
 8101d9a:	f003 030f 	and.w	r3, r3, #15
 8101d9e:	b2da      	uxtb	r2, r3
 8101da0:	68fb      	ldr	r3, [r7, #12]
 8101da2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8101da4:	883a      	ldrh	r2, [r7, #0]
 8101da6:	68fb      	ldr	r3, [r7, #12]
 8101da8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8101daa:	68fb      	ldr	r3, [r7, #12]
 8101dac:	78ba      	ldrb	r2, [r7, #2]
 8101dae:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8101db0:	68fb      	ldr	r3, [r7, #12]
 8101db2:	785b      	ldrb	r3, [r3, #1]
 8101db4:	2b00      	cmp	r3, #0
 8101db6:	d004      	beq.n	8101dc2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8101db8:	68fb      	ldr	r3, [r7, #12]
 8101dba:	781b      	ldrb	r3, [r3, #0]
 8101dbc:	b29a      	uxth	r2, r3
 8101dbe:	68fb      	ldr	r3, [r7, #12]
 8101dc0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8101dc2:	78bb      	ldrb	r3, [r7, #2]
 8101dc4:	2b02      	cmp	r3, #2
 8101dc6:	d102      	bne.n	8101dce <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8101dc8:	68fb      	ldr	r3, [r7, #12]
 8101dca:	2200      	movs	r2, #0
 8101dcc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8101dce:	687b      	ldr	r3, [r7, #4]
 8101dd0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8101dd4:	2b01      	cmp	r3, #1
 8101dd6:	d101      	bne.n	8101ddc <HAL_PCD_EP_Open+0xaa>
 8101dd8:	2302      	movs	r3, #2
 8101dda:	e00e      	b.n	8101dfa <HAL_PCD_EP_Open+0xc8>
 8101ddc:	687b      	ldr	r3, [r7, #4]
 8101dde:	2201      	movs	r2, #1
 8101de0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8101de4:	687b      	ldr	r3, [r7, #4]
 8101de6:	681b      	ldr	r3, [r3, #0]
 8101de8:	68f9      	ldr	r1, [r7, #12]
 8101dea:	4618      	mov	r0, r3
 8101dec:	f002 fb7c 	bl	81044e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8101df0:	687b      	ldr	r3, [r7, #4]
 8101df2:	2200      	movs	r2, #0
 8101df4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8101df8:	7afb      	ldrb	r3, [r7, #11]
}
 8101dfa:	4618      	mov	r0, r3
 8101dfc:	3710      	adds	r7, #16
 8101dfe:	46bd      	mov	sp, r7
 8101e00:	bd80      	pop	{r7, pc}

08101e02 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8101e02:	b580      	push	{r7, lr}
 8101e04:	b084      	sub	sp, #16
 8101e06:	af00      	add	r7, sp, #0
 8101e08:	6078      	str	r0, [r7, #4]
 8101e0a:	460b      	mov	r3, r1
 8101e0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8101e0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8101e12:	2b00      	cmp	r3, #0
 8101e14:	da0f      	bge.n	8101e36 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8101e16:	78fb      	ldrb	r3, [r7, #3]
 8101e18:	f003 020f 	and.w	r2, r3, #15
 8101e1c:	4613      	mov	r3, r2
 8101e1e:	00db      	lsls	r3, r3, #3
 8101e20:	4413      	add	r3, r2
 8101e22:	009b      	lsls	r3, r3, #2
 8101e24:	3338      	adds	r3, #56	; 0x38
 8101e26:	687a      	ldr	r2, [r7, #4]
 8101e28:	4413      	add	r3, r2
 8101e2a:	3304      	adds	r3, #4
 8101e2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8101e2e:	68fb      	ldr	r3, [r7, #12]
 8101e30:	2201      	movs	r2, #1
 8101e32:	705a      	strb	r2, [r3, #1]
 8101e34:	e00f      	b.n	8101e56 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8101e36:	78fb      	ldrb	r3, [r7, #3]
 8101e38:	f003 020f 	and.w	r2, r3, #15
 8101e3c:	4613      	mov	r3, r2
 8101e3e:	00db      	lsls	r3, r3, #3
 8101e40:	4413      	add	r3, r2
 8101e42:	009b      	lsls	r3, r3, #2
 8101e44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8101e48:	687a      	ldr	r2, [r7, #4]
 8101e4a:	4413      	add	r3, r2
 8101e4c:	3304      	adds	r3, #4
 8101e4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8101e50:	68fb      	ldr	r3, [r7, #12]
 8101e52:	2200      	movs	r2, #0
 8101e54:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8101e56:	78fb      	ldrb	r3, [r7, #3]
 8101e58:	f003 030f 	and.w	r3, r3, #15
 8101e5c:	b2da      	uxtb	r2, r3
 8101e5e:	68fb      	ldr	r3, [r7, #12]
 8101e60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8101e62:	687b      	ldr	r3, [r7, #4]
 8101e64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8101e68:	2b01      	cmp	r3, #1
 8101e6a:	d101      	bne.n	8101e70 <HAL_PCD_EP_Close+0x6e>
 8101e6c:	2302      	movs	r3, #2
 8101e6e:	e00e      	b.n	8101e8e <HAL_PCD_EP_Close+0x8c>
 8101e70:	687b      	ldr	r3, [r7, #4]
 8101e72:	2201      	movs	r2, #1
 8101e74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8101e78:	687b      	ldr	r3, [r7, #4]
 8101e7a:	681b      	ldr	r3, [r3, #0]
 8101e7c:	68f9      	ldr	r1, [r7, #12]
 8101e7e:	4618      	mov	r0, r3
 8101e80:	f002 fbba 	bl	81045f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8101e84:	687b      	ldr	r3, [r7, #4]
 8101e86:	2200      	movs	r2, #0
 8101e88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8101e8c:	2300      	movs	r3, #0
}
 8101e8e:	4618      	mov	r0, r3
 8101e90:	3710      	adds	r7, #16
 8101e92:	46bd      	mov	sp, r7
 8101e94:	bd80      	pop	{r7, pc}

08101e96 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8101e96:	b580      	push	{r7, lr}
 8101e98:	b086      	sub	sp, #24
 8101e9a:	af00      	add	r7, sp, #0
 8101e9c:	60f8      	str	r0, [r7, #12]
 8101e9e:	607a      	str	r2, [r7, #4]
 8101ea0:	603b      	str	r3, [r7, #0]
 8101ea2:	460b      	mov	r3, r1
 8101ea4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8101ea6:	7afb      	ldrb	r3, [r7, #11]
 8101ea8:	f003 020f 	and.w	r2, r3, #15
 8101eac:	4613      	mov	r3, r2
 8101eae:	00db      	lsls	r3, r3, #3
 8101eb0:	4413      	add	r3, r2
 8101eb2:	009b      	lsls	r3, r3, #2
 8101eb4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8101eb8:	68fa      	ldr	r2, [r7, #12]
 8101eba:	4413      	add	r3, r2
 8101ebc:	3304      	adds	r3, #4
 8101ebe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8101ec0:	697b      	ldr	r3, [r7, #20]
 8101ec2:	687a      	ldr	r2, [r7, #4]
 8101ec4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8101ec6:	697b      	ldr	r3, [r7, #20]
 8101ec8:	683a      	ldr	r2, [r7, #0]
 8101eca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8101ecc:	697b      	ldr	r3, [r7, #20]
 8101ece:	2200      	movs	r2, #0
 8101ed0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8101ed2:	697b      	ldr	r3, [r7, #20]
 8101ed4:	2200      	movs	r2, #0
 8101ed6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8101ed8:	7afb      	ldrb	r3, [r7, #11]
 8101eda:	f003 030f 	and.w	r3, r3, #15
 8101ede:	b2da      	uxtb	r2, r3
 8101ee0:	697b      	ldr	r3, [r7, #20]
 8101ee2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8101ee4:	7afb      	ldrb	r3, [r7, #11]
 8101ee6:	f003 030f 	and.w	r3, r3, #15
 8101eea:	2b00      	cmp	r3, #0
 8101eec:	d106      	bne.n	8101efc <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8101eee:	68fb      	ldr	r3, [r7, #12]
 8101ef0:	681b      	ldr	r3, [r3, #0]
 8101ef2:	6979      	ldr	r1, [r7, #20]
 8101ef4:	4618      	mov	r0, r3
 8101ef6:	f002 fe3b 	bl	8104b70 <USB_EP0StartXfer>
 8101efa:	e005      	b.n	8101f08 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8101efc:	68fb      	ldr	r3, [r7, #12]
 8101efe:	681b      	ldr	r3, [r3, #0]
 8101f00:	6979      	ldr	r1, [r7, #20]
 8101f02:	4618      	mov	r0, r3
 8101f04:	f002 fc54 	bl	81047b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8101f08:	2300      	movs	r3, #0
}
 8101f0a:	4618      	mov	r0, r3
 8101f0c:	3718      	adds	r7, #24
 8101f0e:	46bd      	mov	sp, r7
 8101f10:	bd80      	pop	{r7, pc}

08101f12 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8101f12:	b480      	push	{r7}
 8101f14:	b083      	sub	sp, #12
 8101f16:	af00      	add	r7, sp, #0
 8101f18:	6078      	str	r0, [r7, #4]
 8101f1a:	460b      	mov	r3, r1
 8101f1c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8101f1e:	78fb      	ldrb	r3, [r7, #3]
 8101f20:	f003 020f 	and.w	r2, r3, #15
 8101f24:	6879      	ldr	r1, [r7, #4]
 8101f26:	4613      	mov	r3, r2
 8101f28:	00db      	lsls	r3, r3, #3
 8101f2a:	4413      	add	r3, r2
 8101f2c:	009b      	lsls	r3, r3, #2
 8101f2e:	440b      	add	r3, r1
 8101f30:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8101f34:	681b      	ldr	r3, [r3, #0]
}
 8101f36:	4618      	mov	r0, r3
 8101f38:	370c      	adds	r7, #12
 8101f3a:	46bd      	mov	sp, r7
 8101f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f40:	4770      	bx	lr

08101f42 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8101f42:	b580      	push	{r7, lr}
 8101f44:	b086      	sub	sp, #24
 8101f46:	af00      	add	r7, sp, #0
 8101f48:	60f8      	str	r0, [r7, #12]
 8101f4a:	607a      	str	r2, [r7, #4]
 8101f4c:	603b      	str	r3, [r7, #0]
 8101f4e:	460b      	mov	r3, r1
 8101f50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8101f52:	7afb      	ldrb	r3, [r7, #11]
 8101f54:	f003 020f 	and.w	r2, r3, #15
 8101f58:	4613      	mov	r3, r2
 8101f5a:	00db      	lsls	r3, r3, #3
 8101f5c:	4413      	add	r3, r2
 8101f5e:	009b      	lsls	r3, r3, #2
 8101f60:	3338      	adds	r3, #56	; 0x38
 8101f62:	68fa      	ldr	r2, [r7, #12]
 8101f64:	4413      	add	r3, r2
 8101f66:	3304      	adds	r3, #4
 8101f68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8101f6a:	697b      	ldr	r3, [r7, #20]
 8101f6c:	687a      	ldr	r2, [r7, #4]
 8101f6e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8101f70:	697b      	ldr	r3, [r7, #20]
 8101f72:	683a      	ldr	r2, [r7, #0]
 8101f74:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8101f76:	697b      	ldr	r3, [r7, #20]
 8101f78:	2200      	movs	r2, #0
 8101f7a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8101f7c:	697b      	ldr	r3, [r7, #20]
 8101f7e:	2201      	movs	r2, #1
 8101f80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8101f82:	7afb      	ldrb	r3, [r7, #11]
 8101f84:	f003 030f 	and.w	r3, r3, #15
 8101f88:	b2da      	uxtb	r2, r3
 8101f8a:	697b      	ldr	r3, [r7, #20]
 8101f8c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8101f8e:	7afb      	ldrb	r3, [r7, #11]
 8101f90:	f003 030f 	and.w	r3, r3, #15
 8101f94:	2b00      	cmp	r3, #0
 8101f96:	d106      	bne.n	8101fa6 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8101f98:	68fb      	ldr	r3, [r7, #12]
 8101f9a:	681b      	ldr	r3, [r3, #0]
 8101f9c:	6979      	ldr	r1, [r7, #20]
 8101f9e:	4618      	mov	r0, r3
 8101fa0:	f002 fde6 	bl	8104b70 <USB_EP0StartXfer>
 8101fa4:	e005      	b.n	8101fb2 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8101fa6:	68fb      	ldr	r3, [r7, #12]
 8101fa8:	681b      	ldr	r3, [r3, #0]
 8101faa:	6979      	ldr	r1, [r7, #20]
 8101fac:	4618      	mov	r0, r3
 8101fae:	f002 fbff 	bl	81047b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8101fb2:	2300      	movs	r3, #0
}
 8101fb4:	4618      	mov	r0, r3
 8101fb6:	3718      	adds	r7, #24
 8101fb8:	46bd      	mov	sp, r7
 8101fba:	bd80      	pop	{r7, pc}

08101fbc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8101fbc:	b580      	push	{r7, lr}
 8101fbe:	b084      	sub	sp, #16
 8101fc0:	af00      	add	r7, sp, #0
 8101fc2:	6078      	str	r0, [r7, #4]
 8101fc4:	460b      	mov	r3, r1
 8101fc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8101fc8:	78fb      	ldrb	r3, [r7, #3]
 8101fca:	f003 020f 	and.w	r2, r3, #15
 8101fce:	687b      	ldr	r3, [r7, #4]
 8101fd0:	685b      	ldr	r3, [r3, #4]
 8101fd2:	429a      	cmp	r2, r3
 8101fd4:	d901      	bls.n	8101fda <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8101fd6:	2301      	movs	r3, #1
 8101fd8:	e04e      	b.n	8102078 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8101fda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8101fde:	2b00      	cmp	r3, #0
 8101fe0:	da0f      	bge.n	8102002 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8101fe2:	78fb      	ldrb	r3, [r7, #3]
 8101fe4:	f003 020f 	and.w	r2, r3, #15
 8101fe8:	4613      	mov	r3, r2
 8101fea:	00db      	lsls	r3, r3, #3
 8101fec:	4413      	add	r3, r2
 8101fee:	009b      	lsls	r3, r3, #2
 8101ff0:	3338      	adds	r3, #56	; 0x38
 8101ff2:	687a      	ldr	r2, [r7, #4]
 8101ff4:	4413      	add	r3, r2
 8101ff6:	3304      	adds	r3, #4
 8101ff8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8101ffa:	68fb      	ldr	r3, [r7, #12]
 8101ffc:	2201      	movs	r2, #1
 8101ffe:	705a      	strb	r2, [r3, #1]
 8102000:	e00d      	b.n	810201e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8102002:	78fa      	ldrb	r2, [r7, #3]
 8102004:	4613      	mov	r3, r2
 8102006:	00db      	lsls	r3, r3, #3
 8102008:	4413      	add	r3, r2
 810200a:	009b      	lsls	r3, r3, #2
 810200c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8102010:	687a      	ldr	r2, [r7, #4]
 8102012:	4413      	add	r3, r2
 8102014:	3304      	adds	r3, #4
 8102016:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8102018:	68fb      	ldr	r3, [r7, #12]
 810201a:	2200      	movs	r2, #0
 810201c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 810201e:	68fb      	ldr	r3, [r7, #12]
 8102020:	2201      	movs	r2, #1
 8102022:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8102024:	78fb      	ldrb	r3, [r7, #3]
 8102026:	f003 030f 	and.w	r3, r3, #15
 810202a:	b2da      	uxtb	r2, r3
 810202c:	68fb      	ldr	r3, [r7, #12]
 810202e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8102030:	687b      	ldr	r3, [r7, #4]
 8102032:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8102036:	2b01      	cmp	r3, #1
 8102038:	d101      	bne.n	810203e <HAL_PCD_EP_SetStall+0x82>
 810203a:	2302      	movs	r3, #2
 810203c:	e01c      	b.n	8102078 <HAL_PCD_EP_SetStall+0xbc>
 810203e:	687b      	ldr	r3, [r7, #4]
 8102040:	2201      	movs	r2, #1
 8102042:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8102046:	687b      	ldr	r3, [r7, #4]
 8102048:	681b      	ldr	r3, [r3, #0]
 810204a:	68f9      	ldr	r1, [r7, #12]
 810204c:	4618      	mov	r0, r3
 810204e:	f002 ffed 	bl	810502c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8102052:	78fb      	ldrb	r3, [r7, #3]
 8102054:	f003 030f 	and.w	r3, r3, #15
 8102058:	2b00      	cmp	r3, #0
 810205a:	d108      	bne.n	810206e <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 810205c:	687b      	ldr	r3, [r7, #4]
 810205e:	681a      	ldr	r2, [r3, #0]
 8102060:	687b      	ldr	r3, [r7, #4]
 8102062:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8102066:	4619      	mov	r1, r3
 8102068:	4610      	mov	r0, r2
 810206a:	f003 f9df 	bl	810542c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 810206e:	687b      	ldr	r3, [r7, #4]
 8102070:	2200      	movs	r2, #0
 8102072:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8102076:	2300      	movs	r3, #0
}
 8102078:	4618      	mov	r0, r3
 810207a:	3710      	adds	r7, #16
 810207c:	46bd      	mov	sp, r7
 810207e:	bd80      	pop	{r7, pc}

08102080 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8102080:	b580      	push	{r7, lr}
 8102082:	b084      	sub	sp, #16
 8102084:	af00      	add	r7, sp, #0
 8102086:	6078      	str	r0, [r7, #4]
 8102088:	460b      	mov	r3, r1
 810208a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 810208c:	78fb      	ldrb	r3, [r7, #3]
 810208e:	f003 020f 	and.w	r2, r3, #15
 8102092:	687b      	ldr	r3, [r7, #4]
 8102094:	685b      	ldr	r3, [r3, #4]
 8102096:	429a      	cmp	r2, r3
 8102098:	d901      	bls.n	810209e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 810209a:	2301      	movs	r3, #1
 810209c:	e042      	b.n	8102124 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 810209e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 81020a2:	2b00      	cmp	r3, #0
 81020a4:	da0f      	bge.n	81020c6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 81020a6:	78fb      	ldrb	r3, [r7, #3]
 81020a8:	f003 020f 	and.w	r2, r3, #15
 81020ac:	4613      	mov	r3, r2
 81020ae:	00db      	lsls	r3, r3, #3
 81020b0:	4413      	add	r3, r2
 81020b2:	009b      	lsls	r3, r3, #2
 81020b4:	3338      	adds	r3, #56	; 0x38
 81020b6:	687a      	ldr	r2, [r7, #4]
 81020b8:	4413      	add	r3, r2
 81020ba:	3304      	adds	r3, #4
 81020bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 81020be:	68fb      	ldr	r3, [r7, #12]
 81020c0:	2201      	movs	r2, #1
 81020c2:	705a      	strb	r2, [r3, #1]
 81020c4:	e00f      	b.n	81020e6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 81020c6:	78fb      	ldrb	r3, [r7, #3]
 81020c8:	f003 020f 	and.w	r2, r3, #15
 81020cc:	4613      	mov	r3, r2
 81020ce:	00db      	lsls	r3, r3, #3
 81020d0:	4413      	add	r3, r2
 81020d2:	009b      	lsls	r3, r3, #2
 81020d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 81020d8:	687a      	ldr	r2, [r7, #4]
 81020da:	4413      	add	r3, r2
 81020dc:	3304      	adds	r3, #4
 81020de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 81020e0:	68fb      	ldr	r3, [r7, #12]
 81020e2:	2200      	movs	r2, #0
 81020e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 81020e6:	68fb      	ldr	r3, [r7, #12]
 81020e8:	2200      	movs	r2, #0
 81020ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 81020ec:	78fb      	ldrb	r3, [r7, #3]
 81020ee:	f003 030f 	and.w	r3, r3, #15
 81020f2:	b2da      	uxtb	r2, r3
 81020f4:	68fb      	ldr	r3, [r7, #12]
 81020f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 81020f8:	687b      	ldr	r3, [r7, #4]
 81020fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 81020fe:	2b01      	cmp	r3, #1
 8102100:	d101      	bne.n	8102106 <HAL_PCD_EP_ClrStall+0x86>
 8102102:	2302      	movs	r3, #2
 8102104:	e00e      	b.n	8102124 <HAL_PCD_EP_ClrStall+0xa4>
 8102106:	687b      	ldr	r3, [r7, #4]
 8102108:	2201      	movs	r2, #1
 810210a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 810210e:	687b      	ldr	r3, [r7, #4]
 8102110:	681b      	ldr	r3, [r3, #0]
 8102112:	68f9      	ldr	r1, [r7, #12]
 8102114:	4618      	mov	r0, r3
 8102116:	f002 fff7 	bl	8105108 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 810211a:	687b      	ldr	r3, [r7, #4]
 810211c:	2200      	movs	r2, #0
 810211e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8102122:	2300      	movs	r3, #0
}
 8102124:	4618      	mov	r0, r3
 8102126:	3710      	adds	r7, #16
 8102128:	46bd      	mov	sp, r7
 810212a:	bd80      	pop	{r7, pc}

0810212c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 810212c:	b580      	push	{r7, lr}
 810212e:	b084      	sub	sp, #16
 8102130:	af00      	add	r7, sp, #0
 8102132:	6078      	str	r0, [r7, #4]
 8102134:	460b      	mov	r3, r1
 8102136:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8102138:	f997 3003 	ldrsb.w	r3, [r7, #3]
 810213c:	2b00      	cmp	r3, #0
 810213e:	da0c      	bge.n	810215a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8102140:	78fb      	ldrb	r3, [r7, #3]
 8102142:	f003 020f 	and.w	r2, r3, #15
 8102146:	4613      	mov	r3, r2
 8102148:	00db      	lsls	r3, r3, #3
 810214a:	4413      	add	r3, r2
 810214c:	009b      	lsls	r3, r3, #2
 810214e:	3338      	adds	r3, #56	; 0x38
 8102150:	687a      	ldr	r2, [r7, #4]
 8102152:	4413      	add	r3, r2
 8102154:	3304      	adds	r3, #4
 8102156:	60fb      	str	r3, [r7, #12]
 8102158:	e00c      	b.n	8102174 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 810215a:	78fb      	ldrb	r3, [r7, #3]
 810215c:	f003 020f 	and.w	r2, r3, #15
 8102160:	4613      	mov	r3, r2
 8102162:	00db      	lsls	r3, r3, #3
 8102164:	4413      	add	r3, r2
 8102166:	009b      	lsls	r3, r3, #2
 8102168:	f503 731e 	add.w	r3, r3, #632	; 0x278
 810216c:	687a      	ldr	r2, [r7, #4]
 810216e:	4413      	add	r3, r2
 8102170:	3304      	adds	r3, #4
 8102172:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8102174:	687b      	ldr	r3, [r7, #4]
 8102176:	681b      	ldr	r3, [r3, #0]
 8102178:	68f9      	ldr	r1, [r7, #12]
 810217a:	4618      	mov	r0, r3
 810217c:	f002 fe1a 	bl	8104db4 <USB_EPStopXfer>
 8102180:	4603      	mov	r3, r0
 8102182:	72fb      	strb	r3, [r7, #11]

  return ret;
 8102184:	7afb      	ldrb	r3, [r7, #11]
}
 8102186:	4618      	mov	r0, r3
 8102188:	3710      	adds	r7, #16
 810218a:	46bd      	mov	sp, r7
 810218c:	bd80      	pop	{r7, pc}

0810218e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 810218e:	b580      	push	{r7, lr}
 8102190:	b088      	sub	sp, #32
 8102192:	af00      	add	r7, sp, #0
 8102194:	6078      	str	r0, [r7, #4]
 8102196:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8102198:	687b      	ldr	r3, [r7, #4]
 810219a:	681b      	ldr	r3, [r3, #0]
 810219c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810219e:	697b      	ldr	r3, [r7, #20]
 81021a0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 81021a2:	683a      	ldr	r2, [r7, #0]
 81021a4:	4613      	mov	r3, r2
 81021a6:	00db      	lsls	r3, r3, #3
 81021a8:	4413      	add	r3, r2
 81021aa:	009b      	lsls	r3, r3, #2
 81021ac:	3338      	adds	r3, #56	; 0x38
 81021ae:	687a      	ldr	r2, [r7, #4]
 81021b0:	4413      	add	r3, r2
 81021b2:	3304      	adds	r3, #4
 81021b4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 81021b6:	68fb      	ldr	r3, [r7, #12]
 81021b8:	6a1a      	ldr	r2, [r3, #32]
 81021ba:	68fb      	ldr	r3, [r7, #12]
 81021bc:	699b      	ldr	r3, [r3, #24]
 81021be:	429a      	cmp	r2, r3
 81021c0:	d901      	bls.n	81021c6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 81021c2:	2301      	movs	r3, #1
 81021c4:	e067      	b.n	8102296 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 81021c6:	68fb      	ldr	r3, [r7, #12]
 81021c8:	699a      	ldr	r2, [r3, #24]
 81021ca:	68fb      	ldr	r3, [r7, #12]
 81021cc:	6a1b      	ldr	r3, [r3, #32]
 81021ce:	1ad3      	subs	r3, r2, r3
 81021d0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 81021d2:	68fb      	ldr	r3, [r7, #12]
 81021d4:	68db      	ldr	r3, [r3, #12]
 81021d6:	69fa      	ldr	r2, [r7, #28]
 81021d8:	429a      	cmp	r2, r3
 81021da:	d902      	bls.n	81021e2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 81021dc:	68fb      	ldr	r3, [r7, #12]
 81021de:	68db      	ldr	r3, [r3, #12]
 81021e0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 81021e2:	69fb      	ldr	r3, [r7, #28]
 81021e4:	3303      	adds	r3, #3
 81021e6:	089b      	lsrs	r3, r3, #2
 81021e8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 81021ea:	e026      	b.n	810223a <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 81021ec:	68fb      	ldr	r3, [r7, #12]
 81021ee:	699a      	ldr	r2, [r3, #24]
 81021f0:	68fb      	ldr	r3, [r7, #12]
 81021f2:	6a1b      	ldr	r3, [r3, #32]
 81021f4:	1ad3      	subs	r3, r2, r3
 81021f6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 81021f8:	68fb      	ldr	r3, [r7, #12]
 81021fa:	68db      	ldr	r3, [r3, #12]
 81021fc:	69fa      	ldr	r2, [r7, #28]
 81021fe:	429a      	cmp	r2, r3
 8102200:	d902      	bls.n	8102208 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8102202:	68fb      	ldr	r3, [r7, #12]
 8102204:	68db      	ldr	r3, [r3, #12]
 8102206:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8102208:	69fb      	ldr	r3, [r7, #28]
 810220a:	3303      	adds	r3, #3
 810220c:	089b      	lsrs	r3, r3, #2
 810220e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8102210:	68fb      	ldr	r3, [r7, #12]
 8102212:	6919      	ldr	r1, [r3, #16]
 8102214:	683b      	ldr	r3, [r7, #0]
 8102216:	b2da      	uxtb	r2, r3
 8102218:	69fb      	ldr	r3, [r7, #28]
 810221a:	b29b      	uxth	r3, r3
 810221c:	6978      	ldr	r0, [r7, #20]
 810221e:	f002 fe73 	bl	8104f08 <USB_WritePacket>

    ep->xfer_buff  += len;
 8102222:	68fb      	ldr	r3, [r7, #12]
 8102224:	691a      	ldr	r2, [r3, #16]
 8102226:	69fb      	ldr	r3, [r7, #28]
 8102228:	441a      	add	r2, r3
 810222a:	68fb      	ldr	r3, [r7, #12]
 810222c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 810222e:	68fb      	ldr	r3, [r7, #12]
 8102230:	6a1a      	ldr	r2, [r3, #32]
 8102232:	69fb      	ldr	r3, [r7, #28]
 8102234:	441a      	add	r2, r3
 8102236:	68fb      	ldr	r3, [r7, #12]
 8102238:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 810223a:	683b      	ldr	r3, [r7, #0]
 810223c:	015a      	lsls	r2, r3, #5
 810223e:	693b      	ldr	r3, [r7, #16]
 8102240:	4413      	add	r3, r2
 8102242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8102246:	699b      	ldr	r3, [r3, #24]
 8102248:	b29b      	uxth	r3, r3
 810224a:	69ba      	ldr	r2, [r7, #24]
 810224c:	429a      	cmp	r2, r3
 810224e:	d809      	bhi.n	8102264 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8102250:	68fb      	ldr	r3, [r7, #12]
 8102252:	6a1a      	ldr	r2, [r3, #32]
 8102254:	68fb      	ldr	r3, [r7, #12]
 8102256:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8102258:	429a      	cmp	r2, r3
 810225a:	d203      	bcs.n	8102264 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 810225c:	68fb      	ldr	r3, [r7, #12]
 810225e:	699b      	ldr	r3, [r3, #24]
 8102260:	2b00      	cmp	r3, #0
 8102262:	d1c3      	bne.n	81021ec <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8102264:	68fb      	ldr	r3, [r7, #12]
 8102266:	699a      	ldr	r2, [r3, #24]
 8102268:	68fb      	ldr	r3, [r7, #12]
 810226a:	6a1b      	ldr	r3, [r3, #32]
 810226c:	429a      	cmp	r2, r3
 810226e:	d811      	bhi.n	8102294 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8102270:	683b      	ldr	r3, [r7, #0]
 8102272:	f003 030f 	and.w	r3, r3, #15
 8102276:	2201      	movs	r2, #1
 8102278:	fa02 f303 	lsl.w	r3, r2, r3
 810227c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 810227e:	693b      	ldr	r3, [r7, #16]
 8102280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8102284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8102286:	68bb      	ldr	r3, [r7, #8]
 8102288:	43db      	mvns	r3, r3
 810228a:	6939      	ldr	r1, [r7, #16]
 810228c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8102290:	4013      	ands	r3, r2
 8102292:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8102294:	2300      	movs	r3, #0
}
 8102296:	4618      	mov	r0, r3
 8102298:	3720      	adds	r7, #32
 810229a:	46bd      	mov	sp, r7
 810229c:	bd80      	pop	{r7, pc}
	...

081022a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 81022a0:	b580      	push	{r7, lr}
 81022a2:	b086      	sub	sp, #24
 81022a4:	af00      	add	r7, sp, #0
 81022a6:	6078      	str	r0, [r7, #4]
 81022a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 81022aa:	687b      	ldr	r3, [r7, #4]
 81022ac:	681b      	ldr	r3, [r3, #0]
 81022ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81022b0:	697b      	ldr	r3, [r7, #20]
 81022b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 81022b4:	697b      	ldr	r3, [r7, #20]
 81022b6:	333c      	adds	r3, #60	; 0x3c
 81022b8:	3304      	adds	r3, #4
 81022ba:	681b      	ldr	r3, [r3, #0]
 81022bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 81022be:	683b      	ldr	r3, [r7, #0]
 81022c0:	015a      	lsls	r2, r3, #5
 81022c2:	693b      	ldr	r3, [r7, #16]
 81022c4:	4413      	add	r3, r2
 81022c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81022ca:	689b      	ldr	r3, [r3, #8]
 81022cc:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 81022ce:	68fb      	ldr	r3, [r7, #12]
 81022d0:	4a19      	ldr	r2, [pc, #100]	; (8102338 <PCD_EP_OutXfrComplete_int+0x98>)
 81022d2:	4293      	cmp	r3, r2
 81022d4:	d124      	bne.n	8102320 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 81022d6:	68bb      	ldr	r3, [r7, #8]
 81022d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81022dc:	2b00      	cmp	r3, #0
 81022de:	d00a      	beq.n	81022f6 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 81022e0:	683b      	ldr	r3, [r7, #0]
 81022e2:	015a      	lsls	r2, r3, #5
 81022e4:	693b      	ldr	r3, [r7, #16]
 81022e6:	4413      	add	r3, r2
 81022e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81022ec:	461a      	mov	r2, r3
 81022ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81022f2:	6093      	str	r3, [r2, #8]
 81022f4:	e01a      	b.n	810232c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 81022f6:	68bb      	ldr	r3, [r7, #8]
 81022f8:	f003 0320 	and.w	r3, r3, #32
 81022fc:	2b00      	cmp	r3, #0
 81022fe:	d008      	beq.n	8102312 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8102300:	683b      	ldr	r3, [r7, #0]
 8102302:	015a      	lsls	r2, r3, #5
 8102304:	693b      	ldr	r3, [r7, #16]
 8102306:	4413      	add	r3, r2
 8102308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810230c:	461a      	mov	r2, r3
 810230e:	2320      	movs	r3, #32
 8102310:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8102312:	683b      	ldr	r3, [r7, #0]
 8102314:	b2db      	uxtb	r3, r3
 8102316:	4619      	mov	r1, r3
 8102318:	6878      	ldr	r0, [r7, #4]
 810231a:	f005 f821 	bl	8107360 <HAL_PCD_DataOutStageCallback>
 810231e:	e005      	b.n	810232c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8102320:	683b      	ldr	r3, [r7, #0]
 8102322:	b2db      	uxtb	r3, r3
 8102324:	4619      	mov	r1, r3
 8102326:	6878      	ldr	r0, [r7, #4]
 8102328:	f005 f81a 	bl	8107360 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 810232c:	2300      	movs	r3, #0
}
 810232e:	4618      	mov	r0, r3
 8102330:	3718      	adds	r7, #24
 8102332:	46bd      	mov	sp, r7
 8102334:	bd80      	pop	{r7, pc}
 8102336:	bf00      	nop
 8102338:	4f54310a 	.word	0x4f54310a

0810233c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 810233c:	b580      	push	{r7, lr}
 810233e:	b086      	sub	sp, #24
 8102340:	af00      	add	r7, sp, #0
 8102342:	6078      	str	r0, [r7, #4]
 8102344:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8102346:	687b      	ldr	r3, [r7, #4]
 8102348:	681b      	ldr	r3, [r3, #0]
 810234a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810234c:	697b      	ldr	r3, [r7, #20]
 810234e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8102350:	697b      	ldr	r3, [r7, #20]
 8102352:	333c      	adds	r3, #60	; 0x3c
 8102354:	3304      	adds	r3, #4
 8102356:	681b      	ldr	r3, [r3, #0]
 8102358:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 810235a:	683b      	ldr	r3, [r7, #0]
 810235c:	015a      	lsls	r2, r3, #5
 810235e:	693b      	ldr	r3, [r7, #16]
 8102360:	4413      	add	r3, r2
 8102362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8102366:	689b      	ldr	r3, [r3, #8]
 8102368:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 810236a:	68fb      	ldr	r3, [r7, #12]
 810236c:	4a0c      	ldr	r2, [pc, #48]	; (81023a0 <PCD_EP_OutSetupPacket_int+0x64>)
 810236e:	4293      	cmp	r3, r2
 8102370:	d90e      	bls.n	8102390 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8102372:	68bb      	ldr	r3, [r7, #8]
 8102374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8102378:	2b00      	cmp	r3, #0
 810237a:	d009      	beq.n	8102390 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 810237c:	683b      	ldr	r3, [r7, #0]
 810237e:	015a      	lsls	r2, r3, #5
 8102380:	693b      	ldr	r3, [r7, #16]
 8102382:	4413      	add	r3, r2
 8102384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8102388:	461a      	mov	r2, r3
 810238a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810238e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8102390:	6878      	ldr	r0, [r7, #4]
 8102392:	f004 ffd3 	bl	810733c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8102396:	2300      	movs	r3, #0
}
 8102398:	4618      	mov	r0, r3
 810239a:	3718      	adds	r7, #24
 810239c:	46bd      	mov	sp, r7
 810239e:	bd80      	pop	{r7, pc}
 81023a0:	4f54300a 	.word	0x4f54300a

081023a4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 81023a4:	b480      	push	{r7}
 81023a6:	b085      	sub	sp, #20
 81023a8:	af00      	add	r7, sp, #0
 81023aa:	6078      	str	r0, [r7, #4]
 81023ac:	460b      	mov	r3, r1
 81023ae:	70fb      	strb	r3, [r7, #3]
 81023b0:	4613      	mov	r3, r2
 81023b2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 81023b4:	687b      	ldr	r3, [r7, #4]
 81023b6:	681b      	ldr	r3, [r3, #0]
 81023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81023ba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 81023bc:	78fb      	ldrb	r3, [r7, #3]
 81023be:	2b00      	cmp	r3, #0
 81023c0:	d107      	bne.n	81023d2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 81023c2:	883b      	ldrh	r3, [r7, #0]
 81023c4:	0419      	lsls	r1, r3, #16
 81023c6:	687b      	ldr	r3, [r7, #4]
 81023c8:	681b      	ldr	r3, [r3, #0]
 81023ca:	68ba      	ldr	r2, [r7, #8]
 81023cc:	430a      	orrs	r2, r1
 81023ce:	629a      	str	r2, [r3, #40]	; 0x28
 81023d0:	e028      	b.n	8102424 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 81023d2:	687b      	ldr	r3, [r7, #4]
 81023d4:	681b      	ldr	r3, [r3, #0]
 81023d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81023d8:	0c1b      	lsrs	r3, r3, #16
 81023da:	68ba      	ldr	r2, [r7, #8]
 81023dc:	4413      	add	r3, r2
 81023de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 81023e0:	2300      	movs	r3, #0
 81023e2:	73fb      	strb	r3, [r7, #15]
 81023e4:	e00d      	b.n	8102402 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 81023e6:	687b      	ldr	r3, [r7, #4]
 81023e8:	681a      	ldr	r2, [r3, #0]
 81023ea:	7bfb      	ldrb	r3, [r7, #15]
 81023ec:	3340      	adds	r3, #64	; 0x40
 81023ee:	009b      	lsls	r3, r3, #2
 81023f0:	4413      	add	r3, r2
 81023f2:	685b      	ldr	r3, [r3, #4]
 81023f4:	0c1b      	lsrs	r3, r3, #16
 81023f6:	68ba      	ldr	r2, [r7, #8]
 81023f8:	4413      	add	r3, r2
 81023fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 81023fc:	7bfb      	ldrb	r3, [r7, #15]
 81023fe:	3301      	adds	r3, #1
 8102400:	73fb      	strb	r3, [r7, #15]
 8102402:	7bfa      	ldrb	r2, [r7, #15]
 8102404:	78fb      	ldrb	r3, [r7, #3]
 8102406:	3b01      	subs	r3, #1
 8102408:	429a      	cmp	r2, r3
 810240a:	d3ec      	bcc.n	81023e6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 810240c:	883b      	ldrh	r3, [r7, #0]
 810240e:	0418      	lsls	r0, r3, #16
 8102410:	687b      	ldr	r3, [r7, #4]
 8102412:	6819      	ldr	r1, [r3, #0]
 8102414:	78fb      	ldrb	r3, [r7, #3]
 8102416:	3b01      	subs	r3, #1
 8102418:	68ba      	ldr	r2, [r7, #8]
 810241a:	4302      	orrs	r2, r0
 810241c:	3340      	adds	r3, #64	; 0x40
 810241e:	009b      	lsls	r3, r3, #2
 8102420:	440b      	add	r3, r1
 8102422:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8102424:	2300      	movs	r3, #0
}
 8102426:	4618      	mov	r0, r3
 8102428:	3714      	adds	r7, #20
 810242a:	46bd      	mov	sp, r7
 810242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102430:	4770      	bx	lr

08102432 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8102432:	b480      	push	{r7}
 8102434:	b083      	sub	sp, #12
 8102436:	af00      	add	r7, sp, #0
 8102438:	6078      	str	r0, [r7, #4]
 810243a:	460b      	mov	r3, r1
 810243c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 810243e:	687b      	ldr	r3, [r7, #4]
 8102440:	681b      	ldr	r3, [r3, #0]
 8102442:	887a      	ldrh	r2, [r7, #2]
 8102444:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8102446:	2300      	movs	r3, #0
}
 8102448:	4618      	mov	r0, r3
 810244a:	370c      	adds	r7, #12
 810244c:	46bd      	mov	sp, r7
 810244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102452:	4770      	bx	lr

08102454 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8102454:	b480      	push	{r7}
 8102456:	b085      	sub	sp, #20
 8102458:	af00      	add	r7, sp, #0
 810245a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 810245c:	687b      	ldr	r3, [r7, #4]
 810245e:	681b      	ldr	r3, [r3, #0]
 8102460:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8102462:	687b      	ldr	r3, [r7, #4]
 8102464:	2201      	movs	r2, #1
 8102466:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 810246a:	687b      	ldr	r3, [r7, #4]
 810246c:	2200      	movs	r2, #0
 810246e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8102472:	68fb      	ldr	r3, [r7, #12]
 8102474:	699b      	ldr	r3, [r3, #24]
 8102476:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 810247a:	68fb      	ldr	r3, [r7, #12]
 810247c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 810247e:	68fb      	ldr	r3, [r7, #12]
 8102480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8102486:	f043 0303 	orr.w	r3, r3, #3
 810248a:	68fa      	ldr	r2, [r7, #12]
 810248c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 810248e:	2300      	movs	r3, #0
}
 8102490:	4618      	mov	r0, r3
 8102492:	3714      	adds	r7, #20
 8102494:	46bd      	mov	sp, r7
 8102496:	f85d 7b04 	ldr.w	r7, [sp], #4
 810249a:	4770      	bx	lr

0810249c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 810249c:	b480      	push	{r7}
 810249e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 81024a0:	4b0d      	ldr	r3, [pc, #52]	; (81024d8 <HAL_PWREx_GetVoltageRange+0x3c>)
 81024a2:	681b      	ldr	r3, [r3, #0]
 81024a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 81024a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81024ac:	d102      	bne.n	81024b4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 81024ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81024b2:	e00b      	b.n	81024cc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 81024b4:	4b08      	ldr	r3, [pc, #32]	; (81024d8 <HAL_PWREx_GetVoltageRange+0x3c>)
 81024b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81024ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81024be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81024c2:	d102      	bne.n	81024ca <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 81024c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 81024c8:	e000      	b.n	81024cc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 81024ca:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 81024cc:	4618      	mov	r0, r3
 81024ce:	46bd      	mov	sp, r7
 81024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024d4:	4770      	bx	lr
 81024d6:	bf00      	nop
 81024d8:	40007000 	.word	0x40007000

081024dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 81024dc:	b480      	push	{r7}
 81024de:	b085      	sub	sp, #20
 81024e0:	af00      	add	r7, sp, #0
 81024e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 81024e4:	687b      	ldr	r3, [r7, #4]
 81024e6:	2b00      	cmp	r3, #0
 81024e8:	d141      	bne.n	810256e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 81024ea:	4b4b      	ldr	r3, [pc, #300]	; (8102618 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 81024ec:	681b      	ldr	r3, [r3, #0]
 81024ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 81024f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81024f6:	d131      	bne.n	810255c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 81024f8:	4b47      	ldr	r3, [pc, #284]	; (8102618 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 81024fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81024fe:	4a46      	ldr	r2, [pc, #280]	; (8102618 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8102500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8102504:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8102508:	4b43      	ldr	r3, [pc, #268]	; (8102618 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 810250a:	681b      	ldr	r3, [r3, #0]
 810250c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8102510:	4a41      	ldr	r2, [pc, #260]	; (8102618 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8102512:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8102516:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8102518:	4b40      	ldr	r3, [pc, #256]	; (810261c <HAL_PWREx_ControlVoltageScaling+0x140>)
 810251a:	681b      	ldr	r3, [r3, #0]
 810251c:	2232      	movs	r2, #50	; 0x32
 810251e:	fb02 f303 	mul.w	r3, r2, r3
 8102522:	4a3f      	ldr	r2, [pc, #252]	; (8102620 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8102524:	fba2 2303 	umull	r2, r3, r2, r3
 8102528:	0c9b      	lsrs	r3, r3, #18
 810252a:	3301      	adds	r3, #1
 810252c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 810252e:	e002      	b.n	8102536 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8102530:	68fb      	ldr	r3, [r7, #12]
 8102532:	3b01      	subs	r3, #1
 8102534:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8102536:	4b38      	ldr	r3, [pc, #224]	; (8102618 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8102538:	695b      	ldr	r3, [r3, #20]
 810253a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 810253e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8102542:	d102      	bne.n	810254a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8102544:	68fb      	ldr	r3, [r7, #12]
 8102546:	2b00      	cmp	r3, #0
 8102548:	d1f2      	bne.n	8102530 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 810254a:	4b33      	ldr	r3, [pc, #204]	; (8102618 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 810254c:	695b      	ldr	r3, [r3, #20]
 810254e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8102552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8102556:	d158      	bne.n	810260a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8102558:	2303      	movs	r3, #3
 810255a:	e057      	b.n	810260c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 810255c:	4b2e      	ldr	r3, [pc, #184]	; (8102618 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 810255e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8102562:	4a2d      	ldr	r2, [pc, #180]	; (8102618 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8102564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8102568:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 810256c:	e04d      	b.n	810260a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 810256e:	687b      	ldr	r3, [r7, #4]
 8102570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8102574:	d141      	bne.n	81025fa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8102576:	4b28      	ldr	r3, [pc, #160]	; (8102618 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8102578:	681b      	ldr	r3, [r3, #0]
 810257a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 810257e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8102582:	d131      	bne.n	81025e8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8102584:	4b24      	ldr	r3, [pc, #144]	; (8102618 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8102586:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810258a:	4a23      	ldr	r2, [pc, #140]	; (8102618 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 810258c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102590:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8102594:	4b20      	ldr	r3, [pc, #128]	; (8102618 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8102596:	681b      	ldr	r3, [r3, #0]
 8102598:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 810259c:	4a1e      	ldr	r2, [pc, #120]	; (8102618 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 810259e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 81025a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 81025a4:	4b1d      	ldr	r3, [pc, #116]	; (810261c <HAL_PWREx_ControlVoltageScaling+0x140>)
 81025a6:	681b      	ldr	r3, [r3, #0]
 81025a8:	2232      	movs	r2, #50	; 0x32
 81025aa:	fb02 f303 	mul.w	r3, r2, r3
 81025ae:	4a1c      	ldr	r2, [pc, #112]	; (8102620 <HAL_PWREx_ControlVoltageScaling+0x144>)
 81025b0:	fba2 2303 	umull	r2, r3, r2, r3
 81025b4:	0c9b      	lsrs	r3, r3, #18
 81025b6:	3301      	adds	r3, #1
 81025b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 81025ba:	e002      	b.n	81025c2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 81025bc:	68fb      	ldr	r3, [r7, #12]
 81025be:	3b01      	subs	r3, #1
 81025c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 81025c2:	4b15      	ldr	r3, [pc, #84]	; (8102618 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 81025c4:	695b      	ldr	r3, [r3, #20]
 81025c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81025ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81025ce:	d102      	bne.n	81025d6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 81025d0:	68fb      	ldr	r3, [r7, #12]
 81025d2:	2b00      	cmp	r3, #0
 81025d4:	d1f2      	bne.n	81025bc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 81025d6:	4b10      	ldr	r3, [pc, #64]	; (8102618 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 81025d8:	695b      	ldr	r3, [r3, #20]
 81025da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81025de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81025e2:	d112      	bne.n	810260a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 81025e4:	2303      	movs	r3, #3
 81025e6:	e011      	b.n	810260c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 81025e8:	4b0b      	ldr	r3, [pc, #44]	; (8102618 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 81025ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81025ee:	4a0a      	ldr	r2, [pc, #40]	; (8102618 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 81025f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81025f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 81025f8:	e007      	b.n	810260a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 81025fa:	4b07      	ldr	r3, [pc, #28]	; (8102618 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 81025fc:	681b      	ldr	r3, [r3, #0]
 81025fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8102602:	4a05      	ldr	r2, [pc, #20]	; (8102618 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8102604:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8102608:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 810260a:	2300      	movs	r3, #0
}
 810260c:	4618      	mov	r0, r3
 810260e:	3714      	adds	r7, #20
 8102610:	46bd      	mov	sp, r7
 8102612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102616:	4770      	bx	lr
 8102618:	40007000 	.word	0x40007000
 810261c:	20000000 	.word	0x20000000
 8102620:	431bde83 	.word	0x431bde83

08102624 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8102624:	b480      	push	{r7}
 8102626:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8102628:	4b05      	ldr	r3, [pc, #20]	; (8102640 <HAL_PWREx_EnableVddUSB+0x1c>)
 810262a:	685b      	ldr	r3, [r3, #4]
 810262c:	4a04      	ldr	r2, [pc, #16]	; (8102640 <HAL_PWREx_EnableVddUSB+0x1c>)
 810262e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8102632:	6053      	str	r3, [r2, #4]
}
 8102634:	bf00      	nop
 8102636:	46bd      	mov	sp, r7
 8102638:	f85d 7b04 	ldr.w	r7, [sp], #4
 810263c:	4770      	bx	lr
 810263e:	bf00      	nop
 8102640:	40007000 	.word	0x40007000

08102644 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8102644:	b580      	push	{r7, lr}
 8102646:	b088      	sub	sp, #32
 8102648:	af00      	add	r7, sp, #0
 810264a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 810264c:	687b      	ldr	r3, [r7, #4]
 810264e:	2b00      	cmp	r3, #0
 8102650:	d102      	bne.n	8102658 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8102652:	2301      	movs	r3, #1
 8102654:	f000 bc08 	b.w	8102e68 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8102658:	4b96      	ldr	r3, [pc, #600]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 810265a:	689b      	ldr	r3, [r3, #8]
 810265c:	f003 030c 	and.w	r3, r3, #12
 8102660:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8102662:	4b94      	ldr	r3, [pc, #592]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 8102664:	68db      	ldr	r3, [r3, #12]
 8102666:	f003 0303 	and.w	r3, r3, #3
 810266a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 810266c:	687b      	ldr	r3, [r7, #4]
 810266e:	681b      	ldr	r3, [r3, #0]
 8102670:	f003 0310 	and.w	r3, r3, #16
 8102674:	2b00      	cmp	r3, #0
 8102676:	f000 80e4 	beq.w	8102842 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 810267a:	69bb      	ldr	r3, [r7, #24]
 810267c:	2b00      	cmp	r3, #0
 810267e:	d007      	beq.n	8102690 <HAL_RCC_OscConfig+0x4c>
 8102680:	69bb      	ldr	r3, [r7, #24]
 8102682:	2b0c      	cmp	r3, #12
 8102684:	f040 808b 	bne.w	810279e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8102688:	697b      	ldr	r3, [r7, #20]
 810268a:	2b01      	cmp	r3, #1
 810268c:	f040 8087 	bne.w	810279e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8102690:	4b88      	ldr	r3, [pc, #544]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 8102692:	681b      	ldr	r3, [r3, #0]
 8102694:	f003 0302 	and.w	r3, r3, #2
 8102698:	2b00      	cmp	r3, #0
 810269a:	d005      	beq.n	81026a8 <HAL_RCC_OscConfig+0x64>
 810269c:	687b      	ldr	r3, [r7, #4]
 810269e:	699b      	ldr	r3, [r3, #24]
 81026a0:	2b00      	cmp	r3, #0
 81026a2:	d101      	bne.n	81026a8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 81026a4:	2301      	movs	r3, #1
 81026a6:	e3df      	b.n	8102e68 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 81026a8:	687b      	ldr	r3, [r7, #4]
 81026aa:	6a1a      	ldr	r2, [r3, #32]
 81026ac:	4b81      	ldr	r3, [pc, #516]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 81026ae:	681b      	ldr	r3, [r3, #0]
 81026b0:	f003 0308 	and.w	r3, r3, #8
 81026b4:	2b00      	cmp	r3, #0
 81026b6:	d004      	beq.n	81026c2 <HAL_RCC_OscConfig+0x7e>
 81026b8:	4b7e      	ldr	r3, [pc, #504]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 81026ba:	681b      	ldr	r3, [r3, #0]
 81026bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 81026c0:	e005      	b.n	81026ce <HAL_RCC_OscConfig+0x8a>
 81026c2:	4b7c      	ldr	r3, [pc, #496]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 81026c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81026c8:	091b      	lsrs	r3, r3, #4
 81026ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 81026ce:	4293      	cmp	r3, r2
 81026d0:	d223      	bcs.n	810271a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 81026d2:	687b      	ldr	r3, [r7, #4]
 81026d4:	6a1b      	ldr	r3, [r3, #32]
 81026d6:	4618      	mov	r0, r3
 81026d8:	f000 fda0 	bl	810321c <RCC_SetFlashLatencyFromMSIRange>
 81026dc:	4603      	mov	r3, r0
 81026de:	2b00      	cmp	r3, #0
 81026e0:	d001      	beq.n	81026e6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 81026e2:	2301      	movs	r3, #1
 81026e4:	e3c0      	b.n	8102e68 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 81026e6:	4b73      	ldr	r3, [pc, #460]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 81026e8:	681b      	ldr	r3, [r3, #0]
 81026ea:	4a72      	ldr	r2, [pc, #456]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 81026ec:	f043 0308 	orr.w	r3, r3, #8
 81026f0:	6013      	str	r3, [r2, #0]
 81026f2:	4b70      	ldr	r3, [pc, #448]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 81026f4:	681b      	ldr	r3, [r3, #0]
 81026f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 81026fa:	687b      	ldr	r3, [r7, #4]
 81026fc:	6a1b      	ldr	r3, [r3, #32]
 81026fe:	496d      	ldr	r1, [pc, #436]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 8102700:	4313      	orrs	r3, r2
 8102702:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8102704:	4b6b      	ldr	r3, [pc, #428]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 8102706:	685b      	ldr	r3, [r3, #4]
 8102708:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 810270c:	687b      	ldr	r3, [r7, #4]
 810270e:	69db      	ldr	r3, [r3, #28]
 8102710:	021b      	lsls	r3, r3, #8
 8102712:	4968      	ldr	r1, [pc, #416]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 8102714:	4313      	orrs	r3, r2
 8102716:	604b      	str	r3, [r1, #4]
 8102718:	e025      	b.n	8102766 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 810271a:	4b66      	ldr	r3, [pc, #408]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 810271c:	681b      	ldr	r3, [r3, #0]
 810271e:	4a65      	ldr	r2, [pc, #404]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 8102720:	f043 0308 	orr.w	r3, r3, #8
 8102724:	6013      	str	r3, [r2, #0]
 8102726:	4b63      	ldr	r3, [pc, #396]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 8102728:	681b      	ldr	r3, [r3, #0]
 810272a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 810272e:	687b      	ldr	r3, [r7, #4]
 8102730:	6a1b      	ldr	r3, [r3, #32]
 8102732:	4960      	ldr	r1, [pc, #384]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 8102734:	4313      	orrs	r3, r2
 8102736:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8102738:	4b5e      	ldr	r3, [pc, #376]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 810273a:	685b      	ldr	r3, [r3, #4]
 810273c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8102740:	687b      	ldr	r3, [r7, #4]
 8102742:	69db      	ldr	r3, [r3, #28]
 8102744:	021b      	lsls	r3, r3, #8
 8102746:	495b      	ldr	r1, [pc, #364]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 8102748:	4313      	orrs	r3, r2
 810274a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 810274c:	69bb      	ldr	r3, [r7, #24]
 810274e:	2b00      	cmp	r3, #0
 8102750:	d109      	bne.n	8102766 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8102752:	687b      	ldr	r3, [r7, #4]
 8102754:	6a1b      	ldr	r3, [r3, #32]
 8102756:	4618      	mov	r0, r3
 8102758:	f000 fd60 	bl	810321c <RCC_SetFlashLatencyFromMSIRange>
 810275c:	4603      	mov	r3, r0
 810275e:	2b00      	cmp	r3, #0
 8102760:	d001      	beq.n	8102766 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8102762:	2301      	movs	r3, #1
 8102764:	e380      	b.n	8102e68 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8102766:	f000 fcc1 	bl	81030ec <HAL_RCC_GetSysClockFreq>
 810276a:	4602      	mov	r2, r0
 810276c:	4b51      	ldr	r3, [pc, #324]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 810276e:	689b      	ldr	r3, [r3, #8]
 8102770:	091b      	lsrs	r3, r3, #4
 8102772:	f003 030f 	and.w	r3, r3, #15
 8102776:	4950      	ldr	r1, [pc, #320]	; (81028b8 <HAL_RCC_OscConfig+0x274>)
 8102778:	5ccb      	ldrb	r3, [r1, r3]
 810277a:	f003 031f 	and.w	r3, r3, #31
 810277e:	fa22 f303 	lsr.w	r3, r2, r3
 8102782:	4a4e      	ldr	r2, [pc, #312]	; (81028bc <HAL_RCC_OscConfig+0x278>)
 8102784:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8102786:	4b4e      	ldr	r3, [pc, #312]	; (81028c0 <HAL_RCC_OscConfig+0x27c>)
 8102788:	681b      	ldr	r3, [r3, #0]
 810278a:	4618      	mov	r0, r3
 810278c:	f7fd feee 	bl	810056c <HAL_InitTick>
 8102790:	4603      	mov	r3, r0
 8102792:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8102794:	7bfb      	ldrb	r3, [r7, #15]
 8102796:	2b00      	cmp	r3, #0
 8102798:	d052      	beq.n	8102840 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 810279a:	7bfb      	ldrb	r3, [r7, #15]
 810279c:	e364      	b.n	8102e68 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 810279e:	687b      	ldr	r3, [r7, #4]
 81027a0:	699b      	ldr	r3, [r3, #24]
 81027a2:	2b00      	cmp	r3, #0
 81027a4:	d032      	beq.n	810280c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 81027a6:	4b43      	ldr	r3, [pc, #268]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 81027a8:	681b      	ldr	r3, [r3, #0]
 81027aa:	4a42      	ldr	r2, [pc, #264]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 81027ac:	f043 0301 	orr.w	r3, r3, #1
 81027b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 81027b2:	f7fd ff2b 	bl	810060c <HAL_GetTick>
 81027b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 81027b8:	e008      	b.n	81027cc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 81027ba:	f7fd ff27 	bl	810060c <HAL_GetTick>
 81027be:	4602      	mov	r2, r0
 81027c0:	693b      	ldr	r3, [r7, #16]
 81027c2:	1ad3      	subs	r3, r2, r3
 81027c4:	2b02      	cmp	r3, #2
 81027c6:	d901      	bls.n	81027cc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 81027c8:	2303      	movs	r3, #3
 81027ca:	e34d      	b.n	8102e68 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 81027cc:	4b39      	ldr	r3, [pc, #228]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 81027ce:	681b      	ldr	r3, [r3, #0]
 81027d0:	f003 0302 	and.w	r3, r3, #2
 81027d4:	2b00      	cmp	r3, #0
 81027d6:	d0f0      	beq.n	81027ba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 81027d8:	4b36      	ldr	r3, [pc, #216]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 81027da:	681b      	ldr	r3, [r3, #0]
 81027dc:	4a35      	ldr	r2, [pc, #212]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 81027de:	f043 0308 	orr.w	r3, r3, #8
 81027e2:	6013      	str	r3, [r2, #0]
 81027e4:	4b33      	ldr	r3, [pc, #204]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 81027e6:	681b      	ldr	r3, [r3, #0]
 81027e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 81027ec:	687b      	ldr	r3, [r7, #4]
 81027ee:	6a1b      	ldr	r3, [r3, #32]
 81027f0:	4930      	ldr	r1, [pc, #192]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 81027f2:	4313      	orrs	r3, r2
 81027f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 81027f6:	4b2f      	ldr	r3, [pc, #188]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 81027f8:	685b      	ldr	r3, [r3, #4]
 81027fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 81027fe:	687b      	ldr	r3, [r7, #4]
 8102800:	69db      	ldr	r3, [r3, #28]
 8102802:	021b      	lsls	r3, r3, #8
 8102804:	492b      	ldr	r1, [pc, #172]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 8102806:	4313      	orrs	r3, r2
 8102808:	604b      	str	r3, [r1, #4]
 810280a:	e01a      	b.n	8102842 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 810280c:	4b29      	ldr	r3, [pc, #164]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 810280e:	681b      	ldr	r3, [r3, #0]
 8102810:	4a28      	ldr	r2, [pc, #160]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 8102812:	f023 0301 	bic.w	r3, r3, #1
 8102816:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8102818:	f7fd fef8 	bl	810060c <HAL_GetTick>
 810281c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 810281e:	e008      	b.n	8102832 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8102820:	f7fd fef4 	bl	810060c <HAL_GetTick>
 8102824:	4602      	mov	r2, r0
 8102826:	693b      	ldr	r3, [r7, #16]
 8102828:	1ad3      	subs	r3, r2, r3
 810282a:	2b02      	cmp	r3, #2
 810282c:	d901      	bls.n	8102832 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 810282e:	2303      	movs	r3, #3
 8102830:	e31a      	b.n	8102e68 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8102832:	4b20      	ldr	r3, [pc, #128]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 8102834:	681b      	ldr	r3, [r3, #0]
 8102836:	f003 0302 	and.w	r3, r3, #2
 810283a:	2b00      	cmp	r3, #0
 810283c:	d1f0      	bne.n	8102820 <HAL_RCC_OscConfig+0x1dc>
 810283e:	e000      	b.n	8102842 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8102840:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8102842:	687b      	ldr	r3, [r7, #4]
 8102844:	681b      	ldr	r3, [r3, #0]
 8102846:	f003 0301 	and.w	r3, r3, #1
 810284a:	2b00      	cmp	r3, #0
 810284c:	d073      	beq.n	8102936 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 810284e:	69bb      	ldr	r3, [r7, #24]
 8102850:	2b08      	cmp	r3, #8
 8102852:	d005      	beq.n	8102860 <HAL_RCC_OscConfig+0x21c>
 8102854:	69bb      	ldr	r3, [r7, #24]
 8102856:	2b0c      	cmp	r3, #12
 8102858:	d10e      	bne.n	8102878 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 810285a:	697b      	ldr	r3, [r7, #20]
 810285c:	2b03      	cmp	r3, #3
 810285e:	d10b      	bne.n	8102878 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8102860:	4b14      	ldr	r3, [pc, #80]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 8102862:	681b      	ldr	r3, [r3, #0]
 8102864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102868:	2b00      	cmp	r3, #0
 810286a:	d063      	beq.n	8102934 <HAL_RCC_OscConfig+0x2f0>
 810286c:	687b      	ldr	r3, [r7, #4]
 810286e:	685b      	ldr	r3, [r3, #4]
 8102870:	2b00      	cmp	r3, #0
 8102872:	d15f      	bne.n	8102934 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8102874:	2301      	movs	r3, #1
 8102876:	e2f7      	b.n	8102e68 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8102878:	687b      	ldr	r3, [r7, #4]
 810287a:	685b      	ldr	r3, [r3, #4]
 810287c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102880:	d106      	bne.n	8102890 <HAL_RCC_OscConfig+0x24c>
 8102882:	4b0c      	ldr	r3, [pc, #48]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 8102884:	681b      	ldr	r3, [r3, #0]
 8102886:	4a0b      	ldr	r2, [pc, #44]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 8102888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810288c:	6013      	str	r3, [r2, #0]
 810288e:	e025      	b.n	81028dc <HAL_RCC_OscConfig+0x298>
 8102890:	687b      	ldr	r3, [r7, #4]
 8102892:	685b      	ldr	r3, [r3, #4]
 8102894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8102898:	d114      	bne.n	81028c4 <HAL_RCC_OscConfig+0x280>
 810289a:	4b06      	ldr	r3, [pc, #24]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 810289c:	681b      	ldr	r3, [r3, #0]
 810289e:	4a05      	ldr	r2, [pc, #20]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 81028a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 81028a4:	6013      	str	r3, [r2, #0]
 81028a6:	4b03      	ldr	r3, [pc, #12]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 81028a8:	681b      	ldr	r3, [r3, #0]
 81028aa:	4a02      	ldr	r2, [pc, #8]	; (81028b4 <HAL_RCC_OscConfig+0x270>)
 81028ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81028b0:	6013      	str	r3, [r2, #0]
 81028b2:	e013      	b.n	81028dc <HAL_RCC_OscConfig+0x298>
 81028b4:	40021000 	.word	0x40021000
 81028b8:	08107b48 	.word	0x08107b48
 81028bc:	20000000 	.word	0x20000000
 81028c0:	20000004 	.word	0x20000004
 81028c4:	4ba0      	ldr	r3, [pc, #640]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 81028c6:	681b      	ldr	r3, [r3, #0]
 81028c8:	4a9f      	ldr	r2, [pc, #636]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 81028ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81028ce:	6013      	str	r3, [r2, #0]
 81028d0:	4b9d      	ldr	r3, [pc, #628]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 81028d2:	681b      	ldr	r3, [r3, #0]
 81028d4:	4a9c      	ldr	r2, [pc, #624]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 81028d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 81028da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 81028dc:	687b      	ldr	r3, [r7, #4]
 81028de:	685b      	ldr	r3, [r3, #4]
 81028e0:	2b00      	cmp	r3, #0
 81028e2:	d013      	beq.n	810290c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81028e4:	f7fd fe92 	bl	810060c <HAL_GetTick>
 81028e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 81028ea:	e008      	b.n	81028fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 81028ec:	f7fd fe8e 	bl	810060c <HAL_GetTick>
 81028f0:	4602      	mov	r2, r0
 81028f2:	693b      	ldr	r3, [r7, #16]
 81028f4:	1ad3      	subs	r3, r2, r3
 81028f6:	2b64      	cmp	r3, #100	; 0x64
 81028f8:	d901      	bls.n	81028fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 81028fa:	2303      	movs	r3, #3
 81028fc:	e2b4      	b.n	8102e68 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 81028fe:	4b92      	ldr	r3, [pc, #584]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 8102900:	681b      	ldr	r3, [r3, #0]
 8102902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102906:	2b00      	cmp	r3, #0
 8102908:	d0f0      	beq.n	81028ec <HAL_RCC_OscConfig+0x2a8>
 810290a:	e014      	b.n	8102936 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810290c:	f7fd fe7e 	bl	810060c <HAL_GetTick>
 8102910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8102912:	e008      	b.n	8102926 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8102914:	f7fd fe7a 	bl	810060c <HAL_GetTick>
 8102918:	4602      	mov	r2, r0
 810291a:	693b      	ldr	r3, [r7, #16]
 810291c:	1ad3      	subs	r3, r2, r3
 810291e:	2b64      	cmp	r3, #100	; 0x64
 8102920:	d901      	bls.n	8102926 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8102922:	2303      	movs	r3, #3
 8102924:	e2a0      	b.n	8102e68 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8102926:	4b88      	ldr	r3, [pc, #544]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 8102928:	681b      	ldr	r3, [r3, #0]
 810292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810292e:	2b00      	cmp	r3, #0
 8102930:	d1f0      	bne.n	8102914 <HAL_RCC_OscConfig+0x2d0>
 8102932:	e000      	b.n	8102936 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8102934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8102936:	687b      	ldr	r3, [r7, #4]
 8102938:	681b      	ldr	r3, [r3, #0]
 810293a:	f003 0302 	and.w	r3, r3, #2
 810293e:	2b00      	cmp	r3, #0
 8102940:	d060      	beq.n	8102a04 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8102942:	69bb      	ldr	r3, [r7, #24]
 8102944:	2b04      	cmp	r3, #4
 8102946:	d005      	beq.n	8102954 <HAL_RCC_OscConfig+0x310>
 8102948:	69bb      	ldr	r3, [r7, #24]
 810294a:	2b0c      	cmp	r3, #12
 810294c:	d119      	bne.n	8102982 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 810294e:	697b      	ldr	r3, [r7, #20]
 8102950:	2b02      	cmp	r3, #2
 8102952:	d116      	bne.n	8102982 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8102954:	4b7c      	ldr	r3, [pc, #496]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 8102956:	681b      	ldr	r3, [r3, #0]
 8102958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 810295c:	2b00      	cmp	r3, #0
 810295e:	d005      	beq.n	810296c <HAL_RCC_OscConfig+0x328>
 8102960:	687b      	ldr	r3, [r7, #4]
 8102962:	68db      	ldr	r3, [r3, #12]
 8102964:	2b00      	cmp	r3, #0
 8102966:	d101      	bne.n	810296c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8102968:	2301      	movs	r3, #1
 810296a:	e27d      	b.n	8102e68 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 810296c:	4b76      	ldr	r3, [pc, #472]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 810296e:	685b      	ldr	r3, [r3, #4]
 8102970:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8102974:	687b      	ldr	r3, [r7, #4]
 8102976:	691b      	ldr	r3, [r3, #16]
 8102978:	061b      	lsls	r3, r3, #24
 810297a:	4973      	ldr	r1, [pc, #460]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 810297c:	4313      	orrs	r3, r2
 810297e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8102980:	e040      	b.n	8102a04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8102982:	687b      	ldr	r3, [r7, #4]
 8102984:	68db      	ldr	r3, [r3, #12]
 8102986:	2b00      	cmp	r3, #0
 8102988:	d023      	beq.n	81029d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 810298a:	4b6f      	ldr	r3, [pc, #444]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 810298c:	681b      	ldr	r3, [r3, #0]
 810298e:	4a6e      	ldr	r2, [pc, #440]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 8102990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8102996:	f7fd fe39 	bl	810060c <HAL_GetTick>
 810299a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 810299c:	e008      	b.n	81029b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 810299e:	f7fd fe35 	bl	810060c <HAL_GetTick>
 81029a2:	4602      	mov	r2, r0
 81029a4:	693b      	ldr	r3, [r7, #16]
 81029a6:	1ad3      	subs	r3, r2, r3
 81029a8:	2b02      	cmp	r3, #2
 81029aa:	d901      	bls.n	81029b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 81029ac:	2303      	movs	r3, #3
 81029ae:	e25b      	b.n	8102e68 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 81029b0:	4b65      	ldr	r3, [pc, #404]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 81029b2:	681b      	ldr	r3, [r3, #0]
 81029b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81029b8:	2b00      	cmp	r3, #0
 81029ba:	d0f0      	beq.n	810299e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 81029bc:	4b62      	ldr	r3, [pc, #392]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 81029be:	685b      	ldr	r3, [r3, #4]
 81029c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 81029c4:	687b      	ldr	r3, [r7, #4]
 81029c6:	691b      	ldr	r3, [r3, #16]
 81029c8:	061b      	lsls	r3, r3, #24
 81029ca:	495f      	ldr	r1, [pc, #380]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 81029cc:	4313      	orrs	r3, r2
 81029ce:	604b      	str	r3, [r1, #4]
 81029d0:	e018      	b.n	8102a04 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 81029d2:	4b5d      	ldr	r3, [pc, #372]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 81029d4:	681b      	ldr	r3, [r3, #0]
 81029d6:	4a5c      	ldr	r2, [pc, #368]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 81029d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81029dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81029de:	f7fd fe15 	bl	810060c <HAL_GetTick>
 81029e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 81029e4:	e008      	b.n	81029f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 81029e6:	f7fd fe11 	bl	810060c <HAL_GetTick>
 81029ea:	4602      	mov	r2, r0
 81029ec:	693b      	ldr	r3, [r7, #16]
 81029ee:	1ad3      	subs	r3, r2, r3
 81029f0:	2b02      	cmp	r3, #2
 81029f2:	d901      	bls.n	81029f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 81029f4:	2303      	movs	r3, #3
 81029f6:	e237      	b.n	8102e68 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 81029f8:	4b53      	ldr	r3, [pc, #332]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 81029fa:	681b      	ldr	r3, [r3, #0]
 81029fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8102a00:	2b00      	cmp	r3, #0
 8102a02:	d1f0      	bne.n	81029e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8102a04:	687b      	ldr	r3, [r7, #4]
 8102a06:	681b      	ldr	r3, [r3, #0]
 8102a08:	f003 0308 	and.w	r3, r3, #8
 8102a0c:	2b00      	cmp	r3, #0
 8102a0e:	d03c      	beq.n	8102a8a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8102a10:	687b      	ldr	r3, [r7, #4]
 8102a12:	695b      	ldr	r3, [r3, #20]
 8102a14:	2b00      	cmp	r3, #0
 8102a16:	d01c      	beq.n	8102a52 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8102a18:	4b4b      	ldr	r3, [pc, #300]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 8102a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8102a1e:	4a4a      	ldr	r2, [pc, #296]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 8102a20:	f043 0301 	orr.w	r3, r3, #1
 8102a24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8102a28:	f7fd fdf0 	bl	810060c <HAL_GetTick>
 8102a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8102a2e:	e008      	b.n	8102a42 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8102a30:	f7fd fdec 	bl	810060c <HAL_GetTick>
 8102a34:	4602      	mov	r2, r0
 8102a36:	693b      	ldr	r3, [r7, #16]
 8102a38:	1ad3      	subs	r3, r2, r3
 8102a3a:	2b02      	cmp	r3, #2
 8102a3c:	d901      	bls.n	8102a42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8102a3e:	2303      	movs	r3, #3
 8102a40:	e212      	b.n	8102e68 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8102a42:	4b41      	ldr	r3, [pc, #260]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 8102a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8102a48:	f003 0302 	and.w	r3, r3, #2
 8102a4c:	2b00      	cmp	r3, #0
 8102a4e:	d0ef      	beq.n	8102a30 <HAL_RCC_OscConfig+0x3ec>
 8102a50:	e01b      	b.n	8102a8a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8102a52:	4b3d      	ldr	r3, [pc, #244]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 8102a54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8102a58:	4a3b      	ldr	r2, [pc, #236]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 8102a5a:	f023 0301 	bic.w	r3, r3, #1
 8102a5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8102a62:	f7fd fdd3 	bl	810060c <HAL_GetTick>
 8102a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8102a68:	e008      	b.n	8102a7c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8102a6a:	f7fd fdcf 	bl	810060c <HAL_GetTick>
 8102a6e:	4602      	mov	r2, r0
 8102a70:	693b      	ldr	r3, [r7, #16]
 8102a72:	1ad3      	subs	r3, r2, r3
 8102a74:	2b02      	cmp	r3, #2
 8102a76:	d901      	bls.n	8102a7c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8102a78:	2303      	movs	r3, #3
 8102a7a:	e1f5      	b.n	8102e68 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8102a7c:	4b32      	ldr	r3, [pc, #200]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 8102a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8102a82:	f003 0302 	and.w	r3, r3, #2
 8102a86:	2b00      	cmp	r3, #0
 8102a88:	d1ef      	bne.n	8102a6a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8102a8a:	687b      	ldr	r3, [r7, #4]
 8102a8c:	681b      	ldr	r3, [r3, #0]
 8102a8e:	f003 0304 	and.w	r3, r3, #4
 8102a92:	2b00      	cmp	r3, #0
 8102a94:	f000 80a6 	beq.w	8102be4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8102a98:	2300      	movs	r3, #0
 8102a9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8102a9c:	4b2a      	ldr	r3, [pc, #168]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 8102a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8102aa4:	2b00      	cmp	r3, #0
 8102aa6:	d10d      	bne.n	8102ac4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8102aa8:	4b27      	ldr	r3, [pc, #156]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 8102aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102aac:	4a26      	ldr	r2, [pc, #152]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 8102aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8102ab2:	6593      	str	r3, [r2, #88]	; 0x58
 8102ab4:	4b24      	ldr	r3, [pc, #144]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 8102ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8102abc:	60bb      	str	r3, [r7, #8]
 8102abe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8102ac0:	2301      	movs	r3, #1
 8102ac2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8102ac4:	4b21      	ldr	r3, [pc, #132]	; (8102b4c <HAL_RCC_OscConfig+0x508>)
 8102ac6:	681b      	ldr	r3, [r3, #0]
 8102ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102acc:	2b00      	cmp	r3, #0
 8102ace:	d118      	bne.n	8102b02 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8102ad0:	4b1e      	ldr	r3, [pc, #120]	; (8102b4c <HAL_RCC_OscConfig+0x508>)
 8102ad2:	681b      	ldr	r3, [r3, #0]
 8102ad4:	4a1d      	ldr	r2, [pc, #116]	; (8102b4c <HAL_RCC_OscConfig+0x508>)
 8102ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102ada:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8102adc:	f7fd fd96 	bl	810060c <HAL_GetTick>
 8102ae0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8102ae2:	e008      	b.n	8102af6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8102ae4:	f7fd fd92 	bl	810060c <HAL_GetTick>
 8102ae8:	4602      	mov	r2, r0
 8102aea:	693b      	ldr	r3, [r7, #16]
 8102aec:	1ad3      	subs	r3, r2, r3
 8102aee:	2b02      	cmp	r3, #2
 8102af0:	d901      	bls.n	8102af6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8102af2:	2303      	movs	r3, #3
 8102af4:	e1b8      	b.n	8102e68 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8102af6:	4b15      	ldr	r3, [pc, #84]	; (8102b4c <HAL_RCC_OscConfig+0x508>)
 8102af8:	681b      	ldr	r3, [r3, #0]
 8102afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102afe:	2b00      	cmp	r3, #0
 8102b00:	d0f0      	beq.n	8102ae4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8102b02:	687b      	ldr	r3, [r7, #4]
 8102b04:	689b      	ldr	r3, [r3, #8]
 8102b06:	2b01      	cmp	r3, #1
 8102b08:	d108      	bne.n	8102b1c <HAL_RCC_OscConfig+0x4d8>
 8102b0a:	4b0f      	ldr	r3, [pc, #60]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 8102b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102b10:	4a0d      	ldr	r2, [pc, #52]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 8102b12:	f043 0301 	orr.w	r3, r3, #1
 8102b16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8102b1a:	e029      	b.n	8102b70 <HAL_RCC_OscConfig+0x52c>
 8102b1c:	687b      	ldr	r3, [r7, #4]
 8102b1e:	689b      	ldr	r3, [r3, #8]
 8102b20:	2b05      	cmp	r3, #5
 8102b22:	d115      	bne.n	8102b50 <HAL_RCC_OscConfig+0x50c>
 8102b24:	4b08      	ldr	r3, [pc, #32]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 8102b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102b2a:	4a07      	ldr	r2, [pc, #28]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 8102b2c:	f043 0304 	orr.w	r3, r3, #4
 8102b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8102b34:	4b04      	ldr	r3, [pc, #16]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 8102b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102b3a:	4a03      	ldr	r2, [pc, #12]	; (8102b48 <HAL_RCC_OscConfig+0x504>)
 8102b3c:	f043 0301 	orr.w	r3, r3, #1
 8102b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8102b44:	e014      	b.n	8102b70 <HAL_RCC_OscConfig+0x52c>
 8102b46:	bf00      	nop
 8102b48:	40021000 	.word	0x40021000
 8102b4c:	40007000 	.word	0x40007000
 8102b50:	4b9d      	ldr	r3, [pc, #628]	; (8102dc8 <HAL_RCC_OscConfig+0x784>)
 8102b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102b56:	4a9c      	ldr	r2, [pc, #624]	; (8102dc8 <HAL_RCC_OscConfig+0x784>)
 8102b58:	f023 0301 	bic.w	r3, r3, #1
 8102b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8102b60:	4b99      	ldr	r3, [pc, #612]	; (8102dc8 <HAL_RCC_OscConfig+0x784>)
 8102b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102b66:	4a98      	ldr	r2, [pc, #608]	; (8102dc8 <HAL_RCC_OscConfig+0x784>)
 8102b68:	f023 0304 	bic.w	r3, r3, #4
 8102b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8102b70:	687b      	ldr	r3, [r7, #4]
 8102b72:	689b      	ldr	r3, [r3, #8]
 8102b74:	2b00      	cmp	r3, #0
 8102b76:	d016      	beq.n	8102ba6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8102b78:	f7fd fd48 	bl	810060c <HAL_GetTick>
 8102b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8102b7e:	e00a      	b.n	8102b96 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8102b80:	f7fd fd44 	bl	810060c <HAL_GetTick>
 8102b84:	4602      	mov	r2, r0
 8102b86:	693b      	ldr	r3, [r7, #16]
 8102b88:	1ad3      	subs	r3, r2, r3
 8102b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8102b8e:	4293      	cmp	r3, r2
 8102b90:	d901      	bls.n	8102b96 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8102b92:	2303      	movs	r3, #3
 8102b94:	e168      	b.n	8102e68 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8102b96:	4b8c      	ldr	r3, [pc, #560]	; (8102dc8 <HAL_RCC_OscConfig+0x784>)
 8102b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102b9c:	f003 0302 	and.w	r3, r3, #2
 8102ba0:	2b00      	cmp	r3, #0
 8102ba2:	d0ed      	beq.n	8102b80 <HAL_RCC_OscConfig+0x53c>
 8102ba4:	e015      	b.n	8102bd2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8102ba6:	f7fd fd31 	bl	810060c <HAL_GetTick>
 8102baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8102bac:	e00a      	b.n	8102bc4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8102bae:	f7fd fd2d 	bl	810060c <HAL_GetTick>
 8102bb2:	4602      	mov	r2, r0
 8102bb4:	693b      	ldr	r3, [r7, #16]
 8102bb6:	1ad3      	subs	r3, r2, r3
 8102bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8102bbc:	4293      	cmp	r3, r2
 8102bbe:	d901      	bls.n	8102bc4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8102bc0:	2303      	movs	r3, #3
 8102bc2:	e151      	b.n	8102e68 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8102bc4:	4b80      	ldr	r3, [pc, #512]	; (8102dc8 <HAL_RCC_OscConfig+0x784>)
 8102bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102bca:	f003 0302 	and.w	r3, r3, #2
 8102bce:	2b00      	cmp	r3, #0
 8102bd0:	d1ed      	bne.n	8102bae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8102bd2:	7ffb      	ldrb	r3, [r7, #31]
 8102bd4:	2b01      	cmp	r3, #1
 8102bd6:	d105      	bne.n	8102be4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8102bd8:	4b7b      	ldr	r3, [pc, #492]	; (8102dc8 <HAL_RCC_OscConfig+0x784>)
 8102bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102bdc:	4a7a      	ldr	r2, [pc, #488]	; (8102dc8 <HAL_RCC_OscConfig+0x784>)
 8102bde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8102be2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8102be4:	687b      	ldr	r3, [r7, #4]
 8102be6:	681b      	ldr	r3, [r3, #0]
 8102be8:	f003 0320 	and.w	r3, r3, #32
 8102bec:	2b00      	cmp	r3, #0
 8102bee:	d03c      	beq.n	8102c6a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8102bf0:	687b      	ldr	r3, [r7, #4]
 8102bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102bf4:	2b00      	cmp	r3, #0
 8102bf6:	d01c      	beq.n	8102c32 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8102bf8:	4b73      	ldr	r3, [pc, #460]	; (8102dc8 <HAL_RCC_OscConfig+0x784>)
 8102bfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8102bfe:	4a72      	ldr	r2, [pc, #456]	; (8102dc8 <HAL_RCC_OscConfig+0x784>)
 8102c00:	f043 0301 	orr.w	r3, r3, #1
 8102c04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8102c08:	f7fd fd00 	bl	810060c <HAL_GetTick>
 8102c0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8102c0e:	e008      	b.n	8102c22 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8102c10:	f7fd fcfc 	bl	810060c <HAL_GetTick>
 8102c14:	4602      	mov	r2, r0
 8102c16:	693b      	ldr	r3, [r7, #16]
 8102c18:	1ad3      	subs	r3, r2, r3
 8102c1a:	2b02      	cmp	r3, #2
 8102c1c:	d901      	bls.n	8102c22 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8102c1e:	2303      	movs	r3, #3
 8102c20:	e122      	b.n	8102e68 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8102c22:	4b69      	ldr	r3, [pc, #420]	; (8102dc8 <HAL_RCC_OscConfig+0x784>)
 8102c24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8102c28:	f003 0302 	and.w	r3, r3, #2
 8102c2c:	2b00      	cmp	r3, #0
 8102c2e:	d0ef      	beq.n	8102c10 <HAL_RCC_OscConfig+0x5cc>
 8102c30:	e01b      	b.n	8102c6a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8102c32:	4b65      	ldr	r3, [pc, #404]	; (8102dc8 <HAL_RCC_OscConfig+0x784>)
 8102c34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8102c38:	4a63      	ldr	r2, [pc, #396]	; (8102dc8 <HAL_RCC_OscConfig+0x784>)
 8102c3a:	f023 0301 	bic.w	r3, r3, #1
 8102c3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8102c42:	f7fd fce3 	bl	810060c <HAL_GetTick>
 8102c46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8102c48:	e008      	b.n	8102c5c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8102c4a:	f7fd fcdf 	bl	810060c <HAL_GetTick>
 8102c4e:	4602      	mov	r2, r0
 8102c50:	693b      	ldr	r3, [r7, #16]
 8102c52:	1ad3      	subs	r3, r2, r3
 8102c54:	2b02      	cmp	r3, #2
 8102c56:	d901      	bls.n	8102c5c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8102c58:	2303      	movs	r3, #3
 8102c5a:	e105      	b.n	8102e68 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8102c5c:	4b5a      	ldr	r3, [pc, #360]	; (8102dc8 <HAL_RCC_OscConfig+0x784>)
 8102c5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8102c62:	f003 0302 	and.w	r3, r3, #2
 8102c66:	2b00      	cmp	r3, #0
 8102c68:	d1ef      	bne.n	8102c4a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8102c6a:	687b      	ldr	r3, [r7, #4]
 8102c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102c6e:	2b00      	cmp	r3, #0
 8102c70:	f000 80f9 	beq.w	8102e66 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8102c74:	687b      	ldr	r3, [r7, #4]
 8102c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102c78:	2b02      	cmp	r3, #2
 8102c7a:	f040 80cf 	bne.w	8102e1c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8102c7e:	4b52      	ldr	r3, [pc, #328]	; (8102dc8 <HAL_RCC_OscConfig+0x784>)
 8102c80:	68db      	ldr	r3, [r3, #12]
 8102c82:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8102c84:	697b      	ldr	r3, [r7, #20]
 8102c86:	f003 0203 	and.w	r2, r3, #3
 8102c8a:	687b      	ldr	r3, [r7, #4]
 8102c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c8e:	429a      	cmp	r2, r3
 8102c90:	d12c      	bne.n	8102cec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8102c92:	697b      	ldr	r3, [r7, #20]
 8102c94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8102c98:	687b      	ldr	r3, [r7, #4]
 8102c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102c9c:	3b01      	subs	r3, #1
 8102c9e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8102ca0:	429a      	cmp	r2, r3
 8102ca2:	d123      	bne.n	8102cec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8102ca4:	697b      	ldr	r3, [r7, #20]
 8102ca6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8102caa:	687b      	ldr	r3, [r7, #4]
 8102cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102cae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8102cb0:	429a      	cmp	r2, r3
 8102cb2:	d11b      	bne.n	8102cec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8102cb4:	697b      	ldr	r3, [r7, #20]
 8102cb6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8102cba:	687b      	ldr	r3, [r7, #4]
 8102cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102cbe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8102cc0:	429a      	cmp	r2, r3
 8102cc2:	d113      	bne.n	8102cec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8102cc4:	697b      	ldr	r3, [r7, #20]
 8102cc6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8102cca:	687b      	ldr	r3, [r7, #4]
 8102ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102cce:	085b      	lsrs	r3, r3, #1
 8102cd0:	3b01      	subs	r3, #1
 8102cd2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8102cd4:	429a      	cmp	r2, r3
 8102cd6:	d109      	bne.n	8102cec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8102cd8:	697b      	ldr	r3, [r7, #20]
 8102cda:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8102cde:	687b      	ldr	r3, [r7, #4]
 8102ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102ce2:	085b      	lsrs	r3, r3, #1
 8102ce4:	3b01      	subs	r3, #1
 8102ce6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8102ce8:	429a      	cmp	r2, r3
 8102cea:	d071      	beq.n	8102dd0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8102cec:	69bb      	ldr	r3, [r7, #24]
 8102cee:	2b0c      	cmp	r3, #12
 8102cf0:	d068      	beq.n	8102dc4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8102cf2:	4b35      	ldr	r3, [pc, #212]	; (8102dc8 <HAL_RCC_OscConfig+0x784>)
 8102cf4:	681b      	ldr	r3, [r3, #0]
 8102cf6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8102cfa:	2b00      	cmp	r3, #0
 8102cfc:	d105      	bne.n	8102d0a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8102cfe:	4b32      	ldr	r3, [pc, #200]	; (8102dc8 <HAL_RCC_OscConfig+0x784>)
 8102d00:	681b      	ldr	r3, [r3, #0]
 8102d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8102d06:	2b00      	cmp	r3, #0
 8102d08:	d001      	beq.n	8102d0e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8102d0a:	2301      	movs	r3, #1
 8102d0c:	e0ac      	b.n	8102e68 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8102d0e:	4b2e      	ldr	r3, [pc, #184]	; (8102dc8 <HAL_RCC_OscConfig+0x784>)
 8102d10:	681b      	ldr	r3, [r3, #0]
 8102d12:	4a2d      	ldr	r2, [pc, #180]	; (8102dc8 <HAL_RCC_OscConfig+0x784>)
 8102d14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8102d18:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8102d1a:	f7fd fc77 	bl	810060c <HAL_GetTick>
 8102d1e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8102d20:	e008      	b.n	8102d34 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8102d22:	f7fd fc73 	bl	810060c <HAL_GetTick>
 8102d26:	4602      	mov	r2, r0
 8102d28:	693b      	ldr	r3, [r7, #16]
 8102d2a:	1ad3      	subs	r3, r2, r3
 8102d2c:	2b02      	cmp	r3, #2
 8102d2e:	d901      	bls.n	8102d34 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8102d30:	2303      	movs	r3, #3
 8102d32:	e099      	b.n	8102e68 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8102d34:	4b24      	ldr	r3, [pc, #144]	; (8102dc8 <HAL_RCC_OscConfig+0x784>)
 8102d36:	681b      	ldr	r3, [r3, #0]
 8102d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102d3c:	2b00      	cmp	r3, #0
 8102d3e:	d1f0      	bne.n	8102d22 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8102d40:	4b21      	ldr	r3, [pc, #132]	; (8102dc8 <HAL_RCC_OscConfig+0x784>)
 8102d42:	68da      	ldr	r2, [r3, #12]
 8102d44:	4b21      	ldr	r3, [pc, #132]	; (8102dcc <HAL_RCC_OscConfig+0x788>)
 8102d46:	4013      	ands	r3, r2
 8102d48:	687a      	ldr	r2, [r7, #4]
 8102d4a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8102d4c:	687a      	ldr	r2, [r7, #4]
 8102d4e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8102d50:	3a01      	subs	r2, #1
 8102d52:	0112      	lsls	r2, r2, #4
 8102d54:	4311      	orrs	r1, r2
 8102d56:	687a      	ldr	r2, [r7, #4]
 8102d58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8102d5a:	0212      	lsls	r2, r2, #8
 8102d5c:	4311      	orrs	r1, r2
 8102d5e:	687a      	ldr	r2, [r7, #4]
 8102d60:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8102d62:	0852      	lsrs	r2, r2, #1
 8102d64:	3a01      	subs	r2, #1
 8102d66:	0552      	lsls	r2, r2, #21
 8102d68:	4311      	orrs	r1, r2
 8102d6a:	687a      	ldr	r2, [r7, #4]
 8102d6c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8102d6e:	0852      	lsrs	r2, r2, #1
 8102d70:	3a01      	subs	r2, #1
 8102d72:	0652      	lsls	r2, r2, #25
 8102d74:	4311      	orrs	r1, r2
 8102d76:	687a      	ldr	r2, [r7, #4]
 8102d78:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8102d7a:	06d2      	lsls	r2, r2, #27
 8102d7c:	430a      	orrs	r2, r1
 8102d7e:	4912      	ldr	r1, [pc, #72]	; (8102dc8 <HAL_RCC_OscConfig+0x784>)
 8102d80:	4313      	orrs	r3, r2
 8102d82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8102d84:	4b10      	ldr	r3, [pc, #64]	; (8102dc8 <HAL_RCC_OscConfig+0x784>)
 8102d86:	681b      	ldr	r3, [r3, #0]
 8102d88:	4a0f      	ldr	r2, [pc, #60]	; (8102dc8 <HAL_RCC_OscConfig+0x784>)
 8102d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8102d8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8102d90:	4b0d      	ldr	r3, [pc, #52]	; (8102dc8 <HAL_RCC_OscConfig+0x784>)
 8102d92:	68db      	ldr	r3, [r3, #12]
 8102d94:	4a0c      	ldr	r2, [pc, #48]	; (8102dc8 <HAL_RCC_OscConfig+0x784>)
 8102d96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8102d9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8102d9c:	f7fd fc36 	bl	810060c <HAL_GetTick>
 8102da0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8102da2:	e008      	b.n	8102db6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8102da4:	f7fd fc32 	bl	810060c <HAL_GetTick>
 8102da8:	4602      	mov	r2, r0
 8102daa:	693b      	ldr	r3, [r7, #16]
 8102dac:	1ad3      	subs	r3, r2, r3
 8102dae:	2b02      	cmp	r3, #2
 8102db0:	d901      	bls.n	8102db6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8102db2:	2303      	movs	r3, #3
 8102db4:	e058      	b.n	8102e68 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8102db6:	4b04      	ldr	r3, [pc, #16]	; (8102dc8 <HAL_RCC_OscConfig+0x784>)
 8102db8:	681b      	ldr	r3, [r3, #0]
 8102dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102dbe:	2b00      	cmp	r3, #0
 8102dc0:	d0f0      	beq.n	8102da4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8102dc2:	e050      	b.n	8102e66 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8102dc4:	2301      	movs	r3, #1
 8102dc6:	e04f      	b.n	8102e68 <HAL_RCC_OscConfig+0x824>
 8102dc8:	40021000 	.word	0x40021000
 8102dcc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8102dd0:	4b27      	ldr	r3, [pc, #156]	; (8102e70 <HAL_RCC_OscConfig+0x82c>)
 8102dd2:	681b      	ldr	r3, [r3, #0]
 8102dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102dd8:	2b00      	cmp	r3, #0
 8102dda:	d144      	bne.n	8102e66 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8102ddc:	4b24      	ldr	r3, [pc, #144]	; (8102e70 <HAL_RCC_OscConfig+0x82c>)
 8102dde:	681b      	ldr	r3, [r3, #0]
 8102de0:	4a23      	ldr	r2, [pc, #140]	; (8102e70 <HAL_RCC_OscConfig+0x82c>)
 8102de2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8102de6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8102de8:	4b21      	ldr	r3, [pc, #132]	; (8102e70 <HAL_RCC_OscConfig+0x82c>)
 8102dea:	68db      	ldr	r3, [r3, #12]
 8102dec:	4a20      	ldr	r2, [pc, #128]	; (8102e70 <HAL_RCC_OscConfig+0x82c>)
 8102dee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8102df2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8102df4:	f7fd fc0a 	bl	810060c <HAL_GetTick>
 8102df8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8102dfa:	e008      	b.n	8102e0e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8102dfc:	f7fd fc06 	bl	810060c <HAL_GetTick>
 8102e00:	4602      	mov	r2, r0
 8102e02:	693b      	ldr	r3, [r7, #16]
 8102e04:	1ad3      	subs	r3, r2, r3
 8102e06:	2b02      	cmp	r3, #2
 8102e08:	d901      	bls.n	8102e0e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8102e0a:	2303      	movs	r3, #3
 8102e0c:	e02c      	b.n	8102e68 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8102e0e:	4b18      	ldr	r3, [pc, #96]	; (8102e70 <HAL_RCC_OscConfig+0x82c>)
 8102e10:	681b      	ldr	r3, [r3, #0]
 8102e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102e16:	2b00      	cmp	r3, #0
 8102e18:	d0f0      	beq.n	8102dfc <HAL_RCC_OscConfig+0x7b8>
 8102e1a:	e024      	b.n	8102e66 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8102e1c:	69bb      	ldr	r3, [r7, #24]
 8102e1e:	2b0c      	cmp	r3, #12
 8102e20:	d01f      	beq.n	8102e62 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8102e22:	4b13      	ldr	r3, [pc, #76]	; (8102e70 <HAL_RCC_OscConfig+0x82c>)
 8102e24:	681b      	ldr	r3, [r3, #0]
 8102e26:	4a12      	ldr	r2, [pc, #72]	; (8102e70 <HAL_RCC_OscConfig+0x82c>)
 8102e28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8102e2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8102e2e:	f7fd fbed 	bl	810060c <HAL_GetTick>
 8102e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8102e34:	e008      	b.n	8102e48 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8102e36:	f7fd fbe9 	bl	810060c <HAL_GetTick>
 8102e3a:	4602      	mov	r2, r0
 8102e3c:	693b      	ldr	r3, [r7, #16]
 8102e3e:	1ad3      	subs	r3, r2, r3
 8102e40:	2b02      	cmp	r3, #2
 8102e42:	d901      	bls.n	8102e48 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8102e44:	2303      	movs	r3, #3
 8102e46:	e00f      	b.n	8102e68 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8102e48:	4b09      	ldr	r3, [pc, #36]	; (8102e70 <HAL_RCC_OscConfig+0x82c>)
 8102e4a:	681b      	ldr	r3, [r3, #0]
 8102e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102e50:	2b00      	cmp	r3, #0
 8102e52:	d1f0      	bne.n	8102e36 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8102e54:	4b06      	ldr	r3, [pc, #24]	; (8102e70 <HAL_RCC_OscConfig+0x82c>)
 8102e56:	68da      	ldr	r2, [r3, #12]
 8102e58:	4905      	ldr	r1, [pc, #20]	; (8102e70 <HAL_RCC_OscConfig+0x82c>)
 8102e5a:	4b06      	ldr	r3, [pc, #24]	; (8102e74 <HAL_RCC_OscConfig+0x830>)
 8102e5c:	4013      	ands	r3, r2
 8102e5e:	60cb      	str	r3, [r1, #12]
 8102e60:	e001      	b.n	8102e66 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8102e62:	2301      	movs	r3, #1
 8102e64:	e000      	b.n	8102e68 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8102e66:	2300      	movs	r3, #0
}
 8102e68:	4618      	mov	r0, r3
 8102e6a:	3720      	adds	r7, #32
 8102e6c:	46bd      	mov	sp, r7
 8102e6e:	bd80      	pop	{r7, pc}
 8102e70:	40021000 	.word	0x40021000
 8102e74:	feeefffc 	.word	0xfeeefffc

08102e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8102e78:	b580      	push	{r7, lr}
 8102e7a:	b086      	sub	sp, #24
 8102e7c:	af00      	add	r7, sp, #0
 8102e7e:	6078      	str	r0, [r7, #4]
 8102e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8102e82:	2300      	movs	r3, #0
 8102e84:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8102e86:	687b      	ldr	r3, [r7, #4]
 8102e88:	2b00      	cmp	r3, #0
 8102e8a:	d101      	bne.n	8102e90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8102e8c:	2301      	movs	r3, #1
 8102e8e:	e11d      	b.n	81030cc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8102e90:	4b90      	ldr	r3, [pc, #576]	; (81030d4 <HAL_RCC_ClockConfig+0x25c>)
 8102e92:	681b      	ldr	r3, [r3, #0]
 8102e94:	f003 030f 	and.w	r3, r3, #15
 8102e98:	683a      	ldr	r2, [r7, #0]
 8102e9a:	429a      	cmp	r2, r3
 8102e9c:	d910      	bls.n	8102ec0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8102e9e:	4b8d      	ldr	r3, [pc, #564]	; (81030d4 <HAL_RCC_ClockConfig+0x25c>)
 8102ea0:	681b      	ldr	r3, [r3, #0]
 8102ea2:	f023 020f 	bic.w	r2, r3, #15
 8102ea6:	498b      	ldr	r1, [pc, #556]	; (81030d4 <HAL_RCC_ClockConfig+0x25c>)
 8102ea8:	683b      	ldr	r3, [r7, #0]
 8102eaa:	4313      	orrs	r3, r2
 8102eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8102eae:	4b89      	ldr	r3, [pc, #548]	; (81030d4 <HAL_RCC_ClockConfig+0x25c>)
 8102eb0:	681b      	ldr	r3, [r3, #0]
 8102eb2:	f003 030f 	and.w	r3, r3, #15
 8102eb6:	683a      	ldr	r2, [r7, #0]
 8102eb8:	429a      	cmp	r2, r3
 8102eba:	d001      	beq.n	8102ec0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8102ebc:	2301      	movs	r3, #1
 8102ebe:	e105      	b.n	81030cc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8102ec0:	687b      	ldr	r3, [r7, #4]
 8102ec2:	681b      	ldr	r3, [r3, #0]
 8102ec4:	f003 0302 	and.w	r3, r3, #2
 8102ec8:	2b00      	cmp	r3, #0
 8102eca:	d010      	beq.n	8102eee <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8102ecc:	687b      	ldr	r3, [r7, #4]
 8102ece:	689a      	ldr	r2, [r3, #8]
 8102ed0:	4b81      	ldr	r3, [pc, #516]	; (81030d8 <HAL_RCC_ClockConfig+0x260>)
 8102ed2:	689b      	ldr	r3, [r3, #8]
 8102ed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8102ed8:	429a      	cmp	r2, r3
 8102eda:	d908      	bls.n	8102eee <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8102edc:	4b7e      	ldr	r3, [pc, #504]	; (81030d8 <HAL_RCC_ClockConfig+0x260>)
 8102ede:	689b      	ldr	r3, [r3, #8]
 8102ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8102ee4:	687b      	ldr	r3, [r7, #4]
 8102ee6:	689b      	ldr	r3, [r3, #8]
 8102ee8:	497b      	ldr	r1, [pc, #492]	; (81030d8 <HAL_RCC_ClockConfig+0x260>)
 8102eea:	4313      	orrs	r3, r2
 8102eec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8102eee:	687b      	ldr	r3, [r7, #4]
 8102ef0:	681b      	ldr	r3, [r3, #0]
 8102ef2:	f003 0301 	and.w	r3, r3, #1
 8102ef6:	2b00      	cmp	r3, #0
 8102ef8:	d079      	beq.n	8102fee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8102efa:	687b      	ldr	r3, [r7, #4]
 8102efc:	685b      	ldr	r3, [r3, #4]
 8102efe:	2b03      	cmp	r3, #3
 8102f00:	d11e      	bne.n	8102f40 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8102f02:	4b75      	ldr	r3, [pc, #468]	; (81030d8 <HAL_RCC_ClockConfig+0x260>)
 8102f04:	681b      	ldr	r3, [r3, #0]
 8102f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102f0a:	2b00      	cmp	r3, #0
 8102f0c:	d101      	bne.n	8102f12 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8102f0e:	2301      	movs	r3, #1
 8102f10:	e0dc      	b.n	81030cc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8102f12:	f000 f9dd 	bl	81032d0 <RCC_GetSysClockFreqFromPLLSource>
 8102f16:	4603      	mov	r3, r0
 8102f18:	4a70      	ldr	r2, [pc, #448]	; (81030dc <HAL_RCC_ClockConfig+0x264>)
 8102f1a:	4293      	cmp	r3, r2
 8102f1c:	d946      	bls.n	8102fac <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8102f1e:	4b6e      	ldr	r3, [pc, #440]	; (81030d8 <HAL_RCC_ClockConfig+0x260>)
 8102f20:	689b      	ldr	r3, [r3, #8]
 8102f22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8102f26:	2b00      	cmp	r3, #0
 8102f28:	d140      	bne.n	8102fac <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8102f2a:	4b6b      	ldr	r3, [pc, #428]	; (81030d8 <HAL_RCC_ClockConfig+0x260>)
 8102f2c:	689b      	ldr	r3, [r3, #8]
 8102f2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8102f32:	4a69      	ldr	r2, [pc, #420]	; (81030d8 <HAL_RCC_ClockConfig+0x260>)
 8102f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8102f38:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8102f3a:	2380      	movs	r3, #128	; 0x80
 8102f3c:	617b      	str	r3, [r7, #20]
 8102f3e:	e035      	b.n	8102fac <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8102f40:	687b      	ldr	r3, [r7, #4]
 8102f42:	685b      	ldr	r3, [r3, #4]
 8102f44:	2b02      	cmp	r3, #2
 8102f46:	d107      	bne.n	8102f58 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8102f48:	4b63      	ldr	r3, [pc, #396]	; (81030d8 <HAL_RCC_ClockConfig+0x260>)
 8102f4a:	681b      	ldr	r3, [r3, #0]
 8102f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102f50:	2b00      	cmp	r3, #0
 8102f52:	d115      	bne.n	8102f80 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8102f54:	2301      	movs	r3, #1
 8102f56:	e0b9      	b.n	81030cc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8102f58:	687b      	ldr	r3, [r7, #4]
 8102f5a:	685b      	ldr	r3, [r3, #4]
 8102f5c:	2b00      	cmp	r3, #0
 8102f5e:	d107      	bne.n	8102f70 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8102f60:	4b5d      	ldr	r3, [pc, #372]	; (81030d8 <HAL_RCC_ClockConfig+0x260>)
 8102f62:	681b      	ldr	r3, [r3, #0]
 8102f64:	f003 0302 	and.w	r3, r3, #2
 8102f68:	2b00      	cmp	r3, #0
 8102f6a:	d109      	bne.n	8102f80 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8102f6c:	2301      	movs	r3, #1
 8102f6e:	e0ad      	b.n	81030cc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8102f70:	4b59      	ldr	r3, [pc, #356]	; (81030d8 <HAL_RCC_ClockConfig+0x260>)
 8102f72:	681b      	ldr	r3, [r3, #0]
 8102f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8102f78:	2b00      	cmp	r3, #0
 8102f7a:	d101      	bne.n	8102f80 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8102f7c:	2301      	movs	r3, #1
 8102f7e:	e0a5      	b.n	81030cc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8102f80:	f000 f8b4 	bl	81030ec <HAL_RCC_GetSysClockFreq>
 8102f84:	4603      	mov	r3, r0
 8102f86:	4a55      	ldr	r2, [pc, #340]	; (81030dc <HAL_RCC_ClockConfig+0x264>)
 8102f88:	4293      	cmp	r3, r2
 8102f8a:	d90f      	bls.n	8102fac <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8102f8c:	4b52      	ldr	r3, [pc, #328]	; (81030d8 <HAL_RCC_ClockConfig+0x260>)
 8102f8e:	689b      	ldr	r3, [r3, #8]
 8102f90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8102f94:	2b00      	cmp	r3, #0
 8102f96:	d109      	bne.n	8102fac <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8102f98:	4b4f      	ldr	r3, [pc, #316]	; (81030d8 <HAL_RCC_ClockConfig+0x260>)
 8102f9a:	689b      	ldr	r3, [r3, #8]
 8102f9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8102fa0:	4a4d      	ldr	r2, [pc, #308]	; (81030d8 <HAL_RCC_ClockConfig+0x260>)
 8102fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8102fa6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8102fa8:	2380      	movs	r3, #128	; 0x80
 8102faa:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8102fac:	4b4a      	ldr	r3, [pc, #296]	; (81030d8 <HAL_RCC_ClockConfig+0x260>)
 8102fae:	689b      	ldr	r3, [r3, #8]
 8102fb0:	f023 0203 	bic.w	r2, r3, #3
 8102fb4:	687b      	ldr	r3, [r7, #4]
 8102fb6:	685b      	ldr	r3, [r3, #4]
 8102fb8:	4947      	ldr	r1, [pc, #284]	; (81030d8 <HAL_RCC_ClockConfig+0x260>)
 8102fba:	4313      	orrs	r3, r2
 8102fbc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102fbe:	f7fd fb25 	bl	810060c <HAL_GetTick>
 8102fc2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8102fc4:	e00a      	b.n	8102fdc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8102fc6:	f7fd fb21 	bl	810060c <HAL_GetTick>
 8102fca:	4602      	mov	r2, r0
 8102fcc:	693b      	ldr	r3, [r7, #16]
 8102fce:	1ad3      	subs	r3, r2, r3
 8102fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8102fd4:	4293      	cmp	r3, r2
 8102fd6:	d901      	bls.n	8102fdc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8102fd8:	2303      	movs	r3, #3
 8102fda:	e077      	b.n	81030cc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8102fdc:	4b3e      	ldr	r3, [pc, #248]	; (81030d8 <HAL_RCC_ClockConfig+0x260>)
 8102fde:	689b      	ldr	r3, [r3, #8]
 8102fe0:	f003 020c 	and.w	r2, r3, #12
 8102fe4:	687b      	ldr	r3, [r7, #4]
 8102fe6:	685b      	ldr	r3, [r3, #4]
 8102fe8:	009b      	lsls	r3, r3, #2
 8102fea:	429a      	cmp	r2, r3
 8102fec:	d1eb      	bne.n	8102fc6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8102fee:	697b      	ldr	r3, [r7, #20]
 8102ff0:	2b80      	cmp	r3, #128	; 0x80
 8102ff2:	d105      	bne.n	8103000 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8102ff4:	4b38      	ldr	r3, [pc, #224]	; (81030d8 <HAL_RCC_ClockConfig+0x260>)
 8102ff6:	689b      	ldr	r3, [r3, #8]
 8102ff8:	4a37      	ldr	r2, [pc, #220]	; (81030d8 <HAL_RCC_ClockConfig+0x260>)
 8102ffa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8102ffe:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8103000:	687b      	ldr	r3, [r7, #4]
 8103002:	681b      	ldr	r3, [r3, #0]
 8103004:	f003 0302 	and.w	r3, r3, #2
 8103008:	2b00      	cmp	r3, #0
 810300a:	d010      	beq.n	810302e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 810300c:	687b      	ldr	r3, [r7, #4]
 810300e:	689a      	ldr	r2, [r3, #8]
 8103010:	4b31      	ldr	r3, [pc, #196]	; (81030d8 <HAL_RCC_ClockConfig+0x260>)
 8103012:	689b      	ldr	r3, [r3, #8]
 8103014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8103018:	429a      	cmp	r2, r3
 810301a:	d208      	bcs.n	810302e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 810301c:	4b2e      	ldr	r3, [pc, #184]	; (81030d8 <HAL_RCC_ClockConfig+0x260>)
 810301e:	689b      	ldr	r3, [r3, #8]
 8103020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8103024:	687b      	ldr	r3, [r7, #4]
 8103026:	689b      	ldr	r3, [r3, #8]
 8103028:	492b      	ldr	r1, [pc, #172]	; (81030d8 <HAL_RCC_ClockConfig+0x260>)
 810302a:	4313      	orrs	r3, r2
 810302c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 810302e:	4b29      	ldr	r3, [pc, #164]	; (81030d4 <HAL_RCC_ClockConfig+0x25c>)
 8103030:	681b      	ldr	r3, [r3, #0]
 8103032:	f003 030f 	and.w	r3, r3, #15
 8103036:	683a      	ldr	r2, [r7, #0]
 8103038:	429a      	cmp	r2, r3
 810303a:	d210      	bcs.n	810305e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 810303c:	4b25      	ldr	r3, [pc, #148]	; (81030d4 <HAL_RCC_ClockConfig+0x25c>)
 810303e:	681b      	ldr	r3, [r3, #0]
 8103040:	f023 020f 	bic.w	r2, r3, #15
 8103044:	4923      	ldr	r1, [pc, #140]	; (81030d4 <HAL_RCC_ClockConfig+0x25c>)
 8103046:	683b      	ldr	r3, [r7, #0]
 8103048:	4313      	orrs	r3, r2
 810304a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 810304c:	4b21      	ldr	r3, [pc, #132]	; (81030d4 <HAL_RCC_ClockConfig+0x25c>)
 810304e:	681b      	ldr	r3, [r3, #0]
 8103050:	f003 030f 	and.w	r3, r3, #15
 8103054:	683a      	ldr	r2, [r7, #0]
 8103056:	429a      	cmp	r2, r3
 8103058:	d001      	beq.n	810305e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 810305a:	2301      	movs	r3, #1
 810305c:	e036      	b.n	81030cc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 810305e:	687b      	ldr	r3, [r7, #4]
 8103060:	681b      	ldr	r3, [r3, #0]
 8103062:	f003 0304 	and.w	r3, r3, #4
 8103066:	2b00      	cmp	r3, #0
 8103068:	d008      	beq.n	810307c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 810306a:	4b1b      	ldr	r3, [pc, #108]	; (81030d8 <HAL_RCC_ClockConfig+0x260>)
 810306c:	689b      	ldr	r3, [r3, #8]
 810306e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8103072:	687b      	ldr	r3, [r7, #4]
 8103074:	68db      	ldr	r3, [r3, #12]
 8103076:	4918      	ldr	r1, [pc, #96]	; (81030d8 <HAL_RCC_ClockConfig+0x260>)
 8103078:	4313      	orrs	r3, r2
 810307a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 810307c:	687b      	ldr	r3, [r7, #4]
 810307e:	681b      	ldr	r3, [r3, #0]
 8103080:	f003 0308 	and.w	r3, r3, #8
 8103084:	2b00      	cmp	r3, #0
 8103086:	d009      	beq.n	810309c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8103088:	4b13      	ldr	r3, [pc, #76]	; (81030d8 <HAL_RCC_ClockConfig+0x260>)
 810308a:	689b      	ldr	r3, [r3, #8]
 810308c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8103090:	687b      	ldr	r3, [r7, #4]
 8103092:	691b      	ldr	r3, [r3, #16]
 8103094:	00db      	lsls	r3, r3, #3
 8103096:	4910      	ldr	r1, [pc, #64]	; (81030d8 <HAL_RCC_ClockConfig+0x260>)
 8103098:	4313      	orrs	r3, r2
 810309a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 810309c:	f000 f826 	bl	81030ec <HAL_RCC_GetSysClockFreq>
 81030a0:	4602      	mov	r2, r0
 81030a2:	4b0d      	ldr	r3, [pc, #52]	; (81030d8 <HAL_RCC_ClockConfig+0x260>)
 81030a4:	689b      	ldr	r3, [r3, #8]
 81030a6:	091b      	lsrs	r3, r3, #4
 81030a8:	f003 030f 	and.w	r3, r3, #15
 81030ac:	490c      	ldr	r1, [pc, #48]	; (81030e0 <HAL_RCC_ClockConfig+0x268>)
 81030ae:	5ccb      	ldrb	r3, [r1, r3]
 81030b0:	f003 031f 	and.w	r3, r3, #31
 81030b4:	fa22 f303 	lsr.w	r3, r2, r3
 81030b8:	4a0a      	ldr	r2, [pc, #40]	; (81030e4 <HAL_RCC_ClockConfig+0x26c>)
 81030ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 81030bc:	4b0a      	ldr	r3, [pc, #40]	; (81030e8 <HAL_RCC_ClockConfig+0x270>)
 81030be:	681b      	ldr	r3, [r3, #0]
 81030c0:	4618      	mov	r0, r3
 81030c2:	f7fd fa53 	bl	810056c <HAL_InitTick>
 81030c6:	4603      	mov	r3, r0
 81030c8:	73fb      	strb	r3, [r7, #15]

  return status;
 81030ca:	7bfb      	ldrb	r3, [r7, #15]
}
 81030cc:	4618      	mov	r0, r3
 81030ce:	3718      	adds	r7, #24
 81030d0:	46bd      	mov	sp, r7
 81030d2:	bd80      	pop	{r7, pc}
 81030d4:	40022000 	.word	0x40022000
 81030d8:	40021000 	.word	0x40021000
 81030dc:	04c4b400 	.word	0x04c4b400
 81030e0:	08107b48 	.word	0x08107b48
 81030e4:	20000000 	.word	0x20000000
 81030e8:	20000004 	.word	0x20000004

081030ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81030ec:	b480      	push	{r7}
 81030ee:	b089      	sub	sp, #36	; 0x24
 81030f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 81030f2:	2300      	movs	r3, #0
 81030f4:	61fb      	str	r3, [r7, #28]
 81030f6:	2300      	movs	r3, #0
 81030f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 81030fa:	4b3e      	ldr	r3, [pc, #248]	; (81031f4 <HAL_RCC_GetSysClockFreq+0x108>)
 81030fc:	689b      	ldr	r3, [r3, #8]
 81030fe:	f003 030c 	and.w	r3, r3, #12
 8103102:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8103104:	4b3b      	ldr	r3, [pc, #236]	; (81031f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8103106:	68db      	ldr	r3, [r3, #12]
 8103108:	f003 0303 	and.w	r3, r3, #3
 810310c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 810310e:	693b      	ldr	r3, [r7, #16]
 8103110:	2b00      	cmp	r3, #0
 8103112:	d005      	beq.n	8103120 <HAL_RCC_GetSysClockFreq+0x34>
 8103114:	693b      	ldr	r3, [r7, #16]
 8103116:	2b0c      	cmp	r3, #12
 8103118:	d121      	bne.n	810315e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 810311a:	68fb      	ldr	r3, [r7, #12]
 810311c:	2b01      	cmp	r3, #1
 810311e:	d11e      	bne.n	810315e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8103120:	4b34      	ldr	r3, [pc, #208]	; (81031f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8103122:	681b      	ldr	r3, [r3, #0]
 8103124:	f003 0308 	and.w	r3, r3, #8
 8103128:	2b00      	cmp	r3, #0
 810312a:	d107      	bne.n	810313c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 810312c:	4b31      	ldr	r3, [pc, #196]	; (81031f4 <HAL_RCC_GetSysClockFreq+0x108>)
 810312e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103132:	0a1b      	lsrs	r3, r3, #8
 8103134:	f003 030f 	and.w	r3, r3, #15
 8103138:	61fb      	str	r3, [r7, #28]
 810313a:	e005      	b.n	8103148 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 810313c:	4b2d      	ldr	r3, [pc, #180]	; (81031f4 <HAL_RCC_GetSysClockFreq+0x108>)
 810313e:	681b      	ldr	r3, [r3, #0]
 8103140:	091b      	lsrs	r3, r3, #4
 8103142:	f003 030f 	and.w	r3, r3, #15
 8103146:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8103148:	4a2b      	ldr	r2, [pc, #172]	; (81031f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 810314a:	69fb      	ldr	r3, [r7, #28]
 810314c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103150:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8103152:	693b      	ldr	r3, [r7, #16]
 8103154:	2b00      	cmp	r3, #0
 8103156:	d10d      	bne.n	8103174 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8103158:	69fb      	ldr	r3, [r7, #28]
 810315a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 810315c:	e00a      	b.n	8103174 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 810315e:	693b      	ldr	r3, [r7, #16]
 8103160:	2b04      	cmp	r3, #4
 8103162:	d102      	bne.n	810316a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8103164:	4b25      	ldr	r3, [pc, #148]	; (81031fc <HAL_RCC_GetSysClockFreq+0x110>)
 8103166:	61bb      	str	r3, [r7, #24]
 8103168:	e004      	b.n	8103174 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 810316a:	693b      	ldr	r3, [r7, #16]
 810316c:	2b08      	cmp	r3, #8
 810316e:	d101      	bne.n	8103174 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8103170:	4b23      	ldr	r3, [pc, #140]	; (8103200 <HAL_RCC_GetSysClockFreq+0x114>)
 8103172:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8103174:	693b      	ldr	r3, [r7, #16]
 8103176:	2b0c      	cmp	r3, #12
 8103178:	d134      	bne.n	81031e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 810317a:	4b1e      	ldr	r3, [pc, #120]	; (81031f4 <HAL_RCC_GetSysClockFreq+0x108>)
 810317c:	68db      	ldr	r3, [r3, #12]
 810317e:	f003 0303 	and.w	r3, r3, #3
 8103182:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8103184:	68bb      	ldr	r3, [r7, #8]
 8103186:	2b02      	cmp	r3, #2
 8103188:	d003      	beq.n	8103192 <HAL_RCC_GetSysClockFreq+0xa6>
 810318a:	68bb      	ldr	r3, [r7, #8]
 810318c:	2b03      	cmp	r3, #3
 810318e:	d003      	beq.n	8103198 <HAL_RCC_GetSysClockFreq+0xac>
 8103190:	e005      	b.n	810319e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8103192:	4b1a      	ldr	r3, [pc, #104]	; (81031fc <HAL_RCC_GetSysClockFreq+0x110>)
 8103194:	617b      	str	r3, [r7, #20]
      break;
 8103196:	e005      	b.n	81031a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8103198:	4b19      	ldr	r3, [pc, #100]	; (8103200 <HAL_RCC_GetSysClockFreq+0x114>)
 810319a:	617b      	str	r3, [r7, #20]
      break;
 810319c:	e002      	b.n	81031a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 810319e:	69fb      	ldr	r3, [r7, #28]
 81031a0:	617b      	str	r3, [r7, #20]
      break;
 81031a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 81031a4:	4b13      	ldr	r3, [pc, #76]	; (81031f4 <HAL_RCC_GetSysClockFreq+0x108>)
 81031a6:	68db      	ldr	r3, [r3, #12]
 81031a8:	091b      	lsrs	r3, r3, #4
 81031aa:	f003 030f 	and.w	r3, r3, #15
 81031ae:	3301      	adds	r3, #1
 81031b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 81031b2:	4b10      	ldr	r3, [pc, #64]	; (81031f4 <HAL_RCC_GetSysClockFreq+0x108>)
 81031b4:	68db      	ldr	r3, [r3, #12]
 81031b6:	0a1b      	lsrs	r3, r3, #8
 81031b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81031bc:	697a      	ldr	r2, [r7, #20]
 81031be:	fb03 f202 	mul.w	r2, r3, r2
 81031c2:	687b      	ldr	r3, [r7, #4]
 81031c4:	fbb2 f3f3 	udiv	r3, r2, r3
 81031c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 81031ca:	4b0a      	ldr	r3, [pc, #40]	; (81031f4 <HAL_RCC_GetSysClockFreq+0x108>)
 81031cc:	68db      	ldr	r3, [r3, #12]
 81031ce:	0e5b      	lsrs	r3, r3, #25
 81031d0:	f003 0303 	and.w	r3, r3, #3
 81031d4:	3301      	adds	r3, #1
 81031d6:	005b      	lsls	r3, r3, #1
 81031d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 81031da:	697a      	ldr	r2, [r7, #20]
 81031dc:	683b      	ldr	r3, [r7, #0]
 81031de:	fbb2 f3f3 	udiv	r3, r2, r3
 81031e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 81031e4:	69bb      	ldr	r3, [r7, #24]
}
 81031e6:	4618      	mov	r0, r3
 81031e8:	3724      	adds	r7, #36	; 0x24
 81031ea:	46bd      	mov	sp, r7
 81031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031f0:	4770      	bx	lr
 81031f2:	bf00      	nop
 81031f4:	40021000 	.word	0x40021000
 81031f8:	08107b58 	.word	0x08107b58
 81031fc:	00f42400 	.word	0x00f42400
 8103200:	007a1200 	.word	0x007a1200

08103204 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8103204:	b480      	push	{r7}
 8103206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8103208:	4b03      	ldr	r3, [pc, #12]	; (8103218 <HAL_RCC_GetHCLKFreq+0x14>)
 810320a:	681b      	ldr	r3, [r3, #0]
}
 810320c:	4618      	mov	r0, r3
 810320e:	46bd      	mov	sp, r7
 8103210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103214:	4770      	bx	lr
 8103216:	bf00      	nop
 8103218:	20000000 	.word	0x20000000

0810321c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 810321c:	b580      	push	{r7, lr}
 810321e:	b086      	sub	sp, #24
 8103220:	af00      	add	r7, sp, #0
 8103222:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8103224:	2300      	movs	r3, #0
 8103226:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8103228:	4b27      	ldr	r3, [pc, #156]	; (81032c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 810322a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810322c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103230:	2b00      	cmp	r3, #0
 8103232:	d003      	beq.n	810323c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8103234:	f7ff f932 	bl	810249c <HAL_PWREx_GetVoltageRange>
 8103238:	6178      	str	r0, [r7, #20]
 810323a:	e014      	b.n	8103266 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 810323c:	4b22      	ldr	r3, [pc, #136]	; (81032c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 810323e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103240:	4a21      	ldr	r2, [pc, #132]	; (81032c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8103242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8103246:	6593      	str	r3, [r2, #88]	; 0x58
 8103248:	4b1f      	ldr	r3, [pc, #124]	; (81032c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 810324a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810324c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103250:	60fb      	str	r3, [r7, #12]
 8103252:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8103254:	f7ff f922 	bl	810249c <HAL_PWREx_GetVoltageRange>
 8103258:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 810325a:	4b1b      	ldr	r3, [pc, #108]	; (81032c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 810325c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810325e:	4a1a      	ldr	r2, [pc, #104]	; (81032c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8103260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8103264:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8103266:	697b      	ldr	r3, [r7, #20]
 8103268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810326c:	d10b      	bne.n	8103286 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 810326e:	687b      	ldr	r3, [r7, #4]
 8103270:	2b80      	cmp	r3, #128	; 0x80
 8103272:	d913      	bls.n	810329c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8103274:	687b      	ldr	r3, [r7, #4]
 8103276:	2ba0      	cmp	r3, #160	; 0xa0
 8103278:	d902      	bls.n	8103280 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 810327a:	2302      	movs	r3, #2
 810327c:	613b      	str	r3, [r7, #16]
 810327e:	e00d      	b.n	810329c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8103280:	2301      	movs	r3, #1
 8103282:	613b      	str	r3, [r7, #16]
 8103284:	e00a      	b.n	810329c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8103286:	687b      	ldr	r3, [r7, #4]
 8103288:	2b7f      	cmp	r3, #127	; 0x7f
 810328a:	d902      	bls.n	8103292 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 810328c:	2302      	movs	r3, #2
 810328e:	613b      	str	r3, [r7, #16]
 8103290:	e004      	b.n	810329c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8103292:	687b      	ldr	r3, [r7, #4]
 8103294:	2b70      	cmp	r3, #112	; 0x70
 8103296:	d101      	bne.n	810329c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8103298:	2301      	movs	r3, #1
 810329a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 810329c:	4b0b      	ldr	r3, [pc, #44]	; (81032cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 810329e:	681b      	ldr	r3, [r3, #0]
 81032a0:	f023 020f 	bic.w	r2, r3, #15
 81032a4:	4909      	ldr	r1, [pc, #36]	; (81032cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 81032a6:	693b      	ldr	r3, [r7, #16]
 81032a8:	4313      	orrs	r3, r2
 81032aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 81032ac:	4b07      	ldr	r3, [pc, #28]	; (81032cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 81032ae:	681b      	ldr	r3, [r3, #0]
 81032b0:	f003 030f 	and.w	r3, r3, #15
 81032b4:	693a      	ldr	r2, [r7, #16]
 81032b6:	429a      	cmp	r2, r3
 81032b8:	d001      	beq.n	81032be <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 81032ba:	2301      	movs	r3, #1
 81032bc:	e000      	b.n	81032c0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 81032be:	2300      	movs	r3, #0
}
 81032c0:	4618      	mov	r0, r3
 81032c2:	3718      	adds	r7, #24
 81032c4:	46bd      	mov	sp, r7
 81032c6:	bd80      	pop	{r7, pc}
 81032c8:	40021000 	.word	0x40021000
 81032cc:	40022000 	.word	0x40022000

081032d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 81032d0:	b480      	push	{r7}
 81032d2:	b087      	sub	sp, #28
 81032d4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 81032d6:	4b2d      	ldr	r3, [pc, #180]	; (810338c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 81032d8:	68db      	ldr	r3, [r3, #12]
 81032da:	f003 0303 	and.w	r3, r3, #3
 81032de:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 81032e0:	68fb      	ldr	r3, [r7, #12]
 81032e2:	2b03      	cmp	r3, #3
 81032e4:	d00b      	beq.n	81032fe <RCC_GetSysClockFreqFromPLLSource+0x2e>
 81032e6:	68fb      	ldr	r3, [r7, #12]
 81032e8:	2b03      	cmp	r3, #3
 81032ea:	d825      	bhi.n	8103338 <RCC_GetSysClockFreqFromPLLSource+0x68>
 81032ec:	68fb      	ldr	r3, [r7, #12]
 81032ee:	2b01      	cmp	r3, #1
 81032f0:	d008      	beq.n	8103304 <RCC_GetSysClockFreqFromPLLSource+0x34>
 81032f2:	68fb      	ldr	r3, [r7, #12]
 81032f4:	2b02      	cmp	r3, #2
 81032f6:	d11f      	bne.n	8103338 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 81032f8:	4b25      	ldr	r3, [pc, #148]	; (8103390 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 81032fa:	613b      	str	r3, [r7, #16]
    break;
 81032fc:	e01f      	b.n	810333e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 81032fe:	4b25      	ldr	r3, [pc, #148]	; (8103394 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8103300:	613b      	str	r3, [r7, #16]
    break;
 8103302:	e01c      	b.n	810333e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8103304:	4b21      	ldr	r3, [pc, #132]	; (810338c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8103306:	681b      	ldr	r3, [r3, #0]
 8103308:	f003 0308 	and.w	r3, r3, #8
 810330c:	2b00      	cmp	r3, #0
 810330e:	d107      	bne.n	8103320 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8103310:	4b1e      	ldr	r3, [pc, #120]	; (810338c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8103312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103316:	0a1b      	lsrs	r3, r3, #8
 8103318:	f003 030f 	and.w	r3, r3, #15
 810331c:	617b      	str	r3, [r7, #20]
 810331e:	e005      	b.n	810332c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8103320:	4b1a      	ldr	r3, [pc, #104]	; (810338c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8103322:	681b      	ldr	r3, [r3, #0]
 8103324:	091b      	lsrs	r3, r3, #4
 8103326:	f003 030f 	and.w	r3, r3, #15
 810332a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 810332c:	4a1a      	ldr	r2, [pc, #104]	; (8103398 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 810332e:	697b      	ldr	r3, [r7, #20]
 8103330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103334:	613b      	str	r3, [r7, #16]
    break;
 8103336:	e002      	b.n	810333e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8103338:	2300      	movs	r3, #0
 810333a:	613b      	str	r3, [r7, #16]
    break;
 810333c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 810333e:	4b13      	ldr	r3, [pc, #76]	; (810338c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8103340:	68db      	ldr	r3, [r3, #12]
 8103342:	091b      	lsrs	r3, r3, #4
 8103344:	f003 030f 	and.w	r3, r3, #15
 8103348:	3301      	adds	r3, #1
 810334a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 810334c:	4b0f      	ldr	r3, [pc, #60]	; (810338c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 810334e:	68db      	ldr	r3, [r3, #12]
 8103350:	0a1b      	lsrs	r3, r3, #8
 8103352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103356:	693a      	ldr	r2, [r7, #16]
 8103358:	fb03 f202 	mul.w	r2, r3, r2
 810335c:	68bb      	ldr	r3, [r7, #8]
 810335e:	fbb2 f3f3 	udiv	r3, r2, r3
 8103362:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8103364:	4b09      	ldr	r3, [pc, #36]	; (810338c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8103366:	68db      	ldr	r3, [r3, #12]
 8103368:	0e5b      	lsrs	r3, r3, #25
 810336a:	f003 0303 	and.w	r3, r3, #3
 810336e:	3301      	adds	r3, #1
 8103370:	005b      	lsls	r3, r3, #1
 8103372:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8103374:	693a      	ldr	r2, [r7, #16]
 8103376:	687b      	ldr	r3, [r7, #4]
 8103378:	fbb2 f3f3 	udiv	r3, r2, r3
 810337c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 810337e:	683b      	ldr	r3, [r7, #0]
}
 8103380:	4618      	mov	r0, r3
 8103382:	371c      	adds	r7, #28
 8103384:	46bd      	mov	sp, r7
 8103386:	f85d 7b04 	ldr.w	r7, [sp], #4
 810338a:	4770      	bx	lr
 810338c:	40021000 	.word	0x40021000
 8103390:	00f42400 	.word	0x00f42400
 8103394:	007a1200 	.word	0x007a1200
 8103398:	08107b58 	.word	0x08107b58

0810339c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 810339c:	b580      	push	{r7, lr}
 810339e:	b086      	sub	sp, #24
 81033a0:	af00      	add	r7, sp, #0
 81033a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81033a4:	2300      	movs	r3, #0
 81033a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81033a8:	2300      	movs	r3, #0
 81033aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 81033ac:	687b      	ldr	r3, [r7, #4]
 81033ae:	681b      	ldr	r3, [r3, #0]
 81033b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81033b4:	2b00      	cmp	r3, #0
 81033b6:	d040      	beq.n	810343a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 81033b8:	687b      	ldr	r3, [r7, #4]
 81033ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81033bc:	2b80      	cmp	r3, #128	; 0x80
 81033be:	d02a      	beq.n	8103416 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 81033c0:	2b80      	cmp	r3, #128	; 0x80
 81033c2:	d825      	bhi.n	8103410 <HAL_RCCEx_PeriphCLKConfig+0x74>
 81033c4:	2b60      	cmp	r3, #96	; 0x60
 81033c6:	d026      	beq.n	8103416 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 81033c8:	2b60      	cmp	r3, #96	; 0x60
 81033ca:	d821      	bhi.n	8103410 <HAL_RCCEx_PeriphCLKConfig+0x74>
 81033cc:	2b40      	cmp	r3, #64	; 0x40
 81033ce:	d006      	beq.n	81033de <HAL_RCCEx_PeriphCLKConfig+0x42>
 81033d0:	2b40      	cmp	r3, #64	; 0x40
 81033d2:	d81d      	bhi.n	8103410 <HAL_RCCEx_PeriphCLKConfig+0x74>
 81033d4:	2b00      	cmp	r3, #0
 81033d6:	d009      	beq.n	81033ec <HAL_RCCEx_PeriphCLKConfig+0x50>
 81033d8:	2b20      	cmp	r3, #32
 81033da:	d010      	beq.n	81033fe <HAL_RCCEx_PeriphCLKConfig+0x62>
 81033dc:	e018      	b.n	8103410 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 81033de:	4b89      	ldr	r3, [pc, #548]	; (8103604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 81033e0:	68db      	ldr	r3, [r3, #12]
 81033e2:	4a88      	ldr	r2, [pc, #544]	; (8103604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 81033e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81033e8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 81033ea:	e015      	b.n	8103418 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 81033ec:	687b      	ldr	r3, [r7, #4]
 81033ee:	3304      	adds	r3, #4
 81033f0:	2100      	movs	r1, #0
 81033f2:	4618      	mov	r0, r3
 81033f4:	f000 fb72 	bl	8103adc <RCCEx_PLLSAI1_Config>
 81033f8:	4603      	mov	r3, r0
 81033fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 81033fc:	e00c      	b.n	8103418 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 81033fe:	687b      	ldr	r3, [r7, #4]
 8103400:	3320      	adds	r3, #32
 8103402:	2100      	movs	r1, #0
 8103404:	4618      	mov	r0, r3
 8103406:	f000 fc5d 	bl	8103cc4 <RCCEx_PLLSAI2_Config>
 810340a:	4603      	mov	r3, r0
 810340c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 810340e:	e003      	b.n	8103418 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103410:	2301      	movs	r3, #1
 8103412:	74fb      	strb	r3, [r7, #19]
      break;
 8103414:	e000      	b.n	8103418 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8103416:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103418:	7cfb      	ldrb	r3, [r7, #19]
 810341a:	2b00      	cmp	r3, #0
 810341c:	d10b      	bne.n	8103436 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810341e:	4b79      	ldr	r3, [pc, #484]	; (8103604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8103420:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103424:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8103428:	687b      	ldr	r3, [r7, #4]
 810342a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810342c:	4975      	ldr	r1, [pc, #468]	; (8103604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 810342e:	4313      	orrs	r3, r2
 8103430:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8103434:	e001      	b.n	810343a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103436:	7cfb      	ldrb	r3, [r7, #19]
 8103438:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 810343a:	687b      	ldr	r3, [r7, #4]
 810343c:	681b      	ldr	r3, [r3, #0]
 810343e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8103442:	2b00      	cmp	r3, #0
 8103444:	d047      	beq.n	81034d6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8103446:	687b      	ldr	r3, [r7, #4]
 8103448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810344a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810344e:	d030      	beq.n	81034b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8103450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8103454:	d82a      	bhi.n	81034ac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8103456:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810345a:	d02a      	beq.n	81034b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 810345c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103460:	d824      	bhi.n	81034ac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8103462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103466:	d008      	beq.n	810347a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8103468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810346c:	d81e      	bhi.n	81034ac <HAL_RCCEx_PeriphCLKConfig+0x110>
 810346e:	2b00      	cmp	r3, #0
 8103470:	d00a      	beq.n	8103488 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8103472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103476:	d010      	beq.n	810349a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8103478:	e018      	b.n	81034ac <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 810347a:	4b62      	ldr	r3, [pc, #392]	; (8103604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 810347c:	68db      	ldr	r3, [r3, #12]
 810347e:	4a61      	ldr	r2, [pc, #388]	; (8103604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8103480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8103484:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8103486:	e015      	b.n	81034b4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8103488:	687b      	ldr	r3, [r7, #4]
 810348a:	3304      	adds	r3, #4
 810348c:	2100      	movs	r1, #0
 810348e:	4618      	mov	r0, r3
 8103490:	f000 fb24 	bl	8103adc <RCCEx_PLLSAI1_Config>
 8103494:	4603      	mov	r3, r0
 8103496:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8103498:	e00c      	b.n	81034b4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 810349a:	687b      	ldr	r3, [r7, #4]
 810349c:	3320      	adds	r3, #32
 810349e:	2100      	movs	r1, #0
 81034a0:	4618      	mov	r0, r3
 81034a2:	f000 fc0f 	bl	8103cc4 <RCCEx_PLLSAI2_Config>
 81034a6:	4603      	mov	r3, r0
 81034a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 81034aa:	e003      	b.n	81034b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81034ac:	2301      	movs	r3, #1
 81034ae:	74fb      	strb	r3, [r7, #19]
      break;
 81034b0:	e000      	b.n	81034b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 81034b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81034b4:	7cfb      	ldrb	r3, [r7, #19]
 81034b6:	2b00      	cmp	r3, #0
 81034b8:	d10b      	bne.n	81034d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 81034ba:	4b52      	ldr	r3, [pc, #328]	; (8103604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 81034bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81034c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 81034c4:	687b      	ldr	r3, [r7, #4]
 81034c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81034c8:	494e      	ldr	r1, [pc, #312]	; (8103604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 81034ca:	4313      	orrs	r3, r2
 81034cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 81034d0:	e001      	b.n	81034d6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81034d2:	7cfb      	ldrb	r3, [r7, #19]
 81034d4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81034d6:	687b      	ldr	r3, [r7, #4]
 81034d8:	681b      	ldr	r3, [r3, #0]
 81034da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81034de:	2b00      	cmp	r3, #0
 81034e0:	f000 809f 	beq.w	8103622 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 81034e4:	2300      	movs	r3, #0
 81034e6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 81034e8:	4b46      	ldr	r3, [pc, #280]	; (8103604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 81034ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81034ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81034f0:	2b00      	cmp	r3, #0
 81034f2:	d101      	bne.n	81034f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 81034f4:	2301      	movs	r3, #1
 81034f6:	e000      	b.n	81034fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 81034f8:	2300      	movs	r3, #0
 81034fa:	2b00      	cmp	r3, #0
 81034fc:	d00d      	beq.n	810351a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 81034fe:	4b41      	ldr	r3, [pc, #260]	; (8103604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8103500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103502:	4a40      	ldr	r2, [pc, #256]	; (8103604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8103504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8103508:	6593      	str	r3, [r2, #88]	; 0x58
 810350a:	4b3e      	ldr	r3, [pc, #248]	; (8103604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 810350c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810350e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103512:	60bb      	str	r3, [r7, #8]
 8103514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8103516:	2301      	movs	r3, #1
 8103518:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810351a:	4b3b      	ldr	r3, [pc, #236]	; (8103608 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 810351c:	681b      	ldr	r3, [r3, #0]
 810351e:	4a3a      	ldr	r2, [pc, #232]	; (8103608 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8103520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103524:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103526:	f7fd f871 	bl	810060c <HAL_GetTick>
 810352a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 810352c:	e009      	b.n	8103542 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 810352e:	f7fd f86d 	bl	810060c <HAL_GetTick>
 8103532:	4602      	mov	r2, r0
 8103534:	68fb      	ldr	r3, [r7, #12]
 8103536:	1ad3      	subs	r3, r2, r3
 8103538:	2b02      	cmp	r3, #2
 810353a:	d902      	bls.n	8103542 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 810353c:	2303      	movs	r3, #3
 810353e:	74fb      	strb	r3, [r7, #19]
        break;
 8103540:	e005      	b.n	810354e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8103542:	4b31      	ldr	r3, [pc, #196]	; (8103608 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8103544:	681b      	ldr	r3, [r3, #0]
 8103546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810354a:	2b00      	cmp	r3, #0
 810354c:	d0ef      	beq.n	810352e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 810354e:	7cfb      	ldrb	r3, [r7, #19]
 8103550:	2b00      	cmp	r3, #0
 8103552:	d15b      	bne.n	810360c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8103554:	4b2b      	ldr	r3, [pc, #172]	; (8103604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8103556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810355a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810355e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8103560:	697b      	ldr	r3, [r7, #20]
 8103562:	2b00      	cmp	r3, #0
 8103564:	d01f      	beq.n	81035a6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8103566:	687b      	ldr	r3, [r7, #4]
 8103568:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810356c:	697a      	ldr	r2, [r7, #20]
 810356e:	429a      	cmp	r2, r3
 8103570:	d019      	beq.n	81035a6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8103572:	4b24      	ldr	r3, [pc, #144]	; (8103604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8103574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810357c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810357e:	4b21      	ldr	r3, [pc, #132]	; (8103604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8103580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103584:	4a1f      	ldr	r2, [pc, #124]	; (8103604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8103586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810358a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 810358e:	4b1d      	ldr	r3, [pc, #116]	; (8103604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8103590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103594:	4a1b      	ldr	r2, [pc, #108]	; (8103604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8103596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810359a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 810359e:	4a19      	ldr	r2, [pc, #100]	; (8103604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 81035a0:	697b      	ldr	r3, [r7, #20]
 81035a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 81035a6:	697b      	ldr	r3, [r7, #20]
 81035a8:	f003 0301 	and.w	r3, r3, #1
 81035ac:	2b00      	cmp	r3, #0
 81035ae:	d016      	beq.n	81035de <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81035b0:	f7fd f82c 	bl	810060c <HAL_GetTick>
 81035b4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 81035b6:	e00b      	b.n	81035d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81035b8:	f7fd f828 	bl	810060c <HAL_GetTick>
 81035bc:	4602      	mov	r2, r0
 81035be:	68fb      	ldr	r3, [r7, #12]
 81035c0:	1ad3      	subs	r3, r2, r3
 81035c2:	f241 3288 	movw	r2, #5000	; 0x1388
 81035c6:	4293      	cmp	r3, r2
 81035c8:	d902      	bls.n	81035d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 81035ca:	2303      	movs	r3, #3
 81035cc:	74fb      	strb	r3, [r7, #19]
            break;
 81035ce:	e006      	b.n	81035de <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 81035d0:	4b0c      	ldr	r3, [pc, #48]	; (8103604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 81035d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81035d6:	f003 0302 	and.w	r3, r3, #2
 81035da:	2b00      	cmp	r3, #0
 81035dc:	d0ec      	beq.n	81035b8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 81035de:	7cfb      	ldrb	r3, [r7, #19]
 81035e0:	2b00      	cmp	r3, #0
 81035e2:	d10c      	bne.n	81035fe <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81035e4:	4b07      	ldr	r3, [pc, #28]	; (8103604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 81035e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81035ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81035ee:	687b      	ldr	r3, [r7, #4]
 81035f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81035f4:	4903      	ldr	r1, [pc, #12]	; (8103604 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 81035f6:	4313      	orrs	r3, r2
 81035f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 81035fc:	e008      	b.n	8103610 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81035fe:	7cfb      	ldrb	r3, [r7, #19]
 8103600:	74bb      	strb	r3, [r7, #18]
 8103602:	e005      	b.n	8103610 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8103604:	40021000 	.word	0x40021000
 8103608:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810360c:	7cfb      	ldrb	r3, [r7, #19]
 810360e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8103610:	7c7b      	ldrb	r3, [r7, #17]
 8103612:	2b01      	cmp	r3, #1
 8103614:	d105      	bne.n	8103622 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8103616:	4ba0      	ldr	r3, [pc, #640]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810361a:	4a9f      	ldr	r2, [pc, #636]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 810361c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8103620:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8103622:	687b      	ldr	r3, [r7, #4]
 8103624:	681b      	ldr	r3, [r3, #0]
 8103626:	f003 0301 	and.w	r3, r3, #1
 810362a:	2b00      	cmp	r3, #0
 810362c:	d00a      	beq.n	8103644 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 810362e:	4b9a      	ldr	r3, [pc, #616]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103634:	f023 0203 	bic.w	r2, r3, #3
 8103638:	687b      	ldr	r3, [r7, #4]
 810363a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810363c:	4996      	ldr	r1, [pc, #600]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 810363e:	4313      	orrs	r3, r2
 8103640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8103644:	687b      	ldr	r3, [r7, #4]
 8103646:	681b      	ldr	r3, [r3, #0]
 8103648:	f003 0302 	and.w	r3, r3, #2
 810364c:	2b00      	cmp	r3, #0
 810364e:	d00a      	beq.n	8103666 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8103650:	4b91      	ldr	r3, [pc, #580]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103656:	f023 020c 	bic.w	r2, r3, #12
 810365a:	687b      	ldr	r3, [r7, #4]
 810365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810365e:	498e      	ldr	r1, [pc, #568]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103660:	4313      	orrs	r3, r2
 8103662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8103666:	687b      	ldr	r3, [r7, #4]
 8103668:	681b      	ldr	r3, [r3, #0]
 810366a:	f003 0304 	and.w	r3, r3, #4
 810366e:	2b00      	cmp	r3, #0
 8103670:	d00a      	beq.n	8103688 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8103672:	4b89      	ldr	r3, [pc, #548]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103678:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 810367c:	687b      	ldr	r3, [r7, #4]
 810367e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103680:	4985      	ldr	r1, [pc, #532]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103682:	4313      	orrs	r3, r2
 8103684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8103688:	687b      	ldr	r3, [r7, #4]
 810368a:	681b      	ldr	r3, [r3, #0]
 810368c:	f003 0308 	and.w	r3, r3, #8
 8103690:	2b00      	cmp	r3, #0
 8103692:	d00a      	beq.n	81036aa <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8103694:	4b80      	ldr	r3, [pc, #512]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810369a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 810369e:	687b      	ldr	r3, [r7, #4]
 81036a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81036a2:	497d      	ldr	r1, [pc, #500]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 81036a4:	4313      	orrs	r3, r2
 81036a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 81036aa:	687b      	ldr	r3, [r7, #4]
 81036ac:	681b      	ldr	r3, [r3, #0]
 81036ae:	f003 0310 	and.w	r3, r3, #16
 81036b2:	2b00      	cmp	r3, #0
 81036b4:	d00a      	beq.n	81036cc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 81036b6:	4b78      	ldr	r3, [pc, #480]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 81036b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81036bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81036c0:	687b      	ldr	r3, [r7, #4]
 81036c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81036c4:	4974      	ldr	r1, [pc, #464]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 81036c6:	4313      	orrs	r3, r2
 81036c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81036cc:	687b      	ldr	r3, [r7, #4]
 81036ce:	681b      	ldr	r3, [r3, #0]
 81036d0:	f003 0320 	and.w	r3, r3, #32
 81036d4:	2b00      	cmp	r3, #0
 81036d6:	d00a      	beq.n	81036ee <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81036d8:	4b6f      	ldr	r3, [pc, #444]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 81036da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81036de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 81036e2:	687b      	ldr	r3, [r7, #4]
 81036e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81036e6:	496c      	ldr	r1, [pc, #432]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 81036e8:	4313      	orrs	r3, r2
 81036ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 81036ee:	687b      	ldr	r3, [r7, #4]
 81036f0:	681b      	ldr	r3, [r3, #0]
 81036f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81036f6:	2b00      	cmp	r3, #0
 81036f8:	d00a      	beq.n	8103710 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81036fa:	4b67      	ldr	r3, [pc, #412]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 81036fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103700:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8103704:	687b      	ldr	r3, [r7, #4]
 8103706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103708:	4963      	ldr	r1, [pc, #396]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 810370a:	4313      	orrs	r3, r2
 810370c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8103710:	687b      	ldr	r3, [r7, #4]
 8103712:	681b      	ldr	r3, [r3, #0]
 8103714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103718:	2b00      	cmp	r3, #0
 810371a:	d00a      	beq.n	8103732 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810371c:	4b5e      	ldr	r3, [pc, #376]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 810371e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103722:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8103726:	687b      	ldr	r3, [r7, #4]
 8103728:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810372a:	495b      	ldr	r1, [pc, #364]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 810372c:	4313      	orrs	r3, r2
 810372e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8103732:	687b      	ldr	r3, [r7, #4]
 8103734:	681b      	ldr	r3, [r3, #0]
 8103736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810373a:	2b00      	cmp	r3, #0
 810373c:	d00a      	beq.n	8103754 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 810373e:	4b56      	ldr	r3, [pc, #344]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103744:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8103748:	687b      	ldr	r3, [r7, #4]
 810374a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810374c:	4952      	ldr	r1, [pc, #328]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 810374e:	4313      	orrs	r3, r2
 8103750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8103754:	687b      	ldr	r3, [r7, #4]
 8103756:	681b      	ldr	r3, [r3, #0]
 8103758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810375c:	2b00      	cmp	r3, #0
 810375e:	d00a      	beq.n	8103776 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8103760:	4b4d      	ldr	r3, [pc, #308]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103766:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 810376a:	687b      	ldr	r3, [r7, #4]
 810376c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810376e:	494a      	ldr	r1, [pc, #296]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103770:	4313      	orrs	r3, r2
 8103772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8103776:	687b      	ldr	r3, [r7, #4]
 8103778:	681b      	ldr	r3, [r3, #0]
 810377a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810377e:	2b00      	cmp	r3, #0
 8103780:	d00a      	beq.n	8103798 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8103782:	4b45      	ldr	r3, [pc, #276]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103788:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 810378c:	687b      	ldr	r3, [r7, #4]
 810378e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103790:	4941      	ldr	r1, [pc, #260]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103792:	4313      	orrs	r3, r2
 8103794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8103798:	687b      	ldr	r3, [r7, #4]
 810379a:	681b      	ldr	r3, [r3, #0]
 810379c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81037a0:	2b00      	cmp	r3, #0
 81037a2:	d00a      	beq.n	81037ba <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81037a4:	4b3c      	ldr	r3, [pc, #240]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 81037a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81037aa:	f023 0203 	bic.w	r2, r3, #3
 81037ae:	687b      	ldr	r3, [r7, #4]
 81037b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81037b2:	4939      	ldr	r1, [pc, #228]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 81037b4:	4313      	orrs	r3, r2
 81037b6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 81037ba:	687b      	ldr	r3, [r7, #4]
 81037bc:	681b      	ldr	r3, [r3, #0]
 81037be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81037c2:	2b00      	cmp	r3, #0
 81037c4:	d028      	beq.n	8103818 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81037c6:	4b34      	ldr	r3, [pc, #208]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 81037c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81037cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 81037d0:	687b      	ldr	r3, [r7, #4]
 81037d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81037d4:	4930      	ldr	r1, [pc, #192]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 81037d6:	4313      	orrs	r3, r2
 81037d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 81037dc:	687b      	ldr	r3, [r7, #4]
 81037de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81037e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81037e4:	d106      	bne.n	81037f4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 81037e6:	4b2c      	ldr	r3, [pc, #176]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 81037e8:	68db      	ldr	r3, [r3, #12]
 81037ea:	4a2b      	ldr	r2, [pc, #172]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 81037ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81037f0:	60d3      	str	r3, [r2, #12]
 81037f2:	e011      	b.n	8103818 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 81037f4:	687b      	ldr	r3, [r7, #4]
 81037f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81037f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81037fc:	d10c      	bne.n	8103818 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 81037fe:	687b      	ldr	r3, [r7, #4]
 8103800:	3304      	adds	r3, #4
 8103802:	2101      	movs	r1, #1
 8103804:	4618      	mov	r0, r3
 8103806:	f000 f969 	bl	8103adc <RCCEx_PLLSAI1_Config>
 810380a:	4603      	mov	r3, r0
 810380c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 810380e:	7cfb      	ldrb	r3, [r7, #19]
 8103810:	2b00      	cmp	r3, #0
 8103812:	d001      	beq.n	8103818 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8103814:	7cfb      	ldrb	r3, [r7, #19]
 8103816:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8103818:	687b      	ldr	r3, [r7, #4]
 810381a:	681b      	ldr	r3, [r3, #0]
 810381c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103820:	2b00      	cmp	r3, #0
 8103822:	d04d      	beq.n	81038c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8103824:	687b      	ldr	r3, [r7, #4]
 8103826:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103828:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810382c:	d108      	bne.n	8103840 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 810382e:	4b1a      	ldr	r3, [pc, #104]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103830:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103834:	4a18      	ldr	r2, [pc, #96]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103836:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810383a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 810383e:	e012      	b.n	8103866 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8103840:	4b15      	ldr	r3, [pc, #84]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103842:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103846:	4a14      	ldr	r2, [pc, #80]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103848:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 810384c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8103850:	4b11      	ldr	r3, [pc, #68]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103856:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 810385a:	687b      	ldr	r3, [r7, #4]
 810385c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810385e:	490e      	ldr	r1, [pc, #56]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103860:	4313      	orrs	r3, r2
 8103862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8103866:	687b      	ldr	r3, [r7, #4]
 8103868:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810386a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810386e:	d106      	bne.n	810387e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8103870:	4b09      	ldr	r3, [pc, #36]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103872:	68db      	ldr	r3, [r3, #12]
 8103874:	4a08      	ldr	r2, [pc, #32]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8103876:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810387a:	60d3      	str	r3, [r2, #12]
 810387c:	e020      	b.n	81038c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 810387e:	687b      	ldr	r3, [r7, #4]
 8103880:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103882:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103886:	d109      	bne.n	810389c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8103888:	4b03      	ldr	r3, [pc, #12]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 810388a:	68db      	ldr	r3, [r3, #12]
 810388c:	4a02      	ldr	r2, [pc, #8]	; (8103898 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 810388e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8103892:	60d3      	str	r3, [r2, #12]
 8103894:	e014      	b.n	81038c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8103896:	bf00      	nop
 8103898:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 810389c:	687b      	ldr	r3, [r7, #4]
 810389e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81038a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81038a4:	d10c      	bne.n	81038c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 81038a6:	687b      	ldr	r3, [r7, #4]
 81038a8:	3304      	adds	r3, #4
 81038aa:	2101      	movs	r1, #1
 81038ac:	4618      	mov	r0, r3
 81038ae:	f000 f915 	bl	8103adc <RCCEx_PLLSAI1_Config>
 81038b2:	4603      	mov	r3, r0
 81038b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 81038b6:	7cfb      	ldrb	r3, [r7, #19]
 81038b8:	2b00      	cmp	r3, #0
 81038ba:	d001      	beq.n	81038c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 81038bc:	7cfb      	ldrb	r3, [r7, #19]
 81038be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 81038c0:	687b      	ldr	r3, [r7, #4]
 81038c2:	681b      	ldr	r3, [r3, #0]
 81038c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81038c8:	2b00      	cmp	r3, #0
 81038ca:	d028      	beq.n	810391e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81038cc:	4b7a      	ldr	r3, [pc, #488]	; (8103ab8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 81038ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81038d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 81038d6:	687b      	ldr	r3, [r7, #4]
 81038d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81038da:	4977      	ldr	r1, [pc, #476]	; (8103ab8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 81038dc:	4313      	orrs	r3, r2
 81038de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 81038e2:	687b      	ldr	r3, [r7, #4]
 81038e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81038e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81038ea:	d106      	bne.n	81038fa <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 81038ec:	4b72      	ldr	r3, [pc, #456]	; (8103ab8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 81038ee:	68db      	ldr	r3, [r3, #12]
 81038f0:	4a71      	ldr	r2, [pc, #452]	; (8103ab8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 81038f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81038f6:	60d3      	str	r3, [r2, #12]
 81038f8:	e011      	b.n	810391e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 81038fa:	687b      	ldr	r3, [r7, #4]
 81038fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81038fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103902:	d10c      	bne.n	810391e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8103904:	687b      	ldr	r3, [r7, #4]
 8103906:	3304      	adds	r3, #4
 8103908:	2101      	movs	r1, #1
 810390a:	4618      	mov	r0, r3
 810390c:	f000 f8e6 	bl	8103adc <RCCEx_PLLSAI1_Config>
 8103910:	4603      	mov	r3, r0
 8103912:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8103914:	7cfb      	ldrb	r3, [r7, #19]
 8103916:	2b00      	cmp	r3, #0
 8103918:	d001      	beq.n	810391e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 810391a:	7cfb      	ldrb	r3, [r7, #19]
 810391c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810391e:	687b      	ldr	r3, [r7, #4]
 8103920:	681b      	ldr	r3, [r3, #0]
 8103922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8103926:	2b00      	cmp	r3, #0
 8103928:	d01e      	beq.n	8103968 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810392a:	4b63      	ldr	r3, [pc, #396]	; (8103ab8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 810392c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103930:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103934:	687b      	ldr	r3, [r7, #4]
 8103936:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810393a:	495f      	ldr	r1, [pc, #380]	; (8103ab8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 810393c:	4313      	orrs	r3, r2
 810393e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8103942:	687b      	ldr	r3, [r7, #4]
 8103944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103948:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810394c:	d10c      	bne.n	8103968 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 810394e:	687b      	ldr	r3, [r7, #4]
 8103950:	3304      	adds	r3, #4
 8103952:	2102      	movs	r1, #2
 8103954:	4618      	mov	r0, r3
 8103956:	f000 f8c1 	bl	8103adc <RCCEx_PLLSAI1_Config>
 810395a:	4603      	mov	r3, r0
 810395c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 810395e:	7cfb      	ldrb	r3, [r7, #19]
 8103960:	2b00      	cmp	r3, #0
 8103962:	d001      	beq.n	8103968 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8103964:	7cfb      	ldrb	r3, [r7, #19]
 8103966:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8103968:	687b      	ldr	r3, [r7, #4]
 810396a:	681b      	ldr	r3, [r3, #0]
 810396c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103970:	2b00      	cmp	r3, #0
 8103972:	d00b      	beq.n	810398c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8103974:	4b50      	ldr	r3, [pc, #320]	; (8103ab8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8103976:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810397a:	f023 0204 	bic.w	r2, r3, #4
 810397e:	687b      	ldr	r3, [r7, #4]
 8103980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103984:	494c      	ldr	r1, [pc, #304]	; (8103ab8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8103986:	4313      	orrs	r3, r2
 8103988:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 810398c:	687b      	ldr	r3, [r7, #4]
 810398e:	681b      	ldr	r3, [r3, #0]
 8103990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103994:	2b00      	cmp	r3, #0
 8103996:	d00b      	beq.n	81039b0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8103998:	4b47      	ldr	r3, [pc, #284]	; (8103ab8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 810399a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810399e:	f023 0218 	bic.w	r2, r3, #24
 81039a2:	687b      	ldr	r3, [r7, #4]
 81039a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81039a8:	4943      	ldr	r1, [pc, #268]	; (8103ab8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 81039aa:	4313      	orrs	r3, r2
 81039ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81039b0:	687b      	ldr	r3, [r7, #4]
 81039b2:	681b      	ldr	r3, [r3, #0]
 81039b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81039b8:	2b00      	cmp	r3, #0
 81039ba:	d035      	beq.n	8103a28 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 81039bc:	4b3e      	ldr	r3, [pc, #248]	; (8103ab8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 81039be:	681b      	ldr	r3, [r3, #0]
 81039c0:	4a3d      	ldr	r2, [pc, #244]	; (8103ab8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 81039c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81039c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81039c8:	f7fc fe20 	bl	810060c <HAL_GetTick>
 81039cc:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 81039ce:	e009      	b.n	81039e4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 81039d0:	f7fc fe1c 	bl	810060c <HAL_GetTick>
 81039d4:	4602      	mov	r2, r0
 81039d6:	68fb      	ldr	r3, [r7, #12]
 81039d8:	1ad3      	subs	r3, r2, r3
 81039da:	2b02      	cmp	r3, #2
 81039dc:	d902      	bls.n	81039e4 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 81039de:	2303      	movs	r3, #3
 81039e0:	74fb      	strb	r3, [r7, #19]
        break;
 81039e2:	e005      	b.n	81039f0 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 81039e4:	4b34      	ldr	r3, [pc, #208]	; (8103ab8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 81039e6:	681b      	ldr	r3, [r3, #0]
 81039e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81039ec:	2b00      	cmp	r3, #0
 81039ee:	d1ef      	bne.n	81039d0 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 81039f0:	7cfb      	ldrb	r3, [r7, #19]
 81039f2:	2b00      	cmp	r3, #0
 81039f4:	d113      	bne.n	8103a1e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 81039f6:	4b30      	ldr	r3, [pc, #192]	; (8103ab8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 81039f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81039fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8103a00:	687b      	ldr	r3, [r7, #4]
 8103a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8103a06:	492c      	ldr	r1, [pc, #176]	; (8103ab8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8103a08:	4313      	orrs	r3, r2
 8103a0a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8103a0e:	687b      	ldr	r3, [r7, #4]
 8103a10:	3320      	adds	r3, #32
 8103a12:	2102      	movs	r1, #2
 8103a14:	4618      	mov	r0, r3
 8103a16:	f000 f955 	bl	8103cc4 <RCCEx_PLLSAI2_Config>
 8103a1a:	4603      	mov	r3, r0
 8103a1c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8103a1e:	7cfb      	ldrb	r3, [r7, #19]
 8103a20:	2b00      	cmp	r3, #0
 8103a22:	d001      	beq.n	8103a28 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8103a24:	7cfb      	ldrb	r3, [r7, #19]
 8103a26:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8103a28:	687b      	ldr	r3, [r7, #4]
 8103a2a:	681b      	ldr	r3, [r3, #0]
 8103a2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103a30:	2b00      	cmp	r3, #0
 8103a32:	d01e      	beq.n	8103a72 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8103a34:	4b20      	ldr	r3, [pc, #128]	; (8103ab8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8103a36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103a3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8103a3e:	687b      	ldr	r3, [r7, #4]
 8103a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103a44:	491c      	ldr	r1, [pc, #112]	; (8103ab8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8103a46:	4313      	orrs	r3, r2
 8103a48:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8103a4c:	687b      	ldr	r3, [r7, #4]
 8103a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103a56:	d10c      	bne.n	8103a72 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8103a58:	687b      	ldr	r3, [r7, #4]
 8103a5a:	3320      	adds	r3, #32
 8103a5c:	2101      	movs	r1, #1
 8103a5e:	4618      	mov	r0, r3
 8103a60:	f000 f930 	bl	8103cc4 <RCCEx_PLLSAI2_Config>
 8103a64:	4603      	mov	r3, r0
 8103a66:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8103a68:	7cfb      	ldrb	r3, [r7, #19]
 8103a6a:	2b00      	cmp	r3, #0
 8103a6c:	d001      	beq.n	8103a72 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8103a6e:	7cfb      	ldrb	r3, [r7, #19]
 8103a70:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8103a72:	687b      	ldr	r3, [r7, #4]
 8103a74:	681b      	ldr	r3, [r3, #0]
 8103a76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103a7a:	2b00      	cmp	r3, #0
 8103a7c:	d017      	beq.n	8103aae <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8103a7e:	4b0e      	ldr	r3, [pc, #56]	; (8103ab8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8103a80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103a84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8103a88:	687b      	ldr	r3, [r7, #4]
 8103a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103a8e:	490a      	ldr	r1, [pc, #40]	; (8103ab8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8103a90:	4313      	orrs	r3, r2
 8103a92:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8103a96:	687b      	ldr	r3, [r7, #4]
 8103a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103a9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103aa0:	d105      	bne.n	8103aae <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8103aa2:	4b05      	ldr	r3, [pc, #20]	; (8103ab8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8103aa4:	68db      	ldr	r3, [r3, #12]
 8103aa6:	4a04      	ldr	r2, [pc, #16]	; (8103ab8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8103aa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8103aac:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8103aae:	7cbb      	ldrb	r3, [r7, #18]
}
 8103ab0:	4618      	mov	r0, r3
 8103ab2:	3718      	adds	r7, #24
 8103ab4:	46bd      	mov	sp, r7
 8103ab6:	bd80      	pop	{r7, pc}
 8103ab8:	40021000 	.word	0x40021000

08103abc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8103abc:	b480      	push	{r7}
 8103abe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8103ac0:	4b05      	ldr	r3, [pc, #20]	; (8103ad8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8103ac2:	681b      	ldr	r3, [r3, #0]
 8103ac4:	4a04      	ldr	r2, [pc, #16]	; (8103ad8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8103ac6:	f043 0304 	orr.w	r3, r3, #4
 8103aca:	6013      	str	r3, [r2, #0]
}
 8103acc:	bf00      	nop
 8103ace:	46bd      	mov	sp, r7
 8103ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ad4:	4770      	bx	lr
 8103ad6:	bf00      	nop
 8103ad8:	40021000 	.word	0x40021000

08103adc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8103adc:	b580      	push	{r7, lr}
 8103ade:	b084      	sub	sp, #16
 8103ae0:	af00      	add	r7, sp, #0
 8103ae2:	6078      	str	r0, [r7, #4]
 8103ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103ae6:	2300      	movs	r3, #0
 8103ae8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8103aea:	4b72      	ldr	r3, [pc, #456]	; (8103cb4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103aec:	68db      	ldr	r3, [r3, #12]
 8103aee:	f003 0303 	and.w	r3, r3, #3
 8103af2:	2b00      	cmp	r3, #0
 8103af4:	d00e      	beq.n	8103b14 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8103af6:	4b6f      	ldr	r3, [pc, #444]	; (8103cb4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103af8:	68db      	ldr	r3, [r3, #12]
 8103afa:	f003 0203 	and.w	r2, r3, #3
 8103afe:	687b      	ldr	r3, [r7, #4]
 8103b00:	681b      	ldr	r3, [r3, #0]
 8103b02:	429a      	cmp	r2, r3
 8103b04:	d103      	bne.n	8103b0e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8103b06:	687b      	ldr	r3, [r7, #4]
 8103b08:	681b      	ldr	r3, [r3, #0]
       ||
 8103b0a:	2b00      	cmp	r3, #0
 8103b0c:	d142      	bne.n	8103b94 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8103b0e:	2301      	movs	r3, #1
 8103b10:	73fb      	strb	r3, [r7, #15]
 8103b12:	e03f      	b.n	8103b94 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8103b14:	687b      	ldr	r3, [r7, #4]
 8103b16:	681b      	ldr	r3, [r3, #0]
 8103b18:	2b03      	cmp	r3, #3
 8103b1a:	d018      	beq.n	8103b4e <RCCEx_PLLSAI1_Config+0x72>
 8103b1c:	2b03      	cmp	r3, #3
 8103b1e:	d825      	bhi.n	8103b6c <RCCEx_PLLSAI1_Config+0x90>
 8103b20:	2b01      	cmp	r3, #1
 8103b22:	d002      	beq.n	8103b2a <RCCEx_PLLSAI1_Config+0x4e>
 8103b24:	2b02      	cmp	r3, #2
 8103b26:	d009      	beq.n	8103b3c <RCCEx_PLLSAI1_Config+0x60>
 8103b28:	e020      	b.n	8103b6c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8103b2a:	4b62      	ldr	r3, [pc, #392]	; (8103cb4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103b2c:	681b      	ldr	r3, [r3, #0]
 8103b2e:	f003 0302 	and.w	r3, r3, #2
 8103b32:	2b00      	cmp	r3, #0
 8103b34:	d11d      	bne.n	8103b72 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8103b36:	2301      	movs	r3, #1
 8103b38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8103b3a:	e01a      	b.n	8103b72 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8103b3c:	4b5d      	ldr	r3, [pc, #372]	; (8103cb4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103b3e:	681b      	ldr	r3, [r3, #0]
 8103b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103b44:	2b00      	cmp	r3, #0
 8103b46:	d116      	bne.n	8103b76 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8103b48:	2301      	movs	r3, #1
 8103b4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8103b4c:	e013      	b.n	8103b76 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8103b4e:	4b59      	ldr	r3, [pc, #356]	; (8103cb4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103b50:	681b      	ldr	r3, [r3, #0]
 8103b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103b56:	2b00      	cmp	r3, #0
 8103b58:	d10f      	bne.n	8103b7a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8103b5a:	4b56      	ldr	r3, [pc, #344]	; (8103cb4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103b5c:	681b      	ldr	r3, [r3, #0]
 8103b5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103b62:	2b00      	cmp	r3, #0
 8103b64:	d109      	bne.n	8103b7a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8103b66:	2301      	movs	r3, #1
 8103b68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8103b6a:	e006      	b.n	8103b7a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8103b6c:	2301      	movs	r3, #1
 8103b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8103b70:	e004      	b.n	8103b7c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8103b72:	bf00      	nop
 8103b74:	e002      	b.n	8103b7c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8103b76:	bf00      	nop
 8103b78:	e000      	b.n	8103b7c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8103b7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8103b7c:	7bfb      	ldrb	r3, [r7, #15]
 8103b7e:	2b00      	cmp	r3, #0
 8103b80:	d108      	bne.n	8103b94 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8103b82:	4b4c      	ldr	r3, [pc, #304]	; (8103cb4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103b84:	68db      	ldr	r3, [r3, #12]
 8103b86:	f023 0203 	bic.w	r2, r3, #3
 8103b8a:	687b      	ldr	r3, [r7, #4]
 8103b8c:	681b      	ldr	r3, [r3, #0]
 8103b8e:	4949      	ldr	r1, [pc, #292]	; (8103cb4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103b90:	4313      	orrs	r3, r2
 8103b92:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8103b94:	7bfb      	ldrb	r3, [r7, #15]
 8103b96:	2b00      	cmp	r3, #0
 8103b98:	f040 8086 	bne.w	8103ca8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8103b9c:	4b45      	ldr	r3, [pc, #276]	; (8103cb4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103b9e:	681b      	ldr	r3, [r3, #0]
 8103ba0:	4a44      	ldr	r2, [pc, #272]	; (8103cb4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103ba2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8103ba6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103ba8:	f7fc fd30 	bl	810060c <HAL_GetTick>
 8103bac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8103bae:	e009      	b.n	8103bc4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8103bb0:	f7fc fd2c 	bl	810060c <HAL_GetTick>
 8103bb4:	4602      	mov	r2, r0
 8103bb6:	68bb      	ldr	r3, [r7, #8]
 8103bb8:	1ad3      	subs	r3, r2, r3
 8103bba:	2b02      	cmp	r3, #2
 8103bbc:	d902      	bls.n	8103bc4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8103bbe:	2303      	movs	r3, #3
 8103bc0:	73fb      	strb	r3, [r7, #15]
        break;
 8103bc2:	e005      	b.n	8103bd0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8103bc4:	4b3b      	ldr	r3, [pc, #236]	; (8103cb4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103bc6:	681b      	ldr	r3, [r3, #0]
 8103bc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103bcc:	2b00      	cmp	r3, #0
 8103bce:	d1ef      	bne.n	8103bb0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8103bd0:	7bfb      	ldrb	r3, [r7, #15]
 8103bd2:	2b00      	cmp	r3, #0
 8103bd4:	d168      	bne.n	8103ca8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8103bd6:	683b      	ldr	r3, [r7, #0]
 8103bd8:	2b00      	cmp	r3, #0
 8103bda:	d113      	bne.n	8103c04 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8103bdc:	4b35      	ldr	r3, [pc, #212]	; (8103cb4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103bde:	691a      	ldr	r2, [r3, #16]
 8103be0:	4b35      	ldr	r3, [pc, #212]	; (8103cb8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8103be2:	4013      	ands	r3, r2
 8103be4:	687a      	ldr	r2, [r7, #4]
 8103be6:	6892      	ldr	r2, [r2, #8]
 8103be8:	0211      	lsls	r1, r2, #8
 8103bea:	687a      	ldr	r2, [r7, #4]
 8103bec:	68d2      	ldr	r2, [r2, #12]
 8103bee:	06d2      	lsls	r2, r2, #27
 8103bf0:	4311      	orrs	r1, r2
 8103bf2:	687a      	ldr	r2, [r7, #4]
 8103bf4:	6852      	ldr	r2, [r2, #4]
 8103bf6:	3a01      	subs	r2, #1
 8103bf8:	0112      	lsls	r2, r2, #4
 8103bfa:	430a      	orrs	r2, r1
 8103bfc:	492d      	ldr	r1, [pc, #180]	; (8103cb4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103bfe:	4313      	orrs	r3, r2
 8103c00:	610b      	str	r3, [r1, #16]
 8103c02:	e02d      	b.n	8103c60 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8103c04:	683b      	ldr	r3, [r7, #0]
 8103c06:	2b01      	cmp	r3, #1
 8103c08:	d115      	bne.n	8103c36 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8103c0a:	4b2a      	ldr	r3, [pc, #168]	; (8103cb4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103c0c:	691a      	ldr	r2, [r3, #16]
 8103c0e:	4b2b      	ldr	r3, [pc, #172]	; (8103cbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8103c10:	4013      	ands	r3, r2
 8103c12:	687a      	ldr	r2, [r7, #4]
 8103c14:	6892      	ldr	r2, [r2, #8]
 8103c16:	0211      	lsls	r1, r2, #8
 8103c18:	687a      	ldr	r2, [r7, #4]
 8103c1a:	6912      	ldr	r2, [r2, #16]
 8103c1c:	0852      	lsrs	r2, r2, #1
 8103c1e:	3a01      	subs	r2, #1
 8103c20:	0552      	lsls	r2, r2, #21
 8103c22:	4311      	orrs	r1, r2
 8103c24:	687a      	ldr	r2, [r7, #4]
 8103c26:	6852      	ldr	r2, [r2, #4]
 8103c28:	3a01      	subs	r2, #1
 8103c2a:	0112      	lsls	r2, r2, #4
 8103c2c:	430a      	orrs	r2, r1
 8103c2e:	4921      	ldr	r1, [pc, #132]	; (8103cb4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103c30:	4313      	orrs	r3, r2
 8103c32:	610b      	str	r3, [r1, #16]
 8103c34:	e014      	b.n	8103c60 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8103c36:	4b1f      	ldr	r3, [pc, #124]	; (8103cb4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103c38:	691a      	ldr	r2, [r3, #16]
 8103c3a:	4b21      	ldr	r3, [pc, #132]	; (8103cc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8103c3c:	4013      	ands	r3, r2
 8103c3e:	687a      	ldr	r2, [r7, #4]
 8103c40:	6892      	ldr	r2, [r2, #8]
 8103c42:	0211      	lsls	r1, r2, #8
 8103c44:	687a      	ldr	r2, [r7, #4]
 8103c46:	6952      	ldr	r2, [r2, #20]
 8103c48:	0852      	lsrs	r2, r2, #1
 8103c4a:	3a01      	subs	r2, #1
 8103c4c:	0652      	lsls	r2, r2, #25
 8103c4e:	4311      	orrs	r1, r2
 8103c50:	687a      	ldr	r2, [r7, #4]
 8103c52:	6852      	ldr	r2, [r2, #4]
 8103c54:	3a01      	subs	r2, #1
 8103c56:	0112      	lsls	r2, r2, #4
 8103c58:	430a      	orrs	r2, r1
 8103c5a:	4916      	ldr	r1, [pc, #88]	; (8103cb4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103c5c:	4313      	orrs	r3, r2
 8103c5e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8103c60:	4b14      	ldr	r3, [pc, #80]	; (8103cb4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103c62:	681b      	ldr	r3, [r3, #0]
 8103c64:	4a13      	ldr	r2, [pc, #76]	; (8103cb4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103c66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8103c6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8103c6c:	f7fc fcce 	bl	810060c <HAL_GetTick>
 8103c70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8103c72:	e009      	b.n	8103c88 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8103c74:	f7fc fcca 	bl	810060c <HAL_GetTick>
 8103c78:	4602      	mov	r2, r0
 8103c7a:	68bb      	ldr	r3, [r7, #8]
 8103c7c:	1ad3      	subs	r3, r2, r3
 8103c7e:	2b02      	cmp	r3, #2
 8103c80:	d902      	bls.n	8103c88 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8103c82:	2303      	movs	r3, #3
 8103c84:	73fb      	strb	r3, [r7, #15]
          break;
 8103c86:	e005      	b.n	8103c94 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8103c88:	4b0a      	ldr	r3, [pc, #40]	; (8103cb4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103c8a:	681b      	ldr	r3, [r3, #0]
 8103c8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103c90:	2b00      	cmp	r3, #0
 8103c92:	d0ef      	beq.n	8103c74 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8103c94:	7bfb      	ldrb	r3, [r7, #15]
 8103c96:	2b00      	cmp	r3, #0
 8103c98:	d106      	bne.n	8103ca8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8103c9a:	4b06      	ldr	r3, [pc, #24]	; (8103cb4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103c9c:	691a      	ldr	r2, [r3, #16]
 8103c9e:	687b      	ldr	r3, [r7, #4]
 8103ca0:	699b      	ldr	r3, [r3, #24]
 8103ca2:	4904      	ldr	r1, [pc, #16]	; (8103cb4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8103ca4:	4313      	orrs	r3, r2
 8103ca6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8103ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8103caa:	4618      	mov	r0, r3
 8103cac:	3710      	adds	r7, #16
 8103cae:	46bd      	mov	sp, r7
 8103cb0:	bd80      	pop	{r7, pc}
 8103cb2:	bf00      	nop
 8103cb4:	40021000 	.word	0x40021000
 8103cb8:	07ff800f 	.word	0x07ff800f
 8103cbc:	ff9f800f 	.word	0xff9f800f
 8103cc0:	f9ff800f 	.word	0xf9ff800f

08103cc4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8103cc4:	b580      	push	{r7, lr}
 8103cc6:	b084      	sub	sp, #16
 8103cc8:	af00      	add	r7, sp, #0
 8103cca:	6078      	str	r0, [r7, #4]
 8103ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103cce:	2300      	movs	r3, #0
 8103cd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8103cd2:	4b72      	ldr	r3, [pc, #456]	; (8103e9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8103cd4:	68db      	ldr	r3, [r3, #12]
 8103cd6:	f003 0303 	and.w	r3, r3, #3
 8103cda:	2b00      	cmp	r3, #0
 8103cdc:	d00e      	beq.n	8103cfc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8103cde:	4b6f      	ldr	r3, [pc, #444]	; (8103e9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8103ce0:	68db      	ldr	r3, [r3, #12]
 8103ce2:	f003 0203 	and.w	r2, r3, #3
 8103ce6:	687b      	ldr	r3, [r7, #4]
 8103ce8:	681b      	ldr	r3, [r3, #0]
 8103cea:	429a      	cmp	r2, r3
 8103cec:	d103      	bne.n	8103cf6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8103cee:	687b      	ldr	r3, [r7, #4]
 8103cf0:	681b      	ldr	r3, [r3, #0]
       ||
 8103cf2:	2b00      	cmp	r3, #0
 8103cf4:	d142      	bne.n	8103d7c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8103cf6:	2301      	movs	r3, #1
 8103cf8:	73fb      	strb	r3, [r7, #15]
 8103cfa:	e03f      	b.n	8103d7c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8103cfc:	687b      	ldr	r3, [r7, #4]
 8103cfe:	681b      	ldr	r3, [r3, #0]
 8103d00:	2b03      	cmp	r3, #3
 8103d02:	d018      	beq.n	8103d36 <RCCEx_PLLSAI2_Config+0x72>
 8103d04:	2b03      	cmp	r3, #3
 8103d06:	d825      	bhi.n	8103d54 <RCCEx_PLLSAI2_Config+0x90>
 8103d08:	2b01      	cmp	r3, #1
 8103d0a:	d002      	beq.n	8103d12 <RCCEx_PLLSAI2_Config+0x4e>
 8103d0c:	2b02      	cmp	r3, #2
 8103d0e:	d009      	beq.n	8103d24 <RCCEx_PLLSAI2_Config+0x60>
 8103d10:	e020      	b.n	8103d54 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8103d12:	4b62      	ldr	r3, [pc, #392]	; (8103e9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8103d14:	681b      	ldr	r3, [r3, #0]
 8103d16:	f003 0302 	and.w	r3, r3, #2
 8103d1a:	2b00      	cmp	r3, #0
 8103d1c:	d11d      	bne.n	8103d5a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8103d1e:	2301      	movs	r3, #1
 8103d20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8103d22:	e01a      	b.n	8103d5a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8103d24:	4b5d      	ldr	r3, [pc, #372]	; (8103e9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8103d26:	681b      	ldr	r3, [r3, #0]
 8103d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103d2c:	2b00      	cmp	r3, #0
 8103d2e:	d116      	bne.n	8103d5e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8103d30:	2301      	movs	r3, #1
 8103d32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8103d34:	e013      	b.n	8103d5e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8103d36:	4b59      	ldr	r3, [pc, #356]	; (8103e9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8103d38:	681b      	ldr	r3, [r3, #0]
 8103d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103d3e:	2b00      	cmp	r3, #0
 8103d40:	d10f      	bne.n	8103d62 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8103d42:	4b56      	ldr	r3, [pc, #344]	; (8103e9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8103d44:	681b      	ldr	r3, [r3, #0]
 8103d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103d4a:	2b00      	cmp	r3, #0
 8103d4c:	d109      	bne.n	8103d62 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8103d4e:	2301      	movs	r3, #1
 8103d50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8103d52:	e006      	b.n	8103d62 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8103d54:	2301      	movs	r3, #1
 8103d56:	73fb      	strb	r3, [r7, #15]
      break;
 8103d58:	e004      	b.n	8103d64 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8103d5a:	bf00      	nop
 8103d5c:	e002      	b.n	8103d64 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8103d5e:	bf00      	nop
 8103d60:	e000      	b.n	8103d64 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8103d62:	bf00      	nop
    }

    if(status == HAL_OK)
 8103d64:	7bfb      	ldrb	r3, [r7, #15]
 8103d66:	2b00      	cmp	r3, #0
 8103d68:	d108      	bne.n	8103d7c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8103d6a:	4b4c      	ldr	r3, [pc, #304]	; (8103e9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8103d6c:	68db      	ldr	r3, [r3, #12]
 8103d6e:	f023 0203 	bic.w	r2, r3, #3
 8103d72:	687b      	ldr	r3, [r7, #4]
 8103d74:	681b      	ldr	r3, [r3, #0]
 8103d76:	4949      	ldr	r1, [pc, #292]	; (8103e9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8103d78:	4313      	orrs	r3, r2
 8103d7a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8103d7c:	7bfb      	ldrb	r3, [r7, #15]
 8103d7e:	2b00      	cmp	r3, #0
 8103d80:	f040 8086 	bne.w	8103e90 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8103d84:	4b45      	ldr	r3, [pc, #276]	; (8103e9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8103d86:	681b      	ldr	r3, [r3, #0]
 8103d88:	4a44      	ldr	r2, [pc, #272]	; (8103e9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8103d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8103d8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103d90:	f7fc fc3c 	bl	810060c <HAL_GetTick>
 8103d94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8103d96:	e009      	b.n	8103dac <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8103d98:	f7fc fc38 	bl	810060c <HAL_GetTick>
 8103d9c:	4602      	mov	r2, r0
 8103d9e:	68bb      	ldr	r3, [r7, #8]
 8103da0:	1ad3      	subs	r3, r2, r3
 8103da2:	2b02      	cmp	r3, #2
 8103da4:	d902      	bls.n	8103dac <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8103da6:	2303      	movs	r3, #3
 8103da8:	73fb      	strb	r3, [r7, #15]
        break;
 8103daa:	e005      	b.n	8103db8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8103dac:	4b3b      	ldr	r3, [pc, #236]	; (8103e9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8103dae:	681b      	ldr	r3, [r3, #0]
 8103db0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103db4:	2b00      	cmp	r3, #0
 8103db6:	d1ef      	bne.n	8103d98 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8103db8:	7bfb      	ldrb	r3, [r7, #15]
 8103dba:	2b00      	cmp	r3, #0
 8103dbc:	d168      	bne.n	8103e90 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8103dbe:	683b      	ldr	r3, [r7, #0]
 8103dc0:	2b00      	cmp	r3, #0
 8103dc2:	d113      	bne.n	8103dec <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8103dc4:	4b35      	ldr	r3, [pc, #212]	; (8103e9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8103dc6:	695a      	ldr	r2, [r3, #20]
 8103dc8:	4b35      	ldr	r3, [pc, #212]	; (8103ea0 <RCCEx_PLLSAI2_Config+0x1dc>)
 8103dca:	4013      	ands	r3, r2
 8103dcc:	687a      	ldr	r2, [r7, #4]
 8103dce:	6892      	ldr	r2, [r2, #8]
 8103dd0:	0211      	lsls	r1, r2, #8
 8103dd2:	687a      	ldr	r2, [r7, #4]
 8103dd4:	68d2      	ldr	r2, [r2, #12]
 8103dd6:	06d2      	lsls	r2, r2, #27
 8103dd8:	4311      	orrs	r1, r2
 8103dda:	687a      	ldr	r2, [r7, #4]
 8103ddc:	6852      	ldr	r2, [r2, #4]
 8103dde:	3a01      	subs	r2, #1
 8103de0:	0112      	lsls	r2, r2, #4
 8103de2:	430a      	orrs	r2, r1
 8103de4:	492d      	ldr	r1, [pc, #180]	; (8103e9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8103de6:	4313      	orrs	r3, r2
 8103de8:	614b      	str	r3, [r1, #20]
 8103dea:	e02d      	b.n	8103e48 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8103dec:	683b      	ldr	r3, [r7, #0]
 8103dee:	2b01      	cmp	r3, #1
 8103df0:	d115      	bne.n	8103e1e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8103df2:	4b2a      	ldr	r3, [pc, #168]	; (8103e9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8103df4:	695a      	ldr	r2, [r3, #20]
 8103df6:	4b2b      	ldr	r3, [pc, #172]	; (8103ea4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8103df8:	4013      	ands	r3, r2
 8103dfa:	687a      	ldr	r2, [r7, #4]
 8103dfc:	6892      	ldr	r2, [r2, #8]
 8103dfe:	0211      	lsls	r1, r2, #8
 8103e00:	687a      	ldr	r2, [r7, #4]
 8103e02:	6912      	ldr	r2, [r2, #16]
 8103e04:	0852      	lsrs	r2, r2, #1
 8103e06:	3a01      	subs	r2, #1
 8103e08:	0552      	lsls	r2, r2, #21
 8103e0a:	4311      	orrs	r1, r2
 8103e0c:	687a      	ldr	r2, [r7, #4]
 8103e0e:	6852      	ldr	r2, [r2, #4]
 8103e10:	3a01      	subs	r2, #1
 8103e12:	0112      	lsls	r2, r2, #4
 8103e14:	430a      	orrs	r2, r1
 8103e16:	4921      	ldr	r1, [pc, #132]	; (8103e9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8103e18:	4313      	orrs	r3, r2
 8103e1a:	614b      	str	r3, [r1, #20]
 8103e1c:	e014      	b.n	8103e48 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8103e1e:	4b1f      	ldr	r3, [pc, #124]	; (8103e9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8103e20:	695a      	ldr	r2, [r3, #20]
 8103e22:	4b21      	ldr	r3, [pc, #132]	; (8103ea8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8103e24:	4013      	ands	r3, r2
 8103e26:	687a      	ldr	r2, [r7, #4]
 8103e28:	6892      	ldr	r2, [r2, #8]
 8103e2a:	0211      	lsls	r1, r2, #8
 8103e2c:	687a      	ldr	r2, [r7, #4]
 8103e2e:	6952      	ldr	r2, [r2, #20]
 8103e30:	0852      	lsrs	r2, r2, #1
 8103e32:	3a01      	subs	r2, #1
 8103e34:	0652      	lsls	r2, r2, #25
 8103e36:	4311      	orrs	r1, r2
 8103e38:	687a      	ldr	r2, [r7, #4]
 8103e3a:	6852      	ldr	r2, [r2, #4]
 8103e3c:	3a01      	subs	r2, #1
 8103e3e:	0112      	lsls	r2, r2, #4
 8103e40:	430a      	orrs	r2, r1
 8103e42:	4916      	ldr	r1, [pc, #88]	; (8103e9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8103e44:	4313      	orrs	r3, r2
 8103e46:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8103e48:	4b14      	ldr	r3, [pc, #80]	; (8103e9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8103e4a:	681b      	ldr	r3, [r3, #0]
 8103e4c:	4a13      	ldr	r2, [pc, #76]	; (8103e9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8103e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8103e52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8103e54:	f7fc fbda 	bl	810060c <HAL_GetTick>
 8103e58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8103e5a:	e009      	b.n	8103e70 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8103e5c:	f7fc fbd6 	bl	810060c <HAL_GetTick>
 8103e60:	4602      	mov	r2, r0
 8103e62:	68bb      	ldr	r3, [r7, #8]
 8103e64:	1ad3      	subs	r3, r2, r3
 8103e66:	2b02      	cmp	r3, #2
 8103e68:	d902      	bls.n	8103e70 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8103e6a:	2303      	movs	r3, #3
 8103e6c:	73fb      	strb	r3, [r7, #15]
          break;
 8103e6e:	e005      	b.n	8103e7c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8103e70:	4b0a      	ldr	r3, [pc, #40]	; (8103e9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8103e72:	681b      	ldr	r3, [r3, #0]
 8103e74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103e78:	2b00      	cmp	r3, #0
 8103e7a:	d0ef      	beq.n	8103e5c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8103e7c:	7bfb      	ldrb	r3, [r7, #15]
 8103e7e:	2b00      	cmp	r3, #0
 8103e80:	d106      	bne.n	8103e90 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8103e82:	4b06      	ldr	r3, [pc, #24]	; (8103e9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8103e84:	695a      	ldr	r2, [r3, #20]
 8103e86:	687b      	ldr	r3, [r7, #4]
 8103e88:	699b      	ldr	r3, [r3, #24]
 8103e8a:	4904      	ldr	r1, [pc, #16]	; (8103e9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8103e8c:	4313      	orrs	r3, r2
 8103e8e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8103e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8103e92:	4618      	mov	r0, r3
 8103e94:	3710      	adds	r7, #16
 8103e96:	46bd      	mov	sp, r7
 8103e98:	bd80      	pop	{r7, pc}
 8103e9a:	bf00      	nop
 8103e9c:	40021000 	.word	0x40021000
 8103ea0:	07ff800f 	.word	0x07ff800f
 8103ea4:	ff9f800f 	.word	0xff9f800f
 8103ea8:	f9ff800f 	.word	0xf9ff800f

08103eac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8103eac:	b084      	sub	sp, #16
 8103eae:	b580      	push	{r7, lr}
 8103eb0:	b084      	sub	sp, #16
 8103eb2:	af00      	add	r7, sp, #0
 8103eb4:	6078      	str	r0, [r7, #4]
 8103eb6:	f107 001c 	add.w	r0, r7, #28
 8103eba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8103ebe:	687b      	ldr	r3, [r7, #4]
 8103ec0:	68db      	ldr	r3, [r3, #12]
 8103ec2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8103ec6:	687b      	ldr	r3, [r7, #4]
 8103ec8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8103eca:	6878      	ldr	r0, [r7, #4]
 8103ecc:	f001 faf6 	bl	81054bc <USB_CoreReset>
 8103ed0:	4603      	mov	r3, r0
 8103ed2:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8103ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8103ed6:	2b00      	cmp	r3, #0
 8103ed8:	d106      	bne.n	8103ee8 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8103eda:	687b      	ldr	r3, [r7, #4]
 8103edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103ede:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8103ee2:	687b      	ldr	r3, [r7, #4]
 8103ee4:	639a      	str	r2, [r3, #56]	; 0x38
 8103ee6:	e005      	b.n	8103ef4 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8103ee8:	687b      	ldr	r3, [r7, #4]
 8103eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103eec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8103ef0:	687b      	ldr	r3, [r7, #4]
 8103ef2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8103ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8103ef6:	4618      	mov	r0, r3
 8103ef8:	3710      	adds	r7, #16
 8103efa:	46bd      	mov	sp, r7
 8103efc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8103f00:	b004      	add	sp, #16
 8103f02:	4770      	bx	lr

08103f04 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8103f04:	b480      	push	{r7}
 8103f06:	b087      	sub	sp, #28
 8103f08:	af00      	add	r7, sp, #0
 8103f0a:	60f8      	str	r0, [r7, #12]
 8103f0c:	60b9      	str	r1, [r7, #8]
 8103f0e:	4613      	mov	r3, r2
 8103f10:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8103f12:	79fb      	ldrb	r3, [r7, #7]
 8103f14:	2b02      	cmp	r3, #2
 8103f16:	d165      	bne.n	8103fe4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8103f18:	68bb      	ldr	r3, [r7, #8]
 8103f1a:	4a3e      	ldr	r2, [pc, #248]	; (8104014 <USB_SetTurnaroundTime+0x110>)
 8103f1c:	4293      	cmp	r3, r2
 8103f1e:	d906      	bls.n	8103f2e <USB_SetTurnaroundTime+0x2a>
 8103f20:	68bb      	ldr	r3, [r7, #8]
 8103f22:	4a3d      	ldr	r2, [pc, #244]	; (8104018 <USB_SetTurnaroundTime+0x114>)
 8103f24:	4293      	cmp	r3, r2
 8103f26:	d202      	bcs.n	8103f2e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8103f28:	230f      	movs	r3, #15
 8103f2a:	617b      	str	r3, [r7, #20]
 8103f2c:	e05c      	b.n	8103fe8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8103f2e:	68bb      	ldr	r3, [r7, #8]
 8103f30:	4a39      	ldr	r2, [pc, #228]	; (8104018 <USB_SetTurnaroundTime+0x114>)
 8103f32:	4293      	cmp	r3, r2
 8103f34:	d306      	bcc.n	8103f44 <USB_SetTurnaroundTime+0x40>
 8103f36:	68bb      	ldr	r3, [r7, #8]
 8103f38:	4a38      	ldr	r2, [pc, #224]	; (810401c <USB_SetTurnaroundTime+0x118>)
 8103f3a:	4293      	cmp	r3, r2
 8103f3c:	d202      	bcs.n	8103f44 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8103f3e:	230e      	movs	r3, #14
 8103f40:	617b      	str	r3, [r7, #20]
 8103f42:	e051      	b.n	8103fe8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8103f44:	68bb      	ldr	r3, [r7, #8]
 8103f46:	4a35      	ldr	r2, [pc, #212]	; (810401c <USB_SetTurnaroundTime+0x118>)
 8103f48:	4293      	cmp	r3, r2
 8103f4a:	d306      	bcc.n	8103f5a <USB_SetTurnaroundTime+0x56>
 8103f4c:	68bb      	ldr	r3, [r7, #8]
 8103f4e:	4a34      	ldr	r2, [pc, #208]	; (8104020 <USB_SetTurnaroundTime+0x11c>)
 8103f50:	4293      	cmp	r3, r2
 8103f52:	d202      	bcs.n	8103f5a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8103f54:	230d      	movs	r3, #13
 8103f56:	617b      	str	r3, [r7, #20]
 8103f58:	e046      	b.n	8103fe8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8103f5a:	68bb      	ldr	r3, [r7, #8]
 8103f5c:	4a30      	ldr	r2, [pc, #192]	; (8104020 <USB_SetTurnaroundTime+0x11c>)
 8103f5e:	4293      	cmp	r3, r2
 8103f60:	d306      	bcc.n	8103f70 <USB_SetTurnaroundTime+0x6c>
 8103f62:	68bb      	ldr	r3, [r7, #8]
 8103f64:	4a2f      	ldr	r2, [pc, #188]	; (8104024 <USB_SetTurnaroundTime+0x120>)
 8103f66:	4293      	cmp	r3, r2
 8103f68:	d802      	bhi.n	8103f70 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8103f6a:	230c      	movs	r3, #12
 8103f6c:	617b      	str	r3, [r7, #20]
 8103f6e:	e03b      	b.n	8103fe8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8103f70:	68bb      	ldr	r3, [r7, #8]
 8103f72:	4a2c      	ldr	r2, [pc, #176]	; (8104024 <USB_SetTurnaroundTime+0x120>)
 8103f74:	4293      	cmp	r3, r2
 8103f76:	d906      	bls.n	8103f86 <USB_SetTurnaroundTime+0x82>
 8103f78:	68bb      	ldr	r3, [r7, #8]
 8103f7a:	4a2b      	ldr	r2, [pc, #172]	; (8104028 <USB_SetTurnaroundTime+0x124>)
 8103f7c:	4293      	cmp	r3, r2
 8103f7e:	d802      	bhi.n	8103f86 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8103f80:	230b      	movs	r3, #11
 8103f82:	617b      	str	r3, [r7, #20]
 8103f84:	e030      	b.n	8103fe8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8103f86:	68bb      	ldr	r3, [r7, #8]
 8103f88:	4a27      	ldr	r2, [pc, #156]	; (8104028 <USB_SetTurnaroundTime+0x124>)
 8103f8a:	4293      	cmp	r3, r2
 8103f8c:	d906      	bls.n	8103f9c <USB_SetTurnaroundTime+0x98>
 8103f8e:	68bb      	ldr	r3, [r7, #8]
 8103f90:	4a26      	ldr	r2, [pc, #152]	; (810402c <USB_SetTurnaroundTime+0x128>)
 8103f92:	4293      	cmp	r3, r2
 8103f94:	d802      	bhi.n	8103f9c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8103f96:	230a      	movs	r3, #10
 8103f98:	617b      	str	r3, [r7, #20]
 8103f9a:	e025      	b.n	8103fe8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8103f9c:	68bb      	ldr	r3, [r7, #8]
 8103f9e:	4a23      	ldr	r2, [pc, #140]	; (810402c <USB_SetTurnaroundTime+0x128>)
 8103fa0:	4293      	cmp	r3, r2
 8103fa2:	d906      	bls.n	8103fb2 <USB_SetTurnaroundTime+0xae>
 8103fa4:	68bb      	ldr	r3, [r7, #8]
 8103fa6:	4a22      	ldr	r2, [pc, #136]	; (8104030 <USB_SetTurnaroundTime+0x12c>)
 8103fa8:	4293      	cmp	r3, r2
 8103faa:	d202      	bcs.n	8103fb2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8103fac:	2309      	movs	r3, #9
 8103fae:	617b      	str	r3, [r7, #20]
 8103fb0:	e01a      	b.n	8103fe8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8103fb2:	68bb      	ldr	r3, [r7, #8]
 8103fb4:	4a1e      	ldr	r2, [pc, #120]	; (8104030 <USB_SetTurnaroundTime+0x12c>)
 8103fb6:	4293      	cmp	r3, r2
 8103fb8:	d306      	bcc.n	8103fc8 <USB_SetTurnaroundTime+0xc4>
 8103fba:	68bb      	ldr	r3, [r7, #8]
 8103fbc:	4a1d      	ldr	r2, [pc, #116]	; (8104034 <USB_SetTurnaroundTime+0x130>)
 8103fbe:	4293      	cmp	r3, r2
 8103fc0:	d802      	bhi.n	8103fc8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8103fc2:	2308      	movs	r3, #8
 8103fc4:	617b      	str	r3, [r7, #20]
 8103fc6:	e00f      	b.n	8103fe8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8103fc8:	68bb      	ldr	r3, [r7, #8]
 8103fca:	4a1a      	ldr	r2, [pc, #104]	; (8104034 <USB_SetTurnaroundTime+0x130>)
 8103fcc:	4293      	cmp	r3, r2
 8103fce:	d906      	bls.n	8103fde <USB_SetTurnaroundTime+0xda>
 8103fd0:	68bb      	ldr	r3, [r7, #8]
 8103fd2:	4a19      	ldr	r2, [pc, #100]	; (8104038 <USB_SetTurnaroundTime+0x134>)
 8103fd4:	4293      	cmp	r3, r2
 8103fd6:	d202      	bcs.n	8103fde <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8103fd8:	2307      	movs	r3, #7
 8103fda:	617b      	str	r3, [r7, #20]
 8103fdc:	e004      	b.n	8103fe8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8103fde:	2306      	movs	r3, #6
 8103fe0:	617b      	str	r3, [r7, #20]
 8103fe2:	e001      	b.n	8103fe8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8103fe4:	2309      	movs	r3, #9
 8103fe6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8103fe8:	68fb      	ldr	r3, [r7, #12]
 8103fea:	68db      	ldr	r3, [r3, #12]
 8103fec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8103ff0:	68fb      	ldr	r3, [r7, #12]
 8103ff2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8103ff4:	68fb      	ldr	r3, [r7, #12]
 8103ff6:	68da      	ldr	r2, [r3, #12]
 8103ff8:	697b      	ldr	r3, [r7, #20]
 8103ffa:	029b      	lsls	r3, r3, #10
 8103ffc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8104000:	431a      	orrs	r2, r3
 8104002:	68fb      	ldr	r3, [r7, #12]
 8104004:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8104006:	2300      	movs	r3, #0
}
 8104008:	4618      	mov	r0, r3
 810400a:	371c      	adds	r7, #28
 810400c:	46bd      	mov	sp, r7
 810400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104012:	4770      	bx	lr
 8104014:	00d8acbf 	.word	0x00d8acbf
 8104018:	00e4e1c0 	.word	0x00e4e1c0
 810401c:	00f42400 	.word	0x00f42400
 8104020:	01067380 	.word	0x01067380
 8104024:	011a499f 	.word	0x011a499f
 8104028:	01312cff 	.word	0x01312cff
 810402c:	014ca43f 	.word	0x014ca43f
 8104030:	016e3600 	.word	0x016e3600
 8104034:	01a6ab1f 	.word	0x01a6ab1f
 8104038:	01e84800 	.word	0x01e84800

0810403c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 810403c:	b480      	push	{r7}
 810403e:	b083      	sub	sp, #12
 8104040:	af00      	add	r7, sp, #0
 8104042:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8104044:	687b      	ldr	r3, [r7, #4]
 8104046:	689b      	ldr	r3, [r3, #8]
 8104048:	f043 0201 	orr.w	r2, r3, #1
 810404c:	687b      	ldr	r3, [r7, #4]
 810404e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8104050:	2300      	movs	r3, #0
}
 8104052:	4618      	mov	r0, r3
 8104054:	370c      	adds	r7, #12
 8104056:	46bd      	mov	sp, r7
 8104058:	f85d 7b04 	ldr.w	r7, [sp], #4
 810405c:	4770      	bx	lr

0810405e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 810405e:	b480      	push	{r7}
 8104060:	b083      	sub	sp, #12
 8104062:	af00      	add	r7, sp, #0
 8104064:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8104066:	687b      	ldr	r3, [r7, #4]
 8104068:	689b      	ldr	r3, [r3, #8]
 810406a:	f023 0201 	bic.w	r2, r3, #1
 810406e:	687b      	ldr	r3, [r7, #4]
 8104070:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8104072:	2300      	movs	r3, #0
}
 8104074:	4618      	mov	r0, r3
 8104076:	370c      	adds	r7, #12
 8104078:	46bd      	mov	sp, r7
 810407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810407e:	4770      	bx	lr

08104080 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8104080:	b580      	push	{r7, lr}
 8104082:	b084      	sub	sp, #16
 8104084:	af00      	add	r7, sp, #0
 8104086:	6078      	str	r0, [r7, #4]
 8104088:	460b      	mov	r3, r1
 810408a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 810408c:	2300      	movs	r3, #0
 810408e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8104090:	687b      	ldr	r3, [r7, #4]
 8104092:	68db      	ldr	r3, [r3, #12]
 8104094:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8104098:	687b      	ldr	r3, [r7, #4]
 810409a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 810409c:	78fb      	ldrb	r3, [r7, #3]
 810409e:	2b01      	cmp	r3, #1
 81040a0:	d115      	bne.n	81040ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 81040a2:	687b      	ldr	r3, [r7, #4]
 81040a4:	68db      	ldr	r3, [r3, #12]
 81040a6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 81040aa:	687b      	ldr	r3, [r7, #4]
 81040ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 81040ae:	2001      	movs	r0, #1
 81040b0:	f7fc fab8 	bl	8100624 <HAL_Delay>
      ms++;
 81040b4:	68fb      	ldr	r3, [r7, #12]
 81040b6:	3301      	adds	r3, #1
 81040b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 81040ba:	6878      	ldr	r0, [r7, #4]
 81040bc:	f001 f985 	bl	81053ca <USB_GetMode>
 81040c0:	4603      	mov	r3, r0
 81040c2:	2b01      	cmp	r3, #1
 81040c4:	d01e      	beq.n	8104104 <USB_SetCurrentMode+0x84>
 81040c6:	68fb      	ldr	r3, [r7, #12]
 81040c8:	2b31      	cmp	r3, #49	; 0x31
 81040ca:	d9f0      	bls.n	81040ae <USB_SetCurrentMode+0x2e>
 81040cc:	e01a      	b.n	8104104 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 81040ce:	78fb      	ldrb	r3, [r7, #3]
 81040d0:	2b00      	cmp	r3, #0
 81040d2:	d115      	bne.n	8104100 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 81040d4:	687b      	ldr	r3, [r7, #4]
 81040d6:	68db      	ldr	r3, [r3, #12]
 81040d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 81040dc:	687b      	ldr	r3, [r7, #4]
 81040de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 81040e0:	2001      	movs	r0, #1
 81040e2:	f7fc fa9f 	bl	8100624 <HAL_Delay>
      ms++;
 81040e6:	68fb      	ldr	r3, [r7, #12]
 81040e8:	3301      	adds	r3, #1
 81040ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 81040ec:	6878      	ldr	r0, [r7, #4]
 81040ee:	f001 f96c 	bl	81053ca <USB_GetMode>
 81040f2:	4603      	mov	r3, r0
 81040f4:	2b00      	cmp	r3, #0
 81040f6:	d005      	beq.n	8104104 <USB_SetCurrentMode+0x84>
 81040f8:	68fb      	ldr	r3, [r7, #12]
 81040fa:	2b31      	cmp	r3, #49	; 0x31
 81040fc:	d9f0      	bls.n	81040e0 <USB_SetCurrentMode+0x60>
 81040fe:	e001      	b.n	8104104 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8104100:	2301      	movs	r3, #1
 8104102:	e005      	b.n	8104110 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8104104:	68fb      	ldr	r3, [r7, #12]
 8104106:	2b32      	cmp	r3, #50	; 0x32
 8104108:	d101      	bne.n	810410e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 810410a:	2301      	movs	r3, #1
 810410c:	e000      	b.n	8104110 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 810410e:	2300      	movs	r3, #0
}
 8104110:	4618      	mov	r0, r3
 8104112:	3710      	adds	r7, #16
 8104114:	46bd      	mov	sp, r7
 8104116:	bd80      	pop	{r7, pc}

08104118 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8104118:	b084      	sub	sp, #16
 810411a:	b580      	push	{r7, lr}
 810411c:	b086      	sub	sp, #24
 810411e:	af00      	add	r7, sp, #0
 8104120:	6078      	str	r0, [r7, #4]
 8104122:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8104126:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 810412a:	2300      	movs	r3, #0
 810412c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810412e:	687b      	ldr	r3, [r7, #4]
 8104130:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8104132:	2300      	movs	r3, #0
 8104134:	613b      	str	r3, [r7, #16]
 8104136:	e009      	b.n	810414c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8104138:	687a      	ldr	r2, [r7, #4]
 810413a:	693b      	ldr	r3, [r7, #16]
 810413c:	3340      	adds	r3, #64	; 0x40
 810413e:	009b      	lsls	r3, r3, #2
 8104140:	4413      	add	r3, r2
 8104142:	2200      	movs	r2, #0
 8104144:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8104146:	693b      	ldr	r3, [r7, #16]
 8104148:	3301      	adds	r3, #1
 810414a:	613b      	str	r3, [r7, #16]
 810414c:	693b      	ldr	r3, [r7, #16]
 810414e:	2b0e      	cmp	r3, #14
 8104150:	d9f2      	bls.n	8104138 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8104152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8104154:	2b00      	cmp	r3, #0
 8104156:	d11c      	bne.n	8104192 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8104158:	68fb      	ldr	r3, [r7, #12]
 810415a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810415e:	685b      	ldr	r3, [r3, #4]
 8104160:	68fa      	ldr	r2, [r7, #12]
 8104162:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8104166:	f043 0302 	orr.w	r3, r3, #2
 810416a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 810416c:	687b      	ldr	r3, [r7, #4]
 810416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104170:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8104174:	687b      	ldr	r3, [r7, #4]
 8104176:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8104178:	687b      	ldr	r3, [r7, #4]
 810417a:	681b      	ldr	r3, [r3, #0]
 810417c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8104180:	687b      	ldr	r3, [r7, #4]
 8104182:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8104184:	687b      	ldr	r3, [r7, #4]
 8104186:	681b      	ldr	r3, [r3, #0]
 8104188:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810418c:	687b      	ldr	r3, [r7, #4]
 810418e:	601a      	str	r2, [r3, #0]
 8104190:	e005      	b.n	810419e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8104192:	687b      	ldr	r3, [r7, #4]
 8104194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104196:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 810419a:	687b      	ldr	r3, [r7, #4]
 810419c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 810419e:	68fb      	ldr	r3, [r7, #12]
 81041a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 81041a4:	461a      	mov	r2, r3
 81041a6:	2300      	movs	r3, #0
 81041a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 81041aa:	68fb      	ldr	r3, [r7, #12]
 81041ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81041b0:	4619      	mov	r1, r3
 81041b2:	68fb      	ldr	r3, [r7, #12]
 81041b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81041b8:	461a      	mov	r2, r3
 81041ba:	680b      	ldr	r3, [r1, #0]
 81041bc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 81041be:	2103      	movs	r1, #3
 81041c0:	6878      	ldr	r0, [r7, #4]
 81041c2:	f000 f959 	bl	8104478 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 81041c6:	2110      	movs	r1, #16
 81041c8:	6878      	ldr	r0, [r7, #4]
 81041ca:	f000 f8f1 	bl	81043b0 <USB_FlushTxFifo>
 81041ce:	4603      	mov	r3, r0
 81041d0:	2b00      	cmp	r3, #0
 81041d2:	d001      	beq.n	81041d8 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 81041d4:	2301      	movs	r3, #1
 81041d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 81041d8:	6878      	ldr	r0, [r7, #4]
 81041da:	f000 f91d 	bl	8104418 <USB_FlushRxFifo>
 81041de:	4603      	mov	r3, r0
 81041e0:	2b00      	cmp	r3, #0
 81041e2:	d001      	beq.n	81041e8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 81041e4:	2301      	movs	r3, #1
 81041e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 81041e8:	68fb      	ldr	r3, [r7, #12]
 81041ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81041ee:	461a      	mov	r2, r3
 81041f0:	2300      	movs	r3, #0
 81041f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 81041f4:	68fb      	ldr	r3, [r7, #12]
 81041f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81041fa:	461a      	mov	r2, r3
 81041fc:	2300      	movs	r3, #0
 81041fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8104200:	68fb      	ldr	r3, [r7, #12]
 8104202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8104206:	461a      	mov	r2, r3
 8104208:	2300      	movs	r3, #0
 810420a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 810420c:	2300      	movs	r3, #0
 810420e:	613b      	str	r3, [r7, #16]
 8104210:	e043      	b.n	810429a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8104212:	693b      	ldr	r3, [r7, #16]
 8104214:	015a      	lsls	r2, r3, #5
 8104216:	68fb      	ldr	r3, [r7, #12]
 8104218:	4413      	add	r3, r2
 810421a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810421e:	681b      	ldr	r3, [r3, #0]
 8104220:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8104224:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8104228:	d118      	bne.n	810425c <USB_DevInit+0x144>
    {
      if (i == 0U)
 810422a:	693b      	ldr	r3, [r7, #16]
 810422c:	2b00      	cmp	r3, #0
 810422e:	d10a      	bne.n	8104246 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8104230:	693b      	ldr	r3, [r7, #16]
 8104232:	015a      	lsls	r2, r3, #5
 8104234:	68fb      	ldr	r3, [r7, #12]
 8104236:	4413      	add	r3, r2
 8104238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810423c:	461a      	mov	r2, r3
 810423e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8104242:	6013      	str	r3, [r2, #0]
 8104244:	e013      	b.n	810426e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8104246:	693b      	ldr	r3, [r7, #16]
 8104248:	015a      	lsls	r2, r3, #5
 810424a:	68fb      	ldr	r3, [r7, #12]
 810424c:	4413      	add	r3, r2
 810424e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104252:	461a      	mov	r2, r3
 8104254:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8104258:	6013      	str	r3, [r2, #0]
 810425a:	e008      	b.n	810426e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 810425c:	693b      	ldr	r3, [r7, #16]
 810425e:	015a      	lsls	r2, r3, #5
 8104260:	68fb      	ldr	r3, [r7, #12]
 8104262:	4413      	add	r3, r2
 8104264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104268:	461a      	mov	r2, r3
 810426a:	2300      	movs	r3, #0
 810426c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 810426e:	693b      	ldr	r3, [r7, #16]
 8104270:	015a      	lsls	r2, r3, #5
 8104272:	68fb      	ldr	r3, [r7, #12]
 8104274:	4413      	add	r3, r2
 8104276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810427a:	461a      	mov	r2, r3
 810427c:	2300      	movs	r3, #0
 810427e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8104280:	693b      	ldr	r3, [r7, #16]
 8104282:	015a      	lsls	r2, r3, #5
 8104284:	68fb      	ldr	r3, [r7, #12]
 8104286:	4413      	add	r3, r2
 8104288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810428c:	461a      	mov	r2, r3
 810428e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8104292:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8104294:	693b      	ldr	r3, [r7, #16]
 8104296:	3301      	adds	r3, #1
 8104298:	613b      	str	r3, [r7, #16]
 810429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810429c:	693a      	ldr	r2, [r7, #16]
 810429e:	429a      	cmp	r2, r3
 81042a0:	d3b7      	bcc.n	8104212 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 81042a2:	2300      	movs	r3, #0
 81042a4:	613b      	str	r3, [r7, #16]
 81042a6:	e043      	b.n	8104330 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 81042a8:	693b      	ldr	r3, [r7, #16]
 81042aa:	015a      	lsls	r2, r3, #5
 81042ac:	68fb      	ldr	r3, [r7, #12]
 81042ae:	4413      	add	r3, r2
 81042b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81042b4:	681b      	ldr	r3, [r3, #0]
 81042b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 81042ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 81042be:	d118      	bne.n	81042f2 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 81042c0:	693b      	ldr	r3, [r7, #16]
 81042c2:	2b00      	cmp	r3, #0
 81042c4:	d10a      	bne.n	81042dc <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 81042c6:	693b      	ldr	r3, [r7, #16]
 81042c8:	015a      	lsls	r2, r3, #5
 81042ca:	68fb      	ldr	r3, [r7, #12]
 81042cc:	4413      	add	r3, r2
 81042ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81042d2:	461a      	mov	r2, r3
 81042d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 81042d8:	6013      	str	r3, [r2, #0]
 81042da:	e013      	b.n	8104304 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 81042dc:	693b      	ldr	r3, [r7, #16]
 81042de:	015a      	lsls	r2, r3, #5
 81042e0:	68fb      	ldr	r3, [r7, #12]
 81042e2:	4413      	add	r3, r2
 81042e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81042e8:	461a      	mov	r2, r3
 81042ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 81042ee:	6013      	str	r3, [r2, #0]
 81042f0:	e008      	b.n	8104304 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 81042f2:	693b      	ldr	r3, [r7, #16]
 81042f4:	015a      	lsls	r2, r3, #5
 81042f6:	68fb      	ldr	r3, [r7, #12]
 81042f8:	4413      	add	r3, r2
 81042fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81042fe:	461a      	mov	r2, r3
 8104300:	2300      	movs	r3, #0
 8104302:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8104304:	693b      	ldr	r3, [r7, #16]
 8104306:	015a      	lsls	r2, r3, #5
 8104308:	68fb      	ldr	r3, [r7, #12]
 810430a:	4413      	add	r3, r2
 810430c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104310:	461a      	mov	r2, r3
 8104312:	2300      	movs	r3, #0
 8104314:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8104316:	693b      	ldr	r3, [r7, #16]
 8104318:	015a      	lsls	r2, r3, #5
 810431a:	68fb      	ldr	r3, [r7, #12]
 810431c:	4413      	add	r3, r2
 810431e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104322:	461a      	mov	r2, r3
 8104324:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8104328:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 810432a:	693b      	ldr	r3, [r7, #16]
 810432c:	3301      	adds	r3, #1
 810432e:	613b      	str	r3, [r7, #16]
 8104330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104332:	693a      	ldr	r2, [r7, #16]
 8104334:	429a      	cmp	r2, r3
 8104336:	d3b7      	bcc.n	81042a8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8104338:	68fb      	ldr	r3, [r7, #12]
 810433a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810433e:	691b      	ldr	r3, [r3, #16]
 8104340:	68fa      	ldr	r2, [r7, #12]
 8104342:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8104346:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810434a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 810434c:	687b      	ldr	r3, [r7, #4]
 810434e:	2200      	movs	r2, #0
 8104350:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8104352:	687b      	ldr	r3, [r7, #4]
 8104354:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8104358:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 810435a:	687b      	ldr	r3, [r7, #4]
 810435c:	699b      	ldr	r3, [r3, #24]
 810435e:	f043 0210 	orr.w	r2, r3, #16
 8104362:	687b      	ldr	r3, [r7, #4]
 8104364:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8104366:	687b      	ldr	r3, [r7, #4]
 8104368:	699a      	ldr	r2, [r3, #24]
 810436a:	4b10      	ldr	r3, [pc, #64]	; (81043ac <USB_DevInit+0x294>)
 810436c:	4313      	orrs	r3, r2
 810436e:	687a      	ldr	r2, [r7, #4]
 8104370:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8104372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8104374:	2b00      	cmp	r3, #0
 8104376:	d005      	beq.n	8104384 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8104378:	687b      	ldr	r3, [r7, #4]
 810437a:	699b      	ldr	r3, [r3, #24]
 810437c:	f043 0208 	orr.w	r2, r3, #8
 8104380:	687b      	ldr	r3, [r7, #4]
 8104382:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8104384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8104386:	2b01      	cmp	r3, #1
 8104388:	d107      	bne.n	810439a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 810438a:	687b      	ldr	r3, [r7, #4]
 810438c:	699b      	ldr	r3, [r3, #24]
 810438e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8104392:	f043 0304 	orr.w	r3, r3, #4
 8104396:	687a      	ldr	r2, [r7, #4]
 8104398:	6193      	str	r3, [r2, #24]
  }

  return ret;
 810439a:	7dfb      	ldrb	r3, [r7, #23]
}
 810439c:	4618      	mov	r0, r3
 810439e:	3718      	adds	r7, #24
 81043a0:	46bd      	mov	sp, r7
 81043a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 81043a6:	b004      	add	sp, #16
 81043a8:	4770      	bx	lr
 81043aa:	bf00      	nop
 81043ac:	803c3800 	.word	0x803c3800

081043b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 81043b0:	b480      	push	{r7}
 81043b2:	b085      	sub	sp, #20
 81043b4:	af00      	add	r7, sp, #0
 81043b6:	6078      	str	r0, [r7, #4]
 81043b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 81043ba:	2300      	movs	r3, #0
 81043bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 81043be:	68fb      	ldr	r3, [r7, #12]
 81043c0:	3301      	adds	r3, #1
 81043c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 81043c4:	68fb      	ldr	r3, [r7, #12]
 81043c6:	4a13      	ldr	r2, [pc, #76]	; (8104414 <USB_FlushTxFifo+0x64>)
 81043c8:	4293      	cmp	r3, r2
 81043ca:	d901      	bls.n	81043d0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 81043cc:	2303      	movs	r3, #3
 81043ce:	e01b      	b.n	8104408 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 81043d0:	687b      	ldr	r3, [r7, #4]
 81043d2:	691b      	ldr	r3, [r3, #16]
 81043d4:	2b00      	cmp	r3, #0
 81043d6:	daf2      	bge.n	81043be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 81043d8:	2300      	movs	r3, #0
 81043da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 81043dc:	683b      	ldr	r3, [r7, #0]
 81043de:	019b      	lsls	r3, r3, #6
 81043e0:	f043 0220 	orr.w	r2, r3, #32
 81043e4:	687b      	ldr	r3, [r7, #4]
 81043e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 81043e8:	68fb      	ldr	r3, [r7, #12]
 81043ea:	3301      	adds	r3, #1
 81043ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 81043ee:	68fb      	ldr	r3, [r7, #12]
 81043f0:	4a08      	ldr	r2, [pc, #32]	; (8104414 <USB_FlushTxFifo+0x64>)
 81043f2:	4293      	cmp	r3, r2
 81043f4:	d901      	bls.n	81043fa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 81043f6:	2303      	movs	r3, #3
 81043f8:	e006      	b.n	8104408 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 81043fa:	687b      	ldr	r3, [r7, #4]
 81043fc:	691b      	ldr	r3, [r3, #16]
 81043fe:	f003 0320 	and.w	r3, r3, #32
 8104402:	2b20      	cmp	r3, #32
 8104404:	d0f0      	beq.n	81043e8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8104406:	2300      	movs	r3, #0
}
 8104408:	4618      	mov	r0, r3
 810440a:	3714      	adds	r7, #20
 810440c:	46bd      	mov	sp, r7
 810440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104412:	4770      	bx	lr
 8104414:	00030d40 	.word	0x00030d40

08104418 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8104418:	b480      	push	{r7}
 810441a:	b085      	sub	sp, #20
 810441c:	af00      	add	r7, sp, #0
 810441e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8104420:	2300      	movs	r3, #0
 8104422:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8104424:	68fb      	ldr	r3, [r7, #12]
 8104426:	3301      	adds	r3, #1
 8104428:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 810442a:	68fb      	ldr	r3, [r7, #12]
 810442c:	4a11      	ldr	r2, [pc, #68]	; (8104474 <USB_FlushRxFifo+0x5c>)
 810442e:	4293      	cmp	r3, r2
 8104430:	d901      	bls.n	8104436 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8104432:	2303      	movs	r3, #3
 8104434:	e018      	b.n	8104468 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8104436:	687b      	ldr	r3, [r7, #4]
 8104438:	691b      	ldr	r3, [r3, #16]
 810443a:	2b00      	cmp	r3, #0
 810443c:	daf2      	bge.n	8104424 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 810443e:	2300      	movs	r3, #0
 8104440:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8104442:	687b      	ldr	r3, [r7, #4]
 8104444:	2210      	movs	r2, #16
 8104446:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8104448:	68fb      	ldr	r3, [r7, #12]
 810444a:	3301      	adds	r3, #1
 810444c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 810444e:	68fb      	ldr	r3, [r7, #12]
 8104450:	4a08      	ldr	r2, [pc, #32]	; (8104474 <USB_FlushRxFifo+0x5c>)
 8104452:	4293      	cmp	r3, r2
 8104454:	d901      	bls.n	810445a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8104456:	2303      	movs	r3, #3
 8104458:	e006      	b.n	8104468 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 810445a:	687b      	ldr	r3, [r7, #4]
 810445c:	691b      	ldr	r3, [r3, #16]
 810445e:	f003 0310 	and.w	r3, r3, #16
 8104462:	2b10      	cmp	r3, #16
 8104464:	d0f0      	beq.n	8104448 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8104466:	2300      	movs	r3, #0
}
 8104468:	4618      	mov	r0, r3
 810446a:	3714      	adds	r7, #20
 810446c:	46bd      	mov	sp, r7
 810446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104472:	4770      	bx	lr
 8104474:	00030d40 	.word	0x00030d40

08104478 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8104478:	b480      	push	{r7}
 810447a:	b085      	sub	sp, #20
 810447c:	af00      	add	r7, sp, #0
 810447e:	6078      	str	r0, [r7, #4]
 8104480:	460b      	mov	r3, r1
 8104482:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8104484:	687b      	ldr	r3, [r7, #4]
 8104486:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8104488:	68fb      	ldr	r3, [r7, #12]
 810448a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810448e:	681a      	ldr	r2, [r3, #0]
 8104490:	78fb      	ldrb	r3, [r7, #3]
 8104492:	68f9      	ldr	r1, [r7, #12]
 8104494:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8104498:	4313      	orrs	r3, r2
 810449a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 810449c:	2300      	movs	r3, #0
}
 810449e:	4618      	mov	r0, r3
 81044a0:	3714      	adds	r7, #20
 81044a2:	46bd      	mov	sp, r7
 81044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044a8:	4770      	bx	lr

081044aa <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 81044aa:	b480      	push	{r7}
 81044ac:	b087      	sub	sp, #28
 81044ae:	af00      	add	r7, sp, #0
 81044b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81044b2:	687b      	ldr	r3, [r7, #4]
 81044b4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 81044b6:	693b      	ldr	r3, [r7, #16]
 81044b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81044bc:	689b      	ldr	r3, [r3, #8]
 81044be:	f003 0306 	and.w	r3, r3, #6
 81044c2:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 81044c4:	68fb      	ldr	r3, [r7, #12]
 81044c6:	2b02      	cmp	r3, #2
 81044c8:	d002      	beq.n	81044d0 <USB_GetDevSpeed+0x26>
 81044ca:	68fb      	ldr	r3, [r7, #12]
 81044cc:	2b06      	cmp	r3, #6
 81044ce:	d102      	bne.n	81044d6 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 81044d0:	2302      	movs	r3, #2
 81044d2:	75fb      	strb	r3, [r7, #23]
 81044d4:	e001      	b.n	81044da <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 81044d6:	230f      	movs	r3, #15
 81044d8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 81044da:	7dfb      	ldrb	r3, [r7, #23]
}
 81044dc:	4618      	mov	r0, r3
 81044de:	371c      	adds	r7, #28
 81044e0:	46bd      	mov	sp, r7
 81044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044e6:	4770      	bx	lr

081044e8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 81044e8:	b480      	push	{r7}
 81044ea:	b085      	sub	sp, #20
 81044ec:	af00      	add	r7, sp, #0
 81044ee:	6078      	str	r0, [r7, #4]
 81044f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81044f2:	687b      	ldr	r3, [r7, #4]
 81044f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 81044f6:	683b      	ldr	r3, [r7, #0]
 81044f8:	781b      	ldrb	r3, [r3, #0]
 81044fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 81044fc:	683b      	ldr	r3, [r7, #0]
 81044fe:	785b      	ldrb	r3, [r3, #1]
 8104500:	2b01      	cmp	r3, #1
 8104502:	d13a      	bne.n	810457a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8104504:	68fb      	ldr	r3, [r7, #12]
 8104506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810450a:	69da      	ldr	r2, [r3, #28]
 810450c:	683b      	ldr	r3, [r7, #0]
 810450e:	781b      	ldrb	r3, [r3, #0]
 8104510:	f003 030f 	and.w	r3, r3, #15
 8104514:	2101      	movs	r1, #1
 8104516:	fa01 f303 	lsl.w	r3, r1, r3
 810451a:	b29b      	uxth	r3, r3
 810451c:	68f9      	ldr	r1, [r7, #12]
 810451e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8104522:	4313      	orrs	r3, r2
 8104524:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8104526:	68bb      	ldr	r3, [r7, #8]
 8104528:	015a      	lsls	r2, r3, #5
 810452a:	68fb      	ldr	r3, [r7, #12]
 810452c:	4413      	add	r3, r2
 810452e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104532:	681b      	ldr	r3, [r3, #0]
 8104534:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8104538:	2b00      	cmp	r3, #0
 810453a:	d155      	bne.n	81045e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 810453c:	68bb      	ldr	r3, [r7, #8]
 810453e:	015a      	lsls	r2, r3, #5
 8104540:	68fb      	ldr	r3, [r7, #12]
 8104542:	4413      	add	r3, r2
 8104544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104548:	681a      	ldr	r2, [r3, #0]
 810454a:	683b      	ldr	r3, [r7, #0]
 810454c:	68db      	ldr	r3, [r3, #12]
 810454e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8104552:	683b      	ldr	r3, [r7, #0]
 8104554:	791b      	ldrb	r3, [r3, #4]
 8104556:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8104558:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 810455a:	68bb      	ldr	r3, [r7, #8]
 810455c:	059b      	lsls	r3, r3, #22
 810455e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8104560:	4313      	orrs	r3, r2
 8104562:	68ba      	ldr	r2, [r7, #8]
 8104564:	0151      	lsls	r1, r2, #5
 8104566:	68fa      	ldr	r2, [r7, #12]
 8104568:	440a      	add	r2, r1
 810456a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 810456e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8104572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8104576:	6013      	str	r3, [r2, #0]
 8104578:	e036      	b.n	81045e8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 810457a:	68fb      	ldr	r3, [r7, #12]
 810457c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8104580:	69da      	ldr	r2, [r3, #28]
 8104582:	683b      	ldr	r3, [r7, #0]
 8104584:	781b      	ldrb	r3, [r3, #0]
 8104586:	f003 030f 	and.w	r3, r3, #15
 810458a:	2101      	movs	r1, #1
 810458c:	fa01 f303 	lsl.w	r3, r1, r3
 8104590:	041b      	lsls	r3, r3, #16
 8104592:	68f9      	ldr	r1, [r7, #12]
 8104594:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8104598:	4313      	orrs	r3, r2
 810459a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 810459c:	68bb      	ldr	r3, [r7, #8]
 810459e:	015a      	lsls	r2, r3, #5
 81045a0:	68fb      	ldr	r3, [r7, #12]
 81045a2:	4413      	add	r3, r2
 81045a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81045a8:	681b      	ldr	r3, [r3, #0]
 81045aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81045ae:	2b00      	cmp	r3, #0
 81045b0:	d11a      	bne.n	81045e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 81045b2:	68bb      	ldr	r3, [r7, #8]
 81045b4:	015a      	lsls	r2, r3, #5
 81045b6:	68fb      	ldr	r3, [r7, #12]
 81045b8:	4413      	add	r3, r2
 81045ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81045be:	681a      	ldr	r2, [r3, #0]
 81045c0:	683b      	ldr	r3, [r7, #0]
 81045c2:	68db      	ldr	r3, [r3, #12]
 81045c4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 81045c8:	683b      	ldr	r3, [r7, #0]
 81045ca:	791b      	ldrb	r3, [r3, #4]
 81045cc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 81045ce:	430b      	orrs	r3, r1
 81045d0:	4313      	orrs	r3, r2
 81045d2:	68ba      	ldr	r2, [r7, #8]
 81045d4:	0151      	lsls	r1, r2, #5
 81045d6:	68fa      	ldr	r2, [r7, #12]
 81045d8:	440a      	add	r2, r1
 81045da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 81045de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81045e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81045e6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 81045e8:	2300      	movs	r3, #0
}
 81045ea:	4618      	mov	r0, r3
 81045ec:	3714      	adds	r7, #20
 81045ee:	46bd      	mov	sp, r7
 81045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81045f4:	4770      	bx	lr
	...

081045f8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 81045f8:	b480      	push	{r7}
 81045fa:	b085      	sub	sp, #20
 81045fc:	af00      	add	r7, sp, #0
 81045fe:	6078      	str	r0, [r7, #4]
 8104600:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8104602:	687b      	ldr	r3, [r7, #4]
 8104604:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8104606:	683b      	ldr	r3, [r7, #0]
 8104608:	781b      	ldrb	r3, [r3, #0]
 810460a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 810460c:	683b      	ldr	r3, [r7, #0]
 810460e:	785b      	ldrb	r3, [r3, #1]
 8104610:	2b01      	cmp	r3, #1
 8104612:	d161      	bne.n	81046d8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8104614:	68bb      	ldr	r3, [r7, #8]
 8104616:	015a      	lsls	r2, r3, #5
 8104618:	68fb      	ldr	r3, [r7, #12]
 810461a:	4413      	add	r3, r2
 810461c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104620:	681b      	ldr	r3, [r3, #0]
 8104622:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8104626:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 810462a:	d11f      	bne.n	810466c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 810462c:	68bb      	ldr	r3, [r7, #8]
 810462e:	015a      	lsls	r2, r3, #5
 8104630:	68fb      	ldr	r3, [r7, #12]
 8104632:	4413      	add	r3, r2
 8104634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104638:	681b      	ldr	r3, [r3, #0]
 810463a:	68ba      	ldr	r2, [r7, #8]
 810463c:	0151      	lsls	r1, r2, #5
 810463e:	68fa      	ldr	r2, [r7, #12]
 8104640:	440a      	add	r2, r1
 8104642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104646:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 810464a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 810464c:	68bb      	ldr	r3, [r7, #8]
 810464e:	015a      	lsls	r2, r3, #5
 8104650:	68fb      	ldr	r3, [r7, #12]
 8104652:	4413      	add	r3, r2
 8104654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104658:	681b      	ldr	r3, [r3, #0]
 810465a:	68ba      	ldr	r2, [r7, #8]
 810465c:	0151      	lsls	r1, r2, #5
 810465e:	68fa      	ldr	r2, [r7, #12]
 8104660:	440a      	add	r2, r1
 8104662:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104666:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 810466a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 810466c:	68fb      	ldr	r3, [r7, #12]
 810466e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8104672:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8104674:	683b      	ldr	r3, [r7, #0]
 8104676:	781b      	ldrb	r3, [r3, #0]
 8104678:	f003 030f 	and.w	r3, r3, #15
 810467c:	2101      	movs	r1, #1
 810467e:	fa01 f303 	lsl.w	r3, r1, r3
 8104682:	b29b      	uxth	r3, r3
 8104684:	43db      	mvns	r3, r3
 8104686:	68f9      	ldr	r1, [r7, #12]
 8104688:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 810468c:	4013      	ands	r3, r2
 810468e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8104690:	68fb      	ldr	r3, [r7, #12]
 8104692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8104696:	69da      	ldr	r2, [r3, #28]
 8104698:	683b      	ldr	r3, [r7, #0]
 810469a:	781b      	ldrb	r3, [r3, #0]
 810469c:	f003 030f 	and.w	r3, r3, #15
 81046a0:	2101      	movs	r1, #1
 81046a2:	fa01 f303 	lsl.w	r3, r1, r3
 81046a6:	b29b      	uxth	r3, r3
 81046a8:	43db      	mvns	r3, r3
 81046aa:	68f9      	ldr	r1, [r7, #12]
 81046ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 81046b0:	4013      	ands	r3, r2
 81046b2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 81046b4:	68bb      	ldr	r3, [r7, #8]
 81046b6:	015a      	lsls	r2, r3, #5
 81046b8:	68fb      	ldr	r3, [r7, #12]
 81046ba:	4413      	add	r3, r2
 81046bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81046c0:	681a      	ldr	r2, [r3, #0]
 81046c2:	68bb      	ldr	r3, [r7, #8]
 81046c4:	0159      	lsls	r1, r3, #5
 81046c6:	68fb      	ldr	r3, [r7, #12]
 81046c8:	440b      	add	r3, r1
 81046ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81046ce:	4619      	mov	r1, r3
 81046d0:	4b35      	ldr	r3, [pc, #212]	; (81047a8 <USB_DeactivateEndpoint+0x1b0>)
 81046d2:	4013      	ands	r3, r2
 81046d4:	600b      	str	r3, [r1, #0]
 81046d6:	e060      	b.n	810479a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 81046d8:	68bb      	ldr	r3, [r7, #8]
 81046da:	015a      	lsls	r2, r3, #5
 81046dc:	68fb      	ldr	r3, [r7, #12]
 81046de:	4413      	add	r3, r2
 81046e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81046e4:	681b      	ldr	r3, [r3, #0]
 81046e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 81046ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 81046ee:	d11f      	bne.n	8104730 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 81046f0:	68bb      	ldr	r3, [r7, #8]
 81046f2:	015a      	lsls	r2, r3, #5
 81046f4:	68fb      	ldr	r3, [r7, #12]
 81046f6:	4413      	add	r3, r2
 81046f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81046fc:	681b      	ldr	r3, [r3, #0]
 81046fe:	68ba      	ldr	r2, [r7, #8]
 8104700:	0151      	lsls	r1, r2, #5
 8104702:	68fa      	ldr	r2, [r7, #12]
 8104704:	440a      	add	r2, r1
 8104706:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 810470a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 810470e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8104710:	68bb      	ldr	r3, [r7, #8]
 8104712:	015a      	lsls	r2, r3, #5
 8104714:	68fb      	ldr	r3, [r7, #12]
 8104716:	4413      	add	r3, r2
 8104718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810471c:	681b      	ldr	r3, [r3, #0]
 810471e:	68ba      	ldr	r2, [r7, #8]
 8104720:	0151      	lsls	r1, r2, #5
 8104722:	68fa      	ldr	r2, [r7, #12]
 8104724:	440a      	add	r2, r1
 8104726:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 810472a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 810472e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8104730:	68fb      	ldr	r3, [r7, #12]
 8104732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8104736:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8104738:	683b      	ldr	r3, [r7, #0]
 810473a:	781b      	ldrb	r3, [r3, #0]
 810473c:	f003 030f 	and.w	r3, r3, #15
 8104740:	2101      	movs	r1, #1
 8104742:	fa01 f303 	lsl.w	r3, r1, r3
 8104746:	041b      	lsls	r3, r3, #16
 8104748:	43db      	mvns	r3, r3
 810474a:	68f9      	ldr	r1, [r7, #12]
 810474c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8104750:	4013      	ands	r3, r2
 8104752:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8104754:	68fb      	ldr	r3, [r7, #12]
 8104756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810475a:	69da      	ldr	r2, [r3, #28]
 810475c:	683b      	ldr	r3, [r7, #0]
 810475e:	781b      	ldrb	r3, [r3, #0]
 8104760:	f003 030f 	and.w	r3, r3, #15
 8104764:	2101      	movs	r1, #1
 8104766:	fa01 f303 	lsl.w	r3, r1, r3
 810476a:	041b      	lsls	r3, r3, #16
 810476c:	43db      	mvns	r3, r3
 810476e:	68f9      	ldr	r1, [r7, #12]
 8104770:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8104774:	4013      	ands	r3, r2
 8104776:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8104778:	68bb      	ldr	r3, [r7, #8]
 810477a:	015a      	lsls	r2, r3, #5
 810477c:	68fb      	ldr	r3, [r7, #12]
 810477e:	4413      	add	r3, r2
 8104780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104784:	681a      	ldr	r2, [r3, #0]
 8104786:	68bb      	ldr	r3, [r7, #8]
 8104788:	0159      	lsls	r1, r3, #5
 810478a:	68fb      	ldr	r3, [r7, #12]
 810478c:	440b      	add	r3, r1
 810478e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104792:	4619      	mov	r1, r3
 8104794:	4b05      	ldr	r3, [pc, #20]	; (81047ac <USB_DeactivateEndpoint+0x1b4>)
 8104796:	4013      	ands	r3, r2
 8104798:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 810479a:	2300      	movs	r3, #0
}
 810479c:	4618      	mov	r0, r3
 810479e:	3714      	adds	r7, #20
 81047a0:	46bd      	mov	sp, r7
 81047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047a6:	4770      	bx	lr
 81047a8:	ec337800 	.word	0xec337800
 81047ac:	eff37800 	.word	0xeff37800

081047b0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 81047b0:	b580      	push	{r7, lr}
 81047b2:	b086      	sub	sp, #24
 81047b4:	af00      	add	r7, sp, #0
 81047b6:	6078      	str	r0, [r7, #4]
 81047b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81047ba:	687b      	ldr	r3, [r7, #4]
 81047bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 81047be:	683b      	ldr	r3, [r7, #0]
 81047c0:	781b      	ldrb	r3, [r3, #0]
 81047c2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 81047c4:	683b      	ldr	r3, [r7, #0]
 81047c6:	785b      	ldrb	r3, [r3, #1]
 81047c8:	2b01      	cmp	r3, #1
 81047ca:	f040 810a 	bne.w	81049e2 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 81047ce:	683b      	ldr	r3, [r7, #0]
 81047d0:	699b      	ldr	r3, [r3, #24]
 81047d2:	2b00      	cmp	r3, #0
 81047d4:	d132      	bne.n	810483c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 81047d6:	693b      	ldr	r3, [r7, #16]
 81047d8:	015a      	lsls	r2, r3, #5
 81047da:	697b      	ldr	r3, [r7, #20]
 81047dc:	4413      	add	r3, r2
 81047de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81047e2:	691b      	ldr	r3, [r3, #16]
 81047e4:	693a      	ldr	r2, [r7, #16]
 81047e6:	0151      	lsls	r1, r2, #5
 81047e8:	697a      	ldr	r2, [r7, #20]
 81047ea:	440a      	add	r2, r1
 81047ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 81047f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 81047f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 81047f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 81047fa:	693b      	ldr	r3, [r7, #16]
 81047fc:	015a      	lsls	r2, r3, #5
 81047fe:	697b      	ldr	r3, [r7, #20]
 8104800:	4413      	add	r3, r2
 8104802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104806:	691b      	ldr	r3, [r3, #16]
 8104808:	693a      	ldr	r2, [r7, #16]
 810480a:	0151      	lsls	r1, r2, #5
 810480c:	697a      	ldr	r2, [r7, #20]
 810480e:	440a      	add	r2, r1
 8104810:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104814:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8104818:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 810481a:	693b      	ldr	r3, [r7, #16]
 810481c:	015a      	lsls	r2, r3, #5
 810481e:	697b      	ldr	r3, [r7, #20]
 8104820:	4413      	add	r3, r2
 8104822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104826:	691b      	ldr	r3, [r3, #16]
 8104828:	693a      	ldr	r2, [r7, #16]
 810482a:	0151      	lsls	r1, r2, #5
 810482c:	697a      	ldr	r2, [r7, #20]
 810482e:	440a      	add	r2, r1
 8104830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104834:	0cdb      	lsrs	r3, r3, #19
 8104836:	04db      	lsls	r3, r3, #19
 8104838:	6113      	str	r3, [r2, #16]
 810483a:	e074      	b.n	8104926 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 810483c:	693b      	ldr	r3, [r7, #16]
 810483e:	015a      	lsls	r2, r3, #5
 8104840:	697b      	ldr	r3, [r7, #20]
 8104842:	4413      	add	r3, r2
 8104844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104848:	691b      	ldr	r3, [r3, #16]
 810484a:	693a      	ldr	r2, [r7, #16]
 810484c:	0151      	lsls	r1, r2, #5
 810484e:	697a      	ldr	r2, [r7, #20]
 8104850:	440a      	add	r2, r1
 8104852:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104856:	0cdb      	lsrs	r3, r3, #19
 8104858:	04db      	lsls	r3, r3, #19
 810485a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 810485c:	693b      	ldr	r3, [r7, #16]
 810485e:	015a      	lsls	r2, r3, #5
 8104860:	697b      	ldr	r3, [r7, #20]
 8104862:	4413      	add	r3, r2
 8104864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104868:	691b      	ldr	r3, [r3, #16]
 810486a:	693a      	ldr	r2, [r7, #16]
 810486c:	0151      	lsls	r1, r2, #5
 810486e:	697a      	ldr	r2, [r7, #20]
 8104870:	440a      	add	r2, r1
 8104872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104876:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 810487a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 810487e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8104880:	693b      	ldr	r3, [r7, #16]
 8104882:	015a      	lsls	r2, r3, #5
 8104884:	697b      	ldr	r3, [r7, #20]
 8104886:	4413      	add	r3, r2
 8104888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810488c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 810488e:	683b      	ldr	r3, [r7, #0]
 8104890:	6999      	ldr	r1, [r3, #24]
 8104892:	683b      	ldr	r3, [r7, #0]
 8104894:	68db      	ldr	r3, [r3, #12]
 8104896:	440b      	add	r3, r1
 8104898:	1e59      	subs	r1, r3, #1
 810489a:	683b      	ldr	r3, [r7, #0]
 810489c:	68db      	ldr	r3, [r3, #12]
 810489e:	fbb1 f3f3 	udiv	r3, r1, r3
 81048a2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 81048a4:	4b9e      	ldr	r3, [pc, #632]	; (8104b20 <USB_EPStartXfer+0x370>)
 81048a6:	400b      	ands	r3, r1
 81048a8:	6939      	ldr	r1, [r7, #16]
 81048aa:	0148      	lsls	r0, r1, #5
 81048ac:	6979      	ldr	r1, [r7, #20]
 81048ae:	4401      	add	r1, r0
 81048b0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 81048b4:	4313      	orrs	r3, r2
 81048b6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 81048b8:	693b      	ldr	r3, [r7, #16]
 81048ba:	015a      	lsls	r2, r3, #5
 81048bc:	697b      	ldr	r3, [r7, #20]
 81048be:	4413      	add	r3, r2
 81048c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81048c4:	691a      	ldr	r2, [r3, #16]
 81048c6:	683b      	ldr	r3, [r7, #0]
 81048c8:	699b      	ldr	r3, [r3, #24]
 81048ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 81048ce:	6939      	ldr	r1, [r7, #16]
 81048d0:	0148      	lsls	r0, r1, #5
 81048d2:	6979      	ldr	r1, [r7, #20]
 81048d4:	4401      	add	r1, r0
 81048d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 81048da:	4313      	orrs	r3, r2
 81048dc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 81048de:	683b      	ldr	r3, [r7, #0]
 81048e0:	791b      	ldrb	r3, [r3, #4]
 81048e2:	2b01      	cmp	r3, #1
 81048e4:	d11f      	bne.n	8104926 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 81048e6:	693b      	ldr	r3, [r7, #16]
 81048e8:	015a      	lsls	r2, r3, #5
 81048ea:	697b      	ldr	r3, [r7, #20]
 81048ec:	4413      	add	r3, r2
 81048ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81048f2:	691b      	ldr	r3, [r3, #16]
 81048f4:	693a      	ldr	r2, [r7, #16]
 81048f6:	0151      	lsls	r1, r2, #5
 81048f8:	697a      	ldr	r2, [r7, #20]
 81048fa:	440a      	add	r2, r1
 81048fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104900:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8104904:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8104906:	693b      	ldr	r3, [r7, #16]
 8104908:	015a      	lsls	r2, r3, #5
 810490a:	697b      	ldr	r3, [r7, #20]
 810490c:	4413      	add	r3, r2
 810490e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104912:	691b      	ldr	r3, [r3, #16]
 8104914:	693a      	ldr	r2, [r7, #16]
 8104916:	0151      	lsls	r1, r2, #5
 8104918:	697a      	ldr	r2, [r7, #20]
 810491a:	440a      	add	r2, r1
 810491c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104920:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8104924:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8104926:	693b      	ldr	r3, [r7, #16]
 8104928:	015a      	lsls	r2, r3, #5
 810492a:	697b      	ldr	r3, [r7, #20]
 810492c:	4413      	add	r3, r2
 810492e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104932:	681b      	ldr	r3, [r3, #0]
 8104934:	693a      	ldr	r2, [r7, #16]
 8104936:	0151      	lsls	r1, r2, #5
 8104938:	697a      	ldr	r2, [r7, #20]
 810493a:	440a      	add	r2, r1
 810493c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104940:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8104944:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8104946:	683b      	ldr	r3, [r7, #0]
 8104948:	791b      	ldrb	r3, [r3, #4]
 810494a:	2b01      	cmp	r3, #1
 810494c:	d015      	beq.n	810497a <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 810494e:	683b      	ldr	r3, [r7, #0]
 8104950:	699b      	ldr	r3, [r3, #24]
 8104952:	2b00      	cmp	r3, #0
 8104954:	f000 8106 	beq.w	8104b64 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8104958:	697b      	ldr	r3, [r7, #20]
 810495a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810495e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8104960:	683b      	ldr	r3, [r7, #0]
 8104962:	781b      	ldrb	r3, [r3, #0]
 8104964:	f003 030f 	and.w	r3, r3, #15
 8104968:	2101      	movs	r1, #1
 810496a:	fa01 f303 	lsl.w	r3, r1, r3
 810496e:	6979      	ldr	r1, [r7, #20]
 8104970:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8104974:	4313      	orrs	r3, r2
 8104976:	634b      	str	r3, [r1, #52]	; 0x34
 8104978:	e0f4      	b.n	8104b64 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 810497a:	697b      	ldr	r3, [r7, #20]
 810497c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8104980:	689b      	ldr	r3, [r3, #8]
 8104982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104986:	2b00      	cmp	r3, #0
 8104988:	d110      	bne.n	81049ac <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 810498a:	693b      	ldr	r3, [r7, #16]
 810498c:	015a      	lsls	r2, r3, #5
 810498e:	697b      	ldr	r3, [r7, #20]
 8104990:	4413      	add	r3, r2
 8104992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104996:	681b      	ldr	r3, [r3, #0]
 8104998:	693a      	ldr	r2, [r7, #16]
 810499a:	0151      	lsls	r1, r2, #5
 810499c:	697a      	ldr	r2, [r7, #20]
 810499e:	440a      	add	r2, r1
 81049a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 81049a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 81049a8:	6013      	str	r3, [r2, #0]
 81049aa:	e00f      	b.n	81049cc <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 81049ac:	693b      	ldr	r3, [r7, #16]
 81049ae:	015a      	lsls	r2, r3, #5
 81049b0:	697b      	ldr	r3, [r7, #20]
 81049b2:	4413      	add	r3, r2
 81049b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81049b8:	681b      	ldr	r3, [r3, #0]
 81049ba:	693a      	ldr	r2, [r7, #16]
 81049bc:	0151      	lsls	r1, r2, #5
 81049be:	697a      	ldr	r2, [r7, #20]
 81049c0:	440a      	add	r2, r1
 81049c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 81049c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81049ca:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 81049cc:	683b      	ldr	r3, [r7, #0]
 81049ce:	6919      	ldr	r1, [r3, #16]
 81049d0:	683b      	ldr	r3, [r7, #0]
 81049d2:	781a      	ldrb	r2, [r3, #0]
 81049d4:	683b      	ldr	r3, [r7, #0]
 81049d6:	699b      	ldr	r3, [r3, #24]
 81049d8:	b29b      	uxth	r3, r3
 81049da:	6878      	ldr	r0, [r7, #4]
 81049dc:	f000 fa94 	bl	8104f08 <USB_WritePacket>
 81049e0:	e0c0      	b.n	8104b64 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 81049e2:	693b      	ldr	r3, [r7, #16]
 81049e4:	015a      	lsls	r2, r3, #5
 81049e6:	697b      	ldr	r3, [r7, #20]
 81049e8:	4413      	add	r3, r2
 81049ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81049ee:	691b      	ldr	r3, [r3, #16]
 81049f0:	693a      	ldr	r2, [r7, #16]
 81049f2:	0151      	lsls	r1, r2, #5
 81049f4:	697a      	ldr	r2, [r7, #20]
 81049f6:	440a      	add	r2, r1
 81049f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 81049fc:	0cdb      	lsrs	r3, r3, #19
 81049fe:	04db      	lsls	r3, r3, #19
 8104a00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8104a02:	693b      	ldr	r3, [r7, #16]
 8104a04:	015a      	lsls	r2, r3, #5
 8104a06:	697b      	ldr	r3, [r7, #20]
 8104a08:	4413      	add	r3, r2
 8104a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104a0e:	691b      	ldr	r3, [r3, #16]
 8104a10:	693a      	ldr	r2, [r7, #16]
 8104a12:	0151      	lsls	r1, r2, #5
 8104a14:	697a      	ldr	r2, [r7, #20]
 8104a16:	440a      	add	r2, r1
 8104a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8104a1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8104a20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8104a24:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8104a26:	683b      	ldr	r3, [r7, #0]
 8104a28:	699b      	ldr	r3, [r3, #24]
 8104a2a:	2b00      	cmp	r3, #0
 8104a2c:	d123      	bne.n	8104a76 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8104a2e:	693b      	ldr	r3, [r7, #16]
 8104a30:	015a      	lsls	r2, r3, #5
 8104a32:	697b      	ldr	r3, [r7, #20]
 8104a34:	4413      	add	r3, r2
 8104a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104a3a:	691a      	ldr	r2, [r3, #16]
 8104a3c:	683b      	ldr	r3, [r7, #0]
 8104a3e:	68db      	ldr	r3, [r3, #12]
 8104a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8104a44:	6939      	ldr	r1, [r7, #16]
 8104a46:	0148      	lsls	r0, r1, #5
 8104a48:	6979      	ldr	r1, [r7, #20]
 8104a4a:	4401      	add	r1, r0
 8104a4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8104a50:	4313      	orrs	r3, r2
 8104a52:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8104a54:	693b      	ldr	r3, [r7, #16]
 8104a56:	015a      	lsls	r2, r3, #5
 8104a58:	697b      	ldr	r3, [r7, #20]
 8104a5a:	4413      	add	r3, r2
 8104a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104a60:	691b      	ldr	r3, [r3, #16]
 8104a62:	693a      	ldr	r2, [r7, #16]
 8104a64:	0151      	lsls	r1, r2, #5
 8104a66:	697a      	ldr	r2, [r7, #20]
 8104a68:	440a      	add	r2, r1
 8104a6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8104a6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8104a72:	6113      	str	r3, [r2, #16]
 8104a74:	e037      	b.n	8104ae6 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8104a76:	683b      	ldr	r3, [r7, #0]
 8104a78:	699a      	ldr	r2, [r3, #24]
 8104a7a:	683b      	ldr	r3, [r7, #0]
 8104a7c:	68db      	ldr	r3, [r3, #12]
 8104a7e:	4413      	add	r3, r2
 8104a80:	1e5a      	subs	r2, r3, #1
 8104a82:	683b      	ldr	r3, [r7, #0]
 8104a84:	68db      	ldr	r3, [r3, #12]
 8104a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8104a8a:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8104a8c:	683b      	ldr	r3, [r7, #0]
 8104a8e:	68db      	ldr	r3, [r3, #12]
 8104a90:	89fa      	ldrh	r2, [r7, #14]
 8104a92:	fb03 f202 	mul.w	r2, r3, r2
 8104a96:	683b      	ldr	r3, [r7, #0]
 8104a98:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8104a9a:	693b      	ldr	r3, [r7, #16]
 8104a9c:	015a      	lsls	r2, r3, #5
 8104a9e:	697b      	ldr	r3, [r7, #20]
 8104aa0:	4413      	add	r3, r2
 8104aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104aa6:	691a      	ldr	r2, [r3, #16]
 8104aa8:	89fb      	ldrh	r3, [r7, #14]
 8104aaa:	04d9      	lsls	r1, r3, #19
 8104aac:	4b1c      	ldr	r3, [pc, #112]	; (8104b20 <USB_EPStartXfer+0x370>)
 8104aae:	400b      	ands	r3, r1
 8104ab0:	6939      	ldr	r1, [r7, #16]
 8104ab2:	0148      	lsls	r0, r1, #5
 8104ab4:	6979      	ldr	r1, [r7, #20]
 8104ab6:	4401      	add	r1, r0
 8104ab8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8104abc:	4313      	orrs	r3, r2
 8104abe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8104ac0:	693b      	ldr	r3, [r7, #16]
 8104ac2:	015a      	lsls	r2, r3, #5
 8104ac4:	697b      	ldr	r3, [r7, #20]
 8104ac6:	4413      	add	r3, r2
 8104ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104acc:	691a      	ldr	r2, [r3, #16]
 8104ace:	683b      	ldr	r3, [r7, #0]
 8104ad0:	69db      	ldr	r3, [r3, #28]
 8104ad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8104ad6:	6939      	ldr	r1, [r7, #16]
 8104ad8:	0148      	lsls	r0, r1, #5
 8104ada:	6979      	ldr	r1, [r7, #20]
 8104adc:	4401      	add	r1, r0
 8104ade:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8104ae2:	4313      	orrs	r3, r2
 8104ae4:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8104ae6:	683b      	ldr	r3, [r7, #0]
 8104ae8:	791b      	ldrb	r3, [r3, #4]
 8104aea:	2b01      	cmp	r3, #1
 8104aec:	d12a      	bne.n	8104b44 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8104aee:	697b      	ldr	r3, [r7, #20]
 8104af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8104af4:	689b      	ldr	r3, [r3, #8]
 8104af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104afa:	2b00      	cmp	r3, #0
 8104afc:	d112      	bne.n	8104b24 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8104afe:	693b      	ldr	r3, [r7, #16]
 8104b00:	015a      	lsls	r2, r3, #5
 8104b02:	697b      	ldr	r3, [r7, #20]
 8104b04:	4413      	add	r3, r2
 8104b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104b0a:	681b      	ldr	r3, [r3, #0]
 8104b0c:	693a      	ldr	r2, [r7, #16]
 8104b0e:	0151      	lsls	r1, r2, #5
 8104b10:	697a      	ldr	r2, [r7, #20]
 8104b12:	440a      	add	r2, r1
 8104b14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8104b18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8104b1c:	6013      	str	r3, [r2, #0]
 8104b1e:	e011      	b.n	8104b44 <USB_EPStartXfer+0x394>
 8104b20:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8104b24:	693b      	ldr	r3, [r7, #16]
 8104b26:	015a      	lsls	r2, r3, #5
 8104b28:	697b      	ldr	r3, [r7, #20]
 8104b2a:	4413      	add	r3, r2
 8104b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104b30:	681b      	ldr	r3, [r3, #0]
 8104b32:	693a      	ldr	r2, [r7, #16]
 8104b34:	0151      	lsls	r1, r2, #5
 8104b36:	697a      	ldr	r2, [r7, #20]
 8104b38:	440a      	add	r2, r1
 8104b3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8104b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8104b42:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8104b44:	693b      	ldr	r3, [r7, #16]
 8104b46:	015a      	lsls	r2, r3, #5
 8104b48:	697b      	ldr	r3, [r7, #20]
 8104b4a:	4413      	add	r3, r2
 8104b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104b50:	681b      	ldr	r3, [r3, #0]
 8104b52:	693a      	ldr	r2, [r7, #16]
 8104b54:	0151      	lsls	r1, r2, #5
 8104b56:	697a      	ldr	r2, [r7, #20]
 8104b58:	440a      	add	r2, r1
 8104b5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8104b5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8104b62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8104b64:	2300      	movs	r3, #0
}
 8104b66:	4618      	mov	r0, r3
 8104b68:	3718      	adds	r7, #24
 8104b6a:	46bd      	mov	sp, r7
 8104b6c:	bd80      	pop	{r7, pc}
 8104b6e:	bf00      	nop

08104b70 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8104b70:	b480      	push	{r7}
 8104b72:	b085      	sub	sp, #20
 8104b74:	af00      	add	r7, sp, #0
 8104b76:	6078      	str	r0, [r7, #4]
 8104b78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8104b7a:	687b      	ldr	r3, [r7, #4]
 8104b7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8104b7e:	683b      	ldr	r3, [r7, #0]
 8104b80:	781b      	ldrb	r3, [r3, #0]
 8104b82:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8104b84:	683b      	ldr	r3, [r7, #0]
 8104b86:	785b      	ldrb	r3, [r3, #1]
 8104b88:	2b01      	cmp	r3, #1
 8104b8a:	f040 80ab 	bne.w	8104ce4 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8104b8e:	683b      	ldr	r3, [r7, #0]
 8104b90:	699b      	ldr	r3, [r3, #24]
 8104b92:	2b00      	cmp	r3, #0
 8104b94:	d132      	bne.n	8104bfc <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8104b96:	68bb      	ldr	r3, [r7, #8]
 8104b98:	015a      	lsls	r2, r3, #5
 8104b9a:	68fb      	ldr	r3, [r7, #12]
 8104b9c:	4413      	add	r3, r2
 8104b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104ba2:	691b      	ldr	r3, [r3, #16]
 8104ba4:	68ba      	ldr	r2, [r7, #8]
 8104ba6:	0151      	lsls	r1, r2, #5
 8104ba8:	68fa      	ldr	r2, [r7, #12]
 8104baa:	440a      	add	r2, r1
 8104bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104bb0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8104bb4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8104bb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8104bba:	68bb      	ldr	r3, [r7, #8]
 8104bbc:	015a      	lsls	r2, r3, #5
 8104bbe:	68fb      	ldr	r3, [r7, #12]
 8104bc0:	4413      	add	r3, r2
 8104bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104bc6:	691b      	ldr	r3, [r3, #16]
 8104bc8:	68ba      	ldr	r2, [r7, #8]
 8104bca:	0151      	lsls	r1, r2, #5
 8104bcc:	68fa      	ldr	r2, [r7, #12]
 8104bce:	440a      	add	r2, r1
 8104bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104bd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8104bd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8104bda:	68bb      	ldr	r3, [r7, #8]
 8104bdc:	015a      	lsls	r2, r3, #5
 8104bde:	68fb      	ldr	r3, [r7, #12]
 8104be0:	4413      	add	r3, r2
 8104be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104be6:	691b      	ldr	r3, [r3, #16]
 8104be8:	68ba      	ldr	r2, [r7, #8]
 8104bea:	0151      	lsls	r1, r2, #5
 8104bec:	68fa      	ldr	r2, [r7, #12]
 8104bee:	440a      	add	r2, r1
 8104bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104bf4:	0cdb      	lsrs	r3, r3, #19
 8104bf6:	04db      	lsls	r3, r3, #19
 8104bf8:	6113      	str	r3, [r2, #16]
 8104bfa:	e04e      	b.n	8104c9a <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8104bfc:	68bb      	ldr	r3, [r7, #8]
 8104bfe:	015a      	lsls	r2, r3, #5
 8104c00:	68fb      	ldr	r3, [r7, #12]
 8104c02:	4413      	add	r3, r2
 8104c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104c08:	691b      	ldr	r3, [r3, #16]
 8104c0a:	68ba      	ldr	r2, [r7, #8]
 8104c0c:	0151      	lsls	r1, r2, #5
 8104c0e:	68fa      	ldr	r2, [r7, #12]
 8104c10:	440a      	add	r2, r1
 8104c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104c16:	0cdb      	lsrs	r3, r3, #19
 8104c18:	04db      	lsls	r3, r3, #19
 8104c1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8104c1c:	68bb      	ldr	r3, [r7, #8]
 8104c1e:	015a      	lsls	r2, r3, #5
 8104c20:	68fb      	ldr	r3, [r7, #12]
 8104c22:	4413      	add	r3, r2
 8104c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104c28:	691b      	ldr	r3, [r3, #16]
 8104c2a:	68ba      	ldr	r2, [r7, #8]
 8104c2c:	0151      	lsls	r1, r2, #5
 8104c2e:	68fa      	ldr	r2, [r7, #12]
 8104c30:	440a      	add	r2, r1
 8104c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104c36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8104c3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8104c3e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8104c40:	683b      	ldr	r3, [r7, #0]
 8104c42:	699a      	ldr	r2, [r3, #24]
 8104c44:	683b      	ldr	r3, [r7, #0]
 8104c46:	68db      	ldr	r3, [r3, #12]
 8104c48:	429a      	cmp	r2, r3
 8104c4a:	d903      	bls.n	8104c54 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8104c4c:	683b      	ldr	r3, [r7, #0]
 8104c4e:	68da      	ldr	r2, [r3, #12]
 8104c50:	683b      	ldr	r3, [r7, #0]
 8104c52:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8104c54:	68bb      	ldr	r3, [r7, #8]
 8104c56:	015a      	lsls	r2, r3, #5
 8104c58:	68fb      	ldr	r3, [r7, #12]
 8104c5a:	4413      	add	r3, r2
 8104c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104c60:	691b      	ldr	r3, [r3, #16]
 8104c62:	68ba      	ldr	r2, [r7, #8]
 8104c64:	0151      	lsls	r1, r2, #5
 8104c66:	68fa      	ldr	r2, [r7, #12]
 8104c68:	440a      	add	r2, r1
 8104c6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104c6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8104c72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8104c74:	68bb      	ldr	r3, [r7, #8]
 8104c76:	015a      	lsls	r2, r3, #5
 8104c78:	68fb      	ldr	r3, [r7, #12]
 8104c7a:	4413      	add	r3, r2
 8104c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104c80:	691a      	ldr	r2, [r3, #16]
 8104c82:	683b      	ldr	r3, [r7, #0]
 8104c84:	699b      	ldr	r3, [r3, #24]
 8104c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8104c8a:	68b9      	ldr	r1, [r7, #8]
 8104c8c:	0148      	lsls	r0, r1, #5
 8104c8e:	68f9      	ldr	r1, [r7, #12]
 8104c90:	4401      	add	r1, r0
 8104c92:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8104c96:	4313      	orrs	r3, r2
 8104c98:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8104c9a:	68bb      	ldr	r3, [r7, #8]
 8104c9c:	015a      	lsls	r2, r3, #5
 8104c9e:	68fb      	ldr	r3, [r7, #12]
 8104ca0:	4413      	add	r3, r2
 8104ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104ca6:	681b      	ldr	r3, [r3, #0]
 8104ca8:	68ba      	ldr	r2, [r7, #8]
 8104caa:	0151      	lsls	r1, r2, #5
 8104cac:	68fa      	ldr	r2, [r7, #12]
 8104cae:	440a      	add	r2, r1
 8104cb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104cb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8104cb8:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8104cba:	683b      	ldr	r3, [r7, #0]
 8104cbc:	699b      	ldr	r3, [r3, #24]
 8104cbe:	2b00      	cmp	r3, #0
 8104cc0:	d071      	beq.n	8104da6 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8104cc2:	68fb      	ldr	r3, [r7, #12]
 8104cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8104cc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8104cca:	683b      	ldr	r3, [r7, #0]
 8104ccc:	781b      	ldrb	r3, [r3, #0]
 8104cce:	f003 030f 	and.w	r3, r3, #15
 8104cd2:	2101      	movs	r1, #1
 8104cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8104cd8:	68f9      	ldr	r1, [r7, #12]
 8104cda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8104cde:	4313      	orrs	r3, r2
 8104ce0:	634b      	str	r3, [r1, #52]	; 0x34
 8104ce2:	e060      	b.n	8104da6 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8104ce4:	68bb      	ldr	r3, [r7, #8]
 8104ce6:	015a      	lsls	r2, r3, #5
 8104ce8:	68fb      	ldr	r3, [r7, #12]
 8104cea:	4413      	add	r3, r2
 8104cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104cf0:	691b      	ldr	r3, [r3, #16]
 8104cf2:	68ba      	ldr	r2, [r7, #8]
 8104cf4:	0151      	lsls	r1, r2, #5
 8104cf6:	68fa      	ldr	r2, [r7, #12]
 8104cf8:	440a      	add	r2, r1
 8104cfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8104cfe:	0cdb      	lsrs	r3, r3, #19
 8104d00:	04db      	lsls	r3, r3, #19
 8104d02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8104d04:	68bb      	ldr	r3, [r7, #8]
 8104d06:	015a      	lsls	r2, r3, #5
 8104d08:	68fb      	ldr	r3, [r7, #12]
 8104d0a:	4413      	add	r3, r2
 8104d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104d10:	691b      	ldr	r3, [r3, #16]
 8104d12:	68ba      	ldr	r2, [r7, #8]
 8104d14:	0151      	lsls	r1, r2, #5
 8104d16:	68fa      	ldr	r2, [r7, #12]
 8104d18:	440a      	add	r2, r1
 8104d1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8104d1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8104d22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8104d26:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8104d28:	683b      	ldr	r3, [r7, #0]
 8104d2a:	699b      	ldr	r3, [r3, #24]
 8104d2c:	2b00      	cmp	r3, #0
 8104d2e:	d003      	beq.n	8104d38 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8104d30:	683b      	ldr	r3, [r7, #0]
 8104d32:	68da      	ldr	r2, [r3, #12]
 8104d34:	683b      	ldr	r3, [r7, #0]
 8104d36:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8104d38:	683b      	ldr	r3, [r7, #0]
 8104d3a:	68da      	ldr	r2, [r3, #12]
 8104d3c:	683b      	ldr	r3, [r7, #0]
 8104d3e:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8104d40:	68bb      	ldr	r3, [r7, #8]
 8104d42:	015a      	lsls	r2, r3, #5
 8104d44:	68fb      	ldr	r3, [r7, #12]
 8104d46:	4413      	add	r3, r2
 8104d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104d4c:	691b      	ldr	r3, [r3, #16]
 8104d4e:	68ba      	ldr	r2, [r7, #8]
 8104d50:	0151      	lsls	r1, r2, #5
 8104d52:	68fa      	ldr	r2, [r7, #12]
 8104d54:	440a      	add	r2, r1
 8104d56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8104d5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8104d5e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8104d60:	68bb      	ldr	r3, [r7, #8]
 8104d62:	015a      	lsls	r2, r3, #5
 8104d64:	68fb      	ldr	r3, [r7, #12]
 8104d66:	4413      	add	r3, r2
 8104d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104d6c:	691a      	ldr	r2, [r3, #16]
 8104d6e:	683b      	ldr	r3, [r7, #0]
 8104d70:	69db      	ldr	r3, [r3, #28]
 8104d72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8104d76:	68b9      	ldr	r1, [r7, #8]
 8104d78:	0148      	lsls	r0, r1, #5
 8104d7a:	68f9      	ldr	r1, [r7, #12]
 8104d7c:	4401      	add	r1, r0
 8104d7e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8104d82:	4313      	orrs	r3, r2
 8104d84:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8104d86:	68bb      	ldr	r3, [r7, #8]
 8104d88:	015a      	lsls	r2, r3, #5
 8104d8a:	68fb      	ldr	r3, [r7, #12]
 8104d8c:	4413      	add	r3, r2
 8104d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104d92:	681b      	ldr	r3, [r3, #0]
 8104d94:	68ba      	ldr	r2, [r7, #8]
 8104d96:	0151      	lsls	r1, r2, #5
 8104d98:	68fa      	ldr	r2, [r7, #12]
 8104d9a:	440a      	add	r2, r1
 8104d9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8104da0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8104da4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8104da6:	2300      	movs	r3, #0
}
 8104da8:	4618      	mov	r0, r3
 8104daa:	3714      	adds	r7, #20
 8104dac:	46bd      	mov	sp, r7
 8104dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104db2:	4770      	bx	lr

08104db4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8104db4:	b480      	push	{r7}
 8104db6:	b087      	sub	sp, #28
 8104db8:	af00      	add	r7, sp, #0
 8104dba:	6078      	str	r0, [r7, #4]
 8104dbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8104dbe:	2300      	movs	r3, #0
 8104dc0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8104dc2:	2300      	movs	r3, #0
 8104dc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8104dc6:	687b      	ldr	r3, [r7, #4]
 8104dc8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8104dca:	683b      	ldr	r3, [r7, #0]
 8104dcc:	785b      	ldrb	r3, [r3, #1]
 8104dce:	2b01      	cmp	r3, #1
 8104dd0:	d14a      	bne.n	8104e68 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8104dd2:	683b      	ldr	r3, [r7, #0]
 8104dd4:	781b      	ldrb	r3, [r3, #0]
 8104dd6:	015a      	lsls	r2, r3, #5
 8104dd8:	693b      	ldr	r3, [r7, #16]
 8104dda:	4413      	add	r3, r2
 8104ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104de0:	681b      	ldr	r3, [r3, #0]
 8104de2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8104de6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8104dea:	f040 8086 	bne.w	8104efa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8104dee:	683b      	ldr	r3, [r7, #0]
 8104df0:	781b      	ldrb	r3, [r3, #0]
 8104df2:	015a      	lsls	r2, r3, #5
 8104df4:	693b      	ldr	r3, [r7, #16]
 8104df6:	4413      	add	r3, r2
 8104df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104dfc:	681b      	ldr	r3, [r3, #0]
 8104dfe:	683a      	ldr	r2, [r7, #0]
 8104e00:	7812      	ldrb	r2, [r2, #0]
 8104e02:	0151      	lsls	r1, r2, #5
 8104e04:	693a      	ldr	r2, [r7, #16]
 8104e06:	440a      	add	r2, r1
 8104e08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104e0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8104e10:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8104e12:	683b      	ldr	r3, [r7, #0]
 8104e14:	781b      	ldrb	r3, [r3, #0]
 8104e16:	015a      	lsls	r2, r3, #5
 8104e18:	693b      	ldr	r3, [r7, #16]
 8104e1a:	4413      	add	r3, r2
 8104e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104e20:	681b      	ldr	r3, [r3, #0]
 8104e22:	683a      	ldr	r2, [r7, #0]
 8104e24:	7812      	ldrb	r2, [r2, #0]
 8104e26:	0151      	lsls	r1, r2, #5
 8104e28:	693a      	ldr	r2, [r7, #16]
 8104e2a:	440a      	add	r2, r1
 8104e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8104e30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8104e34:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8104e36:	68fb      	ldr	r3, [r7, #12]
 8104e38:	3301      	adds	r3, #1
 8104e3a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8104e3c:	68fb      	ldr	r3, [r7, #12]
 8104e3e:	f242 7210 	movw	r2, #10000	; 0x2710
 8104e42:	4293      	cmp	r3, r2
 8104e44:	d902      	bls.n	8104e4c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8104e46:	2301      	movs	r3, #1
 8104e48:	75fb      	strb	r3, [r7, #23]
          break;
 8104e4a:	e056      	b.n	8104efa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8104e4c:	683b      	ldr	r3, [r7, #0]
 8104e4e:	781b      	ldrb	r3, [r3, #0]
 8104e50:	015a      	lsls	r2, r3, #5
 8104e52:	693b      	ldr	r3, [r7, #16]
 8104e54:	4413      	add	r3, r2
 8104e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8104e5a:	681b      	ldr	r3, [r3, #0]
 8104e5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8104e60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8104e64:	d0e7      	beq.n	8104e36 <USB_EPStopXfer+0x82>
 8104e66:	e048      	b.n	8104efa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8104e68:	683b      	ldr	r3, [r7, #0]
 8104e6a:	781b      	ldrb	r3, [r3, #0]
 8104e6c:	015a      	lsls	r2, r3, #5
 8104e6e:	693b      	ldr	r3, [r7, #16]
 8104e70:	4413      	add	r3, r2
 8104e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104e76:	681b      	ldr	r3, [r3, #0]
 8104e78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8104e7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8104e80:	d13b      	bne.n	8104efa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8104e82:	683b      	ldr	r3, [r7, #0]
 8104e84:	781b      	ldrb	r3, [r3, #0]
 8104e86:	015a      	lsls	r2, r3, #5
 8104e88:	693b      	ldr	r3, [r7, #16]
 8104e8a:	4413      	add	r3, r2
 8104e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104e90:	681b      	ldr	r3, [r3, #0]
 8104e92:	683a      	ldr	r2, [r7, #0]
 8104e94:	7812      	ldrb	r2, [r2, #0]
 8104e96:	0151      	lsls	r1, r2, #5
 8104e98:	693a      	ldr	r2, [r7, #16]
 8104e9a:	440a      	add	r2, r1
 8104e9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8104ea0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8104ea4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8104ea6:	683b      	ldr	r3, [r7, #0]
 8104ea8:	781b      	ldrb	r3, [r3, #0]
 8104eaa:	015a      	lsls	r2, r3, #5
 8104eac:	693b      	ldr	r3, [r7, #16]
 8104eae:	4413      	add	r3, r2
 8104eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104eb4:	681b      	ldr	r3, [r3, #0]
 8104eb6:	683a      	ldr	r2, [r7, #0]
 8104eb8:	7812      	ldrb	r2, [r2, #0]
 8104eba:	0151      	lsls	r1, r2, #5
 8104ebc:	693a      	ldr	r2, [r7, #16]
 8104ebe:	440a      	add	r2, r1
 8104ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8104ec4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8104ec8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8104eca:	68fb      	ldr	r3, [r7, #12]
 8104ecc:	3301      	adds	r3, #1
 8104ece:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8104ed0:	68fb      	ldr	r3, [r7, #12]
 8104ed2:	f242 7210 	movw	r2, #10000	; 0x2710
 8104ed6:	4293      	cmp	r3, r2
 8104ed8:	d902      	bls.n	8104ee0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8104eda:	2301      	movs	r3, #1
 8104edc:	75fb      	strb	r3, [r7, #23]
          break;
 8104ede:	e00c      	b.n	8104efa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8104ee0:	683b      	ldr	r3, [r7, #0]
 8104ee2:	781b      	ldrb	r3, [r3, #0]
 8104ee4:	015a      	lsls	r2, r3, #5
 8104ee6:	693b      	ldr	r3, [r7, #16]
 8104ee8:	4413      	add	r3, r2
 8104eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8104eee:	681b      	ldr	r3, [r3, #0]
 8104ef0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8104ef4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8104ef8:	d0e7      	beq.n	8104eca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8104efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8104efc:	4618      	mov	r0, r3
 8104efe:	371c      	adds	r7, #28
 8104f00:	46bd      	mov	sp, r7
 8104f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f06:	4770      	bx	lr

08104f08 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8104f08:	b480      	push	{r7}
 8104f0a:	b089      	sub	sp, #36	; 0x24
 8104f0c:	af00      	add	r7, sp, #0
 8104f0e:	60f8      	str	r0, [r7, #12]
 8104f10:	60b9      	str	r1, [r7, #8]
 8104f12:	4611      	mov	r1, r2
 8104f14:	461a      	mov	r2, r3
 8104f16:	460b      	mov	r3, r1
 8104f18:	71fb      	strb	r3, [r7, #7]
 8104f1a:	4613      	mov	r3, r2
 8104f1c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8104f1e:	68fb      	ldr	r3, [r7, #12]
 8104f20:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8104f22:	68bb      	ldr	r3, [r7, #8]
 8104f24:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8104f26:	88bb      	ldrh	r3, [r7, #4]
 8104f28:	3303      	adds	r3, #3
 8104f2a:	089b      	lsrs	r3, r3, #2
 8104f2c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8104f2e:	2300      	movs	r3, #0
 8104f30:	61bb      	str	r3, [r7, #24]
 8104f32:	e018      	b.n	8104f66 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8104f34:	79fb      	ldrb	r3, [r7, #7]
 8104f36:	031a      	lsls	r2, r3, #12
 8104f38:	697b      	ldr	r3, [r7, #20]
 8104f3a:	4413      	add	r3, r2
 8104f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8104f40:	461a      	mov	r2, r3
 8104f42:	69fb      	ldr	r3, [r7, #28]
 8104f44:	681b      	ldr	r3, [r3, #0]
 8104f46:	6013      	str	r3, [r2, #0]
    pSrc++;
 8104f48:	69fb      	ldr	r3, [r7, #28]
 8104f4a:	3301      	adds	r3, #1
 8104f4c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8104f4e:	69fb      	ldr	r3, [r7, #28]
 8104f50:	3301      	adds	r3, #1
 8104f52:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8104f54:	69fb      	ldr	r3, [r7, #28]
 8104f56:	3301      	adds	r3, #1
 8104f58:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8104f5a:	69fb      	ldr	r3, [r7, #28]
 8104f5c:	3301      	adds	r3, #1
 8104f5e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8104f60:	69bb      	ldr	r3, [r7, #24]
 8104f62:	3301      	adds	r3, #1
 8104f64:	61bb      	str	r3, [r7, #24]
 8104f66:	69ba      	ldr	r2, [r7, #24]
 8104f68:	693b      	ldr	r3, [r7, #16]
 8104f6a:	429a      	cmp	r2, r3
 8104f6c:	d3e2      	bcc.n	8104f34 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8104f6e:	2300      	movs	r3, #0
}
 8104f70:	4618      	mov	r0, r3
 8104f72:	3724      	adds	r7, #36	; 0x24
 8104f74:	46bd      	mov	sp, r7
 8104f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f7a:	4770      	bx	lr

08104f7c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8104f7c:	b480      	push	{r7}
 8104f7e:	b08b      	sub	sp, #44	; 0x2c
 8104f80:	af00      	add	r7, sp, #0
 8104f82:	60f8      	str	r0, [r7, #12]
 8104f84:	60b9      	str	r1, [r7, #8]
 8104f86:	4613      	mov	r3, r2
 8104f88:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8104f8a:	68fb      	ldr	r3, [r7, #12]
 8104f8c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8104f8e:	68bb      	ldr	r3, [r7, #8]
 8104f90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8104f92:	88fb      	ldrh	r3, [r7, #6]
 8104f94:	089b      	lsrs	r3, r3, #2
 8104f96:	b29b      	uxth	r3, r3
 8104f98:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8104f9a:	88fb      	ldrh	r3, [r7, #6]
 8104f9c:	f003 0303 	and.w	r3, r3, #3
 8104fa0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8104fa2:	2300      	movs	r3, #0
 8104fa4:	623b      	str	r3, [r7, #32]
 8104fa6:	e014      	b.n	8104fd2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8104fa8:	69bb      	ldr	r3, [r7, #24]
 8104faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8104fae:	681a      	ldr	r2, [r3, #0]
 8104fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104fb2:	601a      	str	r2, [r3, #0]
    pDest++;
 8104fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104fb6:	3301      	adds	r3, #1
 8104fb8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8104fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104fbc:	3301      	adds	r3, #1
 8104fbe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8104fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104fc2:	3301      	adds	r3, #1
 8104fc4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8104fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104fc8:	3301      	adds	r3, #1
 8104fca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8104fcc:	6a3b      	ldr	r3, [r7, #32]
 8104fce:	3301      	adds	r3, #1
 8104fd0:	623b      	str	r3, [r7, #32]
 8104fd2:	6a3a      	ldr	r2, [r7, #32]
 8104fd4:	697b      	ldr	r3, [r7, #20]
 8104fd6:	429a      	cmp	r2, r3
 8104fd8:	d3e6      	bcc.n	8104fa8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8104fda:	8bfb      	ldrh	r3, [r7, #30]
 8104fdc:	2b00      	cmp	r3, #0
 8104fde:	d01e      	beq.n	810501e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8104fe0:	2300      	movs	r3, #0
 8104fe2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8104fe4:	69bb      	ldr	r3, [r7, #24]
 8104fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8104fea:	461a      	mov	r2, r3
 8104fec:	f107 0310 	add.w	r3, r7, #16
 8104ff0:	6812      	ldr	r2, [r2, #0]
 8104ff2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8104ff4:	693a      	ldr	r2, [r7, #16]
 8104ff6:	6a3b      	ldr	r3, [r7, #32]
 8104ff8:	b2db      	uxtb	r3, r3
 8104ffa:	00db      	lsls	r3, r3, #3
 8104ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8105000:	b2da      	uxtb	r2, r3
 8105002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105004:	701a      	strb	r2, [r3, #0]
      i++;
 8105006:	6a3b      	ldr	r3, [r7, #32]
 8105008:	3301      	adds	r3, #1
 810500a:	623b      	str	r3, [r7, #32]
      pDest++;
 810500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810500e:	3301      	adds	r3, #1
 8105010:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8105012:	8bfb      	ldrh	r3, [r7, #30]
 8105014:	3b01      	subs	r3, #1
 8105016:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8105018:	8bfb      	ldrh	r3, [r7, #30]
 810501a:	2b00      	cmp	r3, #0
 810501c:	d1ea      	bne.n	8104ff4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 810501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8105020:	4618      	mov	r0, r3
 8105022:	372c      	adds	r7, #44	; 0x2c
 8105024:	46bd      	mov	sp, r7
 8105026:	f85d 7b04 	ldr.w	r7, [sp], #4
 810502a:	4770      	bx	lr

0810502c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 810502c:	b480      	push	{r7}
 810502e:	b085      	sub	sp, #20
 8105030:	af00      	add	r7, sp, #0
 8105032:	6078      	str	r0, [r7, #4]
 8105034:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8105036:	687b      	ldr	r3, [r7, #4]
 8105038:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 810503a:	683b      	ldr	r3, [r7, #0]
 810503c:	781b      	ldrb	r3, [r3, #0]
 810503e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8105040:	683b      	ldr	r3, [r7, #0]
 8105042:	785b      	ldrb	r3, [r3, #1]
 8105044:	2b01      	cmp	r3, #1
 8105046:	d12c      	bne.n	81050a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8105048:	68bb      	ldr	r3, [r7, #8]
 810504a:	015a      	lsls	r2, r3, #5
 810504c:	68fb      	ldr	r3, [r7, #12]
 810504e:	4413      	add	r3, r2
 8105050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8105054:	681b      	ldr	r3, [r3, #0]
 8105056:	2b00      	cmp	r3, #0
 8105058:	db12      	blt.n	8105080 <USB_EPSetStall+0x54>
 810505a:	68bb      	ldr	r3, [r7, #8]
 810505c:	2b00      	cmp	r3, #0
 810505e:	d00f      	beq.n	8105080 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8105060:	68bb      	ldr	r3, [r7, #8]
 8105062:	015a      	lsls	r2, r3, #5
 8105064:	68fb      	ldr	r3, [r7, #12]
 8105066:	4413      	add	r3, r2
 8105068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810506c:	681b      	ldr	r3, [r3, #0]
 810506e:	68ba      	ldr	r2, [r7, #8]
 8105070:	0151      	lsls	r1, r2, #5
 8105072:	68fa      	ldr	r2, [r7, #12]
 8105074:	440a      	add	r2, r1
 8105076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 810507a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 810507e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8105080:	68bb      	ldr	r3, [r7, #8]
 8105082:	015a      	lsls	r2, r3, #5
 8105084:	68fb      	ldr	r3, [r7, #12]
 8105086:	4413      	add	r3, r2
 8105088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810508c:	681b      	ldr	r3, [r3, #0]
 810508e:	68ba      	ldr	r2, [r7, #8]
 8105090:	0151      	lsls	r1, r2, #5
 8105092:	68fa      	ldr	r2, [r7, #12]
 8105094:	440a      	add	r2, r1
 8105096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 810509a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810509e:	6013      	str	r3, [r2, #0]
 81050a0:	e02b      	b.n	81050fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 81050a2:	68bb      	ldr	r3, [r7, #8]
 81050a4:	015a      	lsls	r2, r3, #5
 81050a6:	68fb      	ldr	r3, [r7, #12]
 81050a8:	4413      	add	r3, r2
 81050aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81050ae:	681b      	ldr	r3, [r3, #0]
 81050b0:	2b00      	cmp	r3, #0
 81050b2:	db12      	blt.n	81050da <USB_EPSetStall+0xae>
 81050b4:	68bb      	ldr	r3, [r7, #8]
 81050b6:	2b00      	cmp	r3, #0
 81050b8:	d00f      	beq.n	81050da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 81050ba:	68bb      	ldr	r3, [r7, #8]
 81050bc:	015a      	lsls	r2, r3, #5
 81050be:	68fb      	ldr	r3, [r7, #12]
 81050c0:	4413      	add	r3, r2
 81050c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81050c6:	681b      	ldr	r3, [r3, #0]
 81050c8:	68ba      	ldr	r2, [r7, #8]
 81050ca:	0151      	lsls	r1, r2, #5
 81050cc:	68fa      	ldr	r2, [r7, #12]
 81050ce:	440a      	add	r2, r1
 81050d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 81050d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 81050d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 81050da:	68bb      	ldr	r3, [r7, #8]
 81050dc:	015a      	lsls	r2, r3, #5
 81050de:	68fb      	ldr	r3, [r7, #12]
 81050e0:	4413      	add	r3, r2
 81050e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81050e6:	681b      	ldr	r3, [r3, #0]
 81050e8:	68ba      	ldr	r2, [r7, #8]
 81050ea:	0151      	lsls	r1, r2, #5
 81050ec:	68fa      	ldr	r2, [r7, #12]
 81050ee:	440a      	add	r2, r1
 81050f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 81050f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81050f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 81050fa:	2300      	movs	r3, #0
}
 81050fc:	4618      	mov	r0, r3
 81050fe:	3714      	adds	r7, #20
 8105100:	46bd      	mov	sp, r7
 8105102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105106:	4770      	bx	lr

08105108 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8105108:	b480      	push	{r7}
 810510a:	b085      	sub	sp, #20
 810510c:	af00      	add	r7, sp, #0
 810510e:	6078      	str	r0, [r7, #4]
 8105110:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8105112:	687b      	ldr	r3, [r7, #4]
 8105114:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8105116:	683b      	ldr	r3, [r7, #0]
 8105118:	781b      	ldrb	r3, [r3, #0]
 810511a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 810511c:	683b      	ldr	r3, [r7, #0]
 810511e:	785b      	ldrb	r3, [r3, #1]
 8105120:	2b01      	cmp	r3, #1
 8105122:	d128      	bne.n	8105176 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8105124:	68bb      	ldr	r3, [r7, #8]
 8105126:	015a      	lsls	r2, r3, #5
 8105128:	68fb      	ldr	r3, [r7, #12]
 810512a:	4413      	add	r3, r2
 810512c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8105130:	681b      	ldr	r3, [r3, #0]
 8105132:	68ba      	ldr	r2, [r7, #8]
 8105134:	0151      	lsls	r1, r2, #5
 8105136:	68fa      	ldr	r2, [r7, #12]
 8105138:	440a      	add	r2, r1
 810513a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 810513e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8105142:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8105144:	683b      	ldr	r3, [r7, #0]
 8105146:	791b      	ldrb	r3, [r3, #4]
 8105148:	2b03      	cmp	r3, #3
 810514a:	d003      	beq.n	8105154 <USB_EPClearStall+0x4c>
 810514c:	683b      	ldr	r3, [r7, #0]
 810514e:	791b      	ldrb	r3, [r3, #4]
 8105150:	2b02      	cmp	r3, #2
 8105152:	d138      	bne.n	81051c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8105154:	68bb      	ldr	r3, [r7, #8]
 8105156:	015a      	lsls	r2, r3, #5
 8105158:	68fb      	ldr	r3, [r7, #12]
 810515a:	4413      	add	r3, r2
 810515c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8105160:	681b      	ldr	r3, [r3, #0]
 8105162:	68ba      	ldr	r2, [r7, #8]
 8105164:	0151      	lsls	r1, r2, #5
 8105166:	68fa      	ldr	r2, [r7, #12]
 8105168:	440a      	add	r2, r1
 810516a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 810516e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8105172:	6013      	str	r3, [r2, #0]
 8105174:	e027      	b.n	81051c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8105176:	68bb      	ldr	r3, [r7, #8]
 8105178:	015a      	lsls	r2, r3, #5
 810517a:	68fb      	ldr	r3, [r7, #12]
 810517c:	4413      	add	r3, r2
 810517e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8105182:	681b      	ldr	r3, [r3, #0]
 8105184:	68ba      	ldr	r2, [r7, #8]
 8105186:	0151      	lsls	r1, r2, #5
 8105188:	68fa      	ldr	r2, [r7, #12]
 810518a:	440a      	add	r2, r1
 810518c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8105190:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8105194:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8105196:	683b      	ldr	r3, [r7, #0]
 8105198:	791b      	ldrb	r3, [r3, #4]
 810519a:	2b03      	cmp	r3, #3
 810519c:	d003      	beq.n	81051a6 <USB_EPClearStall+0x9e>
 810519e:	683b      	ldr	r3, [r7, #0]
 81051a0:	791b      	ldrb	r3, [r3, #4]
 81051a2:	2b02      	cmp	r3, #2
 81051a4:	d10f      	bne.n	81051c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 81051a6:	68bb      	ldr	r3, [r7, #8]
 81051a8:	015a      	lsls	r2, r3, #5
 81051aa:	68fb      	ldr	r3, [r7, #12]
 81051ac:	4413      	add	r3, r2
 81051ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81051b2:	681b      	ldr	r3, [r3, #0]
 81051b4:	68ba      	ldr	r2, [r7, #8]
 81051b6:	0151      	lsls	r1, r2, #5
 81051b8:	68fa      	ldr	r2, [r7, #12]
 81051ba:	440a      	add	r2, r1
 81051bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 81051c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81051c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 81051c6:	2300      	movs	r3, #0
}
 81051c8:	4618      	mov	r0, r3
 81051ca:	3714      	adds	r7, #20
 81051cc:	46bd      	mov	sp, r7
 81051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051d2:	4770      	bx	lr

081051d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 81051d4:	b480      	push	{r7}
 81051d6:	b085      	sub	sp, #20
 81051d8:	af00      	add	r7, sp, #0
 81051da:	6078      	str	r0, [r7, #4]
 81051dc:	460b      	mov	r3, r1
 81051de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81051e0:	687b      	ldr	r3, [r7, #4]
 81051e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 81051e4:	68fb      	ldr	r3, [r7, #12]
 81051e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81051ea:	681b      	ldr	r3, [r3, #0]
 81051ec:	68fa      	ldr	r2, [r7, #12]
 81051ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 81051f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 81051f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 81051f8:	68fb      	ldr	r3, [r7, #12]
 81051fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81051fe:	681a      	ldr	r2, [r3, #0]
 8105200:	78fb      	ldrb	r3, [r7, #3]
 8105202:	011b      	lsls	r3, r3, #4
 8105204:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8105208:	68f9      	ldr	r1, [r7, #12]
 810520a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 810520e:	4313      	orrs	r3, r2
 8105210:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8105212:	2300      	movs	r3, #0
}
 8105214:	4618      	mov	r0, r3
 8105216:	3714      	adds	r7, #20
 8105218:	46bd      	mov	sp, r7
 810521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810521e:	4770      	bx	lr

08105220 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8105220:	b480      	push	{r7}
 8105222:	b085      	sub	sp, #20
 8105224:	af00      	add	r7, sp, #0
 8105226:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8105228:	687b      	ldr	r3, [r7, #4]
 810522a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 810522c:	68fb      	ldr	r3, [r7, #12]
 810522e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8105232:	681b      	ldr	r3, [r3, #0]
 8105234:	68fa      	ldr	r2, [r7, #12]
 8105236:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 810523a:	f023 0303 	bic.w	r3, r3, #3
 810523e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8105240:	68fb      	ldr	r3, [r7, #12]
 8105242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8105246:	685b      	ldr	r3, [r3, #4]
 8105248:	68fa      	ldr	r2, [r7, #12]
 810524a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 810524e:	f023 0302 	bic.w	r3, r3, #2
 8105252:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8105254:	2300      	movs	r3, #0
}
 8105256:	4618      	mov	r0, r3
 8105258:	3714      	adds	r7, #20
 810525a:	46bd      	mov	sp, r7
 810525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105260:	4770      	bx	lr

08105262 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8105262:	b480      	push	{r7}
 8105264:	b085      	sub	sp, #20
 8105266:	af00      	add	r7, sp, #0
 8105268:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810526a:	687b      	ldr	r3, [r7, #4]
 810526c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 810526e:	68fb      	ldr	r3, [r7, #12]
 8105270:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8105274:	681b      	ldr	r3, [r3, #0]
 8105276:	68fa      	ldr	r2, [r7, #12]
 8105278:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 810527c:	f023 0303 	bic.w	r3, r3, #3
 8105280:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8105282:	68fb      	ldr	r3, [r7, #12]
 8105284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8105288:	685b      	ldr	r3, [r3, #4]
 810528a:	68fa      	ldr	r2, [r7, #12]
 810528c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8105290:	f043 0302 	orr.w	r3, r3, #2
 8105294:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8105296:	2300      	movs	r3, #0
}
 8105298:	4618      	mov	r0, r3
 810529a:	3714      	adds	r7, #20
 810529c:	46bd      	mov	sp, r7
 810529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81052a2:	4770      	bx	lr

081052a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 81052a4:	b480      	push	{r7}
 81052a6:	b085      	sub	sp, #20
 81052a8:	af00      	add	r7, sp, #0
 81052aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 81052ac:	687b      	ldr	r3, [r7, #4]
 81052ae:	695b      	ldr	r3, [r3, #20]
 81052b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 81052b2:	687b      	ldr	r3, [r7, #4]
 81052b4:	699b      	ldr	r3, [r3, #24]
 81052b6:	68fa      	ldr	r2, [r7, #12]
 81052b8:	4013      	ands	r3, r2
 81052ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 81052bc:	68fb      	ldr	r3, [r7, #12]
}
 81052be:	4618      	mov	r0, r3
 81052c0:	3714      	adds	r7, #20
 81052c2:	46bd      	mov	sp, r7
 81052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81052c8:	4770      	bx	lr

081052ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 81052ca:	b480      	push	{r7}
 81052cc:	b085      	sub	sp, #20
 81052ce:	af00      	add	r7, sp, #0
 81052d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81052d2:	687b      	ldr	r3, [r7, #4]
 81052d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 81052d6:	68fb      	ldr	r3, [r7, #12]
 81052d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81052dc:	699b      	ldr	r3, [r3, #24]
 81052de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 81052e0:	68fb      	ldr	r3, [r7, #12]
 81052e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81052e6:	69db      	ldr	r3, [r3, #28]
 81052e8:	68ba      	ldr	r2, [r7, #8]
 81052ea:	4013      	ands	r3, r2
 81052ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 81052ee:	68bb      	ldr	r3, [r7, #8]
 81052f0:	0c1b      	lsrs	r3, r3, #16
}
 81052f2:	4618      	mov	r0, r3
 81052f4:	3714      	adds	r7, #20
 81052f6:	46bd      	mov	sp, r7
 81052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81052fc:	4770      	bx	lr

081052fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 81052fe:	b480      	push	{r7}
 8105300:	b085      	sub	sp, #20
 8105302:	af00      	add	r7, sp, #0
 8105304:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8105306:	687b      	ldr	r3, [r7, #4]
 8105308:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 810530a:	68fb      	ldr	r3, [r7, #12]
 810530c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8105310:	699b      	ldr	r3, [r3, #24]
 8105312:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8105314:	68fb      	ldr	r3, [r7, #12]
 8105316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810531a:	69db      	ldr	r3, [r3, #28]
 810531c:	68ba      	ldr	r2, [r7, #8]
 810531e:	4013      	ands	r3, r2
 8105320:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8105322:	68bb      	ldr	r3, [r7, #8]
 8105324:	b29b      	uxth	r3, r3
}
 8105326:	4618      	mov	r0, r3
 8105328:	3714      	adds	r7, #20
 810532a:	46bd      	mov	sp, r7
 810532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105330:	4770      	bx	lr

08105332 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8105332:	b480      	push	{r7}
 8105334:	b085      	sub	sp, #20
 8105336:	af00      	add	r7, sp, #0
 8105338:	6078      	str	r0, [r7, #4]
 810533a:	460b      	mov	r3, r1
 810533c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810533e:	687b      	ldr	r3, [r7, #4]
 8105340:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8105342:	78fb      	ldrb	r3, [r7, #3]
 8105344:	015a      	lsls	r2, r3, #5
 8105346:	68fb      	ldr	r3, [r7, #12]
 8105348:	4413      	add	r3, r2
 810534a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810534e:	689b      	ldr	r3, [r3, #8]
 8105350:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8105352:	68fb      	ldr	r3, [r7, #12]
 8105354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8105358:	695b      	ldr	r3, [r3, #20]
 810535a:	68ba      	ldr	r2, [r7, #8]
 810535c:	4013      	ands	r3, r2
 810535e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8105360:	68bb      	ldr	r3, [r7, #8]
}
 8105362:	4618      	mov	r0, r3
 8105364:	3714      	adds	r7, #20
 8105366:	46bd      	mov	sp, r7
 8105368:	f85d 7b04 	ldr.w	r7, [sp], #4
 810536c:	4770      	bx	lr

0810536e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 810536e:	b480      	push	{r7}
 8105370:	b087      	sub	sp, #28
 8105372:	af00      	add	r7, sp, #0
 8105374:	6078      	str	r0, [r7, #4]
 8105376:	460b      	mov	r3, r1
 8105378:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810537a:	687b      	ldr	r3, [r7, #4]
 810537c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 810537e:	697b      	ldr	r3, [r7, #20]
 8105380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8105384:	691b      	ldr	r3, [r3, #16]
 8105386:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8105388:	697b      	ldr	r3, [r7, #20]
 810538a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810538e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8105390:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8105392:	78fb      	ldrb	r3, [r7, #3]
 8105394:	f003 030f 	and.w	r3, r3, #15
 8105398:	68fa      	ldr	r2, [r7, #12]
 810539a:	fa22 f303 	lsr.w	r3, r2, r3
 810539e:	01db      	lsls	r3, r3, #7
 81053a0:	b2db      	uxtb	r3, r3
 81053a2:	693a      	ldr	r2, [r7, #16]
 81053a4:	4313      	orrs	r3, r2
 81053a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 81053a8:	78fb      	ldrb	r3, [r7, #3]
 81053aa:	015a      	lsls	r2, r3, #5
 81053ac:	697b      	ldr	r3, [r7, #20]
 81053ae:	4413      	add	r3, r2
 81053b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81053b4:	689b      	ldr	r3, [r3, #8]
 81053b6:	693a      	ldr	r2, [r7, #16]
 81053b8:	4013      	ands	r3, r2
 81053ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 81053bc:	68bb      	ldr	r3, [r7, #8]
}
 81053be:	4618      	mov	r0, r3
 81053c0:	371c      	adds	r7, #28
 81053c2:	46bd      	mov	sp, r7
 81053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053c8:	4770      	bx	lr

081053ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 81053ca:	b480      	push	{r7}
 81053cc:	b083      	sub	sp, #12
 81053ce:	af00      	add	r7, sp, #0
 81053d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 81053d2:	687b      	ldr	r3, [r7, #4]
 81053d4:	695b      	ldr	r3, [r3, #20]
 81053d6:	f003 0301 	and.w	r3, r3, #1
}
 81053da:	4618      	mov	r0, r3
 81053dc:	370c      	adds	r7, #12
 81053de:	46bd      	mov	sp, r7
 81053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053e4:	4770      	bx	lr

081053e6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 81053e6:	b480      	push	{r7}
 81053e8:	b085      	sub	sp, #20
 81053ea:	af00      	add	r7, sp, #0
 81053ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81053ee:	687b      	ldr	r3, [r7, #4]
 81053f0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 81053f2:	68fb      	ldr	r3, [r7, #12]
 81053f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81053f8:	681b      	ldr	r3, [r3, #0]
 81053fa:	68fa      	ldr	r2, [r7, #12]
 81053fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8105400:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8105404:	f023 0307 	bic.w	r3, r3, #7
 8105408:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 810540a:	68fb      	ldr	r3, [r7, #12]
 810540c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8105410:	685b      	ldr	r3, [r3, #4]
 8105412:	68fa      	ldr	r2, [r7, #12]
 8105414:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8105418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810541c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 810541e:	2300      	movs	r3, #0
}
 8105420:	4618      	mov	r0, r3
 8105422:	3714      	adds	r7, #20
 8105424:	46bd      	mov	sp, r7
 8105426:	f85d 7b04 	ldr.w	r7, [sp], #4
 810542a:	4770      	bx	lr

0810542c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 810542c:	b480      	push	{r7}
 810542e:	b085      	sub	sp, #20
 8105430:	af00      	add	r7, sp, #0
 8105432:	6078      	str	r0, [r7, #4]
 8105434:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8105436:	687b      	ldr	r3, [r7, #4]
 8105438:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 810543a:	687b      	ldr	r3, [r7, #4]
 810543c:	333c      	adds	r3, #60	; 0x3c
 810543e:	3304      	adds	r3, #4
 8105440:	681b      	ldr	r3, [r3, #0]
 8105442:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8105444:	68bb      	ldr	r3, [r7, #8]
 8105446:	4a1c      	ldr	r2, [pc, #112]	; (81054b8 <USB_EP0_OutStart+0x8c>)
 8105448:	4293      	cmp	r3, r2
 810544a:	d90a      	bls.n	8105462 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 810544c:	68fb      	ldr	r3, [r7, #12]
 810544e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8105452:	681b      	ldr	r3, [r3, #0]
 8105454:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8105458:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 810545c:	d101      	bne.n	8105462 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 810545e:	2300      	movs	r3, #0
 8105460:	e024      	b.n	81054ac <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8105462:	68fb      	ldr	r3, [r7, #12]
 8105464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8105468:	461a      	mov	r2, r3
 810546a:	2300      	movs	r3, #0
 810546c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 810546e:	68fb      	ldr	r3, [r7, #12]
 8105470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8105474:	691b      	ldr	r3, [r3, #16]
 8105476:	68fa      	ldr	r2, [r7, #12]
 8105478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 810547c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8105480:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8105482:	68fb      	ldr	r3, [r7, #12]
 8105484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8105488:	691b      	ldr	r3, [r3, #16]
 810548a:	68fa      	ldr	r2, [r7, #12]
 810548c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8105490:	f043 0318 	orr.w	r3, r3, #24
 8105494:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8105496:	68fb      	ldr	r3, [r7, #12]
 8105498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810549c:	691b      	ldr	r3, [r3, #16]
 810549e:	68fa      	ldr	r2, [r7, #12]
 81054a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 81054a4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 81054a8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 81054aa:	2300      	movs	r3, #0
}
 81054ac:	4618      	mov	r0, r3
 81054ae:	3714      	adds	r7, #20
 81054b0:	46bd      	mov	sp, r7
 81054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054b6:	4770      	bx	lr
 81054b8:	4f54300a 	.word	0x4f54300a

081054bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 81054bc:	b480      	push	{r7}
 81054be:	b085      	sub	sp, #20
 81054c0:	af00      	add	r7, sp, #0
 81054c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 81054c4:	2300      	movs	r3, #0
 81054c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 81054c8:	68fb      	ldr	r3, [r7, #12]
 81054ca:	3301      	adds	r3, #1
 81054cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 81054ce:	68fb      	ldr	r3, [r7, #12]
 81054d0:	4a13      	ldr	r2, [pc, #76]	; (8105520 <USB_CoreReset+0x64>)
 81054d2:	4293      	cmp	r3, r2
 81054d4:	d901      	bls.n	81054da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 81054d6:	2303      	movs	r3, #3
 81054d8:	e01b      	b.n	8105512 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 81054da:	687b      	ldr	r3, [r7, #4]
 81054dc:	691b      	ldr	r3, [r3, #16]
 81054de:	2b00      	cmp	r3, #0
 81054e0:	daf2      	bge.n	81054c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 81054e2:	2300      	movs	r3, #0
 81054e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 81054e6:	687b      	ldr	r3, [r7, #4]
 81054e8:	691b      	ldr	r3, [r3, #16]
 81054ea:	f043 0201 	orr.w	r2, r3, #1
 81054ee:	687b      	ldr	r3, [r7, #4]
 81054f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 81054f2:	68fb      	ldr	r3, [r7, #12]
 81054f4:	3301      	adds	r3, #1
 81054f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 81054f8:	68fb      	ldr	r3, [r7, #12]
 81054fa:	4a09      	ldr	r2, [pc, #36]	; (8105520 <USB_CoreReset+0x64>)
 81054fc:	4293      	cmp	r3, r2
 81054fe:	d901      	bls.n	8105504 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8105500:	2303      	movs	r3, #3
 8105502:	e006      	b.n	8105512 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8105504:	687b      	ldr	r3, [r7, #4]
 8105506:	691b      	ldr	r3, [r3, #16]
 8105508:	f003 0301 	and.w	r3, r3, #1
 810550c:	2b01      	cmp	r3, #1
 810550e:	d0f0      	beq.n	81054f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8105510:	2300      	movs	r3, #0
}
 8105512:	4618      	mov	r0, r3
 8105514:	3714      	adds	r7, #20
 8105516:	46bd      	mov	sp, r7
 8105518:	f85d 7b04 	ldr.w	r7, [sp], #4
 810551c:	4770      	bx	lr
 810551e:	bf00      	nop
 8105520:	00030d40 	.word	0x00030d40

08105524 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8105524:	b580      	push	{r7, lr}
 8105526:	b084      	sub	sp, #16
 8105528:	af00      	add	r7, sp, #0
 810552a:	6078      	str	r0, [r7, #4]
 810552c:	460b      	mov	r3, r1
 810552e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8105530:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8105534:	f002 fa94 	bl	8107a60 <USBD_static_malloc>
 8105538:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 810553a:	68fb      	ldr	r3, [r7, #12]
 810553c:	2b00      	cmp	r3, #0
 810553e:	d105      	bne.n	810554c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8105540:	687b      	ldr	r3, [r7, #4]
 8105542:	2200      	movs	r2, #0
 8105544:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8105548:	2302      	movs	r3, #2
 810554a:	e066      	b.n	810561a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 810554c:	687b      	ldr	r3, [r7, #4]
 810554e:	68fa      	ldr	r2, [r7, #12]
 8105550:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8105554:	687b      	ldr	r3, [r7, #4]
 8105556:	7c1b      	ldrb	r3, [r3, #16]
 8105558:	2b00      	cmp	r3, #0
 810555a:	d119      	bne.n	8105590 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 810555c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8105560:	2202      	movs	r2, #2
 8105562:	2181      	movs	r1, #129	; 0x81
 8105564:	6878      	ldr	r0, [r7, #4]
 8105566:	f002 f867 	bl	8107638 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 810556a:	687b      	ldr	r3, [r7, #4]
 810556c:	2201      	movs	r2, #1
 810556e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8105570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8105574:	2202      	movs	r2, #2
 8105576:	2101      	movs	r1, #1
 8105578:	6878      	ldr	r0, [r7, #4]
 810557a:	f002 f85d 	bl	8107638 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 810557e:	687b      	ldr	r3, [r7, #4]
 8105580:	2201      	movs	r2, #1
 8105582:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8105586:	687b      	ldr	r3, [r7, #4]
 8105588:	2210      	movs	r2, #16
 810558a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 810558e:	e016      	b.n	81055be <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8105590:	2340      	movs	r3, #64	; 0x40
 8105592:	2202      	movs	r2, #2
 8105594:	2181      	movs	r1, #129	; 0x81
 8105596:	6878      	ldr	r0, [r7, #4]
 8105598:	f002 f84e 	bl	8107638 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 810559c:	687b      	ldr	r3, [r7, #4]
 810559e:	2201      	movs	r2, #1
 81055a0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 81055a2:	2340      	movs	r3, #64	; 0x40
 81055a4:	2202      	movs	r2, #2
 81055a6:	2101      	movs	r1, #1
 81055a8:	6878      	ldr	r0, [r7, #4]
 81055aa:	f002 f845 	bl	8107638 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 81055ae:	687b      	ldr	r3, [r7, #4]
 81055b0:	2201      	movs	r2, #1
 81055b2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 81055b6:	687b      	ldr	r3, [r7, #4]
 81055b8:	2210      	movs	r2, #16
 81055ba:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 81055be:	2308      	movs	r3, #8
 81055c0:	2203      	movs	r2, #3
 81055c2:	2182      	movs	r1, #130	; 0x82
 81055c4:	6878      	ldr	r0, [r7, #4]
 81055c6:	f002 f837 	bl	8107638 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 81055ca:	687b      	ldr	r3, [r7, #4]
 81055cc:	2201      	movs	r2, #1
 81055ce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 81055d2:	687b      	ldr	r3, [r7, #4]
 81055d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 81055d8:	681b      	ldr	r3, [r3, #0]
 81055da:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 81055dc:	68fb      	ldr	r3, [r7, #12]
 81055de:	2200      	movs	r2, #0
 81055e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 81055e4:	68fb      	ldr	r3, [r7, #12]
 81055e6:	2200      	movs	r2, #0
 81055e8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 81055ec:	687b      	ldr	r3, [r7, #4]
 81055ee:	7c1b      	ldrb	r3, [r3, #16]
 81055f0:	2b00      	cmp	r3, #0
 81055f2:	d109      	bne.n	8105608 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 81055f4:	68fb      	ldr	r3, [r7, #12]
 81055f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 81055fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 81055fe:	2101      	movs	r1, #1
 8105600:	6878      	ldr	r0, [r7, #4]
 8105602:	f002 f993 	bl	810792c <USBD_LL_PrepareReceive>
 8105606:	e007      	b.n	8105618 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8105608:	68fb      	ldr	r3, [r7, #12]
 810560a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 810560e:	2340      	movs	r3, #64	; 0x40
 8105610:	2101      	movs	r1, #1
 8105612:	6878      	ldr	r0, [r7, #4]
 8105614:	f002 f98a 	bl	810792c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8105618:	2300      	movs	r3, #0
}
 810561a:	4618      	mov	r0, r3
 810561c:	3710      	adds	r7, #16
 810561e:	46bd      	mov	sp, r7
 8105620:	bd80      	pop	{r7, pc}

08105622 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8105622:	b580      	push	{r7, lr}
 8105624:	b082      	sub	sp, #8
 8105626:	af00      	add	r7, sp, #0
 8105628:	6078      	str	r0, [r7, #4]
 810562a:	460b      	mov	r3, r1
 810562c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 810562e:	2181      	movs	r1, #129	; 0x81
 8105630:	6878      	ldr	r0, [r7, #4]
 8105632:	f002 f83f 	bl	81076b4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8105636:	687b      	ldr	r3, [r7, #4]
 8105638:	2200      	movs	r2, #0
 810563a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 810563c:	2101      	movs	r1, #1
 810563e:	6878      	ldr	r0, [r7, #4]
 8105640:	f002 f838 	bl	81076b4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8105644:	687b      	ldr	r3, [r7, #4]
 8105646:	2200      	movs	r2, #0
 8105648:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 810564c:	2182      	movs	r1, #130	; 0x82
 810564e:	6878      	ldr	r0, [r7, #4]
 8105650:	f002 f830 	bl	81076b4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8105654:	687b      	ldr	r3, [r7, #4]
 8105656:	2200      	movs	r2, #0
 8105658:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 810565c:	687b      	ldr	r3, [r7, #4]
 810565e:	2200      	movs	r2, #0
 8105660:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8105664:	687b      	ldr	r3, [r7, #4]
 8105666:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 810566a:	2b00      	cmp	r3, #0
 810566c:	d00e      	beq.n	810568c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 810566e:	687b      	ldr	r3, [r7, #4]
 8105670:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8105674:	685b      	ldr	r3, [r3, #4]
 8105676:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8105678:	687b      	ldr	r3, [r7, #4]
 810567a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 810567e:	4618      	mov	r0, r3
 8105680:	f002 f9fc 	bl	8107a7c <USBD_static_free>
    pdev->pClassData = NULL;
 8105684:	687b      	ldr	r3, [r7, #4]
 8105686:	2200      	movs	r2, #0
 8105688:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 810568c:	2300      	movs	r3, #0
}
 810568e:	4618      	mov	r0, r3
 8105690:	3708      	adds	r7, #8
 8105692:	46bd      	mov	sp, r7
 8105694:	bd80      	pop	{r7, pc}
	...

08105698 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8105698:	b580      	push	{r7, lr}
 810569a:	b086      	sub	sp, #24
 810569c:	af00      	add	r7, sp, #0
 810569e:	6078      	str	r0, [r7, #4]
 81056a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 81056a2:	687b      	ldr	r3, [r7, #4]
 81056a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 81056a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 81056aa:	2300      	movs	r3, #0
 81056ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 81056ae:	2300      	movs	r3, #0
 81056b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 81056b2:	2300      	movs	r3, #0
 81056b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 81056b6:	693b      	ldr	r3, [r7, #16]
 81056b8:	2b00      	cmp	r3, #0
 81056ba:	d101      	bne.n	81056c0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 81056bc:	2303      	movs	r3, #3
 81056be:	e0af      	b.n	8105820 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 81056c0:	683b      	ldr	r3, [r7, #0]
 81056c2:	781b      	ldrb	r3, [r3, #0]
 81056c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 81056c8:	2b00      	cmp	r3, #0
 81056ca:	d03f      	beq.n	810574c <USBD_CDC_Setup+0xb4>
 81056cc:	2b20      	cmp	r3, #32
 81056ce:	f040 809f 	bne.w	8105810 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 81056d2:	683b      	ldr	r3, [r7, #0]
 81056d4:	88db      	ldrh	r3, [r3, #6]
 81056d6:	2b00      	cmp	r3, #0
 81056d8:	d02e      	beq.n	8105738 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 81056da:	683b      	ldr	r3, [r7, #0]
 81056dc:	781b      	ldrb	r3, [r3, #0]
 81056de:	b25b      	sxtb	r3, r3
 81056e0:	2b00      	cmp	r3, #0
 81056e2:	da16      	bge.n	8105712 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 81056e4:	687b      	ldr	r3, [r7, #4]
 81056e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 81056ea:	689b      	ldr	r3, [r3, #8]
 81056ec:	683a      	ldr	r2, [r7, #0]
 81056ee:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 81056f0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 81056f2:	683a      	ldr	r2, [r7, #0]
 81056f4:	88d2      	ldrh	r2, [r2, #6]
 81056f6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 81056f8:	683b      	ldr	r3, [r7, #0]
 81056fa:	88db      	ldrh	r3, [r3, #6]
 81056fc:	2b07      	cmp	r3, #7
 81056fe:	bf28      	it	cs
 8105700:	2307      	movcs	r3, #7
 8105702:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8105704:	693b      	ldr	r3, [r7, #16]
 8105706:	89fa      	ldrh	r2, [r7, #14]
 8105708:	4619      	mov	r1, r3
 810570a:	6878      	ldr	r0, [r7, #4]
 810570c:	f001 fb13 	bl	8106d36 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8105710:	e085      	b.n	810581e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8105712:	683b      	ldr	r3, [r7, #0]
 8105714:	785a      	ldrb	r2, [r3, #1]
 8105716:	693b      	ldr	r3, [r7, #16]
 8105718:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 810571c:	683b      	ldr	r3, [r7, #0]
 810571e:	88db      	ldrh	r3, [r3, #6]
 8105720:	b2da      	uxtb	r2, r3
 8105722:	693b      	ldr	r3, [r7, #16]
 8105724:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8105728:	6939      	ldr	r1, [r7, #16]
 810572a:	683b      	ldr	r3, [r7, #0]
 810572c:	88db      	ldrh	r3, [r3, #6]
 810572e:	461a      	mov	r2, r3
 8105730:	6878      	ldr	r0, [r7, #4]
 8105732:	f001 fb2c 	bl	8106d8e <USBD_CtlPrepareRx>
      break;
 8105736:	e072      	b.n	810581e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8105738:	687b      	ldr	r3, [r7, #4]
 810573a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 810573e:	689b      	ldr	r3, [r3, #8]
 8105740:	683a      	ldr	r2, [r7, #0]
 8105742:	7850      	ldrb	r0, [r2, #1]
 8105744:	2200      	movs	r2, #0
 8105746:	6839      	ldr	r1, [r7, #0]
 8105748:	4798      	blx	r3
      break;
 810574a:	e068      	b.n	810581e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 810574c:	683b      	ldr	r3, [r7, #0]
 810574e:	785b      	ldrb	r3, [r3, #1]
 8105750:	2b0b      	cmp	r3, #11
 8105752:	d852      	bhi.n	81057fa <USBD_CDC_Setup+0x162>
 8105754:	a201      	add	r2, pc, #4	; (adr r2, 810575c <USBD_CDC_Setup+0xc4>)
 8105756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810575a:	bf00      	nop
 810575c:	0810578d 	.word	0x0810578d
 8105760:	08105809 	.word	0x08105809
 8105764:	081057fb 	.word	0x081057fb
 8105768:	081057fb 	.word	0x081057fb
 810576c:	081057fb 	.word	0x081057fb
 8105770:	081057fb 	.word	0x081057fb
 8105774:	081057fb 	.word	0x081057fb
 8105778:	081057fb 	.word	0x081057fb
 810577c:	081057fb 	.word	0x081057fb
 8105780:	081057fb 	.word	0x081057fb
 8105784:	081057b7 	.word	0x081057b7
 8105788:	081057e1 	.word	0x081057e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810578c:	687b      	ldr	r3, [r7, #4]
 810578e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8105792:	b2db      	uxtb	r3, r3
 8105794:	2b03      	cmp	r3, #3
 8105796:	d107      	bne.n	81057a8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8105798:	f107 030a 	add.w	r3, r7, #10
 810579c:	2202      	movs	r2, #2
 810579e:	4619      	mov	r1, r3
 81057a0:	6878      	ldr	r0, [r7, #4]
 81057a2:	f001 fac8 	bl	8106d36 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 81057a6:	e032      	b.n	810580e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 81057a8:	6839      	ldr	r1, [r7, #0]
 81057aa:	6878      	ldr	r0, [r7, #4]
 81057ac:	f001 fa52 	bl	8106c54 <USBD_CtlError>
            ret = USBD_FAIL;
 81057b0:	2303      	movs	r3, #3
 81057b2:	75fb      	strb	r3, [r7, #23]
          break;
 81057b4:	e02b      	b.n	810580e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 81057b6:	687b      	ldr	r3, [r7, #4]
 81057b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 81057bc:	b2db      	uxtb	r3, r3
 81057be:	2b03      	cmp	r3, #3
 81057c0:	d107      	bne.n	81057d2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 81057c2:	f107 030d 	add.w	r3, r7, #13
 81057c6:	2201      	movs	r2, #1
 81057c8:	4619      	mov	r1, r3
 81057ca:	6878      	ldr	r0, [r7, #4]
 81057cc:	f001 fab3 	bl	8106d36 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 81057d0:	e01d      	b.n	810580e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 81057d2:	6839      	ldr	r1, [r7, #0]
 81057d4:	6878      	ldr	r0, [r7, #4]
 81057d6:	f001 fa3d 	bl	8106c54 <USBD_CtlError>
            ret = USBD_FAIL;
 81057da:	2303      	movs	r3, #3
 81057dc:	75fb      	strb	r3, [r7, #23]
          break;
 81057de:	e016      	b.n	810580e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 81057e0:	687b      	ldr	r3, [r7, #4]
 81057e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 81057e6:	b2db      	uxtb	r3, r3
 81057e8:	2b03      	cmp	r3, #3
 81057ea:	d00f      	beq.n	810580c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 81057ec:	6839      	ldr	r1, [r7, #0]
 81057ee:	6878      	ldr	r0, [r7, #4]
 81057f0:	f001 fa30 	bl	8106c54 <USBD_CtlError>
            ret = USBD_FAIL;
 81057f4:	2303      	movs	r3, #3
 81057f6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 81057f8:	e008      	b.n	810580c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 81057fa:	6839      	ldr	r1, [r7, #0]
 81057fc:	6878      	ldr	r0, [r7, #4]
 81057fe:	f001 fa29 	bl	8106c54 <USBD_CtlError>
          ret = USBD_FAIL;
 8105802:	2303      	movs	r3, #3
 8105804:	75fb      	strb	r3, [r7, #23]
          break;
 8105806:	e002      	b.n	810580e <USBD_CDC_Setup+0x176>
          break;
 8105808:	bf00      	nop
 810580a:	e008      	b.n	810581e <USBD_CDC_Setup+0x186>
          break;
 810580c:	bf00      	nop
      }
      break;
 810580e:	e006      	b.n	810581e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8105810:	6839      	ldr	r1, [r7, #0]
 8105812:	6878      	ldr	r0, [r7, #4]
 8105814:	f001 fa1e 	bl	8106c54 <USBD_CtlError>
      ret = USBD_FAIL;
 8105818:	2303      	movs	r3, #3
 810581a:	75fb      	strb	r3, [r7, #23]
      break;
 810581c:	bf00      	nop
  }

  return (uint8_t)ret;
 810581e:	7dfb      	ldrb	r3, [r7, #23]
}
 8105820:	4618      	mov	r0, r3
 8105822:	3718      	adds	r7, #24
 8105824:	46bd      	mov	sp, r7
 8105826:	bd80      	pop	{r7, pc}

08105828 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8105828:	b580      	push	{r7, lr}
 810582a:	b084      	sub	sp, #16
 810582c:	af00      	add	r7, sp, #0
 810582e:	6078      	str	r0, [r7, #4]
 8105830:	460b      	mov	r3, r1
 8105832:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8105834:	687b      	ldr	r3, [r7, #4]
 8105836:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 810583a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 810583c:	687b      	ldr	r3, [r7, #4]
 810583e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8105842:	2b00      	cmp	r3, #0
 8105844:	d101      	bne.n	810584a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8105846:	2303      	movs	r3, #3
 8105848:	e04f      	b.n	81058ea <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 810584a:	687b      	ldr	r3, [r7, #4]
 810584c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8105850:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8105852:	78fa      	ldrb	r2, [r7, #3]
 8105854:	6879      	ldr	r1, [r7, #4]
 8105856:	4613      	mov	r3, r2
 8105858:	009b      	lsls	r3, r3, #2
 810585a:	4413      	add	r3, r2
 810585c:	009b      	lsls	r3, r3, #2
 810585e:	440b      	add	r3, r1
 8105860:	3318      	adds	r3, #24
 8105862:	681b      	ldr	r3, [r3, #0]
 8105864:	2b00      	cmp	r3, #0
 8105866:	d029      	beq.n	81058bc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8105868:	78fa      	ldrb	r2, [r7, #3]
 810586a:	6879      	ldr	r1, [r7, #4]
 810586c:	4613      	mov	r3, r2
 810586e:	009b      	lsls	r3, r3, #2
 8105870:	4413      	add	r3, r2
 8105872:	009b      	lsls	r3, r3, #2
 8105874:	440b      	add	r3, r1
 8105876:	3318      	adds	r3, #24
 8105878:	681a      	ldr	r2, [r3, #0]
 810587a:	78f9      	ldrb	r1, [r7, #3]
 810587c:	68f8      	ldr	r0, [r7, #12]
 810587e:	460b      	mov	r3, r1
 8105880:	00db      	lsls	r3, r3, #3
 8105882:	440b      	add	r3, r1
 8105884:	009b      	lsls	r3, r3, #2
 8105886:	4403      	add	r3, r0
 8105888:	3348      	adds	r3, #72	; 0x48
 810588a:	681b      	ldr	r3, [r3, #0]
 810588c:	fbb2 f1f3 	udiv	r1, r2, r3
 8105890:	fb01 f303 	mul.w	r3, r1, r3
 8105894:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8105896:	2b00      	cmp	r3, #0
 8105898:	d110      	bne.n	81058bc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 810589a:	78fa      	ldrb	r2, [r7, #3]
 810589c:	6879      	ldr	r1, [r7, #4]
 810589e:	4613      	mov	r3, r2
 81058a0:	009b      	lsls	r3, r3, #2
 81058a2:	4413      	add	r3, r2
 81058a4:	009b      	lsls	r3, r3, #2
 81058a6:	440b      	add	r3, r1
 81058a8:	3318      	adds	r3, #24
 81058aa:	2200      	movs	r2, #0
 81058ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 81058ae:	78f9      	ldrb	r1, [r7, #3]
 81058b0:	2300      	movs	r3, #0
 81058b2:	2200      	movs	r2, #0
 81058b4:	6878      	ldr	r0, [r7, #4]
 81058b6:	f002 f801 	bl	81078bc <USBD_LL_Transmit>
 81058ba:	e015      	b.n	81058e8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 81058bc:	68bb      	ldr	r3, [r7, #8]
 81058be:	2200      	movs	r2, #0
 81058c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 81058c4:	687b      	ldr	r3, [r7, #4]
 81058c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 81058ca:	691b      	ldr	r3, [r3, #16]
 81058cc:	2b00      	cmp	r3, #0
 81058ce:	d00b      	beq.n	81058e8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 81058d0:	687b      	ldr	r3, [r7, #4]
 81058d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 81058d6:	691b      	ldr	r3, [r3, #16]
 81058d8:	68ba      	ldr	r2, [r7, #8]
 81058da:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 81058de:	68ba      	ldr	r2, [r7, #8]
 81058e0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 81058e4:	78fa      	ldrb	r2, [r7, #3]
 81058e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 81058e8:	2300      	movs	r3, #0
}
 81058ea:	4618      	mov	r0, r3
 81058ec:	3710      	adds	r7, #16
 81058ee:	46bd      	mov	sp, r7
 81058f0:	bd80      	pop	{r7, pc}

081058f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 81058f2:	b580      	push	{r7, lr}
 81058f4:	b084      	sub	sp, #16
 81058f6:	af00      	add	r7, sp, #0
 81058f8:	6078      	str	r0, [r7, #4]
 81058fa:	460b      	mov	r3, r1
 81058fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 81058fe:	687b      	ldr	r3, [r7, #4]
 8105900:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8105904:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8105906:	687b      	ldr	r3, [r7, #4]
 8105908:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 810590c:	2b00      	cmp	r3, #0
 810590e:	d101      	bne.n	8105914 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8105910:	2303      	movs	r3, #3
 8105912:	e015      	b.n	8105940 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8105914:	78fb      	ldrb	r3, [r7, #3]
 8105916:	4619      	mov	r1, r3
 8105918:	6878      	ldr	r0, [r7, #4]
 810591a:	f002 f83f 	bl	810799c <USBD_LL_GetRxDataSize>
 810591e:	4602      	mov	r2, r0
 8105920:	68fb      	ldr	r3, [r7, #12]
 8105922:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8105926:	687b      	ldr	r3, [r7, #4]
 8105928:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 810592c:	68db      	ldr	r3, [r3, #12]
 810592e:	68fa      	ldr	r2, [r7, #12]
 8105930:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8105934:	68fa      	ldr	r2, [r7, #12]
 8105936:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 810593a:	4611      	mov	r1, r2
 810593c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 810593e:	2300      	movs	r3, #0
}
 8105940:	4618      	mov	r0, r3
 8105942:	3710      	adds	r7, #16
 8105944:	46bd      	mov	sp, r7
 8105946:	bd80      	pop	{r7, pc}

08105948 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8105948:	b580      	push	{r7, lr}
 810594a:	b084      	sub	sp, #16
 810594c:	af00      	add	r7, sp, #0
 810594e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8105950:	687b      	ldr	r3, [r7, #4]
 8105952:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8105956:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8105958:	68fb      	ldr	r3, [r7, #12]
 810595a:	2b00      	cmp	r3, #0
 810595c:	d101      	bne.n	8105962 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 810595e:	2303      	movs	r3, #3
 8105960:	e01b      	b.n	810599a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8105962:	687b      	ldr	r3, [r7, #4]
 8105964:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8105968:	2b00      	cmp	r3, #0
 810596a:	d015      	beq.n	8105998 <USBD_CDC_EP0_RxReady+0x50>
 810596c:	68fb      	ldr	r3, [r7, #12]
 810596e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8105972:	2bff      	cmp	r3, #255	; 0xff
 8105974:	d010      	beq.n	8105998 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8105976:	687b      	ldr	r3, [r7, #4]
 8105978:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 810597c:	689b      	ldr	r3, [r3, #8]
 810597e:	68fa      	ldr	r2, [r7, #12]
 8105980:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8105984:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8105986:	68fa      	ldr	r2, [r7, #12]
 8105988:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 810598c:	b292      	uxth	r2, r2
 810598e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8105990:	68fb      	ldr	r3, [r7, #12]
 8105992:	22ff      	movs	r2, #255	; 0xff
 8105994:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8105998:	2300      	movs	r3, #0
}
 810599a:	4618      	mov	r0, r3
 810599c:	3710      	adds	r7, #16
 810599e:	46bd      	mov	sp, r7
 81059a0:	bd80      	pop	{r7, pc}
	...

081059a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 81059a4:	b480      	push	{r7}
 81059a6:	b083      	sub	sp, #12
 81059a8:	af00      	add	r7, sp, #0
 81059aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 81059ac:	687b      	ldr	r3, [r7, #4]
 81059ae:	2243      	movs	r2, #67	; 0x43
 81059b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 81059b2:	4b03      	ldr	r3, [pc, #12]	; (81059c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 81059b4:	4618      	mov	r0, r3
 81059b6:	370c      	adds	r7, #12
 81059b8:	46bd      	mov	sp, r7
 81059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059be:	4770      	bx	lr
 81059c0:	200000b4 	.word	0x200000b4

081059c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 81059c4:	b480      	push	{r7}
 81059c6:	b083      	sub	sp, #12
 81059c8:	af00      	add	r7, sp, #0
 81059ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 81059cc:	687b      	ldr	r3, [r7, #4]
 81059ce:	2243      	movs	r2, #67	; 0x43
 81059d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 81059d2:	4b03      	ldr	r3, [pc, #12]	; (81059e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 81059d4:	4618      	mov	r0, r3
 81059d6:	370c      	adds	r7, #12
 81059d8:	46bd      	mov	sp, r7
 81059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059de:	4770      	bx	lr
 81059e0:	20000070 	.word	0x20000070

081059e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 81059e4:	b480      	push	{r7}
 81059e6:	b083      	sub	sp, #12
 81059e8:	af00      	add	r7, sp, #0
 81059ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 81059ec:	687b      	ldr	r3, [r7, #4]
 81059ee:	2243      	movs	r2, #67	; 0x43
 81059f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 81059f2:	4b03      	ldr	r3, [pc, #12]	; (8105a00 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 81059f4:	4618      	mov	r0, r3
 81059f6:	370c      	adds	r7, #12
 81059f8:	46bd      	mov	sp, r7
 81059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059fe:	4770      	bx	lr
 8105a00:	200000f8 	.word	0x200000f8

08105a04 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8105a04:	b480      	push	{r7}
 8105a06:	b083      	sub	sp, #12
 8105a08:	af00      	add	r7, sp, #0
 8105a0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8105a0c:	687b      	ldr	r3, [r7, #4]
 8105a0e:	220a      	movs	r2, #10
 8105a10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8105a12:	4b03      	ldr	r3, [pc, #12]	; (8105a20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8105a14:	4618      	mov	r0, r3
 8105a16:	370c      	adds	r7, #12
 8105a18:	46bd      	mov	sp, r7
 8105a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a1e:	4770      	bx	lr
 8105a20:	2000002c 	.word	0x2000002c

08105a24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8105a24:	b480      	push	{r7}
 8105a26:	b083      	sub	sp, #12
 8105a28:	af00      	add	r7, sp, #0
 8105a2a:	6078      	str	r0, [r7, #4]
 8105a2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8105a2e:	683b      	ldr	r3, [r7, #0]
 8105a30:	2b00      	cmp	r3, #0
 8105a32:	d101      	bne.n	8105a38 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8105a34:	2303      	movs	r3, #3
 8105a36:	e004      	b.n	8105a42 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8105a38:	687b      	ldr	r3, [r7, #4]
 8105a3a:	683a      	ldr	r2, [r7, #0]
 8105a3c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8105a40:	2300      	movs	r3, #0
}
 8105a42:	4618      	mov	r0, r3
 8105a44:	370c      	adds	r7, #12
 8105a46:	46bd      	mov	sp, r7
 8105a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a4c:	4770      	bx	lr

08105a4e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8105a4e:	b480      	push	{r7}
 8105a50:	b087      	sub	sp, #28
 8105a52:	af00      	add	r7, sp, #0
 8105a54:	60f8      	str	r0, [r7, #12]
 8105a56:	60b9      	str	r1, [r7, #8]
 8105a58:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8105a5a:	68fb      	ldr	r3, [r7, #12]
 8105a5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8105a60:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8105a62:	697b      	ldr	r3, [r7, #20]
 8105a64:	2b00      	cmp	r3, #0
 8105a66:	d101      	bne.n	8105a6c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8105a68:	2303      	movs	r3, #3
 8105a6a:	e008      	b.n	8105a7e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8105a6c:	697b      	ldr	r3, [r7, #20]
 8105a6e:	68ba      	ldr	r2, [r7, #8]
 8105a70:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8105a74:	697b      	ldr	r3, [r7, #20]
 8105a76:	687a      	ldr	r2, [r7, #4]
 8105a78:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8105a7c:	2300      	movs	r3, #0
}
 8105a7e:	4618      	mov	r0, r3
 8105a80:	371c      	adds	r7, #28
 8105a82:	46bd      	mov	sp, r7
 8105a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a88:	4770      	bx	lr

08105a8a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8105a8a:	b480      	push	{r7}
 8105a8c:	b085      	sub	sp, #20
 8105a8e:	af00      	add	r7, sp, #0
 8105a90:	6078      	str	r0, [r7, #4]
 8105a92:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8105a94:	687b      	ldr	r3, [r7, #4]
 8105a96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8105a9a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8105a9c:	68fb      	ldr	r3, [r7, #12]
 8105a9e:	2b00      	cmp	r3, #0
 8105aa0:	d101      	bne.n	8105aa6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8105aa2:	2303      	movs	r3, #3
 8105aa4:	e004      	b.n	8105ab0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8105aa6:	68fb      	ldr	r3, [r7, #12]
 8105aa8:	683a      	ldr	r2, [r7, #0]
 8105aaa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8105aae:	2300      	movs	r3, #0
}
 8105ab0:	4618      	mov	r0, r3
 8105ab2:	3714      	adds	r7, #20
 8105ab4:	46bd      	mov	sp, r7
 8105ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105aba:	4770      	bx	lr

08105abc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8105abc:	b580      	push	{r7, lr}
 8105abe:	b084      	sub	sp, #16
 8105ac0:	af00      	add	r7, sp, #0
 8105ac2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8105ac4:	687b      	ldr	r3, [r7, #4]
 8105ac6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8105aca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8105acc:	687b      	ldr	r3, [r7, #4]
 8105ace:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8105ad2:	2b00      	cmp	r3, #0
 8105ad4:	d101      	bne.n	8105ada <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8105ad6:	2303      	movs	r3, #3
 8105ad8:	e016      	b.n	8105b08 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8105ada:	687b      	ldr	r3, [r7, #4]
 8105adc:	7c1b      	ldrb	r3, [r3, #16]
 8105ade:	2b00      	cmp	r3, #0
 8105ae0:	d109      	bne.n	8105af6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8105ae2:	68fb      	ldr	r3, [r7, #12]
 8105ae4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8105ae8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8105aec:	2101      	movs	r1, #1
 8105aee:	6878      	ldr	r0, [r7, #4]
 8105af0:	f001 ff1c 	bl	810792c <USBD_LL_PrepareReceive>
 8105af4:	e007      	b.n	8105b06 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8105af6:	68fb      	ldr	r3, [r7, #12]
 8105af8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8105afc:	2340      	movs	r3, #64	; 0x40
 8105afe:	2101      	movs	r1, #1
 8105b00:	6878      	ldr	r0, [r7, #4]
 8105b02:	f001 ff13 	bl	810792c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8105b06:	2300      	movs	r3, #0
}
 8105b08:	4618      	mov	r0, r3
 8105b0a:	3710      	adds	r7, #16
 8105b0c:	46bd      	mov	sp, r7
 8105b0e:	bd80      	pop	{r7, pc}

08105b10 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8105b10:	b580      	push	{r7, lr}
 8105b12:	b086      	sub	sp, #24
 8105b14:	af00      	add	r7, sp, #0
 8105b16:	60f8      	str	r0, [r7, #12]
 8105b18:	60b9      	str	r1, [r7, #8]
 8105b1a:	4613      	mov	r3, r2
 8105b1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8105b1e:	68fb      	ldr	r3, [r7, #12]
 8105b20:	2b00      	cmp	r3, #0
 8105b22:	d101      	bne.n	8105b28 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8105b24:	2303      	movs	r3, #3
 8105b26:	e01f      	b.n	8105b68 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8105b28:	68fb      	ldr	r3, [r7, #12]
 8105b2a:	2200      	movs	r2, #0
 8105b2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8105b30:	68fb      	ldr	r3, [r7, #12]
 8105b32:	2200      	movs	r2, #0
 8105b34:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8105b38:	68fb      	ldr	r3, [r7, #12]
 8105b3a:	2200      	movs	r2, #0
 8105b3c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8105b40:	68bb      	ldr	r3, [r7, #8]
 8105b42:	2b00      	cmp	r3, #0
 8105b44:	d003      	beq.n	8105b4e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8105b46:	68fb      	ldr	r3, [r7, #12]
 8105b48:	68ba      	ldr	r2, [r7, #8]
 8105b4a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8105b4e:	68fb      	ldr	r3, [r7, #12]
 8105b50:	2201      	movs	r2, #1
 8105b52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8105b56:	68fb      	ldr	r3, [r7, #12]
 8105b58:	79fa      	ldrb	r2, [r7, #7]
 8105b5a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8105b5c:	68f8      	ldr	r0, [r7, #12]
 8105b5e:	f001 fcef 	bl	8107540 <USBD_LL_Init>
 8105b62:	4603      	mov	r3, r0
 8105b64:	75fb      	strb	r3, [r7, #23]

  return ret;
 8105b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8105b68:	4618      	mov	r0, r3
 8105b6a:	3718      	adds	r7, #24
 8105b6c:	46bd      	mov	sp, r7
 8105b6e:	bd80      	pop	{r7, pc}

08105b70 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8105b70:	b580      	push	{r7, lr}
 8105b72:	b084      	sub	sp, #16
 8105b74:	af00      	add	r7, sp, #0
 8105b76:	6078      	str	r0, [r7, #4]
 8105b78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8105b7a:	2300      	movs	r3, #0
 8105b7c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8105b7e:	683b      	ldr	r3, [r7, #0]
 8105b80:	2b00      	cmp	r3, #0
 8105b82:	d101      	bne.n	8105b88 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8105b84:	2303      	movs	r3, #3
 8105b86:	e016      	b.n	8105bb6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8105b88:	687b      	ldr	r3, [r7, #4]
 8105b8a:	683a      	ldr	r2, [r7, #0]
 8105b8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8105b90:	687b      	ldr	r3, [r7, #4]
 8105b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105b98:	2b00      	cmp	r3, #0
 8105b9a:	d00b      	beq.n	8105bb4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8105b9c:	687b      	ldr	r3, [r7, #4]
 8105b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105ba4:	f107 020e 	add.w	r2, r7, #14
 8105ba8:	4610      	mov	r0, r2
 8105baa:	4798      	blx	r3
 8105bac:	4602      	mov	r2, r0
 8105bae:	687b      	ldr	r3, [r7, #4]
 8105bb0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8105bb4:	2300      	movs	r3, #0
}
 8105bb6:	4618      	mov	r0, r3
 8105bb8:	3710      	adds	r7, #16
 8105bba:	46bd      	mov	sp, r7
 8105bbc:	bd80      	pop	{r7, pc}

08105bbe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8105bbe:	b580      	push	{r7, lr}
 8105bc0:	b082      	sub	sp, #8
 8105bc2:	af00      	add	r7, sp, #0
 8105bc4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8105bc6:	6878      	ldr	r0, [r7, #4]
 8105bc8:	f001 fd04 	bl	81075d4 <USBD_LL_Start>
 8105bcc:	4603      	mov	r3, r0
}
 8105bce:	4618      	mov	r0, r3
 8105bd0:	3708      	adds	r7, #8
 8105bd2:	46bd      	mov	sp, r7
 8105bd4:	bd80      	pop	{r7, pc}

08105bd6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8105bd6:	b480      	push	{r7}
 8105bd8:	b083      	sub	sp, #12
 8105bda:	af00      	add	r7, sp, #0
 8105bdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8105bde:	2300      	movs	r3, #0
}
 8105be0:	4618      	mov	r0, r3
 8105be2:	370c      	adds	r7, #12
 8105be4:	46bd      	mov	sp, r7
 8105be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105bea:	4770      	bx	lr

08105bec <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8105bec:	b580      	push	{r7, lr}
 8105bee:	b084      	sub	sp, #16
 8105bf0:	af00      	add	r7, sp, #0
 8105bf2:	6078      	str	r0, [r7, #4]
 8105bf4:	460b      	mov	r3, r1
 8105bf6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8105bf8:	2303      	movs	r3, #3
 8105bfa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8105bfc:	687b      	ldr	r3, [r7, #4]
 8105bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105c02:	2b00      	cmp	r3, #0
 8105c04:	d009      	beq.n	8105c1a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8105c06:	687b      	ldr	r3, [r7, #4]
 8105c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105c0c:	681b      	ldr	r3, [r3, #0]
 8105c0e:	78fa      	ldrb	r2, [r7, #3]
 8105c10:	4611      	mov	r1, r2
 8105c12:	6878      	ldr	r0, [r7, #4]
 8105c14:	4798      	blx	r3
 8105c16:	4603      	mov	r3, r0
 8105c18:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8105c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8105c1c:	4618      	mov	r0, r3
 8105c1e:	3710      	adds	r7, #16
 8105c20:	46bd      	mov	sp, r7
 8105c22:	bd80      	pop	{r7, pc}

08105c24 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8105c24:	b580      	push	{r7, lr}
 8105c26:	b082      	sub	sp, #8
 8105c28:	af00      	add	r7, sp, #0
 8105c2a:	6078      	str	r0, [r7, #4]
 8105c2c:	460b      	mov	r3, r1
 8105c2e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8105c30:	687b      	ldr	r3, [r7, #4]
 8105c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105c36:	2b00      	cmp	r3, #0
 8105c38:	d007      	beq.n	8105c4a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8105c3a:	687b      	ldr	r3, [r7, #4]
 8105c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105c40:	685b      	ldr	r3, [r3, #4]
 8105c42:	78fa      	ldrb	r2, [r7, #3]
 8105c44:	4611      	mov	r1, r2
 8105c46:	6878      	ldr	r0, [r7, #4]
 8105c48:	4798      	blx	r3
  }

  return USBD_OK;
 8105c4a:	2300      	movs	r3, #0
}
 8105c4c:	4618      	mov	r0, r3
 8105c4e:	3708      	adds	r7, #8
 8105c50:	46bd      	mov	sp, r7
 8105c52:	bd80      	pop	{r7, pc}

08105c54 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8105c54:	b580      	push	{r7, lr}
 8105c56:	b084      	sub	sp, #16
 8105c58:	af00      	add	r7, sp, #0
 8105c5a:	6078      	str	r0, [r7, #4]
 8105c5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8105c5e:	687b      	ldr	r3, [r7, #4]
 8105c60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8105c64:	6839      	ldr	r1, [r7, #0]
 8105c66:	4618      	mov	r0, r3
 8105c68:	f000 ffba 	bl	8106be0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8105c6c:	687b      	ldr	r3, [r7, #4]
 8105c6e:	2201      	movs	r2, #1
 8105c70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8105c74:	687b      	ldr	r3, [r7, #4]
 8105c76:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8105c7a:	461a      	mov	r2, r3
 8105c7c:	687b      	ldr	r3, [r7, #4]
 8105c7e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8105c82:	687b      	ldr	r3, [r7, #4]
 8105c84:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8105c88:	f003 031f 	and.w	r3, r3, #31
 8105c8c:	2b02      	cmp	r3, #2
 8105c8e:	d01a      	beq.n	8105cc6 <USBD_LL_SetupStage+0x72>
 8105c90:	2b02      	cmp	r3, #2
 8105c92:	d822      	bhi.n	8105cda <USBD_LL_SetupStage+0x86>
 8105c94:	2b00      	cmp	r3, #0
 8105c96:	d002      	beq.n	8105c9e <USBD_LL_SetupStage+0x4a>
 8105c98:	2b01      	cmp	r3, #1
 8105c9a:	d00a      	beq.n	8105cb2 <USBD_LL_SetupStage+0x5e>
 8105c9c:	e01d      	b.n	8105cda <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8105c9e:	687b      	ldr	r3, [r7, #4]
 8105ca0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8105ca4:	4619      	mov	r1, r3
 8105ca6:	6878      	ldr	r0, [r7, #4]
 8105ca8:	f000 fa62 	bl	8106170 <USBD_StdDevReq>
 8105cac:	4603      	mov	r3, r0
 8105cae:	73fb      	strb	r3, [r7, #15]
      break;
 8105cb0:	e020      	b.n	8105cf4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8105cb2:	687b      	ldr	r3, [r7, #4]
 8105cb4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8105cb8:	4619      	mov	r1, r3
 8105cba:	6878      	ldr	r0, [r7, #4]
 8105cbc:	f000 fac6 	bl	810624c <USBD_StdItfReq>
 8105cc0:	4603      	mov	r3, r0
 8105cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8105cc4:	e016      	b.n	8105cf4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8105cc6:	687b      	ldr	r3, [r7, #4]
 8105cc8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8105ccc:	4619      	mov	r1, r3
 8105cce:	6878      	ldr	r0, [r7, #4]
 8105cd0:	f000 fb05 	bl	81062de <USBD_StdEPReq>
 8105cd4:	4603      	mov	r3, r0
 8105cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8105cd8:	e00c      	b.n	8105cf4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8105cda:	687b      	ldr	r3, [r7, #4]
 8105cdc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8105ce0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8105ce4:	b2db      	uxtb	r3, r3
 8105ce6:	4619      	mov	r1, r3
 8105ce8:	6878      	ldr	r0, [r7, #4]
 8105cea:	f001 fd19 	bl	8107720 <USBD_LL_StallEP>
 8105cee:	4603      	mov	r3, r0
 8105cf0:	73fb      	strb	r3, [r7, #15]
      break;
 8105cf2:	bf00      	nop
  }

  return ret;
 8105cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8105cf6:	4618      	mov	r0, r3
 8105cf8:	3710      	adds	r7, #16
 8105cfa:	46bd      	mov	sp, r7
 8105cfc:	bd80      	pop	{r7, pc}

08105cfe <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8105cfe:	b580      	push	{r7, lr}
 8105d00:	b086      	sub	sp, #24
 8105d02:	af00      	add	r7, sp, #0
 8105d04:	60f8      	str	r0, [r7, #12]
 8105d06:	460b      	mov	r3, r1
 8105d08:	607a      	str	r2, [r7, #4]
 8105d0a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8105d0c:	7afb      	ldrb	r3, [r7, #11]
 8105d0e:	2b00      	cmp	r3, #0
 8105d10:	d138      	bne.n	8105d84 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8105d12:	68fb      	ldr	r3, [r7, #12]
 8105d14:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8105d18:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8105d1a:	68fb      	ldr	r3, [r7, #12]
 8105d1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8105d20:	2b03      	cmp	r3, #3
 8105d22:	d14a      	bne.n	8105dba <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8105d24:	693b      	ldr	r3, [r7, #16]
 8105d26:	689a      	ldr	r2, [r3, #8]
 8105d28:	693b      	ldr	r3, [r7, #16]
 8105d2a:	68db      	ldr	r3, [r3, #12]
 8105d2c:	429a      	cmp	r2, r3
 8105d2e:	d913      	bls.n	8105d58 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8105d30:	693b      	ldr	r3, [r7, #16]
 8105d32:	689a      	ldr	r2, [r3, #8]
 8105d34:	693b      	ldr	r3, [r7, #16]
 8105d36:	68db      	ldr	r3, [r3, #12]
 8105d38:	1ad2      	subs	r2, r2, r3
 8105d3a:	693b      	ldr	r3, [r7, #16]
 8105d3c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8105d3e:	693b      	ldr	r3, [r7, #16]
 8105d40:	68da      	ldr	r2, [r3, #12]
 8105d42:	693b      	ldr	r3, [r7, #16]
 8105d44:	689b      	ldr	r3, [r3, #8]
 8105d46:	4293      	cmp	r3, r2
 8105d48:	bf28      	it	cs
 8105d4a:	4613      	movcs	r3, r2
 8105d4c:	461a      	mov	r2, r3
 8105d4e:	6879      	ldr	r1, [r7, #4]
 8105d50:	68f8      	ldr	r0, [r7, #12]
 8105d52:	f001 f839 	bl	8106dc8 <USBD_CtlContinueRx>
 8105d56:	e030      	b.n	8105dba <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8105d58:	68fb      	ldr	r3, [r7, #12]
 8105d5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8105d5e:	b2db      	uxtb	r3, r3
 8105d60:	2b03      	cmp	r3, #3
 8105d62:	d10b      	bne.n	8105d7c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8105d64:	68fb      	ldr	r3, [r7, #12]
 8105d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105d6a:	691b      	ldr	r3, [r3, #16]
 8105d6c:	2b00      	cmp	r3, #0
 8105d6e:	d005      	beq.n	8105d7c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8105d70:	68fb      	ldr	r3, [r7, #12]
 8105d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105d76:	691b      	ldr	r3, [r3, #16]
 8105d78:	68f8      	ldr	r0, [r7, #12]
 8105d7a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8105d7c:	68f8      	ldr	r0, [r7, #12]
 8105d7e:	f001 f834 	bl	8106dea <USBD_CtlSendStatus>
 8105d82:	e01a      	b.n	8105dba <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8105d84:	68fb      	ldr	r3, [r7, #12]
 8105d86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8105d8a:	b2db      	uxtb	r3, r3
 8105d8c:	2b03      	cmp	r3, #3
 8105d8e:	d114      	bne.n	8105dba <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8105d90:	68fb      	ldr	r3, [r7, #12]
 8105d92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105d96:	699b      	ldr	r3, [r3, #24]
 8105d98:	2b00      	cmp	r3, #0
 8105d9a:	d00e      	beq.n	8105dba <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8105d9c:	68fb      	ldr	r3, [r7, #12]
 8105d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105da2:	699b      	ldr	r3, [r3, #24]
 8105da4:	7afa      	ldrb	r2, [r7, #11]
 8105da6:	4611      	mov	r1, r2
 8105da8:	68f8      	ldr	r0, [r7, #12]
 8105daa:	4798      	blx	r3
 8105dac:	4603      	mov	r3, r0
 8105dae:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8105db0:	7dfb      	ldrb	r3, [r7, #23]
 8105db2:	2b00      	cmp	r3, #0
 8105db4:	d001      	beq.n	8105dba <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8105db6:	7dfb      	ldrb	r3, [r7, #23]
 8105db8:	e000      	b.n	8105dbc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8105dba:	2300      	movs	r3, #0
}
 8105dbc:	4618      	mov	r0, r3
 8105dbe:	3718      	adds	r7, #24
 8105dc0:	46bd      	mov	sp, r7
 8105dc2:	bd80      	pop	{r7, pc}

08105dc4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8105dc4:	b580      	push	{r7, lr}
 8105dc6:	b086      	sub	sp, #24
 8105dc8:	af00      	add	r7, sp, #0
 8105dca:	60f8      	str	r0, [r7, #12]
 8105dcc:	460b      	mov	r3, r1
 8105dce:	607a      	str	r2, [r7, #4]
 8105dd0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8105dd2:	7afb      	ldrb	r3, [r7, #11]
 8105dd4:	2b00      	cmp	r3, #0
 8105dd6:	d16b      	bne.n	8105eb0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8105dd8:	68fb      	ldr	r3, [r7, #12]
 8105dda:	3314      	adds	r3, #20
 8105ddc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8105dde:	68fb      	ldr	r3, [r7, #12]
 8105de0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8105de4:	2b02      	cmp	r3, #2
 8105de6:	d156      	bne.n	8105e96 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8105de8:	693b      	ldr	r3, [r7, #16]
 8105dea:	689a      	ldr	r2, [r3, #8]
 8105dec:	693b      	ldr	r3, [r7, #16]
 8105dee:	68db      	ldr	r3, [r3, #12]
 8105df0:	429a      	cmp	r2, r3
 8105df2:	d914      	bls.n	8105e1e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8105df4:	693b      	ldr	r3, [r7, #16]
 8105df6:	689a      	ldr	r2, [r3, #8]
 8105df8:	693b      	ldr	r3, [r7, #16]
 8105dfa:	68db      	ldr	r3, [r3, #12]
 8105dfc:	1ad2      	subs	r2, r2, r3
 8105dfe:	693b      	ldr	r3, [r7, #16]
 8105e00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8105e02:	693b      	ldr	r3, [r7, #16]
 8105e04:	689b      	ldr	r3, [r3, #8]
 8105e06:	461a      	mov	r2, r3
 8105e08:	6879      	ldr	r1, [r7, #4]
 8105e0a:	68f8      	ldr	r0, [r7, #12]
 8105e0c:	f000 ffae 	bl	8106d6c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8105e10:	2300      	movs	r3, #0
 8105e12:	2200      	movs	r2, #0
 8105e14:	2100      	movs	r1, #0
 8105e16:	68f8      	ldr	r0, [r7, #12]
 8105e18:	f001 fd88 	bl	810792c <USBD_LL_PrepareReceive>
 8105e1c:	e03b      	b.n	8105e96 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8105e1e:	693b      	ldr	r3, [r7, #16]
 8105e20:	68da      	ldr	r2, [r3, #12]
 8105e22:	693b      	ldr	r3, [r7, #16]
 8105e24:	689b      	ldr	r3, [r3, #8]
 8105e26:	429a      	cmp	r2, r3
 8105e28:	d11c      	bne.n	8105e64 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8105e2a:	693b      	ldr	r3, [r7, #16]
 8105e2c:	685a      	ldr	r2, [r3, #4]
 8105e2e:	693b      	ldr	r3, [r7, #16]
 8105e30:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8105e32:	429a      	cmp	r2, r3
 8105e34:	d316      	bcc.n	8105e64 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8105e36:	693b      	ldr	r3, [r7, #16]
 8105e38:	685a      	ldr	r2, [r3, #4]
 8105e3a:	68fb      	ldr	r3, [r7, #12]
 8105e3c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8105e40:	429a      	cmp	r2, r3
 8105e42:	d20f      	bcs.n	8105e64 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8105e44:	2200      	movs	r2, #0
 8105e46:	2100      	movs	r1, #0
 8105e48:	68f8      	ldr	r0, [r7, #12]
 8105e4a:	f000 ff8f 	bl	8106d6c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8105e4e:	68fb      	ldr	r3, [r7, #12]
 8105e50:	2200      	movs	r2, #0
 8105e52:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8105e56:	2300      	movs	r3, #0
 8105e58:	2200      	movs	r2, #0
 8105e5a:	2100      	movs	r1, #0
 8105e5c:	68f8      	ldr	r0, [r7, #12]
 8105e5e:	f001 fd65 	bl	810792c <USBD_LL_PrepareReceive>
 8105e62:	e018      	b.n	8105e96 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8105e64:	68fb      	ldr	r3, [r7, #12]
 8105e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8105e6a:	b2db      	uxtb	r3, r3
 8105e6c:	2b03      	cmp	r3, #3
 8105e6e:	d10b      	bne.n	8105e88 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8105e70:	68fb      	ldr	r3, [r7, #12]
 8105e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105e76:	68db      	ldr	r3, [r3, #12]
 8105e78:	2b00      	cmp	r3, #0
 8105e7a:	d005      	beq.n	8105e88 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8105e7c:	68fb      	ldr	r3, [r7, #12]
 8105e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105e82:	68db      	ldr	r3, [r3, #12]
 8105e84:	68f8      	ldr	r0, [r7, #12]
 8105e86:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8105e88:	2180      	movs	r1, #128	; 0x80
 8105e8a:	68f8      	ldr	r0, [r7, #12]
 8105e8c:	f001 fc48 	bl	8107720 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8105e90:	68f8      	ldr	r0, [r7, #12]
 8105e92:	f000 ffbd 	bl	8106e10 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8105e96:	68fb      	ldr	r3, [r7, #12]
 8105e98:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8105e9c:	2b01      	cmp	r3, #1
 8105e9e:	d122      	bne.n	8105ee6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8105ea0:	68f8      	ldr	r0, [r7, #12]
 8105ea2:	f7ff fe98 	bl	8105bd6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8105ea6:	68fb      	ldr	r3, [r7, #12]
 8105ea8:	2200      	movs	r2, #0
 8105eaa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8105eae:	e01a      	b.n	8105ee6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8105eb0:	68fb      	ldr	r3, [r7, #12]
 8105eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8105eb6:	b2db      	uxtb	r3, r3
 8105eb8:	2b03      	cmp	r3, #3
 8105eba:	d114      	bne.n	8105ee6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8105ebc:	68fb      	ldr	r3, [r7, #12]
 8105ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105ec2:	695b      	ldr	r3, [r3, #20]
 8105ec4:	2b00      	cmp	r3, #0
 8105ec6:	d00e      	beq.n	8105ee6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8105ec8:	68fb      	ldr	r3, [r7, #12]
 8105eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105ece:	695b      	ldr	r3, [r3, #20]
 8105ed0:	7afa      	ldrb	r2, [r7, #11]
 8105ed2:	4611      	mov	r1, r2
 8105ed4:	68f8      	ldr	r0, [r7, #12]
 8105ed6:	4798      	blx	r3
 8105ed8:	4603      	mov	r3, r0
 8105eda:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8105edc:	7dfb      	ldrb	r3, [r7, #23]
 8105ede:	2b00      	cmp	r3, #0
 8105ee0:	d001      	beq.n	8105ee6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8105ee2:	7dfb      	ldrb	r3, [r7, #23]
 8105ee4:	e000      	b.n	8105ee8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8105ee6:	2300      	movs	r3, #0
}
 8105ee8:	4618      	mov	r0, r3
 8105eea:	3718      	adds	r7, #24
 8105eec:	46bd      	mov	sp, r7
 8105eee:	bd80      	pop	{r7, pc}

08105ef0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8105ef0:	b580      	push	{r7, lr}
 8105ef2:	b082      	sub	sp, #8
 8105ef4:	af00      	add	r7, sp, #0
 8105ef6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8105ef8:	687b      	ldr	r3, [r7, #4]
 8105efa:	2201      	movs	r2, #1
 8105efc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8105f00:	687b      	ldr	r3, [r7, #4]
 8105f02:	2200      	movs	r2, #0
 8105f04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8105f08:	687b      	ldr	r3, [r7, #4]
 8105f0a:	2200      	movs	r2, #0
 8105f0c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8105f0e:	687b      	ldr	r3, [r7, #4]
 8105f10:	2200      	movs	r2, #0
 8105f12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8105f16:	687b      	ldr	r3, [r7, #4]
 8105f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105f1c:	2b00      	cmp	r3, #0
 8105f1e:	d101      	bne.n	8105f24 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8105f20:	2303      	movs	r3, #3
 8105f22:	e02f      	b.n	8105f84 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8105f24:	687b      	ldr	r3, [r7, #4]
 8105f26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8105f2a:	2b00      	cmp	r3, #0
 8105f2c:	d00f      	beq.n	8105f4e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8105f2e:	687b      	ldr	r3, [r7, #4]
 8105f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105f34:	685b      	ldr	r3, [r3, #4]
 8105f36:	2b00      	cmp	r3, #0
 8105f38:	d009      	beq.n	8105f4e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8105f3a:	687b      	ldr	r3, [r7, #4]
 8105f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8105f40:	685b      	ldr	r3, [r3, #4]
 8105f42:	687a      	ldr	r2, [r7, #4]
 8105f44:	6852      	ldr	r2, [r2, #4]
 8105f46:	b2d2      	uxtb	r2, r2
 8105f48:	4611      	mov	r1, r2
 8105f4a:	6878      	ldr	r0, [r7, #4]
 8105f4c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8105f4e:	2340      	movs	r3, #64	; 0x40
 8105f50:	2200      	movs	r2, #0
 8105f52:	2100      	movs	r1, #0
 8105f54:	6878      	ldr	r0, [r7, #4]
 8105f56:	f001 fb6f 	bl	8107638 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8105f5a:	687b      	ldr	r3, [r7, #4]
 8105f5c:	2201      	movs	r2, #1
 8105f5e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8105f62:	687b      	ldr	r3, [r7, #4]
 8105f64:	2240      	movs	r2, #64	; 0x40
 8105f66:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8105f6a:	2340      	movs	r3, #64	; 0x40
 8105f6c:	2200      	movs	r2, #0
 8105f6e:	2180      	movs	r1, #128	; 0x80
 8105f70:	6878      	ldr	r0, [r7, #4]
 8105f72:	f001 fb61 	bl	8107638 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8105f76:	687b      	ldr	r3, [r7, #4]
 8105f78:	2201      	movs	r2, #1
 8105f7a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8105f7c:	687b      	ldr	r3, [r7, #4]
 8105f7e:	2240      	movs	r2, #64	; 0x40
 8105f80:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8105f82:	2300      	movs	r3, #0
}
 8105f84:	4618      	mov	r0, r3
 8105f86:	3708      	adds	r7, #8
 8105f88:	46bd      	mov	sp, r7
 8105f8a:	bd80      	pop	{r7, pc}

08105f8c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8105f8c:	b480      	push	{r7}
 8105f8e:	b083      	sub	sp, #12
 8105f90:	af00      	add	r7, sp, #0
 8105f92:	6078      	str	r0, [r7, #4]
 8105f94:	460b      	mov	r3, r1
 8105f96:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8105f98:	687b      	ldr	r3, [r7, #4]
 8105f9a:	78fa      	ldrb	r2, [r7, #3]
 8105f9c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8105f9e:	2300      	movs	r3, #0
}
 8105fa0:	4618      	mov	r0, r3
 8105fa2:	370c      	adds	r7, #12
 8105fa4:	46bd      	mov	sp, r7
 8105fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105faa:	4770      	bx	lr

08105fac <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8105fac:	b480      	push	{r7}
 8105fae:	b083      	sub	sp, #12
 8105fb0:	af00      	add	r7, sp, #0
 8105fb2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8105fb4:	687b      	ldr	r3, [r7, #4]
 8105fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8105fba:	b2da      	uxtb	r2, r3
 8105fbc:	687b      	ldr	r3, [r7, #4]
 8105fbe:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8105fc2:	687b      	ldr	r3, [r7, #4]
 8105fc4:	2204      	movs	r2, #4
 8105fc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8105fca:	2300      	movs	r3, #0
}
 8105fcc:	4618      	mov	r0, r3
 8105fce:	370c      	adds	r7, #12
 8105fd0:	46bd      	mov	sp, r7
 8105fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105fd6:	4770      	bx	lr

08105fd8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8105fd8:	b480      	push	{r7}
 8105fda:	b083      	sub	sp, #12
 8105fdc:	af00      	add	r7, sp, #0
 8105fde:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8105fe0:	687b      	ldr	r3, [r7, #4]
 8105fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8105fe6:	b2db      	uxtb	r3, r3
 8105fe8:	2b04      	cmp	r3, #4
 8105fea:	d106      	bne.n	8105ffa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8105fec:	687b      	ldr	r3, [r7, #4]
 8105fee:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8105ff2:	b2da      	uxtb	r2, r3
 8105ff4:	687b      	ldr	r3, [r7, #4]
 8105ff6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8105ffa:	2300      	movs	r3, #0
}
 8105ffc:	4618      	mov	r0, r3
 8105ffe:	370c      	adds	r7, #12
 8106000:	46bd      	mov	sp, r7
 8106002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106006:	4770      	bx	lr

08106008 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8106008:	b580      	push	{r7, lr}
 810600a:	b082      	sub	sp, #8
 810600c:	af00      	add	r7, sp, #0
 810600e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8106010:	687b      	ldr	r3, [r7, #4]
 8106012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8106016:	2b00      	cmp	r3, #0
 8106018:	d101      	bne.n	810601e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 810601a:	2303      	movs	r3, #3
 810601c:	e012      	b.n	8106044 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810601e:	687b      	ldr	r3, [r7, #4]
 8106020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8106024:	b2db      	uxtb	r3, r3
 8106026:	2b03      	cmp	r3, #3
 8106028:	d10b      	bne.n	8106042 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 810602a:	687b      	ldr	r3, [r7, #4]
 810602c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8106030:	69db      	ldr	r3, [r3, #28]
 8106032:	2b00      	cmp	r3, #0
 8106034:	d005      	beq.n	8106042 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8106036:	687b      	ldr	r3, [r7, #4]
 8106038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 810603c:	69db      	ldr	r3, [r3, #28]
 810603e:	6878      	ldr	r0, [r7, #4]
 8106040:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8106042:	2300      	movs	r3, #0
}
 8106044:	4618      	mov	r0, r3
 8106046:	3708      	adds	r7, #8
 8106048:	46bd      	mov	sp, r7
 810604a:	bd80      	pop	{r7, pc}

0810604c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 810604c:	b580      	push	{r7, lr}
 810604e:	b082      	sub	sp, #8
 8106050:	af00      	add	r7, sp, #0
 8106052:	6078      	str	r0, [r7, #4]
 8106054:	460b      	mov	r3, r1
 8106056:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8106058:	687b      	ldr	r3, [r7, #4]
 810605a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 810605e:	2b00      	cmp	r3, #0
 8106060:	d101      	bne.n	8106066 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8106062:	2303      	movs	r3, #3
 8106064:	e014      	b.n	8106090 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8106066:	687b      	ldr	r3, [r7, #4]
 8106068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 810606c:	b2db      	uxtb	r3, r3
 810606e:	2b03      	cmp	r3, #3
 8106070:	d10d      	bne.n	810608e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8106072:	687b      	ldr	r3, [r7, #4]
 8106074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8106078:	6a1b      	ldr	r3, [r3, #32]
 810607a:	2b00      	cmp	r3, #0
 810607c:	d007      	beq.n	810608e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 810607e:	687b      	ldr	r3, [r7, #4]
 8106080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8106084:	6a1b      	ldr	r3, [r3, #32]
 8106086:	78fa      	ldrb	r2, [r7, #3]
 8106088:	4611      	mov	r1, r2
 810608a:	6878      	ldr	r0, [r7, #4]
 810608c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 810608e:	2300      	movs	r3, #0
}
 8106090:	4618      	mov	r0, r3
 8106092:	3708      	adds	r7, #8
 8106094:	46bd      	mov	sp, r7
 8106096:	bd80      	pop	{r7, pc}

08106098 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8106098:	b580      	push	{r7, lr}
 810609a:	b082      	sub	sp, #8
 810609c:	af00      	add	r7, sp, #0
 810609e:	6078      	str	r0, [r7, #4]
 81060a0:	460b      	mov	r3, r1
 81060a2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 81060a4:	687b      	ldr	r3, [r7, #4]
 81060a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 81060aa:	2b00      	cmp	r3, #0
 81060ac:	d101      	bne.n	81060b2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 81060ae:	2303      	movs	r3, #3
 81060b0:	e014      	b.n	81060dc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 81060b2:	687b      	ldr	r3, [r7, #4]
 81060b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 81060b8:	b2db      	uxtb	r3, r3
 81060ba:	2b03      	cmp	r3, #3
 81060bc:	d10d      	bne.n	81060da <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 81060be:	687b      	ldr	r3, [r7, #4]
 81060c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 81060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81060c6:	2b00      	cmp	r3, #0
 81060c8:	d007      	beq.n	81060da <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 81060ca:	687b      	ldr	r3, [r7, #4]
 81060cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 81060d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81060d2:	78fa      	ldrb	r2, [r7, #3]
 81060d4:	4611      	mov	r1, r2
 81060d6:	6878      	ldr	r0, [r7, #4]
 81060d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 81060da:	2300      	movs	r3, #0
}
 81060dc:	4618      	mov	r0, r3
 81060de:	3708      	adds	r7, #8
 81060e0:	46bd      	mov	sp, r7
 81060e2:	bd80      	pop	{r7, pc}

081060e4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 81060e4:	b480      	push	{r7}
 81060e6:	b083      	sub	sp, #12
 81060e8:	af00      	add	r7, sp, #0
 81060ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 81060ec:	2300      	movs	r3, #0
}
 81060ee:	4618      	mov	r0, r3
 81060f0:	370c      	adds	r7, #12
 81060f2:	46bd      	mov	sp, r7
 81060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81060f8:	4770      	bx	lr

081060fa <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 81060fa:	b580      	push	{r7, lr}
 81060fc:	b082      	sub	sp, #8
 81060fe:	af00      	add	r7, sp, #0
 8106100:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8106102:	687b      	ldr	r3, [r7, #4]
 8106104:	2201      	movs	r2, #1
 8106106:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 810610a:	687b      	ldr	r3, [r7, #4]
 810610c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8106110:	2b00      	cmp	r3, #0
 8106112:	d009      	beq.n	8106128 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8106114:	687b      	ldr	r3, [r7, #4]
 8106116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 810611a:	685b      	ldr	r3, [r3, #4]
 810611c:	687a      	ldr	r2, [r7, #4]
 810611e:	6852      	ldr	r2, [r2, #4]
 8106120:	b2d2      	uxtb	r2, r2
 8106122:	4611      	mov	r1, r2
 8106124:	6878      	ldr	r0, [r7, #4]
 8106126:	4798      	blx	r3
  }

  return USBD_OK;
 8106128:	2300      	movs	r3, #0
}
 810612a:	4618      	mov	r0, r3
 810612c:	3708      	adds	r7, #8
 810612e:	46bd      	mov	sp, r7
 8106130:	bd80      	pop	{r7, pc}

08106132 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8106132:	b480      	push	{r7}
 8106134:	b087      	sub	sp, #28
 8106136:	af00      	add	r7, sp, #0
 8106138:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 810613a:	687b      	ldr	r3, [r7, #4]
 810613c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 810613e:	697b      	ldr	r3, [r7, #20]
 8106140:	781b      	ldrb	r3, [r3, #0]
 8106142:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8106144:	697b      	ldr	r3, [r7, #20]
 8106146:	3301      	adds	r3, #1
 8106148:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 810614a:	697b      	ldr	r3, [r7, #20]
 810614c:	781b      	ldrb	r3, [r3, #0]
 810614e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8106150:	8a3b      	ldrh	r3, [r7, #16]
 8106152:	021b      	lsls	r3, r3, #8
 8106154:	b21a      	sxth	r2, r3
 8106156:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 810615a:	4313      	orrs	r3, r2
 810615c:	b21b      	sxth	r3, r3
 810615e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8106160:	89fb      	ldrh	r3, [r7, #14]
}
 8106162:	4618      	mov	r0, r3
 8106164:	371c      	adds	r7, #28
 8106166:	46bd      	mov	sp, r7
 8106168:	f85d 7b04 	ldr.w	r7, [sp], #4
 810616c:	4770      	bx	lr
	...

08106170 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8106170:	b580      	push	{r7, lr}
 8106172:	b084      	sub	sp, #16
 8106174:	af00      	add	r7, sp, #0
 8106176:	6078      	str	r0, [r7, #4]
 8106178:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 810617a:	2300      	movs	r3, #0
 810617c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 810617e:	683b      	ldr	r3, [r7, #0]
 8106180:	781b      	ldrb	r3, [r3, #0]
 8106182:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8106186:	2b40      	cmp	r3, #64	; 0x40
 8106188:	d005      	beq.n	8106196 <USBD_StdDevReq+0x26>
 810618a:	2b40      	cmp	r3, #64	; 0x40
 810618c:	d853      	bhi.n	8106236 <USBD_StdDevReq+0xc6>
 810618e:	2b00      	cmp	r3, #0
 8106190:	d00b      	beq.n	81061aa <USBD_StdDevReq+0x3a>
 8106192:	2b20      	cmp	r3, #32
 8106194:	d14f      	bne.n	8106236 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8106196:	687b      	ldr	r3, [r7, #4]
 8106198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 810619c:	689b      	ldr	r3, [r3, #8]
 810619e:	6839      	ldr	r1, [r7, #0]
 81061a0:	6878      	ldr	r0, [r7, #4]
 81061a2:	4798      	blx	r3
 81061a4:	4603      	mov	r3, r0
 81061a6:	73fb      	strb	r3, [r7, #15]
      break;
 81061a8:	e04a      	b.n	8106240 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 81061aa:	683b      	ldr	r3, [r7, #0]
 81061ac:	785b      	ldrb	r3, [r3, #1]
 81061ae:	2b09      	cmp	r3, #9
 81061b0:	d83b      	bhi.n	810622a <USBD_StdDevReq+0xba>
 81061b2:	a201      	add	r2, pc, #4	; (adr r2, 81061b8 <USBD_StdDevReq+0x48>)
 81061b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81061b8:	0810620d 	.word	0x0810620d
 81061bc:	08106221 	.word	0x08106221
 81061c0:	0810622b 	.word	0x0810622b
 81061c4:	08106217 	.word	0x08106217
 81061c8:	0810622b 	.word	0x0810622b
 81061cc:	081061eb 	.word	0x081061eb
 81061d0:	081061e1 	.word	0x081061e1
 81061d4:	0810622b 	.word	0x0810622b
 81061d8:	08106203 	.word	0x08106203
 81061dc:	081061f5 	.word	0x081061f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 81061e0:	6839      	ldr	r1, [r7, #0]
 81061e2:	6878      	ldr	r0, [r7, #4]
 81061e4:	f000 f9de 	bl	81065a4 <USBD_GetDescriptor>
          break;
 81061e8:	e024      	b.n	8106234 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 81061ea:	6839      	ldr	r1, [r7, #0]
 81061ec:	6878      	ldr	r0, [r7, #4]
 81061ee:	f000 fb6d 	bl	81068cc <USBD_SetAddress>
          break;
 81061f2:	e01f      	b.n	8106234 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 81061f4:	6839      	ldr	r1, [r7, #0]
 81061f6:	6878      	ldr	r0, [r7, #4]
 81061f8:	f000 fbac 	bl	8106954 <USBD_SetConfig>
 81061fc:	4603      	mov	r3, r0
 81061fe:	73fb      	strb	r3, [r7, #15]
          break;
 8106200:	e018      	b.n	8106234 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8106202:	6839      	ldr	r1, [r7, #0]
 8106204:	6878      	ldr	r0, [r7, #4]
 8106206:	f000 fc4b 	bl	8106aa0 <USBD_GetConfig>
          break;
 810620a:	e013      	b.n	8106234 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 810620c:	6839      	ldr	r1, [r7, #0]
 810620e:	6878      	ldr	r0, [r7, #4]
 8106210:	f000 fc7c 	bl	8106b0c <USBD_GetStatus>
          break;
 8106214:	e00e      	b.n	8106234 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8106216:	6839      	ldr	r1, [r7, #0]
 8106218:	6878      	ldr	r0, [r7, #4]
 810621a:	f000 fcab 	bl	8106b74 <USBD_SetFeature>
          break;
 810621e:	e009      	b.n	8106234 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8106220:	6839      	ldr	r1, [r7, #0]
 8106222:	6878      	ldr	r0, [r7, #4]
 8106224:	f000 fcba 	bl	8106b9c <USBD_ClrFeature>
          break;
 8106228:	e004      	b.n	8106234 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 810622a:	6839      	ldr	r1, [r7, #0]
 810622c:	6878      	ldr	r0, [r7, #4]
 810622e:	f000 fd11 	bl	8106c54 <USBD_CtlError>
          break;
 8106232:	bf00      	nop
      }
      break;
 8106234:	e004      	b.n	8106240 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8106236:	6839      	ldr	r1, [r7, #0]
 8106238:	6878      	ldr	r0, [r7, #4]
 810623a:	f000 fd0b 	bl	8106c54 <USBD_CtlError>
      break;
 810623e:	bf00      	nop
  }

  return ret;
 8106240:	7bfb      	ldrb	r3, [r7, #15]
}
 8106242:	4618      	mov	r0, r3
 8106244:	3710      	adds	r7, #16
 8106246:	46bd      	mov	sp, r7
 8106248:	bd80      	pop	{r7, pc}
 810624a:	bf00      	nop

0810624c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 810624c:	b580      	push	{r7, lr}
 810624e:	b084      	sub	sp, #16
 8106250:	af00      	add	r7, sp, #0
 8106252:	6078      	str	r0, [r7, #4]
 8106254:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8106256:	2300      	movs	r3, #0
 8106258:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 810625a:	683b      	ldr	r3, [r7, #0]
 810625c:	781b      	ldrb	r3, [r3, #0]
 810625e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8106262:	2b40      	cmp	r3, #64	; 0x40
 8106264:	d005      	beq.n	8106272 <USBD_StdItfReq+0x26>
 8106266:	2b40      	cmp	r3, #64	; 0x40
 8106268:	d82f      	bhi.n	81062ca <USBD_StdItfReq+0x7e>
 810626a:	2b00      	cmp	r3, #0
 810626c:	d001      	beq.n	8106272 <USBD_StdItfReq+0x26>
 810626e:	2b20      	cmp	r3, #32
 8106270:	d12b      	bne.n	81062ca <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8106272:	687b      	ldr	r3, [r7, #4]
 8106274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8106278:	b2db      	uxtb	r3, r3
 810627a:	3b01      	subs	r3, #1
 810627c:	2b02      	cmp	r3, #2
 810627e:	d81d      	bhi.n	81062bc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8106280:	683b      	ldr	r3, [r7, #0]
 8106282:	889b      	ldrh	r3, [r3, #4]
 8106284:	b2db      	uxtb	r3, r3
 8106286:	2b01      	cmp	r3, #1
 8106288:	d813      	bhi.n	81062b2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 810628a:	687b      	ldr	r3, [r7, #4]
 810628c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8106290:	689b      	ldr	r3, [r3, #8]
 8106292:	6839      	ldr	r1, [r7, #0]
 8106294:	6878      	ldr	r0, [r7, #4]
 8106296:	4798      	blx	r3
 8106298:	4603      	mov	r3, r0
 810629a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 810629c:	683b      	ldr	r3, [r7, #0]
 810629e:	88db      	ldrh	r3, [r3, #6]
 81062a0:	2b00      	cmp	r3, #0
 81062a2:	d110      	bne.n	81062c6 <USBD_StdItfReq+0x7a>
 81062a4:	7bfb      	ldrb	r3, [r7, #15]
 81062a6:	2b00      	cmp	r3, #0
 81062a8:	d10d      	bne.n	81062c6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 81062aa:	6878      	ldr	r0, [r7, #4]
 81062ac:	f000 fd9d 	bl	8106dea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 81062b0:	e009      	b.n	81062c6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 81062b2:	6839      	ldr	r1, [r7, #0]
 81062b4:	6878      	ldr	r0, [r7, #4]
 81062b6:	f000 fccd 	bl	8106c54 <USBD_CtlError>
          break;
 81062ba:	e004      	b.n	81062c6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 81062bc:	6839      	ldr	r1, [r7, #0]
 81062be:	6878      	ldr	r0, [r7, #4]
 81062c0:	f000 fcc8 	bl	8106c54 <USBD_CtlError>
          break;
 81062c4:	e000      	b.n	81062c8 <USBD_StdItfReq+0x7c>
          break;
 81062c6:	bf00      	nop
      }
      break;
 81062c8:	e004      	b.n	81062d4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 81062ca:	6839      	ldr	r1, [r7, #0]
 81062cc:	6878      	ldr	r0, [r7, #4]
 81062ce:	f000 fcc1 	bl	8106c54 <USBD_CtlError>
      break;
 81062d2:	bf00      	nop
  }

  return ret;
 81062d4:	7bfb      	ldrb	r3, [r7, #15]
}
 81062d6:	4618      	mov	r0, r3
 81062d8:	3710      	adds	r7, #16
 81062da:	46bd      	mov	sp, r7
 81062dc:	bd80      	pop	{r7, pc}

081062de <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 81062de:	b580      	push	{r7, lr}
 81062e0:	b084      	sub	sp, #16
 81062e2:	af00      	add	r7, sp, #0
 81062e4:	6078      	str	r0, [r7, #4]
 81062e6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 81062e8:	2300      	movs	r3, #0
 81062ea:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 81062ec:	683b      	ldr	r3, [r7, #0]
 81062ee:	889b      	ldrh	r3, [r3, #4]
 81062f0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 81062f2:	683b      	ldr	r3, [r7, #0]
 81062f4:	781b      	ldrb	r3, [r3, #0]
 81062f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 81062fa:	2b40      	cmp	r3, #64	; 0x40
 81062fc:	d007      	beq.n	810630e <USBD_StdEPReq+0x30>
 81062fe:	2b40      	cmp	r3, #64	; 0x40
 8106300:	f200 8145 	bhi.w	810658e <USBD_StdEPReq+0x2b0>
 8106304:	2b00      	cmp	r3, #0
 8106306:	d00c      	beq.n	8106322 <USBD_StdEPReq+0x44>
 8106308:	2b20      	cmp	r3, #32
 810630a:	f040 8140 	bne.w	810658e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 810630e:	687b      	ldr	r3, [r7, #4]
 8106310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8106314:	689b      	ldr	r3, [r3, #8]
 8106316:	6839      	ldr	r1, [r7, #0]
 8106318:	6878      	ldr	r0, [r7, #4]
 810631a:	4798      	blx	r3
 810631c:	4603      	mov	r3, r0
 810631e:	73fb      	strb	r3, [r7, #15]
      break;
 8106320:	e13a      	b.n	8106598 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8106322:	683b      	ldr	r3, [r7, #0]
 8106324:	785b      	ldrb	r3, [r3, #1]
 8106326:	2b03      	cmp	r3, #3
 8106328:	d007      	beq.n	810633a <USBD_StdEPReq+0x5c>
 810632a:	2b03      	cmp	r3, #3
 810632c:	f300 8129 	bgt.w	8106582 <USBD_StdEPReq+0x2a4>
 8106330:	2b00      	cmp	r3, #0
 8106332:	d07f      	beq.n	8106434 <USBD_StdEPReq+0x156>
 8106334:	2b01      	cmp	r3, #1
 8106336:	d03c      	beq.n	81063b2 <USBD_StdEPReq+0xd4>
 8106338:	e123      	b.n	8106582 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 810633a:	687b      	ldr	r3, [r7, #4]
 810633c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8106340:	b2db      	uxtb	r3, r3
 8106342:	2b02      	cmp	r3, #2
 8106344:	d002      	beq.n	810634c <USBD_StdEPReq+0x6e>
 8106346:	2b03      	cmp	r3, #3
 8106348:	d016      	beq.n	8106378 <USBD_StdEPReq+0x9a>
 810634a:	e02c      	b.n	81063a6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 810634c:	7bbb      	ldrb	r3, [r7, #14]
 810634e:	2b00      	cmp	r3, #0
 8106350:	d00d      	beq.n	810636e <USBD_StdEPReq+0x90>
 8106352:	7bbb      	ldrb	r3, [r7, #14]
 8106354:	2b80      	cmp	r3, #128	; 0x80
 8106356:	d00a      	beq.n	810636e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8106358:	7bbb      	ldrb	r3, [r7, #14]
 810635a:	4619      	mov	r1, r3
 810635c:	6878      	ldr	r0, [r7, #4]
 810635e:	f001 f9df 	bl	8107720 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8106362:	2180      	movs	r1, #128	; 0x80
 8106364:	6878      	ldr	r0, [r7, #4]
 8106366:	f001 f9db 	bl	8107720 <USBD_LL_StallEP>
 810636a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 810636c:	e020      	b.n	81063b0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 810636e:	6839      	ldr	r1, [r7, #0]
 8106370:	6878      	ldr	r0, [r7, #4]
 8106372:	f000 fc6f 	bl	8106c54 <USBD_CtlError>
              break;
 8106376:	e01b      	b.n	81063b0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8106378:	683b      	ldr	r3, [r7, #0]
 810637a:	885b      	ldrh	r3, [r3, #2]
 810637c:	2b00      	cmp	r3, #0
 810637e:	d10e      	bne.n	810639e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8106380:	7bbb      	ldrb	r3, [r7, #14]
 8106382:	2b00      	cmp	r3, #0
 8106384:	d00b      	beq.n	810639e <USBD_StdEPReq+0xc0>
 8106386:	7bbb      	ldrb	r3, [r7, #14]
 8106388:	2b80      	cmp	r3, #128	; 0x80
 810638a:	d008      	beq.n	810639e <USBD_StdEPReq+0xc0>
 810638c:	683b      	ldr	r3, [r7, #0]
 810638e:	88db      	ldrh	r3, [r3, #6]
 8106390:	2b00      	cmp	r3, #0
 8106392:	d104      	bne.n	810639e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8106394:	7bbb      	ldrb	r3, [r7, #14]
 8106396:	4619      	mov	r1, r3
 8106398:	6878      	ldr	r0, [r7, #4]
 810639a:	f001 f9c1 	bl	8107720 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 810639e:	6878      	ldr	r0, [r7, #4]
 81063a0:	f000 fd23 	bl	8106dea <USBD_CtlSendStatus>

              break;
 81063a4:	e004      	b.n	81063b0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 81063a6:	6839      	ldr	r1, [r7, #0]
 81063a8:	6878      	ldr	r0, [r7, #4]
 81063aa:	f000 fc53 	bl	8106c54 <USBD_CtlError>
              break;
 81063ae:	bf00      	nop
          }
          break;
 81063b0:	e0ec      	b.n	810658c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 81063b2:	687b      	ldr	r3, [r7, #4]
 81063b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 81063b8:	b2db      	uxtb	r3, r3
 81063ba:	2b02      	cmp	r3, #2
 81063bc:	d002      	beq.n	81063c4 <USBD_StdEPReq+0xe6>
 81063be:	2b03      	cmp	r3, #3
 81063c0:	d016      	beq.n	81063f0 <USBD_StdEPReq+0x112>
 81063c2:	e030      	b.n	8106426 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 81063c4:	7bbb      	ldrb	r3, [r7, #14]
 81063c6:	2b00      	cmp	r3, #0
 81063c8:	d00d      	beq.n	81063e6 <USBD_StdEPReq+0x108>
 81063ca:	7bbb      	ldrb	r3, [r7, #14]
 81063cc:	2b80      	cmp	r3, #128	; 0x80
 81063ce:	d00a      	beq.n	81063e6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 81063d0:	7bbb      	ldrb	r3, [r7, #14]
 81063d2:	4619      	mov	r1, r3
 81063d4:	6878      	ldr	r0, [r7, #4]
 81063d6:	f001 f9a3 	bl	8107720 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 81063da:	2180      	movs	r1, #128	; 0x80
 81063dc:	6878      	ldr	r0, [r7, #4]
 81063de:	f001 f99f 	bl	8107720 <USBD_LL_StallEP>
 81063e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 81063e4:	e025      	b.n	8106432 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 81063e6:	6839      	ldr	r1, [r7, #0]
 81063e8:	6878      	ldr	r0, [r7, #4]
 81063ea:	f000 fc33 	bl	8106c54 <USBD_CtlError>
              break;
 81063ee:	e020      	b.n	8106432 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 81063f0:	683b      	ldr	r3, [r7, #0]
 81063f2:	885b      	ldrh	r3, [r3, #2]
 81063f4:	2b00      	cmp	r3, #0
 81063f6:	d11b      	bne.n	8106430 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 81063f8:	7bbb      	ldrb	r3, [r7, #14]
 81063fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81063fe:	2b00      	cmp	r3, #0
 8106400:	d004      	beq.n	810640c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8106402:	7bbb      	ldrb	r3, [r7, #14]
 8106404:	4619      	mov	r1, r3
 8106406:	6878      	ldr	r0, [r7, #4]
 8106408:	f001 f9c0 	bl	810778c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 810640c:	6878      	ldr	r0, [r7, #4]
 810640e:	f000 fcec 	bl	8106dea <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8106412:	687b      	ldr	r3, [r7, #4]
 8106414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8106418:	689b      	ldr	r3, [r3, #8]
 810641a:	6839      	ldr	r1, [r7, #0]
 810641c:	6878      	ldr	r0, [r7, #4]
 810641e:	4798      	blx	r3
 8106420:	4603      	mov	r3, r0
 8106422:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8106424:	e004      	b.n	8106430 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8106426:	6839      	ldr	r1, [r7, #0]
 8106428:	6878      	ldr	r0, [r7, #4]
 810642a:	f000 fc13 	bl	8106c54 <USBD_CtlError>
              break;
 810642e:	e000      	b.n	8106432 <USBD_StdEPReq+0x154>
              break;
 8106430:	bf00      	nop
          }
          break;
 8106432:	e0ab      	b.n	810658c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8106434:	687b      	ldr	r3, [r7, #4]
 8106436:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 810643a:	b2db      	uxtb	r3, r3
 810643c:	2b02      	cmp	r3, #2
 810643e:	d002      	beq.n	8106446 <USBD_StdEPReq+0x168>
 8106440:	2b03      	cmp	r3, #3
 8106442:	d032      	beq.n	81064aa <USBD_StdEPReq+0x1cc>
 8106444:	e097      	b.n	8106576 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8106446:	7bbb      	ldrb	r3, [r7, #14]
 8106448:	2b00      	cmp	r3, #0
 810644a:	d007      	beq.n	810645c <USBD_StdEPReq+0x17e>
 810644c:	7bbb      	ldrb	r3, [r7, #14]
 810644e:	2b80      	cmp	r3, #128	; 0x80
 8106450:	d004      	beq.n	810645c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8106452:	6839      	ldr	r1, [r7, #0]
 8106454:	6878      	ldr	r0, [r7, #4]
 8106456:	f000 fbfd 	bl	8106c54 <USBD_CtlError>
                break;
 810645a:	e091      	b.n	8106580 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 810645c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8106460:	2b00      	cmp	r3, #0
 8106462:	da0b      	bge.n	810647c <USBD_StdEPReq+0x19e>
 8106464:	7bbb      	ldrb	r3, [r7, #14]
 8106466:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 810646a:	4613      	mov	r3, r2
 810646c:	009b      	lsls	r3, r3, #2
 810646e:	4413      	add	r3, r2
 8106470:	009b      	lsls	r3, r3, #2
 8106472:	3310      	adds	r3, #16
 8106474:	687a      	ldr	r2, [r7, #4]
 8106476:	4413      	add	r3, r2
 8106478:	3304      	adds	r3, #4
 810647a:	e00b      	b.n	8106494 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 810647c:	7bbb      	ldrb	r3, [r7, #14]
 810647e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8106482:	4613      	mov	r3, r2
 8106484:	009b      	lsls	r3, r3, #2
 8106486:	4413      	add	r3, r2
 8106488:	009b      	lsls	r3, r3, #2
 810648a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 810648e:	687a      	ldr	r2, [r7, #4]
 8106490:	4413      	add	r3, r2
 8106492:	3304      	adds	r3, #4
 8106494:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8106496:	68bb      	ldr	r3, [r7, #8]
 8106498:	2200      	movs	r2, #0
 810649a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 810649c:	68bb      	ldr	r3, [r7, #8]
 810649e:	2202      	movs	r2, #2
 81064a0:	4619      	mov	r1, r3
 81064a2:	6878      	ldr	r0, [r7, #4]
 81064a4:	f000 fc47 	bl	8106d36 <USBD_CtlSendData>
              break;
 81064a8:	e06a      	b.n	8106580 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 81064aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 81064ae:	2b00      	cmp	r3, #0
 81064b0:	da11      	bge.n	81064d6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 81064b2:	7bbb      	ldrb	r3, [r7, #14]
 81064b4:	f003 020f 	and.w	r2, r3, #15
 81064b8:	6879      	ldr	r1, [r7, #4]
 81064ba:	4613      	mov	r3, r2
 81064bc:	009b      	lsls	r3, r3, #2
 81064be:	4413      	add	r3, r2
 81064c0:	009b      	lsls	r3, r3, #2
 81064c2:	440b      	add	r3, r1
 81064c4:	3324      	adds	r3, #36	; 0x24
 81064c6:	881b      	ldrh	r3, [r3, #0]
 81064c8:	2b00      	cmp	r3, #0
 81064ca:	d117      	bne.n	81064fc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 81064cc:	6839      	ldr	r1, [r7, #0]
 81064ce:	6878      	ldr	r0, [r7, #4]
 81064d0:	f000 fbc0 	bl	8106c54 <USBD_CtlError>
                  break;
 81064d4:	e054      	b.n	8106580 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 81064d6:	7bbb      	ldrb	r3, [r7, #14]
 81064d8:	f003 020f 	and.w	r2, r3, #15
 81064dc:	6879      	ldr	r1, [r7, #4]
 81064de:	4613      	mov	r3, r2
 81064e0:	009b      	lsls	r3, r3, #2
 81064e2:	4413      	add	r3, r2
 81064e4:	009b      	lsls	r3, r3, #2
 81064e6:	440b      	add	r3, r1
 81064e8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 81064ec:	881b      	ldrh	r3, [r3, #0]
 81064ee:	2b00      	cmp	r3, #0
 81064f0:	d104      	bne.n	81064fc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 81064f2:	6839      	ldr	r1, [r7, #0]
 81064f4:	6878      	ldr	r0, [r7, #4]
 81064f6:	f000 fbad 	bl	8106c54 <USBD_CtlError>
                  break;
 81064fa:	e041      	b.n	8106580 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 81064fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8106500:	2b00      	cmp	r3, #0
 8106502:	da0b      	bge.n	810651c <USBD_StdEPReq+0x23e>
 8106504:	7bbb      	ldrb	r3, [r7, #14]
 8106506:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 810650a:	4613      	mov	r3, r2
 810650c:	009b      	lsls	r3, r3, #2
 810650e:	4413      	add	r3, r2
 8106510:	009b      	lsls	r3, r3, #2
 8106512:	3310      	adds	r3, #16
 8106514:	687a      	ldr	r2, [r7, #4]
 8106516:	4413      	add	r3, r2
 8106518:	3304      	adds	r3, #4
 810651a:	e00b      	b.n	8106534 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 810651c:	7bbb      	ldrb	r3, [r7, #14]
 810651e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8106522:	4613      	mov	r3, r2
 8106524:	009b      	lsls	r3, r3, #2
 8106526:	4413      	add	r3, r2
 8106528:	009b      	lsls	r3, r3, #2
 810652a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 810652e:	687a      	ldr	r2, [r7, #4]
 8106530:	4413      	add	r3, r2
 8106532:	3304      	adds	r3, #4
 8106534:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8106536:	7bbb      	ldrb	r3, [r7, #14]
 8106538:	2b00      	cmp	r3, #0
 810653a:	d002      	beq.n	8106542 <USBD_StdEPReq+0x264>
 810653c:	7bbb      	ldrb	r3, [r7, #14]
 810653e:	2b80      	cmp	r3, #128	; 0x80
 8106540:	d103      	bne.n	810654a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8106542:	68bb      	ldr	r3, [r7, #8]
 8106544:	2200      	movs	r2, #0
 8106546:	601a      	str	r2, [r3, #0]
 8106548:	e00e      	b.n	8106568 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 810654a:	7bbb      	ldrb	r3, [r7, #14]
 810654c:	4619      	mov	r1, r3
 810654e:	6878      	ldr	r0, [r7, #4]
 8106550:	f001 f952 	bl	81077f8 <USBD_LL_IsStallEP>
 8106554:	4603      	mov	r3, r0
 8106556:	2b00      	cmp	r3, #0
 8106558:	d003      	beq.n	8106562 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 810655a:	68bb      	ldr	r3, [r7, #8]
 810655c:	2201      	movs	r2, #1
 810655e:	601a      	str	r2, [r3, #0]
 8106560:	e002      	b.n	8106568 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8106562:	68bb      	ldr	r3, [r7, #8]
 8106564:	2200      	movs	r2, #0
 8106566:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8106568:	68bb      	ldr	r3, [r7, #8]
 810656a:	2202      	movs	r2, #2
 810656c:	4619      	mov	r1, r3
 810656e:	6878      	ldr	r0, [r7, #4]
 8106570:	f000 fbe1 	bl	8106d36 <USBD_CtlSendData>
              break;
 8106574:	e004      	b.n	8106580 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8106576:	6839      	ldr	r1, [r7, #0]
 8106578:	6878      	ldr	r0, [r7, #4]
 810657a:	f000 fb6b 	bl	8106c54 <USBD_CtlError>
              break;
 810657e:	bf00      	nop
          }
          break;
 8106580:	e004      	b.n	810658c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8106582:	6839      	ldr	r1, [r7, #0]
 8106584:	6878      	ldr	r0, [r7, #4]
 8106586:	f000 fb65 	bl	8106c54 <USBD_CtlError>
          break;
 810658a:	bf00      	nop
      }
      break;
 810658c:	e004      	b.n	8106598 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 810658e:	6839      	ldr	r1, [r7, #0]
 8106590:	6878      	ldr	r0, [r7, #4]
 8106592:	f000 fb5f 	bl	8106c54 <USBD_CtlError>
      break;
 8106596:	bf00      	nop
  }

  return ret;
 8106598:	7bfb      	ldrb	r3, [r7, #15]
}
 810659a:	4618      	mov	r0, r3
 810659c:	3710      	adds	r7, #16
 810659e:	46bd      	mov	sp, r7
 81065a0:	bd80      	pop	{r7, pc}
	...

081065a4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 81065a4:	b580      	push	{r7, lr}
 81065a6:	b084      	sub	sp, #16
 81065a8:	af00      	add	r7, sp, #0
 81065aa:	6078      	str	r0, [r7, #4]
 81065ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 81065ae:	2300      	movs	r3, #0
 81065b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 81065b2:	2300      	movs	r3, #0
 81065b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 81065b6:	2300      	movs	r3, #0
 81065b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 81065ba:	683b      	ldr	r3, [r7, #0]
 81065bc:	885b      	ldrh	r3, [r3, #2]
 81065be:	0a1b      	lsrs	r3, r3, #8
 81065c0:	b29b      	uxth	r3, r3
 81065c2:	3b01      	subs	r3, #1
 81065c4:	2b0e      	cmp	r3, #14
 81065c6:	f200 8152 	bhi.w	810686e <USBD_GetDescriptor+0x2ca>
 81065ca:	a201      	add	r2, pc, #4	; (adr r2, 81065d0 <USBD_GetDescriptor+0x2c>)
 81065cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81065d0:	08106641 	.word	0x08106641
 81065d4:	08106659 	.word	0x08106659
 81065d8:	08106699 	.word	0x08106699
 81065dc:	0810686f 	.word	0x0810686f
 81065e0:	0810686f 	.word	0x0810686f
 81065e4:	0810680f 	.word	0x0810680f
 81065e8:	0810683b 	.word	0x0810683b
 81065ec:	0810686f 	.word	0x0810686f
 81065f0:	0810686f 	.word	0x0810686f
 81065f4:	0810686f 	.word	0x0810686f
 81065f8:	0810686f 	.word	0x0810686f
 81065fc:	0810686f 	.word	0x0810686f
 8106600:	0810686f 	.word	0x0810686f
 8106604:	0810686f 	.word	0x0810686f
 8106608:	0810660d 	.word	0x0810660d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 810660c:	687b      	ldr	r3, [r7, #4]
 810660e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8106612:	69db      	ldr	r3, [r3, #28]
 8106614:	2b00      	cmp	r3, #0
 8106616:	d00b      	beq.n	8106630 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8106618:	687b      	ldr	r3, [r7, #4]
 810661a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 810661e:	69db      	ldr	r3, [r3, #28]
 8106620:	687a      	ldr	r2, [r7, #4]
 8106622:	7c12      	ldrb	r2, [r2, #16]
 8106624:	f107 0108 	add.w	r1, r7, #8
 8106628:	4610      	mov	r0, r2
 810662a:	4798      	blx	r3
 810662c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 810662e:	e126      	b.n	810687e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8106630:	6839      	ldr	r1, [r7, #0]
 8106632:	6878      	ldr	r0, [r7, #4]
 8106634:	f000 fb0e 	bl	8106c54 <USBD_CtlError>
        err++;
 8106638:	7afb      	ldrb	r3, [r7, #11]
 810663a:	3301      	adds	r3, #1
 810663c:	72fb      	strb	r3, [r7, #11]
      break;
 810663e:	e11e      	b.n	810687e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8106640:	687b      	ldr	r3, [r7, #4]
 8106642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8106646:	681b      	ldr	r3, [r3, #0]
 8106648:	687a      	ldr	r2, [r7, #4]
 810664a:	7c12      	ldrb	r2, [r2, #16]
 810664c:	f107 0108 	add.w	r1, r7, #8
 8106650:	4610      	mov	r0, r2
 8106652:	4798      	blx	r3
 8106654:	60f8      	str	r0, [r7, #12]
      break;
 8106656:	e112      	b.n	810687e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8106658:	687b      	ldr	r3, [r7, #4]
 810665a:	7c1b      	ldrb	r3, [r3, #16]
 810665c:	2b00      	cmp	r3, #0
 810665e:	d10d      	bne.n	810667c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8106660:	687b      	ldr	r3, [r7, #4]
 8106662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8106666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106668:	f107 0208 	add.w	r2, r7, #8
 810666c:	4610      	mov	r0, r2
 810666e:	4798      	blx	r3
 8106670:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8106672:	68fb      	ldr	r3, [r7, #12]
 8106674:	3301      	adds	r3, #1
 8106676:	2202      	movs	r2, #2
 8106678:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 810667a:	e100      	b.n	810687e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 810667c:	687b      	ldr	r3, [r7, #4]
 810667e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8106682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106684:	f107 0208 	add.w	r2, r7, #8
 8106688:	4610      	mov	r0, r2
 810668a:	4798      	blx	r3
 810668c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 810668e:	68fb      	ldr	r3, [r7, #12]
 8106690:	3301      	adds	r3, #1
 8106692:	2202      	movs	r2, #2
 8106694:	701a      	strb	r2, [r3, #0]
      break;
 8106696:	e0f2      	b.n	810687e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8106698:	683b      	ldr	r3, [r7, #0]
 810669a:	885b      	ldrh	r3, [r3, #2]
 810669c:	b2db      	uxtb	r3, r3
 810669e:	2b05      	cmp	r3, #5
 81066a0:	f200 80ac 	bhi.w	81067fc <USBD_GetDescriptor+0x258>
 81066a4:	a201      	add	r2, pc, #4	; (adr r2, 81066ac <USBD_GetDescriptor+0x108>)
 81066a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81066aa:	bf00      	nop
 81066ac:	081066c5 	.word	0x081066c5
 81066b0:	081066f9 	.word	0x081066f9
 81066b4:	0810672d 	.word	0x0810672d
 81066b8:	08106761 	.word	0x08106761
 81066bc:	08106795 	.word	0x08106795
 81066c0:	081067c9 	.word	0x081067c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 81066c4:	687b      	ldr	r3, [r7, #4]
 81066c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 81066ca:	685b      	ldr	r3, [r3, #4]
 81066cc:	2b00      	cmp	r3, #0
 81066ce:	d00b      	beq.n	81066e8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 81066d0:	687b      	ldr	r3, [r7, #4]
 81066d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 81066d6:	685b      	ldr	r3, [r3, #4]
 81066d8:	687a      	ldr	r2, [r7, #4]
 81066da:	7c12      	ldrb	r2, [r2, #16]
 81066dc:	f107 0108 	add.w	r1, r7, #8
 81066e0:	4610      	mov	r0, r2
 81066e2:	4798      	blx	r3
 81066e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 81066e6:	e091      	b.n	810680c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 81066e8:	6839      	ldr	r1, [r7, #0]
 81066ea:	6878      	ldr	r0, [r7, #4]
 81066ec:	f000 fab2 	bl	8106c54 <USBD_CtlError>
            err++;
 81066f0:	7afb      	ldrb	r3, [r7, #11]
 81066f2:	3301      	adds	r3, #1
 81066f4:	72fb      	strb	r3, [r7, #11]
          break;
 81066f6:	e089      	b.n	810680c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 81066f8:	687b      	ldr	r3, [r7, #4]
 81066fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 81066fe:	689b      	ldr	r3, [r3, #8]
 8106700:	2b00      	cmp	r3, #0
 8106702:	d00b      	beq.n	810671c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8106704:	687b      	ldr	r3, [r7, #4]
 8106706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 810670a:	689b      	ldr	r3, [r3, #8]
 810670c:	687a      	ldr	r2, [r7, #4]
 810670e:	7c12      	ldrb	r2, [r2, #16]
 8106710:	f107 0108 	add.w	r1, r7, #8
 8106714:	4610      	mov	r0, r2
 8106716:	4798      	blx	r3
 8106718:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 810671a:	e077      	b.n	810680c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 810671c:	6839      	ldr	r1, [r7, #0]
 810671e:	6878      	ldr	r0, [r7, #4]
 8106720:	f000 fa98 	bl	8106c54 <USBD_CtlError>
            err++;
 8106724:	7afb      	ldrb	r3, [r7, #11]
 8106726:	3301      	adds	r3, #1
 8106728:	72fb      	strb	r3, [r7, #11]
          break;
 810672a:	e06f      	b.n	810680c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 810672c:	687b      	ldr	r3, [r7, #4]
 810672e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8106732:	68db      	ldr	r3, [r3, #12]
 8106734:	2b00      	cmp	r3, #0
 8106736:	d00b      	beq.n	8106750 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8106738:	687b      	ldr	r3, [r7, #4]
 810673a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 810673e:	68db      	ldr	r3, [r3, #12]
 8106740:	687a      	ldr	r2, [r7, #4]
 8106742:	7c12      	ldrb	r2, [r2, #16]
 8106744:	f107 0108 	add.w	r1, r7, #8
 8106748:	4610      	mov	r0, r2
 810674a:	4798      	blx	r3
 810674c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 810674e:	e05d      	b.n	810680c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8106750:	6839      	ldr	r1, [r7, #0]
 8106752:	6878      	ldr	r0, [r7, #4]
 8106754:	f000 fa7e 	bl	8106c54 <USBD_CtlError>
            err++;
 8106758:	7afb      	ldrb	r3, [r7, #11]
 810675a:	3301      	adds	r3, #1
 810675c:	72fb      	strb	r3, [r7, #11]
          break;
 810675e:	e055      	b.n	810680c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8106760:	687b      	ldr	r3, [r7, #4]
 8106762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8106766:	691b      	ldr	r3, [r3, #16]
 8106768:	2b00      	cmp	r3, #0
 810676a:	d00b      	beq.n	8106784 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 810676c:	687b      	ldr	r3, [r7, #4]
 810676e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8106772:	691b      	ldr	r3, [r3, #16]
 8106774:	687a      	ldr	r2, [r7, #4]
 8106776:	7c12      	ldrb	r2, [r2, #16]
 8106778:	f107 0108 	add.w	r1, r7, #8
 810677c:	4610      	mov	r0, r2
 810677e:	4798      	blx	r3
 8106780:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8106782:	e043      	b.n	810680c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8106784:	6839      	ldr	r1, [r7, #0]
 8106786:	6878      	ldr	r0, [r7, #4]
 8106788:	f000 fa64 	bl	8106c54 <USBD_CtlError>
            err++;
 810678c:	7afb      	ldrb	r3, [r7, #11]
 810678e:	3301      	adds	r3, #1
 8106790:	72fb      	strb	r3, [r7, #11]
          break;
 8106792:	e03b      	b.n	810680c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8106794:	687b      	ldr	r3, [r7, #4]
 8106796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 810679a:	695b      	ldr	r3, [r3, #20]
 810679c:	2b00      	cmp	r3, #0
 810679e:	d00b      	beq.n	81067b8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 81067a0:	687b      	ldr	r3, [r7, #4]
 81067a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 81067a6:	695b      	ldr	r3, [r3, #20]
 81067a8:	687a      	ldr	r2, [r7, #4]
 81067aa:	7c12      	ldrb	r2, [r2, #16]
 81067ac:	f107 0108 	add.w	r1, r7, #8
 81067b0:	4610      	mov	r0, r2
 81067b2:	4798      	blx	r3
 81067b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 81067b6:	e029      	b.n	810680c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 81067b8:	6839      	ldr	r1, [r7, #0]
 81067ba:	6878      	ldr	r0, [r7, #4]
 81067bc:	f000 fa4a 	bl	8106c54 <USBD_CtlError>
            err++;
 81067c0:	7afb      	ldrb	r3, [r7, #11]
 81067c2:	3301      	adds	r3, #1
 81067c4:	72fb      	strb	r3, [r7, #11]
          break;
 81067c6:	e021      	b.n	810680c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 81067c8:	687b      	ldr	r3, [r7, #4]
 81067ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 81067ce:	699b      	ldr	r3, [r3, #24]
 81067d0:	2b00      	cmp	r3, #0
 81067d2:	d00b      	beq.n	81067ec <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 81067d4:	687b      	ldr	r3, [r7, #4]
 81067d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 81067da:	699b      	ldr	r3, [r3, #24]
 81067dc:	687a      	ldr	r2, [r7, #4]
 81067de:	7c12      	ldrb	r2, [r2, #16]
 81067e0:	f107 0108 	add.w	r1, r7, #8
 81067e4:	4610      	mov	r0, r2
 81067e6:	4798      	blx	r3
 81067e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 81067ea:	e00f      	b.n	810680c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 81067ec:	6839      	ldr	r1, [r7, #0]
 81067ee:	6878      	ldr	r0, [r7, #4]
 81067f0:	f000 fa30 	bl	8106c54 <USBD_CtlError>
            err++;
 81067f4:	7afb      	ldrb	r3, [r7, #11]
 81067f6:	3301      	adds	r3, #1
 81067f8:	72fb      	strb	r3, [r7, #11]
          break;
 81067fa:	e007      	b.n	810680c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 81067fc:	6839      	ldr	r1, [r7, #0]
 81067fe:	6878      	ldr	r0, [r7, #4]
 8106800:	f000 fa28 	bl	8106c54 <USBD_CtlError>
          err++;
 8106804:	7afb      	ldrb	r3, [r7, #11]
 8106806:	3301      	adds	r3, #1
 8106808:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 810680a:	bf00      	nop
      }
      break;
 810680c:	e037      	b.n	810687e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 810680e:	687b      	ldr	r3, [r7, #4]
 8106810:	7c1b      	ldrb	r3, [r3, #16]
 8106812:	2b00      	cmp	r3, #0
 8106814:	d109      	bne.n	810682a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8106816:	687b      	ldr	r3, [r7, #4]
 8106818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 810681c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810681e:	f107 0208 	add.w	r2, r7, #8
 8106822:	4610      	mov	r0, r2
 8106824:	4798      	blx	r3
 8106826:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8106828:	e029      	b.n	810687e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 810682a:	6839      	ldr	r1, [r7, #0]
 810682c:	6878      	ldr	r0, [r7, #4]
 810682e:	f000 fa11 	bl	8106c54 <USBD_CtlError>
        err++;
 8106832:	7afb      	ldrb	r3, [r7, #11]
 8106834:	3301      	adds	r3, #1
 8106836:	72fb      	strb	r3, [r7, #11]
      break;
 8106838:	e021      	b.n	810687e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 810683a:	687b      	ldr	r3, [r7, #4]
 810683c:	7c1b      	ldrb	r3, [r3, #16]
 810683e:	2b00      	cmp	r3, #0
 8106840:	d10d      	bne.n	810685e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8106842:	687b      	ldr	r3, [r7, #4]
 8106844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8106848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810684a:	f107 0208 	add.w	r2, r7, #8
 810684e:	4610      	mov	r0, r2
 8106850:	4798      	blx	r3
 8106852:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8106854:	68fb      	ldr	r3, [r7, #12]
 8106856:	3301      	adds	r3, #1
 8106858:	2207      	movs	r2, #7
 810685a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 810685c:	e00f      	b.n	810687e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 810685e:	6839      	ldr	r1, [r7, #0]
 8106860:	6878      	ldr	r0, [r7, #4]
 8106862:	f000 f9f7 	bl	8106c54 <USBD_CtlError>
        err++;
 8106866:	7afb      	ldrb	r3, [r7, #11]
 8106868:	3301      	adds	r3, #1
 810686a:	72fb      	strb	r3, [r7, #11]
      break;
 810686c:	e007      	b.n	810687e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 810686e:	6839      	ldr	r1, [r7, #0]
 8106870:	6878      	ldr	r0, [r7, #4]
 8106872:	f000 f9ef 	bl	8106c54 <USBD_CtlError>
      err++;
 8106876:	7afb      	ldrb	r3, [r7, #11]
 8106878:	3301      	adds	r3, #1
 810687a:	72fb      	strb	r3, [r7, #11]
      break;
 810687c:	bf00      	nop
  }

  if (err != 0U)
 810687e:	7afb      	ldrb	r3, [r7, #11]
 8106880:	2b00      	cmp	r3, #0
 8106882:	d11e      	bne.n	81068c2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8106884:	683b      	ldr	r3, [r7, #0]
 8106886:	88db      	ldrh	r3, [r3, #6]
 8106888:	2b00      	cmp	r3, #0
 810688a:	d016      	beq.n	81068ba <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 810688c:	893b      	ldrh	r3, [r7, #8]
 810688e:	2b00      	cmp	r3, #0
 8106890:	d00e      	beq.n	81068b0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8106892:	683b      	ldr	r3, [r7, #0]
 8106894:	88da      	ldrh	r2, [r3, #6]
 8106896:	893b      	ldrh	r3, [r7, #8]
 8106898:	4293      	cmp	r3, r2
 810689a:	bf28      	it	cs
 810689c:	4613      	movcs	r3, r2
 810689e:	b29b      	uxth	r3, r3
 81068a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 81068a2:	893b      	ldrh	r3, [r7, #8]
 81068a4:	461a      	mov	r2, r3
 81068a6:	68f9      	ldr	r1, [r7, #12]
 81068a8:	6878      	ldr	r0, [r7, #4]
 81068aa:	f000 fa44 	bl	8106d36 <USBD_CtlSendData>
 81068ae:	e009      	b.n	81068c4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 81068b0:	6839      	ldr	r1, [r7, #0]
 81068b2:	6878      	ldr	r0, [r7, #4]
 81068b4:	f000 f9ce 	bl	8106c54 <USBD_CtlError>
 81068b8:	e004      	b.n	81068c4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 81068ba:	6878      	ldr	r0, [r7, #4]
 81068bc:	f000 fa95 	bl	8106dea <USBD_CtlSendStatus>
 81068c0:	e000      	b.n	81068c4 <USBD_GetDescriptor+0x320>
    return;
 81068c2:	bf00      	nop
  }
}
 81068c4:	3710      	adds	r7, #16
 81068c6:	46bd      	mov	sp, r7
 81068c8:	bd80      	pop	{r7, pc}
 81068ca:	bf00      	nop

081068cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 81068cc:	b580      	push	{r7, lr}
 81068ce:	b084      	sub	sp, #16
 81068d0:	af00      	add	r7, sp, #0
 81068d2:	6078      	str	r0, [r7, #4]
 81068d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 81068d6:	683b      	ldr	r3, [r7, #0]
 81068d8:	889b      	ldrh	r3, [r3, #4]
 81068da:	2b00      	cmp	r3, #0
 81068dc:	d131      	bne.n	8106942 <USBD_SetAddress+0x76>
 81068de:	683b      	ldr	r3, [r7, #0]
 81068e0:	88db      	ldrh	r3, [r3, #6]
 81068e2:	2b00      	cmp	r3, #0
 81068e4:	d12d      	bne.n	8106942 <USBD_SetAddress+0x76>
 81068e6:	683b      	ldr	r3, [r7, #0]
 81068e8:	885b      	ldrh	r3, [r3, #2]
 81068ea:	2b7f      	cmp	r3, #127	; 0x7f
 81068ec:	d829      	bhi.n	8106942 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 81068ee:	683b      	ldr	r3, [r7, #0]
 81068f0:	885b      	ldrh	r3, [r3, #2]
 81068f2:	b2db      	uxtb	r3, r3
 81068f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81068f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 81068fa:	687b      	ldr	r3, [r7, #4]
 81068fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8106900:	b2db      	uxtb	r3, r3
 8106902:	2b03      	cmp	r3, #3
 8106904:	d104      	bne.n	8106910 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8106906:	6839      	ldr	r1, [r7, #0]
 8106908:	6878      	ldr	r0, [r7, #4]
 810690a:	f000 f9a3 	bl	8106c54 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810690e:	e01d      	b.n	810694c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8106910:	687b      	ldr	r3, [r7, #4]
 8106912:	7bfa      	ldrb	r2, [r7, #15]
 8106914:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8106918:	7bfb      	ldrb	r3, [r7, #15]
 810691a:	4619      	mov	r1, r3
 810691c:	6878      	ldr	r0, [r7, #4]
 810691e:	f000 ff97 	bl	8107850 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8106922:	6878      	ldr	r0, [r7, #4]
 8106924:	f000 fa61 	bl	8106dea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8106928:	7bfb      	ldrb	r3, [r7, #15]
 810692a:	2b00      	cmp	r3, #0
 810692c:	d004      	beq.n	8106938 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 810692e:	687b      	ldr	r3, [r7, #4]
 8106930:	2202      	movs	r2, #2
 8106932:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8106936:	e009      	b.n	810694c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8106938:	687b      	ldr	r3, [r7, #4]
 810693a:	2201      	movs	r2, #1
 810693c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8106940:	e004      	b.n	810694c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8106942:	6839      	ldr	r1, [r7, #0]
 8106944:	6878      	ldr	r0, [r7, #4]
 8106946:	f000 f985 	bl	8106c54 <USBD_CtlError>
  }
}
 810694a:	bf00      	nop
 810694c:	bf00      	nop
 810694e:	3710      	adds	r7, #16
 8106950:	46bd      	mov	sp, r7
 8106952:	bd80      	pop	{r7, pc}

08106954 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8106954:	b580      	push	{r7, lr}
 8106956:	b084      	sub	sp, #16
 8106958:	af00      	add	r7, sp, #0
 810695a:	6078      	str	r0, [r7, #4]
 810695c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 810695e:	2300      	movs	r3, #0
 8106960:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8106962:	683b      	ldr	r3, [r7, #0]
 8106964:	885b      	ldrh	r3, [r3, #2]
 8106966:	b2da      	uxtb	r2, r3
 8106968:	4b4c      	ldr	r3, [pc, #304]	; (8106a9c <USBD_SetConfig+0x148>)
 810696a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 810696c:	4b4b      	ldr	r3, [pc, #300]	; (8106a9c <USBD_SetConfig+0x148>)
 810696e:	781b      	ldrb	r3, [r3, #0]
 8106970:	2b01      	cmp	r3, #1
 8106972:	d905      	bls.n	8106980 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8106974:	6839      	ldr	r1, [r7, #0]
 8106976:	6878      	ldr	r0, [r7, #4]
 8106978:	f000 f96c 	bl	8106c54 <USBD_CtlError>
    return USBD_FAIL;
 810697c:	2303      	movs	r3, #3
 810697e:	e088      	b.n	8106a92 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8106980:	687b      	ldr	r3, [r7, #4]
 8106982:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8106986:	b2db      	uxtb	r3, r3
 8106988:	2b02      	cmp	r3, #2
 810698a:	d002      	beq.n	8106992 <USBD_SetConfig+0x3e>
 810698c:	2b03      	cmp	r3, #3
 810698e:	d025      	beq.n	81069dc <USBD_SetConfig+0x88>
 8106990:	e071      	b.n	8106a76 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8106992:	4b42      	ldr	r3, [pc, #264]	; (8106a9c <USBD_SetConfig+0x148>)
 8106994:	781b      	ldrb	r3, [r3, #0]
 8106996:	2b00      	cmp	r3, #0
 8106998:	d01c      	beq.n	81069d4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 810699a:	4b40      	ldr	r3, [pc, #256]	; (8106a9c <USBD_SetConfig+0x148>)
 810699c:	781b      	ldrb	r3, [r3, #0]
 810699e:	461a      	mov	r2, r3
 81069a0:	687b      	ldr	r3, [r7, #4]
 81069a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 81069a4:	4b3d      	ldr	r3, [pc, #244]	; (8106a9c <USBD_SetConfig+0x148>)
 81069a6:	781b      	ldrb	r3, [r3, #0]
 81069a8:	4619      	mov	r1, r3
 81069aa:	6878      	ldr	r0, [r7, #4]
 81069ac:	f7ff f91e 	bl	8105bec <USBD_SetClassConfig>
 81069b0:	4603      	mov	r3, r0
 81069b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 81069b4:	7bfb      	ldrb	r3, [r7, #15]
 81069b6:	2b00      	cmp	r3, #0
 81069b8:	d004      	beq.n	81069c4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 81069ba:	6839      	ldr	r1, [r7, #0]
 81069bc:	6878      	ldr	r0, [r7, #4]
 81069be:	f000 f949 	bl	8106c54 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 81069c2:	e065      	b.n	8106a90 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 81069c4:	6878      	ldr	r0, [r7, #4]
 81069c6:	f000 fa10 	bl	8106dea <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 81069ca:	687b      	ldr	r3, [r7, #4]
 81069cc:	2203      	movs	r2, #3
 81069ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 81069d2:	e05d      	b.n	8106a90 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 81069d4:	6878      	ldr	r0, [r7, #4]
 81069d6:	f000 fa08 	bl	8106dea <USBD_CtlSendStatus>
      break;
 81069da:	e059      	b.n	8106a90 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 81069dc:	4b2f      	ldr	r3, [pc, #188]	; (8106a9c <USBD_SetConfig+0x148>)
 81069de:	781b      	ldrb	r3, [r3, #0]
 81069e0:	2b00      	cmp	r3, #0
 81069e2:	d112      	bne.n	8106a0a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 81069e4:	687b      	ldr	r3, [r7, #4]
 81069e6:	2202      	movs	r2, #2
 81069e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 81069ec:	4b2b      	ldr	r3, [pc, #172]	; (8106a9c <USBD_SetConfig+0x148>)
 81069ee:	781b      	ldrb	r3, [r3, #0]
 81069f0:	461a      	mov	r2, r3
 81069f2:	687b      	ldr	r3, [r7, #4]
 81069f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 81069f6:	4b29      	ldr	r3, [pc, #164]	; (8106a9c <USBD_SetConfig+0x148>)
 81069f8:	781b      	ldrb	r3, [r3, #0]
 81069fa:	4619      	mov	r1, r3
 81069fc:	6878      	ldr	r0, [r7, #4]
 81069fe:	f7ff f911 	bl	8105c24 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8106a02:	6878      	ldr	r0, [r7, #4]
 8106a04:	f000 f9f1 	bl	8106dea <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8106a08:	e042      	b.n	8106a90 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8106a0a:	4b24      	ldr	r3, [pc, #144]	; (8106a9c <USBD_SetConfig+0x148>)
 8106a0c:	781b      	ldrb	r3, [r3, #0]
 8106a0e:	461a      	mov	r2, r3
 8106a10:	687b      	ldr	r3, [r7, #4]
 8106a12:	685b      	ldr	r3, [r3, #4]
 8106a14:	429a      	cmp	r2, r3
 8106a16:	d02a      	beq.n	8106a6e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8106a18:	687b      	ldr	r3, [r7, #4]
 8106a1a:	685b      	ldr	r3, [r3, #4]
 8106a1c:	b2db      	uxtb	r3, r3
 8106a1e:	4619      	mov	r1, r3
 8106a20:	6878      	ldr	r0, [r7, #4]
 8106a22:	f7ff f8ff 	bl	8105c24 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8106a26:	4b1d      	ldr	r3, [pc, #116]	; (8106a9c <USBD_SetConfig+0x148>)
 8106a28:	781b      	ldrb	r3, [r3, #0]
 8106a2a:	461a      	mov	r2, r3
 8106a2c:	687b      	ldr	r3, [r7, #4]
 8106a2e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8106a30:	4b1a      	ldr	r3, [pc, #104]	; (8106a9c <USBD_SetConfig+0x148>)
 8106a32:	781b      	ldrb	r3, [r3, #0]
 8106a34:	4619      	mov	r1, r3
 8106a36:	6878      	ldr	r0, [r7, #4]
 8106a38:	f7ff f8d8 	bl	8105bec <USBD_SetClassConfig>
 8106a3c:	4603      	mov	r3, r0
 8106a3e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8106a40:	7bfb      	ldrb	r3, [r7, #15]
 8106a42:	2b00      	cmp	r3, #0
 8106a44:	d00f      	beq.n	8106a66 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8106a46:	6839      	ldr	r1, [r7, #0]
 8106a48:	6878      	ldr	r0, [r7, #4]
 8106a4a:	f000 f903 	bl	8106c54 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8106a4e:	687b      	ldr	r3, [r7, #4]
 8106a50:	685b      	ldr	r3, [r3, #4]
 8106a52:	b2db      	uxtb	r3, r3
 8106a54:	4619      	mov	r1, r3
 8106a56:	6878      	ldr	r0, [r7, #4]
 8106a58:	f7ff f8e4 	bl	8105c24 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8106a5c:	687b      	ldr	r3, [r7, #4]
 8106a5e:	2202      	movs	r2, #2
 8106a60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8106a64:	e014      	b.n	8106a90 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8106a66:	6878      	ldr	r0, [r7, #4]
 8106a68:	f000 f9bf 	bl	8106dea <USBD_CtlSendStatus>
      break;
 8106a6c:	e010      	b.n	8106a90 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8106a6e:	6878      	ldr	r0, [r7, #4]
 8106a70:	f000 f9bb 	bl	8106dea <USBD_CtlSendStatus>
      break;
 8106a74:	e00c      	b.n	8106a90 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8106a76:	6839      	ldr	r1, [r7, #0]
 8106a78:	6878      	ldr	r0, [r7, #4]
 8106a7a:	f000 f8eb 	bl	8106c54 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8106a7e:	4b07      	ldr	r3, [pc, #28]	; (8106a9c <USBD_SetConfig+0x148>)
 8106a80:	781b      	ldrb	r3, [r3, #0]
 8106a82:	4619      	mov	r1, r3
 8106a84:	6878      	ldr	r0, [r7, #4]
 8106a86:	f7ff f8cd 	bl	8105c24 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8106a8a:	2303      	movs	r3, #3
 8106a8c:	73fb      	strb	r3, [r7, #15]
      break;
 8106a8e:	bf00      	nop
  }

  return ret;
 8106a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8106a92:	4618      	mov	r0, r3
 8106a94:	3710      	adds	r7, #16
 8106a96:	46bd      	mov	sp, r7
 8106a98:	bd80      	pop	{r7, pc}
 8106a9a:	bf00      	nop
 8106a9c:	200001d0 	.word	0x200001d0

08106aa0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8106aa0:	b580      	push	{r7, lr}
 8106aa2:	b082      	sub	sp, #8
 8106aa4:	af00      	add	r7, sp, #0
 8106aa6:	6078      	str	r0, [r7, #4]
 8106aa8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8106aaa:	683b      	ldr	r3, [r7, #0]
 8106aac:	88db      	ldrh	r3, [r3, #6]
 8106aae:	2b01      	cmp	r3, #1
 8106ab0:	d004      	beq.n	8106abc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8106ab2:	6839      	ldr	r1, [r7, #0]
 8106ab4:	6878      	ldr	r0, [r7, #4]
 8106ab6:	f000 f8cd 	bl	8106c54 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8106aba:	e023      	b.n	8106b04 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8106abc:	687b      	ldr	r3, [r7, #4]
 8106abe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8106ac2:	b2db      	uxtb	r3, r3
 8106ac4:	2b02      	cmp	r3, #2
 8106ac6:	dc02      	bgt.n	8106ace <USBD_GetConfig+0x2e>
 8106ac8:	2b00      	cmp	r3, #0
 8106aca:	dc03      	bgt.n	8106ad4 <USBD_GetConfig+0x34>
 8106acc:	e015      	b.n	8106afa <USBD_GetConfig+0x5a>
 8106ace:	2b03      	cmp	r3, #3
 8106ad0:	d00b      	beq.n	8106aea <USBD_GetConfig+0x4a>
 8106ad2:	e012      	b.n	8106afa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8106ad4:	687b      	ldr	r3, [r7, #4]
 8106ad6:	2200      	movs	r2, #0
 8106ad8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8106ada:	687b      	ldr	r3, [r7, #4]
 8106adc:	3308      	adds	r3, #8
 8106ade:	2201      	movs	r2, #1
 8106ae0:	4619      	mov	r1, r3
 8106ae2:	6878      	ldr	r0, [r7, #4]
 8106ae4:	f000 f927 	bl	8106d36 <USBD_CtlSendData>
        break;
 8106ae8:	e00c      	b.n	8106b04 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8106aea:	687b      	ldr	r3, [r7, #4]
 8106aec:	3304      	adds	r3, #4
 8106aee:	2201      	movs	r2, #1
 8106af0:	4619      	mov	r1, r3
 8106af2:	6878      	ldr	r0, [r7, #4]
 8106af4:	f000 f91f 	bl	8106d36 <USBD_CtlSendData>
        break;
 8106af8:	e004      	b.n	8106b04 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8106afa:	6839      	ldr	r1, [r7, #0]
 8106afc:	6878      	ldr	r0, [r7, #4]
 8106afe:	f000 f8a9 	bl	8106c54 <USBD_CtlError>
        break;
 8106b02:	bf00      	nop
}
 8106b04:	bf00      	nop
 8106b06:	3708      	adds	r7, #8
 8106b08:	46bd      	mov	sp, r7
 8106b0a:	bd80      	pop	{r7, pc}

08106b0c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8106b0c:	b580      	push	{r7, lr}
 8106b0e:	b082      	sub	sp, #8
 8106b10:	af00      	add	r7, sp, #0
 8106b12:	6078      	str	r0, [r7, #4]
 8106b14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8106b16:	687b      	ldr	r3, [r7, #4]
 8106b18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8106b1c:	b2db      	uxtb	r3, r3
 8106b1e:	3b01      	subs	r3, #1
 8106b20:	2b02      	cmp	r3, #2
 8106b22:	d81e      	bhi.n	8106b62 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8106b24:	683b      	ldr	r3, [r7, #0]
 8106b26:	88db      	ldrh	r3, [r3, #6]
 8106b28:	2b02      	cmp	r3, #2
 8106b2a:	d004      	beq.n	8106b36 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8106b2c:	6839      	ldr	r1, [r7, #0]
 8106b2e:	6878      	ldr	r0, [r7, #4]
 8106b30:	f000 f890 	bl	8106c54 <USBD_CtlError>
        break;
 8106b34:	e01a      	b.n	8106b6c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8106b36:	687b      	ldr	r3, [r7, #4]
 8106b38:	2201      	movs	r2, #1
 8106b3a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8106b3c:	687b      	ldr	r3, [r7, #4]
 8106b3e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8106b42:	2b00      	cmp	r3, #0
 8106b44:	d005      	beq.n	8106b52 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8106b46:	687b      	ldr	r3, [r7, #4]
 8106b48:	68db      	ldr	r3, [r3, #12]
 8106b4a:	f043 0202 	orr.w	r2, r3, #2
 8106b4e:	687b      	ldr	r3, [r7, #4]
 8106b50:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8106b52:	687b      	ldr	r3, [r7, #4]
 8106b54:	330c      	adds	r3, #12
 8106b56:	2202      	movs	r2, #2
 8106b58:	4619      	mov	r1, r3
 8106b5a:	6878      	ldr	r0, [r7, #4]
 8106b5c:	f000 f8eb 	bl	8106d36 <USBD_CtlSendData>
      break;
 8106b60:	e004      	b.n	8106b6c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8106b62:	6839      	ldr	r1, [r7, #0]
 8106b64:	6878      	ldr	r0, [r7, #4]
 8106b66:	f000 f875 	bl	8106c54 <USBD_CtlError>
      break;
 8106b6a:	bf00      	nop
  }
}
 8106b6c:	bf00      	nop
 8106b6e:	3708      	adds	r7, #8
 8106b70:	46bd      	mov	sp, r7
 8106b72:	bd80      	pop	{r7, pc}

08106b74 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8106b74:	b580      	push	{r7, lr}
 8106b76:	b082      	sub	sp, #8
 8106b78:	af00      	add	r7, sp, #0
 8106b7a:	6078      	str	r0, [r7, #4]
 8106b7c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8106b7e:	683b      	ldr	r3, [r7, #0]
 8106b80:	885b      	ldrh	r3, [r3, #2]
 8106b82:	2b01      	cmp	r3, #1
 8106b84:	d106      	bne.n	8106b94 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8106b86:	687b      	ldr	r3, [r7, #4]
 8106b88:	2201      	movs	r2, #1
 8106b8a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8106b8e:	6878      	ldr	r0, [r7, #4]
 8106b90:	f000 f92b 	bl	8106dea <USBD_CtlSendStatus>
  }
}
 8106b94:	bf00      	nop
 8106b96:	3708      	adds	r7, #8
 8106b98:	46bd      	mov	sp, r7
 8106b9a:	bd80      	pop	{r7, pc}

08106b9c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8106b9c:	b580      	push	{r7, lr}
 8106b9e:	b082      	sub	sp, #8
 8106ba0:	af00      	add	r7, sp, #0
 8106ba2:	6078      	str	r0, [r7, #4]
 8106ba4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8106ba6:	687b      	ldr	r3, [r7, #4]
 8106ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8106bac:	b2db      	uxtb	r3, r3
 8106bae:	3b01      	subs	r3, #1
 8106bb0:	2b02      	cmp	r3, #2
 8106bb2:	d80b      	bhi.n	8106bcc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8106bb4:	683b      	ldr	r3, [r7, #0]
 8106bb6:	885b      	ldrh	r3, [r3, #2]
 8106bb8:	2b01      	cmp	r3, #1
 8106bba:	d10c      	bne.n	8106bd6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8106bbc:	687b      	ldr	r3, [r7, #4]
 8106bbe:	2200      	movs	r2, #0
 8106bc0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8106bc4:	6878      	ldr	r0, [r7, #4]
 8106bc6:	f000 f910 	bl	8106dea <USBD_CtlSendStatus>
      }
      break;
 8106bca:	e004      	b.n	8106bd6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8106bcc:	6839      	ldr	r1, [r7, #0]
 8106bce:	6878      	ldr	r0, [r7, #4]
 8106bd0:	f000 f840 	bl	8106c54 <USBD_CtlError>
      break;
 8106bd4:	e000      	b.n	8106bd8 <USBD_ClrFeature+0x3c>
      break;
 8106bd6:	bf00      	nop
  }
}
 8106bd8:	bf00      	nop
 8106bda:	3708      	adds	r7, #8
 8106bdc:	46bd      	mov	sp, r7
 8106bde:	bd80      	pop	{r7, pc}

08106be0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8106be0:	b580      	push	{r7, lr}
 8106be2:	b084      	sub	sp, #16
 8106be4:	af00      	add	r7, sp, #0
 8106be6:	6078      	str	r0, [r7, #4]
 8106be8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8106bea:	683b      	ldr	r3, [r7, #0]
 8106bec:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8106bee:	68fb      	ldr	r3, [r7, #12]
 8106bf0:	781a      	ldrb	r2, [r3, #0]
 8106bf2:	687b      	ldr	r3, [r7, #4]
 8106bf4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8106bf6:	68fb      	ldr	r3, [r7, #12]
 8106bf8:	3301      	adds	r3, #1
 8106bfa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8106bfc:	68fb      	ldr	r3, [r7, #12]
 8106bfe:	781a      	ldrb	r2, [r3, #0]
 8106c00:	687b      	ldr	r3, [r7, #4]
 8106c02:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8106c04:	68fb      	ldr	r3, [r7, #12]
 8106c06:	3301      	adds	r3, #1
 8106c08:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8106c0a:	68f8      	ldr	r0, [r7, #12]
 8106c0c:	f7ff fa91 	bl	8106132 <SWAPBYTE>
 8106c10:	4603      	mov	r3, r0
 8106c12:	461a      	mov	r2, r3
 8106c14:	687b      	ldr	r3, [r7, #4]
 8106c16:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8106c18:	68fb      	ldr	r3, [r7, #12]
 8106c1a:	3301      	adds	r3, #1
 8106c1c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8106c1e:	68fb      	ldr	r3, [r7, #12]
 8106c20:	3301      	adds	r3, #1
 8106c22:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8106c24:	68f8      	ldr	r0, [r7, #12]
 8106c26:	f7ff fa84 	bl	8106132 <SWAPBYTE>
 8106c2a:	4603      	mov	r3, r0
 8106c2c:	461a      	mov	r2, r3
 8106c2e:	687b      	ldr	r3, [r7, #4]
 8106c30:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8106c32:	68fb      	ldr	r3, [r7, #12]
 8106c34:	3301      	adds	r3, #1
 8106c36:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8106c38:	68fb      	ldr	r3, [r7, #12]
 8106c3a:	3301      	adds	r3, #1
 8106c3c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8106c3e:	68f8      	ldr	r0, [r7, #12]
 8106c40:	f7ff fa77 	bl	8106132 <SWAPBYTE>
 8106c44:	4603      	mov	r3, r0
 8106c46:	461a      	mov	r2, r3
 8106c48:	687b      	ldr	r3, [r7, #4]
 8106c4a:	80da      	strh	r2, [r3, #6]
}
 8106c4c:	bf00      	nop
 8106c4e:	3710      	adds	r7, #16
 8106c50:	46bd      	mov	sp, r7
 8106c52:	bd80      	pop	{r7, pc}

08106c54 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8106c54:	b580      	push	{r7, lr}
 8106c56:	b082      	sub	sp, #8
 8106c58:	af00      	add	r7, sp, #0
 8106c5a:	6078      	str	r0, [r7, #4]
 8106c5c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8106c5e:	2180      	movs	r1, #128	; 0x80
 8106c60:	6878      	ldr	r0, [r7, #4]
 8106c62:	f000 fd5d 	bl	8107720 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8106c66:	2100      	movs	r1, #0
 8106c68:	6878      	ldr	r0, [r7, #4]
 8106c6a:	f000 fd59 	bl	8107720 <USBD_LL_StallEP>
}
 8106c6e:	bf00      	nop
 8106c70:	3708      	adds	r7, #8
 8106c72:	46bd      	mov	sp, r7
 8106c74:	bd80      	pop	{r7, pc}

08106c76 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8106c76:	b580      	push	{r7, lr}
 8106c78:	b086      	sub	sp, #24
 8106c7a:	af00      	add	r7, sp, #0
 8106c7c:	60f8      	str	r0, [r7, #12]
 8106c7e:	60b9      	str	r1, [r7, #8]
 8106c80:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8106c82:	2300      	movs	r3, #0
 8106c84:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8106c86:	68fb      	ldr	r3, [r7, #12]
 8106c88:	2b00      	cmp	r3, #0
 8106c8a:	d036      	beq.n	8106cfa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8106c8c:	68fb      	ldr	r3, [r7, #12]
 8106c8e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8106c90:	6938      	ldr	r0, [r7, #16]
 8106c92:	f000 f836 	bl	8106d02 <USBD_GetLen>
 8106c96:	4603      	mov	r3, r0
 8106c98:	3301      	adds	r3, #1
 8106c9a:	b29b      	uxth	r3, r3
 8106c9c:	005b      	lsls	r3, r3, #1
 8106c9e:	b29a      	uxth	r2, r3
 8106ca0:	687b      	ldr	r3, [r7, #4]
 8106ca2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8106ca4:	7dfb      	ldrb	r3, [r7, #23]
 8106ca6:	68ba      	ldr	r2, [r7, #8]
 8106ca8:	4413      	add	r3, r2
 8106caa:	687a      	ldr	r2, [r7, #4]
 8106cac:	7812      	ldrb	r2, [r2, #0]
 8106cae:	701a      	strb	r2, [r3, #0]
  idx++;
 8106cb0:	7dfb      	ldrb	r3, [r7, #23]
 8106cb2:	3301      	adds	r3, #1
 8106cb4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8106cb6:	7dfb      	ldrb	r3, [r7, #23]
 8106cb8:	68ba      	ldr	r2, [r7, #8]
 8106cba:	4413      	add	r3, r2
 8106cbc:	2203      	movs	r2, #3
 8106cbe:	701a      	strb	r2, [r3, #0]
  idx++;
 8106cc0:	7dfb      	ldrb	r3, [r7, #23]
 8106cc2:	3301      	adds	r3, #1
 8106cc4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8106cc6:	e013      	b.n	8106cf0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8106cc8:	7dfb      	ldrb	r3, [r7, #23]
 8106cca:	68ba      	ldr	r2, [r7, #8]
 8106ccc:	4413      	add	r3, r2
 8106cce:	693a      	ldr	r2, [r7, #16]
 8106cd0:	7812      	ldrb	r2, [r2, #0]
 8106cd2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8106cd4:	693b      	ldr	r3, [r7, #16]
 8106cd6:	3301      	adds	r3, #1
 8106cd8:	613b      	str	r3, [r7, #16]
    idx++;
 8106cda:	7dfb      	ldrb	r3, [r7, #23]
 8106cdc:	3301      	adds	r3, #1
 8106cde:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8106ce0:	7dfb      	ldrb	r3, [r7, #23]
 8106ce2:	68ba      	ldr	r2, [r7, #8]
 8106ce4:	4413      	add	r3, r2
 8106ce6:	2200      	movs	r2, #0
 8106ce8:	701a      	strb	r2, [r3, #0]
    idx++;
 8106cea:	7dfb      	ldrb	r3, [r7, #23]
 8106cec:	3301      	adds	r3, #1
 8106cee:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8106cf0:	693b      	ldr	r3, [r7, #16]
 8106cf2:	781b      	ldrb	r3, [r3, #0]
 8106cf4:	2b00      	cmp	r3, #0
 8106cf6:	d1e7      	bne.n	8106cc8 <USBD_GetString+0x52>
 8106cf8:	e000      	b.n	8106cfc <USBD_GetString+0x86>
    return;
 8106cfa:	bf00      	nop
  }
}
 8106cfc:	3718      	adds	r7, #24
 8106cfe:	46bd      	mov	sp, r7
 8106d00:	bd80      	pop	{r7, pc}

08106d02 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8106d02:	b480      	push	{r7}
 8106d04:	b085      	sub	sp, #20
 8106d06:	af00      	add	r7, sp, #0
 8106d08:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8106d0a:	2300      	movs	r3, #0
 8106d0c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8106d0e:	687b      	ldr	r3, [r7, #4]
 8106d10:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8106d12:	e005      	b.n	8106d20 <USBD_GetLen+0x1e>
  {
    len++;
 8106d14:	7bfb      	ldrb	r3, [r7, #15]
 8106d16:	3301      	adds	r3, #1
 8106d18:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8106d1a:	68bb      	ldr	r3, [r7, #8]
 8106d1c:	3301      	adds	r3, #1
 8106d1e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8106d20:	68bb      	ldr	r3, [r7, #8]
 8106d22:	781b      	ldrb	r3, [r3, #0]
 8106d24:	2b00      	cmp	r3, #0
 8106d26:	d1f5      	bne.n	8106d14 <USBD_GetLen+0x12>
  }

  return len;
 8106d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8106d2a:	4618      	mov	r0, r3
 8106d2c:	3714      	adds	r7, #20
 8106d2e:	46bd      	mov	sp, r7
 8106d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d34:	4770      	bx	lr

08106d36 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8106d36:	b580      	push	{r7, lr}
 8106d38:	b084      	sub	sp, #16
 8106d3a:	af00      	add	r7, sp, #0
 8106d3c:	60f8      	str	r0, [r7, #12]
 8106d3e:	60b9      	str	r1, [r7, #8]
 8106d40:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8106d42:	68fb      	ldr	r3, [r7, #12]
 8106d44:	2202      	movs	r2, #2
 8106d46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8106d4a:	68fb      	ldr	r3, [r7, #12]
 8106d4c:	687a      	ldr	r2, [r7, #4]
 8106d4e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8106d50:	68fb      	ldr	r3, [r7, #12]
 8106d52:	687a      	ldr	r2, [r7, #4]
 8106d54:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8106d56:	687b      	ldr	r3, [r7, #4]
 8106d58:	68ba      	ldr	r2, [r7, #8]
 8106d5a:	2100      	movs	r1, #0
 8106d5c:	68f8      	ldr	r0, [r7, #12]
 8106d5e:	f000 fdad 	bl	81078bc <USBD_LL_Transmit>

  return USBD_OK;
 8106d62:	2300      	movs	r3, #0
}
 8106d64:	4618      	mov	r0, r3
 8106d66:	3710      	adds	r7, #16
 8106d68:	46bd      	mov	sp, r7
 8106d6a:	bd80      	pop	{r7, pc}

08106d6c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8106d6c:	b580      	push	{r7, lr}
 8106d6e:	b084      	sub	sp, #16
 8106d70:	af00      	add	r7, sp, #0
 8106d72:	60f8      	str	r0, [r7, #12]
 8106d74:	60b9      	str	r1, [r7, #8]
 8106d76:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8106d78:	687b      	ldr	r3, [r7, #4]
 8106d7a:	68ba      	ldr	r2, [r7, #8]
 8106d7c:	2100      	movs	r1, #0
 8106d7e:	68f8      	ldr	r0, [r7, #12]
 8106d80:	f000 fd9c 	bl	81078bc <USBD_LL_Transmit>

  return USBD_OK;
 8106d84:	2300      	movs	r3, #0
}
 8106d86:	4618      	mov	r0, r3
 8106d88:	3710      	adds	r7, #16
 8106d8a:	46bd      	mov	sp, r7
 8106d8c:	bd80      	pop	{r7, pc}

08106d8e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8106d8e:	b580      	push	{r7, lr}
 8106d90:	b084      	sub	sp, #16
 8106d92:	af00      	add	r7, sp, #0
 8106d94:	60f8      	str	r0, [r7, #12]
 8106d96:	60b9      	str	r1, [r7, #8]
 8106d98:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8106d9a:	68fb      	ldr	r3, [r7, #12]
 8106d9c:	2203      	movs	r2, #3
 8106d9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8106da2:	68fb      	ldr	r3, [r7, #12]
 8106da4:	687a      	ldr	r2, [r7, #4]
 8106da6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8106daa:	68fb      	ldr	r3, [r7, #12]
 8106dac:	687a      	ldr	r2, [r7, #4]
 8106dae:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8106db2:	687b      	ldr	r3, [r7, #4]
 8106db4:	68ba      	ldr	r2, [r7, #8]
 8106db6:	2100      	movs	r1, #0
 8106db8:	68f8      	ldr	r0, [r7, #12]
 8106dba:	f000 fdb7 	bl	810792c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8106dbe:	2300      	movs	r3, #0
}
 8106dc0:	4618      	mov	r0, r3
 8106dc2:	3710      	adds	r7, #16
 8106dc4:	46bd      	mov	sp, r7
 8106dc6:	bd80      	pop	{r7, pc}

08106dc8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8106dc8:	b580      	push	{r7, lr}
 8106dca:	b084      	sub	sp, #16
 8106dcc:	af00      	add	r7, sp, #0
 8106dce:	60f8      	str	r0, [r7, #12]
 8106dd0:	60b9      	str	r1, [r7, #8]
 8106dd2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8106dd4:	687b      	ldr	r3, [r7, #4]
 8106dd6:	68ba      	ldr	r2, [r7, #8]
 8106dd8:	2100      	movs	r1, #0
 8106dda:	68f8      	ldr	r0, [r7, #12]
 8106ddc:	f000 fda6 	bl	810792c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8106de0:	2300      	movs	r3, #0
}
 8106de2:	4618      	mov	r0, r3
 8106de4:	3710      	adds	r7, #16
 8106de6:	46bd      	mov	sp, r7
 8106de8:	bd80      	pop	{r7, pc}

08106dea <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8106dea:	b580      	push	{r7, lr}
 8106dec:	b082      	sub	sp, #8
 8106dee:	af00      	add	r7, sp, #0
 8106df0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8106df2:	687b      	ldr	r3, [r7, #4]
 8106df4:	2204      	movs	r2, #4
 8106df6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8106dfa:	2300      	movs	r3, #0
 8106dfc:	2200      	movs	r2, #0
 8106dfe:	2100      	movs	r1, #0
 8106e00:	6878      	ldr	r0, [r7, #4]
 8106e02:	f000 fd5b 	bl	81078bc <USBD_LL_Transmit>

  return USBD_OK;
 8106e06:	2300      	movs	r3, #0
}
 8106e08:	4618      	mov	r0, r3
 8106e0a:	3708      	adds	r7, #8
 8106e0c:	46bd      	mov	sp, r7
 8106e0e:	bd80      	pop	{r7, pc}

08106e10 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8106e10:	b580      	push	{r7, lr}
 8106e12:	b082      	sub	sp, #8
 8106e14:	af00      	add	r7, sp, #0
 8106e16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8106e18:	687b      	ldr	r3, [r7, #4]
 8106e1a:	2205      	movs	r2, #5
 8106e1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8106e20:	2300      	movs	r3, #0
 8106e22:	2200      	movs	r2, #0
 8106e24:	2100      	movs	r1, #0
 8106e26:	6878      	ldr	r0, [r7, #4]
 8106e28:	f000 fd80 	bl	810792c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8106e2c:	2300      	movs	r3, #0
}
 8106e2e:	4618      	mov	r0, r3
 8106e30:	3708      	adds	r7, #8
 8106e32:	46bd      	mov	sp, r7
 8106e34:	bd80      	pop	{r7, pc}
	...

08106e38 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8106e38:	b580      	push	{r7, lr}
 8106e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8106e3c:	2200      	movs	r2, #0
 8106e3e:	4912      	ldr	r1, [pc, #72]	; (8106e88 <MX_USB_DEVICE_Init+0x50>)
 8106e40:	4812      	ldr	r0, [pc, #72]	; (8106e8c <MX_USB_DEVICE_Init+0x54>)
 8106e42:	f7fe fe65 	bl	8105b10 <USBD_Init>
 8106e46:	4603      	mov	r3, r0
 8106e48:	2b00      	cmp	r3, #0
 8106e4a:	d001      	beq.n	8106e50 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8106e4c:	f7f9 fad9 	bl	8100402 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8106e50:	490f      	ldr	r1, [pc, #60]	; (8106e90 <MX_USB_DEVICE_Init+0x58>)
 8106e52:	480e      	ldr	r0, [pc, #56]	; (8106e8c <MX_USB_DEVICE_Init+0x54>)
 8106e54:	f7fe fe8c 	bl	8105b70 <USBD_RegisterClass>
 8106e58:	4603      	mov	r3, r0
 8106e5a:	2b00      	cmp	r3, #0
 8106e5c:	d001      	beq.n	8106e62 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8106e5e:	f7f9 fad0 	bl	8100402 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8106e62:	490c      	ldr	r1, [pc, #48]	; (8106e94 <MX_USB_DEVICE_Init+0x5c>)
 8106e64:	4809      	ldr	r0, [pc, #36]	; (8106e8c <MX_USB_DEVICE_Init+0x54>)
 8106e66:	f7fe fddd 	bl	8105a24 <USBD_CDC_RegisterInterface>
 8106e6a:	4603      	mov	r3, r0
 8106e6c:	2b00      	cmp	r3, #0
 8106e6e:	d001      	beq.n	8106e74 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8106e70:	f7f9 fac7 	bl	8100402 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8106e74:	4805      	ldr	r0, [pc, #20]	; (8106e8c <MX_USB_DEVICE_Init+0x54>)
 8106e76:	f7fe fea2 	bl	8105bbe <USBD_Start>
 8106e7a:	4603      	mov	r3, r0
 8106e7c:	2b00      	cmp	r3, #0
 8106e7e:	d001      	beq.n	8106e84 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8106e80:	f7f9 fabf 	bl	8100402 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8106e84:	bf00      	nop
 8106e86:	bd80      	pop	{r7, pc}
 8106e88:	20000150 	.word	0x20000150
 8106e8c:	200001d4 	.word	0x200001d4
 8106e90:	20000038 	.word	0x20000038
 8106e94:	2000013c 	.word	0x2000013c

08106e98 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8106e98:	b580      	push	{r7, lr}
 8106e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8106e9c:	2200      	movs	r2, #0
 8106e9e:	4905      	ldr	r1, [pc, #20]	; (8106eb4 <CDC_Init_FS+0x1c>)
 8106ea0:	4805      	ldr	r0, [pc, #20]	; (8106eb8 <CDC_Init_FS+0x20>)
 8106ea2:	f7fe fdd4 	bl	8105a4e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8106ea6:	4905      	ldr	r1, [pc, #20]	; (8106ebc <CDC_Init_FS+0x24>)
 8106ea8:	4803      	ldr	r0, [pc, #12]	; (8106eb8 <CDC_Init_FS+0x20>)
 8106eaa:	f7fe fdee 	bl	8105a8a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8106eae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8106eb0:	4618      	mov	r0, r3
 8106eb2:	bd80      	pop	{r7, pc}
 8106eb4:	20000ca4 	.word	0x20000ca4
 8106eb8:	200001d4 	.word	0x200001d4
 8106ebc:	200004a4 	.word	0x200004a4

08106ec0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8106ec0:	b480      	push	{r7}
 8106ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8106ec4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8106ec6:	4618      	mov	r0, r3
 8106ec8:	46bd      	mov	sp, r7
 8106eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ece:	4770      	bx	lr

08106ed0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8106ed0:	b480      	push	{r7}
 8106ed2:	b083      	sub	sp, #12
 8106ed4:	af00      	add	r7, sp, #0
 8106ed6:	4603      	mov	r3, r0
 8106ed8:	6039      	str	r1, [r7, #0]
 8106eda:	71fb      	strb	r3, [r7, #7]
 8106edc:	4613      	mov	r3, r2
 8106ede:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8106ee0:	79fb      	ldrb	r3, [r7, #7]
 8106ee2:	2b23      	cmp	r3, #35	; 0x23
 8106ee4:	d84a      	bhi.n	8106f7c <CDC_Control_FS+0xac>
 8106ee6:	a201      	add	r2, pc, #4	; (adr r2, 8106eec <CDC_Control_FS+0x1c>)
 8106ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106eec:	08106f7d 	.word	0x08106f7d
 8106ef0:	08106f7d 	.word	0x08106f7d
 8106ef4:	08106f7d 	.word	0x08106f7d
 8106ef8:	08106f7d 	.word	0x08106f7d
 8106efc:	08106f7d 	.word	0x08106f7d
 8106f00:	08106f7d 	.word	0x08106f7d
 8106f04:	08106f7d 	.word	0x08106f7d
 8106f08:	08106f7d 	.word	0x08106f7d
 8106f0c:	08106f7d 	.word	0x08106f7d
 8106f10:	08106f7d 	.word	0x08106f7d
 8106f14:	08106f7d 	.word	0x08106f7d
 8106f18:	08106f7d 	.word	0x08106f7d
 8106f1c:	08106f7d 	.word	0x08106f7d
 8106f20:	08106f7d 	.word	0x08106f7d
 8106f24:	08106f7d 	.word	0x08106f7d
 8106f28:	08106f7d 	.word	0x08106f7d
 8106f2c:	08106f7d 	.word	0x08106f7d
 8106f30:	08106f7d 	.word	0x08106f7d
 8106f34:	08106f7d 	.word	0x08106f7d
 8106f38:	08106f7d 	.word	0x08106f7d
 8106f3c:	08106f7d 	.word	0x08106f7d
 8106f40:	08106f7d 	.word	0x08106f7d
 8106f44:	08106f7d 	.word	0x08106f7d
 8106f48:	08106f7d 	.word	0x08106f7d
 8106f4c:	08106f7d 	.word	0x08106f7d
 8106f50:	08106f7d 	.word	0x08106f7d
 8106f54:	08106f7d 	.word	0x08106f7d
 8106f58:	08106f7d 	.word	0x08106f7d
 8106f5c:	08106f7d 	.word	0x08106f7d
 8106f60:	08106f7d 	.word	0x08106f7d
 8106f64:	08106f7d 	.word	0x08106f7d
 8106f68:	08106f7d 	.word	0x08106f7d
 8106f6c:	08106f7d 	.word	0x08106f7d
 8106f70:	08106f7d 	.word	0x08106f7d
 8106f74:	08106f7d 	.word	0x08106f7d
 8106f78:	08106f7d 	.word	0x08106f7d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8106f7c:	bf00      	nop
  }

  return (USBD_OK);
 8106f7e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8106f80:	4618      	mov	r0, r3
 8106f82:	370c      	adds	r7, #12
 8106f84:	46bd      	mov	sp, r7
 8106f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f8a:	4770      	bx	lr

08106f8c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8106f8c:	b580      	push	{r7, lr}
 8106f8e:	b082      	sub	sp, #8
 8106f90:	af00      	add	r7, sp, #0
 8106f92:	6078      	str	r0, [r7, #4]
 8106f94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8106f96:	6879      	ldr	r1, [r7, #4]
 8106f98:	480b      	ldr	r0, [pc, #44]	; (8106fc8 <CDC_Receive_FS+0x3c>)
 8106f9a:	f7fe fd76 	bl	8105a8a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8106f9e:	480a      	ldr	r0, [pc, #40]	; (8106fc8 <CDC_Receive_FS+0x3c>)
 8106fa0:	f7fe fd8c 	bl	8105abc <USBD_CDC_ReceivePacket>
  USB_CDC_RxHandler(UserRxBufferFS, *Len);
 8106fa4:	683b      	ldr	r3, [r7, #0]
 8106fa6:	681b      	ldr	r3, [r3, #0]
 8106fa8:	4619      	mov	r1, r3
 8106faa:	4808      	ldr	r0, [pc, #32]	; (8106fcc <CDC_Receive_FS+0x40>)
 8106fac:	f7f9 fa1a 	bl	81003e4 <USB_CDC_RxHandler>
  memset(UserRxBufferFS, '\0', *Len);
 8106fb0:	683b      	ldr	r3, [r7, #0]
 8106fb2:	681b      	ldr	r3, [r3, #0]
 8106fb4:	461a      	mov	r2, r3
 8106fb6:	2100      	movs	r1, #0
 8106fb8:	4804      	ldr	r0, [pc, #16]	; (8106fcc <CDC_Receive_FS+0x40>)
 8106fba:	f000 fd93 	bl	8107ae4 <memset>
  return (USBD_OK);
 8106fbe:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8106fc0:	4618      	mov	r0, r3
 8106fc2:	3708      	adds	r7, #8
 8106fc4:	46bd      	mov	sp, r7
 8106fc6:	bd80      	pop	{r7, pc}
 8106fc8:	200001d4 	.word	0x200001d4
 8106fcc:	200004a4 	.word	0x200004a4

08106fd0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8106fd0:	b480      	push	{r7}
 8106fd2:	b087      	sub	sp, #28
 8106fd4:	af00      	add	r7, sp, #0
 8106fd6:	60f8      	str	r0, [r7, #12]
 8106fd8:	60b9      	str	r1, [r7, #8]
 8106fda:	4613      	mov	r3, r2
 8106fdc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8106fde:	2300      	movs	r3, #0
 8106fe0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8106fe2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8106fe6:	4618      	mov	r0, r3
 8106fe8:	371c      	adds	r7, #28
 8106fea:	46bd      	mov	sp, r7
 8106fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ff0:	4770      	bx	lr
	...

08106ff4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8106ff4:	b480      	push	{r7}
 8106ff6:	b083      	sub	sp, #12
 8106ff8:	af00      	add	r7, sp, #0
 8106ffa:	4603      	mov	r3, r0
 8106ffc:	6039      	str	r1, [r7, #0]
 8106ffe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8107000:	683b      	ldr	r3, [r7, #0]
 8107002:	2212      	movs	r2, #18
 8107004:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8107006:	4b03      	ldr	r3, [pc, #12]	; (8107014 <USBD_FS_DeviceDescriptor+0x20>)
}
 8107008:	4618      	mov	r0, r3
 810700a:	370c      	adds	r7, #12
 810700c:	46bd      	mov	sp, r7
 810700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107012:	4770      	bx	lr
 8107014:	20000170 	.word	0x20000170

08107018 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8107018:	b480      	push	{r7}
 810701a:	b083      	sub	sp, #12
 810701c:	af00      	add	r7, sp, #0
 810701e:	4603      	mov	r3, r0
 8107020:	6039      	str	r1, [r7, #0]
 8107022:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8107024:	683b      	ldr	r3, [r7, #0]
 8107026:	2204      	movs	r2, #4
 8107028:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 810702a:	4b03      	ldr	r3, [pc, #12]	; (8107038 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 810702c:	4618      	mov	r0, r3
 810702e:	370c      	adds	r7, #12
 8107030:	46bd      	mov	sp, r7
 8107032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107036:	4770      	bx	lr
 8107038:	20000190 	.word	0x20000190

0810703c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 810703c:	b580      	push	{r7, lr}
 810703e:	b082      	sub	sp, #8
 8107040:	af00      	add	r7, sp, #0
 8107042:	4603      	mov	r3, r0
 8107044:	6039      	str	r1, [r7, #0]
 8107046:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8107048:	79fb      	ldrb	r3, [r7, #7]
 810704a:	2b00      	cmp	r3, #0
 810704c:	d105      	bne.n	810705a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 810704e:	683a      	ldr	r2, [r7, #0]
 8107050:	4907      	ldr	r1, [pc, #28]	; (8107070 <USBD_FS_ProductStrDescriptor+0x34>)
 8107052:	4808      	ldr	r0, [pc, #32]	; (8107074 <USBD_FS_ProductStrDescriptor+0x38>)
 8107054:	f7ff fe0f 	bl	8106c76 <USBD_GetString>
 8107058:	e004      	b.n	8107064 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 810705a:	683a      	ldr	r2, [r7, #0]
 810705c:	4904      	ldr	r1, [pc, #16]	; (8107070 <USBD_FS_ProductStrDescriptor+0x34>)
 810705e:	4805      	ldr	r0, [pc, #20]	; (8107074 <USBD_FS_ProductStrDescriptor+0x38>)
 8107060:	f7ff fe09 	bl	8106c76 <USBD_GetString>
  }
  return USBD_StrDesc;
 8107064:	4b02      	ldr	r3, [pc, #8]	; (8107070 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8107066:	4618      	mov	r0, r3
 8107068:	3708      	adds	r7, #8
 810706a:	46bd      	mov	sp, r7
 810706c:	bd80      	pop	{r7, pc}
 810706e:	bf00      	nop
 8107070:	200014a4 	.word	0x200014a4
 8107074:	08107b0c 	.word	0x08107b0c

08107078 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8107078:	b580      	push	{r7, lr}
 810707a:	b082      	sub	sp, #8
 810707c:	af00      	add	r7, sp, #0
 810707e:	4603      	mov	r3, r0
 8107080:	6039      	str	r1, [r7, #0]
 8107082:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8107084:	683a      	ldr	r2, [r7, #0]
 8107086:	4904      	ldr	r1, [pc, #16]	; (8107098 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8107088:	4804      	ldr	r0, [pc, #16]	; (810709c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 810708a:	f7ff fdf4 	bl	8106c76 <USBD_GetString>
  return USBD_StrDesc;
 810708e:	4b02      	ldr	r3, [pc, #8]	; (8107098 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8107090:	4618      	mov	r0, r3
 8107092:	3708      	adds	r7, #8
 8107094:	46bd      	mov	sp, r7
 8107096:	bd80      	pop	{r7, pc}
 8107098:	200014a4 	.word	0x200014a4
 810709c:	08107b24 	.word	0x08107b24

081070a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 81070a0:	b580      	push	{r7, lr}
 81070a2:	b082      	sub	sp, #8
 81070a4:	af00      	add	r7, sp, #0
 81070a6:	4603      	mov	r3, r0
 81070a8:	6039      	str	r1, [r7, #0]
 81070aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 81070ac:	683b      	ldr	r3, [r7, #0]
 81070ae:	221a      	movs	r2, #26
 81070b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 81070b2:	f000 f855 	bl	8107160 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 81070b6:	4b02      	ldr	r3, [pc, #8]	; (81070c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 81070b8:	4618      	mov	r0, r3
 81070ba:	3708      	adds	r7, #8
 81070bc:	46bd      	mov	sp, r7
 81070be:	bd80      	pop	{r7, pc}
 81070c0:	20000194 	.word	0x20000194

081070c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 81070c4:	b580      	push	{r7, lr}
 81070c6:	b082      	sub	sp, #8
 81070c8:	af00      	add	r7, sp, #0
 81070ca:	4603      	mov	r3, r0
 81070cc:	6039      	str	r1, [r7, #0]
 81070ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 81070d0:	79fb      	ldrb	r3, [r7, #7]
 81070d2:	2b00      	cmp	r3, #0
 81070d4:	d105      	bne.n	81070e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 81070d6:	683a      	ldr	r2, [r7, #0]
 81070d8:	4907      	ldr	r1, [pc, #28]	; (81070f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 81070da:	4808      	ldr	r0, [pc, #32]	; (81070fc <USBD_FS_ConfigStrDescriptor+0x38>)
 81070dc:	f7ff fdcb 	bl	8106c76 <USBD_GetString>
 81070e0:	e004      	b.n	81070ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 81070e2:	683a      	ldr	r2, [r7, #0]
 81070e4:	4904      	ldr	r1, [pc, #16]	; (81070f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 81070e6:	4805      	ldr	r0, [pc, #20]	; (81070fc <USBD_FS_ConfigStrDescriptor+0x38>)
 81070e8:	f7ff fdc5 	bl	8106c76 <USBD_GetString>
  }
  return USBD_StrDesc;
 81070ec:	4b02      	ldr	r3, [pc, #8]	; (81070f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 81070ee:	4618      	mov	r0, r3
 81070f0:	3708      	adds	r7, #8
 81070f2:	46bd      	mov	sp, r7
 81070f4:	bd80      	pop	{r7, pc}
 81070f6:	bf00      	nop
 81070f8:	200014a4 	.word	0x200014a4
 81070fc:	08107b2c 	.word	0x08107b2c

08107100 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8107100:	b580      	push	{r7, lr}
 8107102:	b082      	sub	sp, #8
 8107104:	af00      	add	r7, sp, #0
 8107106:	4603      	mov	r3, r0
 8107108:	6039      	str	r1, [r7, #0]
 810710a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 810710c:	79fb      	ldrb	r3, [r7, #7]
 810710e:	2b00      	cmp	r3, #0
 8107110:	d105      	bne.n	810711e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8107112:	683a      	ldr	r2, [r7, #0]
 8107114:	4907      	ldr	r1, [pc, #28]	; (8107134 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8107116:	4808      	ldr	r0, [pc, #32]	; (8107138 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8107118:	f7ff fdad 	bl	8106c76 <USBD_GetString>
 810711c:	e004      	b.n	8107128 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 810711e:	683a      	ldr	r2, [r7, #0]
 8107120:	4904      	ldr	r1, [pc, #16]	; (8107134 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8107122:	4805      	ldr	r0, [pc, #20]	; (8107138 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8107124:	f7ff fda7 	bl	8106c76 <USBD_GetString>
  }
  return USBD_StrDesc;
 8107128:	4b02      	ldr	r3, [pc, #8]	; (8107134 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 810712a:	4618      	mov	r0, r3
 810712c:	3708      	adds	r7, #8
 810712e:	46bd      	mov	sp, r7
 8107130:	bd80      	pop	{r7, pc}
 8107132:	bf00      	nop
 8107134:	200014a4 	.word	0x200014a4
 8107138:	08107b38 	.word	0x08107b38

0810713c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 810713c:	b480      	push	{r7}
 810713e:	b083      	sub	sp, #12
 8107140:	af00      	add	r7, sp, #0
 8107142:	4603      	mov	r3, r0
 8107144:	6039      	str	r1, [r7, #0]
 8107146:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8107148:	683b      	ldr	r3, [r7, #0]
 810714a:	220c      	movs	r2, #12
 810714c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 810714e:	4b03      	ldr	r3, [pc, #12]	; (810715c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8107150:	4618      	mov	r0, r3
 8107152:	370c      	adds	r7, #12
 8107154:	46bd      	mov	sp, r7
 8107156:	f85d 7b04 	ldr.w	r7, [sp], #4
 810715a:	4770      	bx	lr
 810715c:	20000184 	.word	0x20000184

08107160 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8107160:	b580      	push	{r7, lr}
 8107162:	b084      	sub	sp, #16
 8107164:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8107166:	4b0f      	ldr	r3, [pc, #60]	; (81071a4 <Get_SerialNum+0x44>)
 8107168:	681b      	ldr	r3, [r3, #0]
 810716a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 810716c:	4b0e      	ldr	r3, [pc, #56]	; (81071a8 <Get_SerialNum+0x48>)
 810716e:	681b      	ldr	r3, [r3, #0]
 8107170:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8107172:	4b0e      	ldr	r3, [pc, #56]	; (81071ac <Get_SerialNum+0x4c>)
 8107174:	681b      	ldr	r3, [r3, #0]
 8107176:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8107178:	68fa      	ldr	r2, [r7, #12]
 810717a:	687b      	ldr	r3, [r7, #4]
 810717c:	4413      	add	r3, r2
 810717e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8107180:	68fb      	ldr	r3, [r7, #12]
 8107182:	2b00      	cmp	r3, #0
 8107184:	d009      	beq.n	810719a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8107186:	2208      	movs	r2, #8
 8107188:	4909      	ldr	r1, [pc, #36]	; (81071b0 <Get_SerialNum+0x50>)
 810718a:	68f8      	ldr	r0, [r7, #12]
 810718c:	f000 f814 	bl	81071b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8107190:	2204      	movs	r2, #4
 8107192:	4908      	ldr	r1, [pc, #32]	; (81071b4 <Get_SerialNum+0x54>)
 8107194:	68b8      	ldr	r0, [r7, #8]
 8107196:	f000 f80f 	bl	81071b8 <IntToUnicode>
  }
}
 810719a:	bf00      	nop
 810719c:	3710      	adds	r7, #16
 810719e:	46bd      	mov	sp, r7
 81071a0:	bd80      	pop	{r7, pc}
 81071a2:	bf00      	nop
 81071a4:	1fff7590 	.word	0x1fff7590
 81071a8:	1fff7594 	.word	0x1fff7594
 81071ac:	1fff7598 	.word	0x1fff7598
 81071b0:	20000196 	.word	0x20000196
 81071b4:	200001a6 	.word	0x200001a6

081071b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 81071b8:	b480      	push	{r7}
 81071ba:	b087      	sub	sp, #28
 81071bc:	af00      	add	r7, sp, #0
 81071be:	60f8      	str	r0, [r7, #12]
 81071c0:	60b9      	str	r1, [r7, #8]
 81071c2:	4613      	mov	r3, r2
 81071c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 81071c6:	2300      	movs	r3, #0
 81071c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 81071ca:	2300      	movs	r3, #0
 81071cc:	75fb      	strb	r3, [r7, #23]
 81071ce:	e027      	b.n	8107220 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 81071d0:	68fb      	ldr	r3, [r7, #12]
 81071d2:	0f1b      	lsrs	r3, r3, #28
 81071d4:	2b09      	cmp	r3, #9
 81071d6:	d80b      	bhi.n	81071f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 81071d8:	68fb      	ldr	r3, [r7, #12]
 81071da:	0f1b      	lsrs	r3, r3, #28
 81071dc:	b2da      	uxtb	r2, r3
 81071de:	7dfb      	ldrb	r3, [r7, #23]
 81071e0:	005b      	lsls	r3, r3, #1
 81071e2:	4619      	mov	r1, r3
 81071e4:	68bb      	ldr	r3, [r7, #8]
 81071e6:	440b      	add	r3, r1
 81071e8:	3230      	adds	r2, #48	; 0x30
 81071ea:	b2d2      	uxtb	r2, r2
 81071ec:	701a      	strb	r2, [r3, #0]
 81071ee:	e00a      	b.n	8107206 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 81071f0:	68fb      	ldr	r3, [r7, #12]
 81071f2:	0f1b      	lsrs	r3, r3, #28
 81071f4:	b2da      	uxtb	r2, r3
 81071f6:	7dfb      	ldrb	r3, [r7, #23]
 81071f8:	005b      	lsls	r3, r3, #1
 81071fa:	4619      	mov	r1, r3
 81071fc:	68bb      	ldr	r3, [r7, #8]
 81071fe:	440b      	add	r3, r1
 8107200:	3237      	adds	r2, #55	; 0x37
 8107202:	b2d2      	uxtb	r2, r2
 8107204:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8107206:	68fb      	ldr	r3, [r7, #12]
 8107208:	011b      	lsls	r3, r3, #4
 810720a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 810720c:	7dfb      	ldrb	r3, [r7, #23]
 810720e:	005b      	lsls	r3, r3, #1
 8107210:	3301      	adds	r3, #1
 8107212:	68ba      	ldr	r2, [r7, #8]
 8107214:	4413      	add	r3, r2
 8107216:	2200      	movs	r2, #0
 8107218:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 810721a:	7dfb      	ldrb	r3, [r7, #23]
 810721c:	3301      	adds	r3, #1
 810721e:	75fb      	strb	r3, [r7, #23]
 8107220:	7dfa      	ldrb	r2, [r7, #23]
 8107222:	79fb      	ldrb	r3, [r7, #7]
 8107224:	429a      	cmp	r2, r3
 8107226:	d3d3      	bcc.n	81071d0 <IntToUnicode+0x18>
  }
}
 8107228:	bf00      	nop
 810722a:	bf00      	nop
 810722c:	371c      	adds	r7, #28
 810722e:	46bd      	mov	sp, r7
 8107230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107234:	4770      	bx	lr
	...

08107238 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8107238:	b580      	push	{r7, lr}
 810723a:	b0b2      	sub	sp, #200	; 0xc8
 810723c:	af00      	add	r7, sp, #0
 810723e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8107240:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8107244:	2200      	movs	r2, #0
 8107246:	601a      	str	r2, [r3, #0]
 8107248:	605a      	str	r2, [r3, #4]
 810724a:	609a      	str	r2, [r3, #8]
 810724c:	60da      	str	r2, [r3, #12]
 810724e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8107250:	f107 0318 	add.w	r3, r7, #24
 8107254:	229c      	movs	r2, #156	; 0x9c
 8107256:	2100      	movs	r1, #0
 8107258:	4618      	mov	r0, r3
 810725a:	f000 fc43 	bl	8107ae4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 810725e:	687b      	ldr	r3, [r7, #4]
 8107260:	681b      	ldr	r3, [r3, #0]
 8107262:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8107266:	d163      	bne.n	8107330 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8107268:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 810726c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 810726e:	2300      	movs	r3, #0
 8107270:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8107274:	f107 0318 	add.w	r3, r7, #24
 8107278:	4618      	mov	r0, r3
 810727a:	f7fc f88f 	bl	810339c <HAL_RCCEx_PeriphCLKConfig>
 810727e:	4603      	mov	r3, r0
 8107280:	2b00      	cmp	r3, #0
 8107282:	d001      	beq.n	8107288 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8107284:	f7f9 f8bd 	bl	8100402 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8107288:	4b2b      	ldr	r3, [pc, #172]	; (8107338 <HAL_PCD_MspInit+0x100>)
 810728a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810728c:	4a2a      	ldr	r2, [pc, #168]	; (8107338 <HAL_PCD_MspInit+0x100>)
 810728e:	f043 0301 	orr.w	r3, r3, #1
 8107292:	64d3      	str	r3, [r2, #76]	; 0x4c
 8107294:	4b28      	ldr	r3, [pc, #160]	; (8107338 <HAL_PCD_MspInit+0x100>)
 8107296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107298:	f003 0301 	and.w	r3, r3, #1
 810729c:	617b      	str	r3, [r7, #20]
 810729e:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 81072a0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 81072a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81072a8:	2302      	movs	r3, #2
 81072aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81072ae:	2300      	movs	r3, #0
 81072b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81072b4:	2303      	movs	r3, #3
 81072b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 81072ba:	230a      	movs	r3, #10
 81072bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81072c0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 81072c4:	4619      	mov	r1, r3
 81072c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 81072ca:	f7f9 fd95 	bl	8100df8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 81072ce:	4b1a      	ldr	r3, [pc, #104]	; (8107338 <HAL_PCD_MspInit+0x100>)
 81072d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81072d2:	4a19      	ldr	r2, [pc, #100]	; (8107338 <HAL_PCD_MspInit+0x100>)
 81072d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 81072d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 81072da:	4b17      	ldr	r3, [pc, #92]	; (8107338 <HAL_PCD_MspInit+0x100>)
 81072dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81072de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81072e2:	613b      	str	r3, [r7, #16]
 81072e4:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 81072e6:	4b14      	ldr	r3, [pc, #80]	; (8107338 <HAL_PCD_MspInit+0x100>)
 81072e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81072ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81072ee:	2b00      	cmp	r3, #0
 81072f0:	d114      	bne.n	810731c <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 81072f2:	4b11      	ldr	r3, [pc, #68]	; (8107338 <HAL_PCD_MspInit+0x100>)
 81072f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81072f6:	4a10      	ldr	r2, [pc, #64]	; (8107338 <HAL_PCD_MspInit+0x100>)
 81072f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81072fc:	6593      	str	r3, [r2, #88]	; 0x58
 81072fe:	4b0e      	ldr	r3, [pc, #56]	; (8107338 <HAL_PCD_MspInit+0x100>)
 8107300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8107306:	60fb      	str	r3, [r7, #12]
 8107308:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 810730a:	f7fb f98b 	bl	8102624 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 810730e:	4b0a      	ldr	r3, [pc, #40]	; (8107338 <HAL_PCD_MspInit+0x100>)
 8107310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107312:	4a09      	ldr	r2, [pc, #36]	; (8107338 <HAL_PCD_MspInit+0x100>)
 8107314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8107318:	6593      	str	r3, [r2, #88]	; 0x58
 810731a:	e001      	b.n	8107320 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 810731c:	f7fb f982 	bl	8102624 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8107320:	2200      	movs	r2, #0
 8107322:	2100      	movs	r1, #0
 8107324:	2043      	movs	r0, #67	; 0x43
 8107326:	f7f9 fa7c 	bl	8100822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 810732a:	2043      	movs	r0, #67	; 0x43
 810732c:	f7f9 fa95 	bl	810085a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8107330:	bf00      	nop
 8107332:	37c8      	adds	r7, #200	; 0xc8
 8107334:	46bd      	mov	sp, r7
 8107336:	bd80      	pop	{r7, pc}
 8107338:	40021000 	.word	0x40021000

0810733c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 810733c:	b580      	push	{r7, lr}
 810733e:	b082      	sub	sp, #8
 8107340:	af00      	add	r7, sp, #0
 8107342:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8107344:	687b      	ldr	r3, [r7, #4]
 8107346:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 810734a:	687b      	ldr	r3, [r7, #4]
 810734c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8107350:	4619      	mov	r1, r3
 8107352:	4610      	mov	r0, r2
 8107354:	f7fe fc7e 	bl	8105c54 <USBD_LL_SetupStage>
}
 8107358:	bf00      	nop
 810735a:	3708      	adds	r7, #8
 810735c:	46bd      	mov	sp, r7
 810735e:	bd80      	pop	{r7, pc}

08107360 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8107360:	b580      	push	{r7, lr}
 8107362:	b082      	sub	sp, #8
 8107364:	af00      	add	r7, sp, #0
 8107366:	6078      	str	r0, [r7, #4]
 8107368:	460b      	mov	r3, r1
 810736a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 810736c:	687b      	ldr	r3, [r7, #4]
 810736e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8107372:	78fa      	ldrb	r2, [r7, #3]
 8107374:	6879      	ldr	r1, [r7, #4]
 8107376:	4613      	mov	r3, r2
 8107378:	00db      	lsls	r3, r3, #3
 810737a:	4413      	add	r3, r2
 810737c:	009b      	lsls	r3, r3, #2
 810737e:	440b      	add	r3, r1
 8107380:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8107384:	681a      	ldr	r2, [r3, #0]
 8107386:	78fb      	ldrb	r3, [r7, #3]
 8107388:	4619      	mov	r1, r3
 810738a:	f7fe fcb8 	bl	8105cfe <USBD_LL_DataOutStage>
}
 810738e:	bf00      	nop
 8107390:	3708      	adds	r7, #8
 8107392:	46bd      	mov	sp, r7
 8107394:	bd80      	pop	{r7, pc}

08107396 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8107396:	b580      	push	{r7, lr}
 8107398:	b082      	sub	sp, #8
 810739a:	af00      	add	r7, sp, #0
 810739c:	6078      	str	r0, [r7, #4]
 810739e:	460b      	mov	r3, r1
 81073a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 81073a2:	687b      	ldr	r3, [r7, #4]
 81073a4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 81073a8:	78fa      	ldrb	r2, [r7, #3]
 81073aa:	6879      	ldr	r1, [r7, #4]
 81073ac:	4613      	mov	r3, r2
 81073ae:	00db      	lsls	r3, r3, #3
 81073b0:	4413      	add	r3, r2
 81073b2:	009b      	lsls	r3, r3, #2
 81073b4:	440b      	add	r3, r1
 81073b6:	334c      	adds	r3, #76	; 0x4c
 81073b8:	681a      	ldr	r2, [r3, #0]
 81073ba:	78fb      	ldrb	r3, [r7, #3]
 81073bc:	4619      	mov	r1, r3
 81073be:	f7fe fd01 	bl	8105dc4 <USBD_LL_DataInStage>
}
 81073c2:	bf00      	nop
 81073c4:	3708      	adds	r7, #8
 81073c6:	46bd      	mov	sp, r7
 81073c8:	bd80      	pop	{r7, pc}

081073ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 81073ca:	b580      	push	{r7, lr}
 81073cc:	b082      	sub	sp, #8
 81073ce:	af00      	add	r7, sp, #0
 81073d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 81073d2:	687b      	ldr	r3, [r7, #4]
 81073d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 81073d8:	4618      	mov	r0, r3
 81073da:	f7fe fe15 	bl	8106008 <USBD_LL_SOF>
}
 81073de:	bf00      	nop
 81073e0:	3708      	adds	r7, #8
 81073e2:	46bd      	mov	sp, r7
 81073e4:	bd80      	pop	{r7, pc}

081073e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 81073e6:	b580      	push	{r7, lr}
 81073e8:	b084      	sub	sp, #16
 81073ea:	af00      	add	r7, sp, #0
 81073ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 81073ee:	2301      	movs	r3, #1
 81073f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 81073f2:	687b      	ldr	r3, [r7, #4]
 81073f4:	68db      	ldr	r3, [r3, #12]
 81073f6:	2b02      	cmp	r3, #2
 81073f8:	d001      	beq.n	81073fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 81073fa:	f7f9 f802 	bl	8100402 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 81073fe:	687b      	ldr	r3, [r7, #4]
 8107400:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8107404:	7bfa      	ldrb	r2, [r7, #15]
 8107406:	4611      	mov	r1, r2
 8107408:	4618      	mov	r0, r3
 810740a:	f7fe fdbf 	bl	8105f8c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 810740e:	687b      	ldr	r3, [r7, #4]
 8107410:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8107414:	4618      	mov	r0, r3
 8107416:	f7fe fd6b 	bl	8105ef0 <USBD_LL_Reset>
}
 810741a:	bf00      	nop
 810741c:	3710      	adds	r7, #16
 810741e:	46bd      	mov	sp, r7
 8107420:	bd80      	pop	{r7, pc}
	...

08107424 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8107424:	b580      	push	{r7, lr}
 8107426:	b082      	sub	sp, #8
 8107428:	af00      	add	r7, sp, #0
 810742a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 810742c:	687b      	ldr	r3, [r7, #4]
 810742e:	681b      	ldr	r3, [r3, #0]
 8107430:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8107434:	681b      	ldr	r3, [r3, #0]
 8107436:	687a      	ldr	r2, [r7, #4]
 8107438:	6812      	ldr	r2, [r2, #0]
 810743a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 810743e:	f043 0301 	orr.w	r3, r3, #1
 8107442:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8107444:	687b      	ldr	r3, [r7, #4]
 8107446:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 810744a:	4618      	mov	r0, r3
 810744c:	f7fe fdae 	bl	8105fac <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8107450:	687b      	ldr	r3, [r7, #4]
 8107452:	6a1b      	ldr	r3, [r3, #32]
 8107454:	2b00      	cmp	r3, #0
 8107456:	d005      	beq.n	8107464 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8107458:	4b04      	ldr	r3, [pc, #16]	; (810746c <HAL_PCD_SuspendCallback+0x48>)
 810745a:	691b      	ldr	r3, [r3, #16]
 810745c:	4a03      	ldr	r2, [pc, #12]	; (810746c <HAL_PCD_SuspendCallback+0x48>)
 810745e:	f043 0306 	orr.w	r3, r3, #6
 8107462:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8107464:	bf00      	nop
 8107466:	3708      	adds	r7, #8
 8107468:	46bd      	mov	sp, r7
 810746a:	bd80      	pop	{r7, pc}
 810746c:	e000ed00 	.word	0xe000ed00

08107470 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8107470:	b580      	push	{r7, lr}
 8107472:	b082      	sub	sp, #8
 8107474:	af00      	add	r7, sp, #0
 8107476:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8107478:	687b      	ldr	r3, [r7, #4]
 810747a:	681b      	ldr	r3, [r3, #0]
 810747c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8107480:	681b      	ldr	r3, [r3, #0]
 8107482:	687a      	ldr	r2, [r7, #4]
 8107484:	6812      	ldr	r2, [r2, #0]
 8107486:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 810748a:	f023 0301 	bic.w	r3, r3, #1
 810748e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8107490:	687b      	ldr	r3, [r7, #4]
 8107492:	6a1b      	ldr	r3, [r3, #32]
 8107494:	2b00      	cmp	r3, #0
 8107496:	d007      	beq.n	81074a8 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8107498:	4b08      	ldr	r3, [pc, #32]	; (81074bc <HAL_PCD_ResumeCallback+0x4c>)
 810749a:	691b      	ldr	r3, [r3, #16]
 810749c:	4a07      	ldr	r2, [pc, #28]	; (81074bc <HAL_PCD_ResumeCallback+0x4c>)
 810749e:	f023 0306 	bic.w	r3, r3, #6
 81074a2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 81074a4:	f000 faf4 	bl	8107a90 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 81074a8:	687b      	ldr	r3, [r7, #4]
 81074aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 81074ae:	4618      	mov	r0, r3
 81074b0:	f7fe fd92 	bl	8105fd8 <USBD_LL_Resume>
}
 81074b4:	bf00      	nop
 81074b6:	3708      	adds	r7, #8
 81074b8:	46bd      	mov	sp, r7
 81074ba:	bd80      	pop	{r7, pc}
 81074bc:	e000ed00 	.word	0xe000ed00

081074c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 81074c0:	b580      	push	{r7, lr}
 81074c2:	b082      	sub	sp, #8
 81074c4:	af00      	add	r7, sp, #0
 81074c6:	6078      	str	r0, [r7, #4]
 81074c8:	460b      	mov	r3, r1
 81074ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 81074cc:	687b      	ldr	r3, [r7, #4]
 81074ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 81074d2:	78fa      	ldrb	r2, [r7, #3]
 81074d4:	4611      	mov	r1, r2
 81074d6:	4618      	mov	r0, r3
 81074d8:	f7fe fdde 	bl	8106098 <USBD_LL_IsoOUTIncomplete>
}
 81074dc:	bf00      	nop
 81074de:	3708      	adds	r7, #8
 81074e0:	46bd      	mov	sp, r7
 81074e2:	bd80      	pop	{r7, pc}

081074e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 81074e4:	b580      	push	{r7, lr}
 81074e6:	b082      	sub	sp, #8
 81074e8:	af00      	add	r7, sp, #0
 81074ea:	6078      	str	r0, [r7, #4]
 81074ec:	460b      	mov	r3, r1
 81074ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 81074f0:	687b      	ldr	r3, [r7, #4]
 81074f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 81074f6:	78fa      	ldrb	r2, [r7, #3]
 81074f8:	4611      	mov	r1, r2
 81074fa:	4618      	mov	r0, r3
 81074fc:	f7fe fda6 	bl	810604c <USBD_LL_IsoINIncomplete>
}
 8107500:	bf00      	nop
 8107502:	3708      	adds	r7, #8
 8107504:	46bd      	mov	sp, r7
 8107506:	bd80      	pop	{r7, pc}

08107508 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8107508:	b580      	push	{r7, lr}
 810750a:	b082      	sub	sp, #8
 810750c:	af00      	add	r7, sp, #0
 810750e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8107510:	687b      	ldr	r3, [r7, #4]
 8107512:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8107516:	4618      	mov	r0, r3
 8107518:	f7fe fde4 	bl	81060e4 <USBD_LL_DevConnected>
}
 810751c:	bf00      	nop
 810751e:	3708      	adds	r7, #8
 8107520:	46bd      	mov	sp, r7
 8107522:	bd80      	pop	{r7, pc}

08107524 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8107524:	b580      	push	{r7, lr}
 8107526:	b082      	sub	sp, #8
 8107528:	af00      	add	r7, sp, #0
 810752a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 810752c:	687b      	ldr	r3, [r7, #4]
 810752e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8107532:	4618      	mov	r0, r3
 8107534:	f7fe fde1 	bl	81060fa <USBD_LL_DevDisconnected>
}
 8107538:	bf00      	nop
 810753a:	3708      	adds	r7, #8
 810753c:	46bd      	mov	sp, r7
 810753e:	bd80      	pop	{r7, pc}

08107540 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8107540:	b580      	push	{r7, lr}
 8107542:	b082      	sub	sp, #8
 8107544:	af00      	add	r7, sp, #0
 8107546:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8107548:	687b      	ldr	r3, [r7, #4]
 810754a:	781b      	ldrb	r3, [r3, #0]
 810754c:	2b00      	cmp	r3, #0
 810754e:	d139      	bne.n	81075c4 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8107550:	4a1f      	ldr	r2, [pc, #124]	; (81075d0 <USBD_LL_Init+0x90>)
 8107552:	687b      	ldr	r3, [r7, #4]
 8107554:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8107558:	687b      	ldr	r3, [r7, #4]
 810755a:	4a1d      	ldr	r2, [pc, #116]	; (81075d0 <USBD_LL_Init+0x90>)
 810755c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8107560:	4b1b      	ldr	r3, [pc, #108]	; (81075d0 <USBD_LL_Init+0x90>)
 8107562:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8107566:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8107568:	4b19      	ldr	r3, [pc, #100]	; (81075d0 <USBD_LL_Init+0x90>)
 810756a:	2206      	movs	r2, #6
 810756c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 810756e:	4b18      	ldr	r3, [pc, #96]	; (81075d0 <USBD_LL_Init+0x90>)
 8107570:	2202      	movs	r2, #2
 8107572:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8107574:	4b16      	ldr	r3, [pc, #88]	; (81075d0 <USBD_LL_Init+0x90>)
 8107576:	2200      	movs	r2, #0
 8107578:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 810757a:	4b15      	ldr	r3, [pc, #84]	; (81075d0 <USBD_LL_Init+0x90>)
 810757c:	2200      	movs	r2, #0
 810757e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8107580:	4b13      	ldr	r3, [pc, #76]	; (81075d0 <USBD_LL_Init+0x90>)
 8107582:	2200      	movs	r2, #0
 8107584:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8107586:	4b12      	ldr	r3, [pc, #72]	; (81075d0 <USBD_LL_Init+0x90>)
 8107588:	2200      	movs	r2, #0
 810758a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 810758c:	4b10      	ldr	r3, [pc, #64]	; (81075d0 <USBD_LL_Init+0x90>)
 810758e:	2200      	movs	r2, #0
 8107590:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8107592:	4b0f      	ldr	r3, [pc, #60]	; (81075d0 <USBD_LL_Init+0x90>)
 8107594:	2200      	movs	r2, #0
 8107596:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8107598:	480d      	ldr	r0, [pc, #52]	; (81075d0 <USBD_LL_Init+0x90>)
 810759a:	f7f9 fdbf 	bl	810111c <HAL_PCD_Init>
 810759e:	4603      	mov	r3, r0
 81075a0:	2b00      	cmp	r3, #0
 81075a2:	d001      	beq.n	81075a8 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 81075a4:	f7f8 ff2d 	bl	8100402 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 81075a8:	2180      	movs	r1, #128	; 0x80
 81075aa:	4809      	ldr	r0, [pc, #36]	; (81075d0 <USBD_LL_Init+0x90>)
 81075ac:	f7fa ff41 	bl	8102432 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 81075b0:	2240      	movs	r2, #64	; 0x40
 81075b2:	2100      	movs	r1, #0
 81075b4:	4806      	ldr	r0, [pc, #24]	; (81075d0 <USBD_LL_Init+0x90>)
 81075b6:	f7fa fef5 	bl	81023a4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 81075ba:	2280      	movs	r2, #128	; 0x80
 81075bc:	2101      	movs	r1, #1
 81075be:	4804      	ldr	r0, [pc, #16]	; (81075d0 <USBD_LL_Init+0x90>)
 81075c0:	f7fa fef0 	bl	81023a4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 81075c4:	2300      	movs	r3, #0
}
 81075c6:	4618      	mov	r0, r3
 81075c8:	3708      	adds	r7, #8
 81075ca:	46bd      	mov	sp, r7
 81075cc:	bd80      	pop	{r7, pc}
 81075ce:	bf00      	nop
 81075d0:	200016a4 	.word	0x200016a4

081075d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 81075d4:	b580      	push	{r7, lr}
 81075d6:	b084      	sub	sp, #16
 81075d8:	af00      	add	r7, sp, #0
 81075da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 81075dc:	2300      	movs	r3, #0
 81075de:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 81075e0:	2300      	movs	r3, #0
 81075e2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 81075e4:	687b      	ldr	r3, [r7, #4]
 81075e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 81075ea:	4618      	mov	r0, r3
 81075ec:	f7f9 feba 	bl	8101364 <HAL_PCD_Start>
 81075f0:	4603      	mov	r3, r0
 81075f2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 81075f4:	7bbb      	ldrb	r3, [r7, #14]
 81075f6:	2b03      	cmp	r3, #3
 81075f8:	d816      	bhi.n	8107628 <USBD_LL_Start+0x54>
 81075fa:	a201      	add	r2, pc, #4	; (adr r2, 8107600 <USBD_LL_Start+0x2c>)
 81075fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107600:	08107611 	.word	0x08107611
 8107604:	08107617 	.word	0x08107617
 8107608:	0810761d 	.word	0x0810761d
 810760c:	08107623 	.word	0x08107623
    case HAL_OK :
      usb_status = USBD_OK;
 8107610:	2300      	movs	r3, #0
 8107612:	73fb      	strb	r3, [r7, #15]
    break;
 8107614:	e00b      	b.n	810762e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8107616:	2303      	movs	r3, #3
 8107618:	73fb      	strb	r3, [r7, #15]
    break;
 810761a:	e008      	b.n	810762e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 810761c:	2301      	movs	r3, #1
 810761e:	73fb      	strb	r3, [r7, #15]
    break;
 8107620:	e005      	b.n	810762e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8107622:	2303      	movs	r3, #3
 8107624:	73fb      	strb	r3, [r7, #15]
    break;
 8107626:	e002      	b.n	810762e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8107628:	2303      	movs	r3, #3
 810762a:	73fb      	strb	r3, [r7, #15]
    break;
 810762c:	bf00      	nop
  }
  return usb_status;
 810762e:	7bfb      	ldrb	r3, [r7, #15]
}
 8107630:	4618      	mov	r0, r3
 8107632:	3710      	adds	r7, #16
 8107634:	46bd      	mov	sp, r7
 8107636:	bd80      	pop	{r7, pc}

08107638 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8107638:	b580      	push	{r7, lr}
 810763a:	b084      	sub	sp, #16
 810763c:	af00      	add	r7, sp, #0
 810763e:	6078      	str	r0, [r7, #4]
 8107640:	4608      	mov	r0, r1
 8107642:	4611      	mov	r1, r2
 8107644:	461a      	mov	r2, r3
 8107646:	4603      	mov	r3, r0
 8107648:	70fb      	strb	r3, [r7, #3]
 810764a:	460b      	mov	r3, r1
 810764c:	70bb      	strb	r3, [r7, #2]
 810764e:	4613      	mov	r3, r2
 8107650:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8107652:	2300      	movs	r3, #0
 8107654:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8107656:	2300      	movs	r3, #0
 8107658:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 810765a:	687b      	ldr	r3, [r7, #4]
 810765c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8107660:	78bb      	ldrb	r3, [r7, #2]
 8107662:	883a      	ldrh	r2, [r7, #0]
 8107664:	78f9      	ldrb	r1, [r7, #3]
 8107666:	f7fa fb64 	bl	8101d32 <HAL_PCD_EP_Open>
 810766a:	4603      	mov	r3, r0
 810766c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 810766e:	7bbb      	ldrb	r3, [r7, #14]
 8107670:	2b03      	cmp	r3, #3
 8107672:	d817      	bhi.n	81076a4 <USBD_LL_OpenEP+0x6c>
 8107674:	a201      	add	r2, pc, #4	; (adr r2, 810767c <USBD_LL_OpenEP+0x44>)
 8107676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810767a:	bf00      	nop
 810767c:	0810768d 	.word	0x0810768d
 8107680:	08107693 	.word	0x08107693
 8107684:	08107699 	.word	0x08107699
 8107688:	0810769f 	.word	0x0810769f
    case HAL_OK :
      usb_status = USBD_OK;
 810768c:	2300      	movs	r3, #0
 810768e:	73fb      	strb	r3, [r7, #15]
    break;
 8107690:	e00b      	b.n	81076aa <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8107692:	2303      	movs	r3, #3
 8107694:	73fb      	strb	r3, [r7, #15]
    break;
 8107696:	e008      	b.n	81076aa <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8107698:	2301      	movs	r3, #1
 810769a:	73fb      	strb	r3, [r7, #15]
    break;
 810769c:	e005      	b.n	81076aa <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 810769e:	2303      	movs	r3, #3
 81076a0:	73fb      	strb	r3, [r7, #15]
    break;
 81076a2:	e002      	b.n	81076aa <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 81076a4:	2303      	movs	r3, #3
 81076a6:	73fb      	strb	r3, [r7, #15]
    break;
 81076a8:	bf00      	nop
  }
  return usb_status;
 81076aa:	7bfb      	ldrb	r3, [r7, #15]
}
 81076ac:	4618      	mov	r0, r3
 81076ae:	3710      	adds	r7, #16
 81076b0:	46bd      	mov	sp, r7
 81076b2:	bd80      	pop	{r7, pc}

081076b4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 81076b4:	b580      	push	{r7, lr}
 81076b6:	b084      	sub	sp, #16
 81076b8:	af00      	add	r7, sp, #0
 81076ba:	6078      	str	r0, [r7, #4]
 81076bc:	460b      	mov	r3, r1
 81076be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 81076c0:	2300      	movs	r3, #0
 81076c2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 81076c4:	2300      	movs	r3, #0
 81076c6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 81076c8:	687b      	ldr	r3, [r7, #4]
 81076ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 81076ce:	78fa      	ldrb	r2, [r7, #3]
 81076d0:	4611      	mov	r1, r2
 81076d2:	4618      	mov	r0, r3
 81076d4:	f7fa fb95 	bl	8101e02 <HAL_PCD_EP_Close>
 81076d8:	4603      	mov	r3, r0
 81076da:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 81076dc:	7bbb      	ldrb	r3, [r7, #14]
 81076de:	2b03      	cmp	r3, #3
 81076e0:	d816      	bhi.n	8107710 <USBD_LL_CloseEP+0x5c>
 81076e2:	a201      	add	r2, pc, #4	; (adr r2, 81076e8 <USBD_LL_CloseEP+0x34>)
 81076e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81076e8:	081076f9 	.word	0x081076f9
 81076ec:	081076ff 	.word	0x081076ff
 81076f0:	08107705 	.word	0x08107705
 81076f4:	0810770b 	.word	0x0810770b
    case HAL_OK :
      usb_status = USBD_OK;
 81076f8:	2300      	movs	r3, #0
 81076fa:	73fb      	strb	r3, [r7, #15]
    break;
 81076fc:	e00b      	b.n	8107716 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 81076fe:	2303      	movs	r3, #3
 8107700:	73fb      	strb	r3, [r7, #15]
    break;
 8107702:	e008      	b.n	8107716 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8107704:	2301      	movs	r3, #1
 8107706:	73fb      	strb	r3, [r7, #15]
    break;
 8107708:	e005      	b.n	8107716 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 810770a:	2303      	movs	r3, #3
 810770c:	73fb      	strb	r3, [r7, #15]
    break;
 810770e:	e002      	b.n	8107716 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8107710:	2303      	movs	r3, #3
 8107712:	73fb      	strb	r3, [r7, #15]
    break;
 8107714:	bf00      	nop
  }
  return usb_status;
 8107716:	7bfb      	ldrb	r3, [r7, #15]
}
 8107718:	4618      	mov	r0, r3
 810771a:	3710      	adds	r7, #16
 810771c:	46bd      	mov	sp, r7
 810771e:	bd80      	pop	{r7, pc}

08107720 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8107720:	b580      	push	{r7, lr}
 8107722:	b084      	sub	sp, #16
 8107724:	af00      	add	r7, sp, #0
 8107726:	6078      	str	r0, [r7, #4]
 8107728:	460b      	mov	r3, r1
 810772a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 810772c:	2300      	movs	r3, #0
 810772e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8107730:	2300      	movs	r3, #0
 8107732:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8107734:	687b      	ldr	r3, [r7, #4]
 8107736:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 810773a:	78fa      	ldrb	r2, [r7, #3]
 810773c:	4611      	mov	r1, r2
 810773e:	4618      	mov	r0, r3
 8107740:	f7fa fc3c 	bl	8101fbc <HAL_PCD_EP_SetStall>
 8107744:	4603      	mov	r3, r0
 8107746:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8107748:	7bbb      	ldrb	r3, [r7, #14]
 810774a:	2b03      	cmp	r3, #3
 810774c:	d816      	bhi.n	810777c <USBD_LL_StallEP+0x5c>
 810774e:	a201      	add	r2, pc, #4	; (adr r2, 8107754 <USBD_LL_StallEP+0x34>)
 8107750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107754:	08107765 	.word	0x08107765
 8107758:	0810776b 	.word	0x0810776b
 810775c:	08107771 	.word	0x08107771
 8107760:	08107777 	.word	0x08107777
    case HAL_OK :
      usb_status = USBD_OK;
 8107764:	2300      	movs	r3, #0
 8107766:	73fb      	strb	r3, [r7, #15]
    break;
 8107768:	e00b      	b.n	8107782 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 810776a:	2303      	movs	r3, #3
 810776c:	73fb      	strb	r3, [r7, #15]
    break;
 810776e:	e008      	b.n	8107782 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8107770:	2301      	movs	r3, #1
 8107772:	73fb      	strb	r3, [r7, #15]
    break;
 8107774:	e005      	b.n	8107782 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8107776:	2303      	movs	r3, #3
 8107778:	73fb      	strb	r3, [r7, #15]
    break;
 810777a:	e002      	b.n	8107782 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 810777c:	2303      	movs	r3, #3
 810777e:	73fb      	strb	r3, [r7, #15]
    break;
 8107780:	bf00      	nop
  }
  return usb_status;
 8107782:	7bfb      	ldrb	r3, [r7, #15]
}
 8107784:	4618      	mov	r0, r3
 8107786:	3710      	adds	r7, #16
 8107788:	46bd      	mov	sp, r7
 810778a:	bd80      	pop	{r7, pc}

0810778c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 810778c:	b580      	push	{r7, lr}
 810778e:	b084      	sub	sp, #16
 8107790:	af00      	add	r7, sp, #0
 8107792:	6078      	str	r0, [r7, #4]
 8107794:	460b      	mov	r3, r1
 8107796:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8107798:	2300      	movs	r3, #0
 810779a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 810779c:	2300      	movs	r3, #0
 810779e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 81077a0:	687b      	ldr	r3, [r7, #4]
 81077a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 81077a6:	78fa      	ldrb	r2, [r7, #3]
 81077a8:	4611      	mov	r1, r2
 81077aa:	4618      	mov	r0, r3
 81077ac:	f7fa fc68 	bl	8102080 <HAL_PCD_EP_ClrStall>
 81077b0:	4603      	mov	r3, r0
 81077b2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 81077b4:	7bbb      	ldrb	r3, [r7, #14]
 81077b6:	2b03      	cmp	r3, #3
 81077b8:	d816      	bhi.n	81077e8 <USBD_LL_ClearStallEP+0x5c>
 81077ba:	a201      	add	r2, pc, #4	; (adr r2, 81077c0 <USBD_LL_ClearStallEP+0x34>)
 81077bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81077c0:	081077d1 	.word	0x081077d1
 81077c4:	081077d7 	.word	0x081077d7
 81077c8:	081077dd 	.word	0x081077dd
 81077cc:	081077e3 	.word	0x081077e3
    case HAL_OK :
      usb_status = USBD_OK;
 81077d0:	2300      	movs	r3, #0
 81077d2:	73fb      	strb	r3, [r7, #15]
    break;
 81077d4:	e00b      	b.n	81077ee <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 81077d6:	2303      	movs	r3, #3
 81077d8:	73fb      	strb	r3, [r7, #15]
    break;
 81077da:	e008      	b.n	81077ee <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 81077dc:	2301      	movs	r3, #1
 81077de:	73fb      	strb	r3, [r7, #15]
    break;
 81077e0:	e005      	b.n	81077ee <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 81077e2:	2303      	movs	r3, #3
 81077e4:	73fb      	strb	r3, [r7, #15]
    break;
 81077e6:	e002      	b.n	81077ee <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 81077e8:	2303      	movs	r3, #3
 81077ea:	73fb      	strb	r3, [r7, #15]
    break;
 81077ec:	bf00      	nop
  }
  return usb_status;
 81077ee:	7bfb      	ldrb	r3, [r7, #15]
}
 81077f0:	4618      	mov	r0, r3
 81077f2:	3710      	adds	r7, #16
 81077f4:	46bd      	mov	sp, r7
 81077f6:	bd80      	pop	{r7, pc}

081077f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 81077f8:	b480      	push	{r7}
 81077fa:	b085      	sub	sp, #20
 81077fc:	af00      	add	r7, sp, #0
 81077fe:	6078      	str	r0, [r7, #4]
 8107800:	460b      	mov	r3, r1
 8107802:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8107804:	687b      	ldr	r3, [r7, #4]
 8107806:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 810780a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 810780c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8107810:	2b00      	cmp	r3, #0
 8107812:	da0b      	bge.n	810782c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8107814:	78fb      	ldrb	r3, [r7, #3]
 8107816:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 810781a:	68f9      	ldr	r1, [r7, #12]
 810781c:	4613      	mov	r3, r2
 810781e:	00db      	lsls	r3, r3, #3
 8107820:	4413      	add	r3, r2
 8107822:	009b      	lsls	r3, r3, #2
 8107824:	440b      	add	r3, r1
 8107826:	333e      	adds	r3, #62	; 0x3e
 8107828:	781b      	ldrb	r3, [r3, #0]
 810782a:	e00b      	b.n	8107844 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 810782c:	78fb      	ldrb	r3, [r7, #3]
 810782e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8107832:	68f9      	ldr	r1, [r7, #12]
 8107834:	4613      	mov	r3, r2
 8107836:	00db      	lsls	r3, r3, #3
 8107838:	4413      	add	r3, r2
 810783a:	009b      	lsls	r3, r3, #2
 810783c:	440b      	add	r3, r1
 810783e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8107842:	781b      	ldrb	r3, [r3, #0]
  }
}
 8107844:	4618      	mov	r0, r3
 8107846:	3714      	adds	r7, #20
 8107848:	46bd      	mov	sp, r7
 810784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810784e:	4770      	bx	lr

08107850 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8107850:	b580      	push	{r7, lr}
 8107852:	b084      	sub	sp, #16
 8107854:	af00      	add	r7, sp, #0
 8107856:	6078      	str	r0, [r7, #4]
 8107858:	460b      	mov	r3, r1
 810785a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 810785c:	2300      	movs	r3, #0
 810785e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8107860:	2300      	movs	r3, #0
 8107862:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8107864:	687b      	ldr	r3, [r7, #4]
 8107866:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 810786a:	78fa      	ldrb	r2, [r7, #3]
 810786c:	4611      	mov	r1, r2
 810786e:	4618      	mov	r0, r3
 8107870:	f7fa fa3a 	bl	8101ce8 <HAL_PCD_SetAddress>
 8107874:	4603      	mov	r3, r0
 8107876:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8107878:	7bbb      	ldrb	r3, [r7, #14]
 810787a:	2b03      	cmp	r3, #3
 810787c:	d816      	bhi.n	81078ac <USBD_LL_SetUSBAddress+0x5c>
 810787e:	a201      	add	r2, pc, #4	; (adr r2, 8107884 <USBD_LL_SetUSBAddress+0x34>)
 8107880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107884:	08107895 	.word	0x08107895
 8107888:	0810789b 	.word	0x0810789b
 810788c:	081078a1 	.word	0x081078a1
 8107890:	081078a7 	.word	0x081078a7
    case HAL_OK :
      usb_status = USBD_OK;
 8107894:	2300      	movs	r3, #0
 8107896:	73fb      	strb	r3, [r7, #15]
    break;
 8107898:	e00b      	b.n	81078b2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 810789a:	2303      	movs	r3, #3
 810789c:	73fb      	strb	r3, [r7, #15]
    break;
 810789e:	e008      	b.n	81078b2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 81078a0:	2301      	movs	r3, #1
 81078a2:	73fb      	strb	r3, [r7, #15]
    break;
 81078a4:	e005      	b.n	81078b2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 81078a6:	2303      	movs	r3, #3
 81078a8:	73fb      	strb	r3, [r7, #15]
    break;
 81078aa:	e002      	b.n	81078b2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 81078ac:	2303      	movs	r3, #3
 81078ae:	73fb      	strb	r3, [r7, #15]
    break;
 81078b0:	bf00      	nop
  }
  return usb_status;
 81078b2:	7bfb      	ldrb	r3, [r7, #15]
}
 81078b4:	4618      	mov	r0, r3
 81078b6:	3710      	adds	r7, #16
 81078b8:	46bd      	mov	sp, r7
 81078ba:	bd80      	pop	{r7, pc}

081078bc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 81078bc:	b580      	push	{r7, lr}
 81078be:	b086      	sub	sp, #24
 81078c0:	af00      	add	r7, sp, #0
 81078c2:	60f8      	str	r0, [r7, #12]
 81078c4:	607a      	str	r2, [r7, #4]
 81078c6:	603b      	str	r3, [r7, #0]
 81078c8:	460b      	mov	r3, r1
 81078ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 81078cc:	2300      	movs	r3, #0
 81078ce:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 81078d0:	2300      	movs	r3, #0
 81078d2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 81078d4:	68fb      	ldr	r3, [r7, #12]
 81078d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 81078da:	7af9      	ldrb	r1, [r7, #11]
 81078dc:	683b      	ldr	r3, [r7, #0]
 81078de:	687a      	ldr	r2, [r7, #4]
 81078e0:	f7fa fb2f 	bl	8101f42 <HAL_PCD_EP_Transmit>
 81078e4:	4603      	mov	r3, r0
 81078e6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 81078e8:	7dbb      	ldrb	r3, [r7, #22]
 81078ea:	2b03      	cmp	r3, #3
 81078ec:	d816      	bhi.n	810791c <USBD_LL_Transmit+0x60>
 81078ee:	a201      	add	r2, pc, #4	; (adr r2, 81078f4 <USBD_LL_Transmit+0x38>)
 81078f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81078f4:	08107905 	.word	0x08107905
 81078f8:	0810790b 	.word	0x0810790b
 81078fc:	08107911 	.word	0x08107911
 8107900:	08107917 	.word	0x08107917
    case HAL_OK :
      usb_status = USBD_OK;
 8107904:	2300      	movs	r3, #0
 8107906:	75fb      	strb	r3, [r7, #23]
    break;
 8107908:	e00b      	b.n	8107922 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 810790a:	2303      	movs	r3, #3
 810790c:	75fb      	strb	r3, [r7, #23]
    break;
 810790e:	e008      	b.n	8107922 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8107910:	2301      	movs	r3, #1
 8107912:	75fb      	strb	r3, [r7, #23]
    break;
 8107914:	e005      	b.n	8107922 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8107916:	2303      	movs	r3, #3
 8107918:	75fb      	strb	r3, [r7, #23]
    break;
 810791a:	e002      	b.n	8107922 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 810791c:	2303      	movs	r3, #3
 810791e:	75fb      	strb	r3, [r7, #23]
    break;
 8107920:	bf00      	nop
  }
  return usb_status;
 8107922:	7dfb      	ldrb	r3, [r7, #23]
}
 8107924:	4618      	mov	r0, r3
 8107926:	3718      	adds	r7, #24
 8107928:	46bd      	mov	sp, r7
 810792a:	bd80      	pop	{r7, pc}

0810792c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 810792c:	b580      	push	{r7, lr}
 810792e:	b086      	sub	sp, #24
 8107930:	af00      	add	r7, sp, #0
 8107932:	60f8      	str	r0, [r7, #12]
 8107934:	607a      	str	r2, [r7, #4]
 8107936:	603b      	str	r3, [r7, #0]
 8107938:	460b      	mov	r3, r1
 810793a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 810793c:	2300      	movs	r3, #0
 810793e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8107940:	2300      	movs	r3, #0
 8107942:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8107944:	68fb      	ldr	r3, [r7, #12]
 8107946:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 810794a:	7af9      	ldrb	r1, [r7, #11]
 810794c:	683b      	ldr	r3, [r7, #0]
 810794e:	687a      	ldr	r2, [r7, #4]
 8107950:	f7fa faa1 	bl	8101e96 <HAL_PCD_EP_Receive>
 8107954:	4603      	mov	r3, r0
 8107956:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8107958:	7dbb      	ldrb	r3, [r7, #22]
 810795a:	2b03      	cmp	r3, #3
 810795c:	d816      	bhi.n	810798c <USBD_LL_PrepareReceive+0x60>
 810795e:	a201      	add	r2, pc, #4	; (adr r2, 8107964 <USBD_LL_PrepareReceive+0x38>)
 8107960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107964:	08107975 	.word	0x08107975
 8107968:	0810797b 	.word	0x0810797b
 810796c:	08107981 	.word	0x08107981
 8107970:	08107987 	.word	0x08107987
    case HAL_OK :
      usb_status = USBD_OK;
 8107974:	2300      	movs	r3, #0
 8107976:	75fb      	strb	r3, [r7, #23]
    break;
 8107978:	e00b      	b.n	8107992 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 810797a:	2303      	movs	r3, #3
 810797c:	75fb      	strb	r3, [r7, #23]
    break;
 810797e:	e008      	b.n	8107992 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8107980:	2301      	movs	r3, #1
 8107982:	75fb      	strb	r3, [r7, #23]
    break;
 8107984:	e005      	b.n	8107992 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8107986:	2303      	movs	r3, #3
 8107988:	75fb      	strb	r3, [r7, #23]
    break;
 810798a:	e002      	b.n	8107992 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 810798c:	2303      	movs	r3, #3
 810798e:	75fb      	strb	r3, [r7, #23]
    break;
 8107990:	bf00      	nop
  }
  return usb_status;
 8107992:	7dfb      	ldrb	r3, [r7, #23]
}
 8107994:	4618      	mov	r0, r3
 8107996:	3718      	adds	r7, #24
 8107998:	46bd      	mov	sp, r7
 810799a:	bd80      	pop	{r7, pc}

0810799c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 810799c:	b580      	push	{r7, lr}
 810799e:	b082      	sub	sp, #8
 81079a0:	af00      	add	r7, sp, #0
 81079a2:	6078      	str	r0, [r7, #4]
 81079a4:	460b      	mov	r3, r1
 81079a6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 81079a8:	687b      	ldr	r3, [r7, #4]
 81079aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 81079ae:	78fa      	ldrb	r2, [r7, #3]
 81079b0:	4611      	mov	r1, r2
 81079b2:	4618      	mov	r0, r3
 81079b4:	f7fa faad 	bl	8101f12 <HAL_PCD_EP_GetRxCount>
 81079b8:	4603      	mov	r3, r0
}
 81079ba:	4618      	mov	r0, r3
 81079bc:	3708      	adds	r7, #8
 81079be:	46bd      	mov	sp, r7
 81079c0:	bd80      	pop	{r7, pc}
	...

081079c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 81079c4:	b580      	push	{r7, lr}
 81079c6:	b082      	sub	sp, #8
 81079c8:	af00      	add	r7, sp, #0
 81079ca:	6078      	str	r0, [r7, #4]
 81079cc:	460b      	mov	r3, r1
 81079ce:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 81079d0:	78fb      	ldrb	r3, [r7, #3]
 81079d2:	2b00      	cmp	r3, #0
 81079d4:	d002      	beq.n	81079dc <HAL_PCDEx_LPM_Callback+0x18>
 81079d6:	2b01      	cmp	r3, #1
 81079d8:	d01f      	beq.n	8107a1a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 81079da:	e03b      	b.n	8107a54 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 81079dc:	687b      	ldr	r3, [r7, #4]
 81079de:	6a1b      	ldr	r3, [r3, #32]
 81079e0:	2b00      	cmp	r3, #0
 81079e2:	d007      	beq.n	81079f4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 81079e4:	f000 f854 	bl	8107a90 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 81079e8:	4b1c      	ldr	r3, [pc, #112]	; (8107a5c <HAL_PCDEx_LPM_Callback+0x98>)
 81079ea:	691b      	ldr	r3, [r3, #16]
 81079ec:	4a1b      	ldr	r2, [pc, #108]	; (8107a5c <HAL_PCDEx_LPM_Callback+0x98>)
 81079ee:	f023 0306 	bic.w	r3, r3, #6
 81079f2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 81079f4:	687b      	ldr	r3, [r7, #4]
 81079f6:	681b      	ldr	r3, [r3, #0]
 81079f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 81079fc:	681b      	ldr	r3, [r3, #0]
 81079fe:	687a      	ldr	r2, [r7, #4]
 8107a00:	6812      	ldr	r2, [r2, #0]
 8107a02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8107a06:	f023 0301 	bic.w	r3, r3, #1
 8107a0a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8107a0c:	687b      	ldr	r3, [r7, #4]
 8107a0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8107a12:	4618      	mov	r0, r3
 8107a14:	f7fe fae0 	bl	8105fd8 <USBD_LL_Resume>
    break;
 8107a18:	e01c      	b.n	8107a54 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8107a1a:	687b      	ldr	r3, [r7, #4]
 8107a1c:	681b      	ldr	r3, [r3, #0]
 8107a1e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8107a22:	681b      	ldr	r3, [r3, #0]
 8107a24:	687a      	ldr	r2, [r7, #4]
 8107a26:	6812      	ldr	r2, [r2, #0]
 8107a28:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8107a2c:	f043 0301 	orr.w	r3, r3, #1
 8107a30:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8107a32:	687b      	ldr	r3, [r7, #4]
 8107a34:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8107a38:	4618      	mov	r0, r3
 8107a3a:	f7fe fab7 	bl	8105fac <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8107a3e:	687b      	ldr	r3, [r7, #4]
 8107a40:	6a1b      	ldr	r3, [r3, #32]
 8107a42:	2b00      	cmp	r3, #0
 8107a44:	d005      	beq.n	8107a52 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8107a46:	4b05      	ldr	r3, [pc, #20]	; (8107a5c <HAL_PCDEx_LPM_Callback+0x98>)
 8107a48:	691b      	ldr	r3, [r3, #16]
 8107a4a:	4a04      	ldr	r2, [pc, #16]	; (8107a5c <HAL_PCDEx_LPM_Callback+0x98>)
 8107a4c:	f043 0306 	orr.w	r3, r3, #6
 8107a50:	6113      	str	r3, [r2, #16]
    break;
 8107a52:	bf00      	nop
}
 8107a54:	bf00      	nop
 8107a56:	3708      	adds	r7, #8
 8107a58:	46bd      	mov	sp, r7
 8107a5a:	bd80      	pop	{r7, pc}
 8107a5c:	e000ed00 	.word	0xe000ed00

08107a60 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8107a60:	b480      	push	{r7}
 8107a62:	b083      	sub	sp, #12
 8107a64:	af00      	add	r7, sp, #0
 8107a66:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8107a68:	4b03      	ldr	r3, [pc, #12]	; (8107a78 <USBD_static_malloc+0x18>)
}
 8107a6a:	4618      	mov	r0, r3
 8107a6c:	370c      	adds	r7, #12
 8107a6e:	46bd      	mov	sp, r7
 8107a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a74:	4770      	bx	lr
 8107a76:	bf00      	nop
 8107a78:	20001bb0 	.word	0x20001bb0

08107a7c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8107a7c:	b480      	push	{r7}
 8107a7e:	b083      	sub	sp, #12
 8107a80:	af00      	add	r7, sp, #0
 8107a82:	6078      	str	r0, [r7, #4]

}
 8107a84:	bf00      	nop
 8107a86:	370c      	adds	r7, #12
 8107a88:	46bd      	mov	sp, r7
 8107a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a8e:	4770      	bx	lr

08107a90 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8107a90:	b580      	push	{r7, lr}
 8107a92:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8107a94:	f7f8 fc30 	bl	81002f8 <SystemClock_Config>
}
 8107a98:	bf00      	nop
 8107a9a:	bd80      	pop	{r7, pc}

08107a9c <__libc_init_array>:
 8107a9c:	b570      	push	{r4, r5, r6, lr}
 8107a9e:	4d0d      	ldr	r5, [pc, #52]	; (8107ad4 <__libc_init_array+0x38>)
 8107aa0:	4c0d      	ldr	r4, [pc, #52]	; (8107ad8 <__libc_init_array+0x3c>)
 8107aa2:	1b64      	subs	r4, r4, r5
 8107aa4:	10a4      	asrs	r4, r4, #2
 8107aa6:	2600      	movs	r6, #0
 8107aa8:	42a6      	cmp	r6, r4
 8107aaa:	d109      	bne.n	8107ac0 <__libc_init_array+0x24>
 8107aac:	4d0b      	ldr	r5, [pc, #44]	; (8107adc <__libc_init_array+0x40>)
 8107aae:	4c0c      	ldr	r4, [pc, #48]	; (8107ae0 <__libc_init_array+0x44>)
 8107ab0:	f000 f820 	bl	8107af4 <_init>
 8107ab4:	1b64      	subs	r4, r4, r5
 8107ab6:	10a4      	asrs	r4, r4, #2
 8107ab8:	2600      	movs	r6, #0
 8107aba:	42a6      	cmp	r6, r4
 8107abc:	d105      	bne.n	8107aca <__libc_init_array+0x2e>
 8107abe:	bd70      	pop	{r4, r5, r6, pc}
 8107ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8107ac4:	4798      	blx	r3
 8107ac6:	3601      	adds	r6, #1
 8107ac8:	e7ee      	b.n	8107aa8 <__libc_init_array+0xc>
 8107aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8107ace:	4798      	blx	r3
 8107ad0:	3601      	adds	r6, #1
 8107ad2:	e7f2      	b.n	8107aba <__libc_init_array+0x1e>
 8107ad4:	08107b88 	.word	0x08107b88
 8107ad8:	08107b88 	.word	0x08107b88
 8107adc:	08107b88 	.word	0x08107b88
 8107ae0:	08107b8c 	.word	0x08107b8c

08107ae4 <memset>:
 8107ae4:	4402      	add	r2, r0
 8107ae6:	4603      	mov	r3, r0
 8107ae8:	4293      	cmp	r3, r2
 8107aea:	d100      	bne.n	8107aee <memset+0xa>
 8107aec:	4770      	bx	lr
 8107aee:	f803 1b01 	strb.w	r1, [r3], #1
 8107af2:	e7f9      	b.n	8107ae8 <memset+0x4>

08107af4 <_init>:
 8107af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107af6:	bf00      	nop
 8107af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8107afa:	bc08      	pop	{r3}
 8107afc:	469e      	mov	lr, r3
 8107afe:	4770      	bx	lr

08107b00 <_fini>:
 8107b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107b02:	bf00      	nop
 8107b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8107b06:	bc08      	pop	{r3}
 8107b08:	469e      	mov	lr, r3
 8107b0a:	4770      	bx	lr
